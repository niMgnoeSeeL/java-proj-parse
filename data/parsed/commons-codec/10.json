{
    "ab7f0792599a625afdefad6796f154cd37db80f9": {
        "authored_data": "2022 Jul 17 12:43",
        "commit.message": "Use forEach()",
        "commit.author.name": "Gary Gregory",
        "pcid": "e3bfc84d6fe9838c0f2e8a474736e730074ef444",
        "changes": {
            "src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java": {
                "old": {
                    "('org.apache.commons.codec.language#DaitchMokotoffSoundex', None)": [
                        232,
                        233,
                        234,
                        235
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language#DaitchMokotoffSoundex', None)": [
                        232
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java": {
                "old": {
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', None)": [
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152
                    ],
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', 'applyFinalRules(PhonemeBuilder,Map)')": [
                        317,
                        323,
                        324,
                        325,
                        326,
                        331,
                        332,
                        347,
                        355,
                        356
                    ],
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', 'encode(String,Languages)')": [
                        417,
                        419,
                        420,
                        421,
                        444,
                        445,
                        446
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', None)": [
                        143
                    ],
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', 'applyFinalRules(PhonemeBuilder,Map)')": [
                        308,
                        314,
                        315,
                        316,
                        321,
                        336,
                        344,
                        345
                    ],
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', 'encode(String,Languages)')": [
                        406,
                        408,
                        409,
                        432
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/bm/Rule.java": {
                "old": {
                    "('org.apache.commons.codec.language.bm#Rule', None)": [
                        217,
                        223
                    ],
                    "('org.apache.commons.codec.language.bm#Rule', 'getInstance(NameType,RuleType,Languages)')": [
                        291,
                        292,
                        293
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language.bm#Rule', None)": [
                        217,
                        223
                    ],
                    "('org.apache.commons.codec.language.bm#Rule', 'getInstance(NameType,RuleType,Languages)')": [
                        291
                    ]
                }
            }
        }
    },
    "e3bfc84d6fe9838c0f2e8a474736e730074ef444": {
        "authored_data": "2022 Jul 17 12:27",
        "commit.message": "Use forEach()",
        "commit.author.name": "Gary Gregory",
        "pcid": "ff724b8e032e8d0d43dea121d02c0e80a70c4656",
        "changes": {
            "src/main/java/org/apache/commons/codec/language/bm/Lang.java": {
                "old": {
                    "('org.apache.commons.codec.language.bm#Lang', 'guessLanguages(String)')": [
                        208,
                        216
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language.bm#Lang', 'guessLanguages(String)')": [
                        208,
                        216
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/bm/Languages.java": {
                "old": {
                    "('org.apache.commons.codec.language.bm#Languages', None)": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.codec.language.bm#Languages', None)": [
                        129
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java": {
                "old": {
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', None)": [
                        92,
                        93,
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', None)": [
                        92
                    ]
                }
            }
        }
    },
    "2ca75a4e13ac9cca6087ed8c1f486b8c43e52fd2": {
        "authored_data": "2022 Jul 15 20:15",
        "commit.message": "(chore) Fix minor typos\n\nFix various minor typos in :\n\n- project documentations,\n- javadoc and comments,\n- method attribute names,\n- test method names.\n",
        "commit.author.name": "Marc Wrobel",
        "pcid": "11f9498f44e2b6f4f463f2af67a2b81cb86151c7",
        "changes": {
            "src/main/java/org/apache/commons/codec/EncoderException.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/Base16.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base16', None)": [
                        248
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base16', None)": [
                        248
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/Base32.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base32', None)": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        164,
                        211,
                        229,
                        251,
                        276,
                        302,
                        583
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base32', None)": [
                        205,
                        223,
                        245,
                        270,
                        296,
                        577
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/Base32InputStream.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base32InputStream', None)": [
                        90,
                        91,
                        111,
                        112
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base32InputStream', None)": [
                        90,
                        91,
                        111,
                        112
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/Base32OutputStream.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base32OutputStream', None)": [
                        88,
                        94,
                        95,
                        100,
                        102,
                        109,
                        115,
                        116,
                        123,
                        125
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base32OutputStream', None)": [
                        88,
                        94,
                        95,
                        100,
                        102,
                        109,
                        115,
                        116,
                        123,
                        125
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/Base64.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base64', None)": [
                        343,
                        488,
                        511,
                        538,
                        569,
                        797
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base64', None)": [
                        343,
                        488,
                        511,
                        538,
                        569,
                        797
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/Base64InputStream.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base64InputStream', None)": [
                        94,
                        95,
                        115,
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base64InputStream', None)": [
                        94,
                        95,
                        115,
                        116
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/Base64OutputStream.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base64OutputStream', None)": [
                        98,
                        99,
                        119,
                        120
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base64OutputStream', None)": [
                        98,
                        99,
                        119,
                        120
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/BaseNCodec.java": {
                "old": {
                    "('org.apache.commons.codec.binary#BaseNCodec', None)": [
                        63,
                        69,
                        310,
                        613
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#BaseNCodec', None)": [
                        63,
                        69,
                        310,
                        613
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java": {
                "old": {
                    "('org.apache.commons.codec.binary#CharSequenceUtils', None)": [
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#CharSequenceUtils', None)": [
                        41
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/Blake3.java": {
                "old": {
                    "(None, None)": [
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/DigestUtils.java": {
                "old": {
                    "(None, None)": [
                        46
                    ],
                    "('org.apache.commons.codec.digest#DigestUtils', None)": [
                        261
                    ]
                },
                "new": {
                    "(None, None)": [
                        46
                    ],
                    "('org.apache.commons.codec.digest#DigestUtils', None)": [
                        261
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/Md5Crypt.java": {
                "old": {
                    "('org.apache.commons.codec.digest#Md5Crypt', 'md5Crypt(byte,String,String,Random)')": [
                        356,
                        357
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#Md5Crypt', 'md5Crypt(byte,String,String,Random)')": [
                        356,
                        357
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/MurmurHash2.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.codec.digest#MurmurHash2', None)": [
                        278
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.codec.digest#MurmurHash2', None)": [
                        278
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/MurmurHash3.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.codec.digest#MurmurHash3', None)": [
                        315,
                        388,
                        783,
                        810,
                        828,
                        1010,
                        1188
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.codec.digest#MurmurHash3', None)": [
                        315,
                        388,
                        783,
                        810,
                        828,
                        1010,
                        1188
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/PureJavaCrc32.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/PureJavaCrc32C.java": {
                "old": {
                    "(None, None)": [
                        18
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/Sha2Crypt.java": {
                "old": {
                    "('org.apache.commons.codec.digest#Sha2Crypt', 'sha2Crypt(byte,String,String,int,String)')": [
                        268,
                        343,
                        397
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#Sha2Crypt', 'sha2Crypt(byte,String,String,int,String)')": [
                        268,
                        343,
                        397
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/digest/XXHash32.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/DaitchMokotoffSoundex.java": {
                "old": {
                    "('org.apache.commons.codec.language#DaitchMokotoffSoundex', None)": [
                        356
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language#DaitchMokotoffSoundex', None)": [
                        356
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java": {
                "old": {
                    "('org.apache.commons.codec.language#DoubleMetaphone', None)": [
                        894
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language#DoubleMetaphone', None)": [
                        894
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/MatchRatingApproachEncoder.java": {
                "old": {
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', 'getMinRating(int)')": [
                        182,
                        184
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', 'isEncodeEquals(String,String)')": [
                        238
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', None)": [
                        268
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', 'leftToRightThenRightToLeftProcessing(String,String)')": [
                        330
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', 'getMinRating(int)')": [
                        182,
                        184
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', 'isEncodeEquals(String,String)')": [
                        238
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', None)": [
                        268
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoder', 'leftToRightThenRightToLeftProcessing(String,String)')": [
                        330
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/Nysiis.java": {
                "old": {
                    "(None, None)": [
                        52
                    ]
                },
                "new": {
                    "(None, None)": [
                        52
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/RefinedSoundex.java": {
                "old": {
                    "('org.apache.commons.codec.language#RefinedSoundex', None)": [
                        117
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language#RefinedSoundex', None)": [
                        117
                    ]
                }
            },
            "src/main/java/org/apache/commons/codec/language/bm/BeiderMorseEncoder.java": {
                "old": {
                    "(None, None)": [
                        56
                    ]
                },
                "new": {
                    "(None, None)": [
                        56
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/Base16InputStreamTest.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testBase16InputStreamByChunk')": [
                        95
                    ],
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testBase16InputStreamByteByByte')": [
                        127
                    ],
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testByChunk(byte,byte,boolean)')": [
                        175
                    ],
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testByteByByte(byte,byte,boolean)')": [
                        238
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testBase16InputStreamByChunk')": [
                        95
                    ],
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testBase16InputStreamByteByByte')": [
                        127
                    ],
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testByChunk(byte,byte,boolean)')": [
                        175
                    ],
                    "('org.apache.commons.codec.binary#Base16InputStreamTest', 'testByteByByte(byte,byte,boolean)')": [
                        238
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/Base16OutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testBase16OutputStreamByChunk')": [
                        66
                    ],
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testBase16OutputStreamByteByByte')": [
                        93
                    ],
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testByChunk(byte,byte,boolean)')": [
                        140
                    ],
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testByteByByte(byte,byte,boolean)')": [
                        198,
                        208
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testBase16OutputStreamByChunk')": [
                        66
                    ],
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testBase16OutputStreamByteByByte')": [
                        93
                    ],
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testByChunk(byte,byte,boolean)')": [
                        140
                    ],
                    "('org.apache.commons.codec.binary#Base16OutputStreamTest', 'testByteByByte(byte,byte,boolean)')": [
                        198,
                        208
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testBase32InputStreamByChunk')": [
                        217
                    ],
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testBase32InputStreamByteByByte')": [
                        251
                    ],
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        291,
                        299
                    ],
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        347,
                        360
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testBase32InputStreamByChunk')": [
                        217
                    ],
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testBase32InputStreamByteByByte')": [
                        251
                    ],
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        291,
                        299
                    ],
                    "('org.apache.commons.codec.binary#Base32InputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        347,
                        360
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/Base32OutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testBase32OutputStreamByChunk')": [
                        114
                    ],
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testBase32OutputStreamByteByByte')": [
                        149
                    ],
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        187,
                        195
                    ],
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        239,
                        249,
                        260
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testBase32OutputStreamByChunk')": [
                        114
                    ],
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testBase32OutputStreamByteByByte')": [
                        149
                    ],
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        187,
                        195
                    ],
                    "('org.apache.commons.codec.binary#Base32OutputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        239,
                        249,
                        260
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testBase64InputStreamByChunk')": [
                        225
                    ],
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testBase64InputStreamByteByByte')": [
                        264
                    ],
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        305,
                        313
                    ],
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        360,
                        373
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testBase64InputStreamByChunk')": [
                        225
                    ],
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testBase64InputStreamByteByByte')": [
                        264
                    ],
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        305,
                        313
                    ],
                    "('org.apache.commons.codec.binary#Base64InputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        360,
                        373
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/Base64OutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testBase64OutputStreamByChunk')": [
                        119
                    ],
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testBase64OutputStreamByteByByte')": [
                        158
                    ],
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        196,
                        204
                    ],
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        248,
                        258,
                        269
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testBase64OutputStreamByChunk')": [
                        119
                    ],
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testBase64OutputStreamByteByByte')": [
                        158
                    ],
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testByChunk(byte,byte,int,byte)')": [
                        196,
                        204
                    ],
                    "('org.apache.commons.codec.binary#Base64OutputStreamTest', 'testByteByByte(byte,byte,int,byte)')": [
                        248,
                        258,
                        269
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/Base64Test.java": {
                "old": {
                    "('org.apache.commons.codec.binary#Base64Test', 'testUrlSafe')": [
                        1119
                    ],
                    "('org.apache.commons.codec.binary#Base64Test', 'testCodec265')": [
                        1402
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#Base64Test', 'testUrlSafe')": [
                        1119
                    ],
                    "('org.apache.commons.codec.binary#Base64Test', 'testCodec265')": [
                        1402
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/binary/BaseNCodecTest.java": {
                "old": {
                    "('org.apache.commons.codec.binary#BaseNCodecTest', 'assertEnsureBufferSizeExpandsToMaxBufferSize(boolean)')": [
                        289
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.binary#BaseNCodecTest', 'assertEnsureBufferSizeExpandsToMaxBufferSize(boolean)')": [
                        289
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/CryptTest.java": {
                "old": {
                    "('org.apache.commons.codec.digest#CryptTest', None)": [
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#CryptTest', None)": [
                        49
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/HmacAlgorithmsTest.java": {
                "old": {
                    "('org.apache.commons.codec.digest#HmacAlgorithmsTest', 'testMacByteArary(HmacAlgorithms,byte,String)')": [
                        204
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#HmacAlgorithmsTest', 'testMacByteArray(HmacAlgorithms,byte,String)')": [
                        204
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/HmacUtilsTest.java": {
                "old": {
                    "('org.apache.commons.codec.digest#HmacUtilsTest', 'testHmacSha1UpdateWithInpustream')": [
                        95
                    ],
                    "('org.apache.commons.codec.digest#HmacUtilsTest', 'testSecretKeySpecAllowsEmtyKeys')": [
                        167
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#HmacUtilsTest', 'testHmacSha1UpdateWithInputStream')": [
                        95
                    ],
                    "('org.apache.commons.codec.digest#HmacUtilsTest', 'testSecretKeySpecAllowsEmptyKeys')": [
                        167
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/MurmurHash3Test.java": {
                "old": {
                    "('org.apache.commons.codec.digest#MurmurHash3Test', None)": [
                        43,
                        72
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#MurmurHash3Test', None)": [
                        43,
                        72
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/PureJavaCrc32Test.java": {
                "old": {
                    "('org.apache.commons.codec.digest#PureJavaCrc32Test', None)": [
                        149,
                        154
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#PureJavaCrc32Test', None)": [
                        149,
                        154
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/Sha256CryptTest.java": {
                "old": {
                    "('org.apache.commons.codec.digest#Sha256CryptTest', 'testSha256LargetThanBlocksize')": [
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#Sha256CryptTest', 'testSha256LargestThanBlocksize')": [
                        86
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/UnixCryptTest.java": {
                "old": {
                    "('org.apache.commons.codec.digest#UnixCryptTest', None)": [
                        68,
                        76
                    ],
                    "('org.apache.commons.codec.digest#UnixCryptTest', 'testUnicCryptInvalidSalt')": [
                        79
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#UnixCryptTest', None)": [
                        68,
                        76
                    ],
                    "('org.apache.commons.codec.digest#UnixCryptTest', 'testUnixCryptInvalidSalt')": [
                        79
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/digest/XXHash32Test.java": {
                "old": {
                    "('org.apache.commons.codec.digest#XXHash32Test', 'copy(InputStream,OutputStream,int)')": [
                        104,
                        105
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.digest#XXHash32Test', 'copy(InputStream,OutputStream,int)')": [
                        104,
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/language/MatchRatingApproachEncoderTest.java": {
                "old": {
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant')": [
                        48
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant')": [
                        53
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4')": [
                        134
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0')": [
                        139
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testcleanName_SuccessfullyClean')": [
                        199
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisVowel_SingleVowel_ReturnsTrue')": [
                        204
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse')": [
                        209
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse')": [
                        214
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse')": [
                        219
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse')": [
                        224
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse')": [
                        229
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse')": [
                        234
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse')": [
                        239
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse')": [
                        244
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testAccentRemoval_UpperAndLower_SuccessfullyRemovedAndCaseInvariant')": [
                        48
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualCharactersInvariant')": [
                        53
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testLeftToRightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4')": [
                        134
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testLeftToRightThenRightToLeft_EINSTEIN_MICHAELA_Returns0')": [
                        139
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testCleanName_SuccessfullyClean')": [
                        199
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsVowel_SingleVowel_ReturnsTrue')": [
                        204
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse')": [
                        209
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse')": [
                        214
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse')": [
                        219
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse')": [
                        224
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse')": [
                        229
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse')": [
                        234
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse')": [
                        239
                    ],
                    "('org.apache.commons.codec.language#MatchRatingApproachEncoderTest', 'testIsEncodeEqualsSecondNameJust1Letter_ReturnsFalse')": [
                        244
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/language/MetaphoneTest.java": {
                "old": {
                    "('org.apache.commons.codec.language#MetaphoneTest', 'testExceedLength')": [
                        458
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language#MetaphoneTest', 'testExceedLength')": [
                        458
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/language/bm/LanguageGuessingTest.java": {
                "old": {
                    "('org.apache.commons.codec.language.bm#LanguageGuessingTest', 'data')": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.language.bm#LanguageGuessingTest', 'data')": [
                        39
                    ]
                }
            },
            "src/test/java/org/apache/commons/codec/net/RFC1522CodecTest.java": {
                "old": {
                    "('org.apache.commons.codec.net#RFC1522CodecTest', 'testNullInput')": [
                        54,
                        55,
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.codec.net#RFC1522CodecTest', 'testNullInput')": [
                        54,
                        55,
                        56
                    ]
                }
            }
        }
    },
    "8871e9c72eefda5b047d8e9fcc3654e5fab3c198": {
        "authored_data": "2022 Jul 09 12:03",
        "commit.message": "Use a string joiner.",
        "commit.author.name": "Gary Gregory",
        "pcid": "c1078a02dbe270d1dbffda8bd01dffa678cfd60a",
        "changes": {
            "src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', 'join(Iterable,String)')": [
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.codec.language.bm#PhoneticEngine', 'join(List,String)')": [
                        255,
                        256
                    ]
                }
            }
        }
    }
}