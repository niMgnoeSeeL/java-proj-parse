{
    "75b2bab091c122ed456e8041b444746b0892abe4": {
        "authored_data": "2010 Sep 10 21:28",
        "commit.message": "prevent DfpField radix digit to be smaller than 4 as it created problem when converting to double\n(we need to be able to create a Dfp with value 2^52 which needs 16 decimal digits or 4 radix digits)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@995988 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "c2095faf7353825e19942e0c583904825604241d",
        "changes": {
            "src/main/java/org/apache/commons/math/dfp/DfpField.java": {
                "old": {
                    "('org.apache.commons.math.dfp#DfpField', None)": [
                        190
                    ]
                },
                "new": {
                    "('org.apache.commons.math.dfp#DfpField', None)": [
                        190
                    ]
                }
            }
        }
    },
    "c2095faf7353825e19942e0c583904825604241d": {
        "authored_data": "2010 Sep 08 12:51",
        "commit.message": "Removed strict equality comparison.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@995035 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "fc2ba061798a825bdff19cfbe77f698d7c81aa08",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        222,
                        227
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        223,
                        224,
                        229,
                        230,
                        231
                    ]
                }
            }
        }
    },
    "fc2ba061798a825bdff19cfbe77f698d7c81aa08": {
        "authored_data": "2010 Sep 08 12:04",
        "commit.message": "Removed unused field.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@995001 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "5cb711fd8e3e336f61435179ab77fc68a98e36dd",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', None)": [
                        240,
                        241,
                        242,
                        243
                    ]
                }
            }
        }
    },
    "5cb711fd8e3e336f61435179ab77fc68a98e36dd": {
        "authored_data": "2010 Sep 08 11:22",
        "commit.message": "Fixed \"checkstyle\" errors.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@994988 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "7584e481bffc5a5ffb8673b0cb869b56c73d3b87",
        "changes": {
            "src/main/java/org/apache/commons/math/ConvergingAlgorithm.java": {
                "old": {
                    "(None, None)": [
                        29,
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/exception/util/ArgUtils.java": {
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25,
                        26,
                        27
                    ],
                    "('org.apache.commons.math.exception.util#ArgUtils', None)": [
                        29,
                        30,
                        31,
                        32,
                        33
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#AbstractRealVector', None)": [
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#AbstractRealVector', None)": [
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', None)": [
                        134,
                        135,
                        136,
                        137
                    ],
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', 'optimize(FUNC,GoalType,double)')": [
                        150,
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', None)": [
                        134
                    ],
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', 'optimize(FUNC,GoalType,double)')": [
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateVectorialOptimizer', 'optimize(FUNC,double,double,double)')": [
                        149,
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateVectorialOptimizer', 'optimize(FUNC,double,double,double)')": [
                        149
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        52,
                        53,
                        54,
                        55
                    ]
                },
                "new": {
                    "(None, None)": [
                        52,
                        53,
                        54,
                        55,
                        56,
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseOptimizer.java": {
                "old": {
                    "(None, None)": [
                        19,
                        20,
                        21
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java": {
                "old": {
                    "(None, None)": [
                        20,
                        26
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        79,
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        78,
                        79
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java": {
                "old": {
                    "(None, None)": [
                        19,
                        20
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        28,
                        33
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'doOptimize')": [
                        215,
                        216
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        259,
                        260,
                        299
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'doOptimize')": [
                        210,
                        211
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        254,
                        255,
                        256,
                        257,
                        296,
                        297
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        113,
                        115,
                        116
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(RealPointValuePair,double,Comparator)')": [
                        119,
                        120
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        113,
                        115,
                        116
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(RealPointValuePair,double,Comparator)')": [
                        119,
                        120
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java": {
                "old": {
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', None)": [
                        122,
                        123
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', None)": [
                        122,
                        123,
                        124,
                        125
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java": {
                "old": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java": {
                "old": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java": {
                "old": {
                    "(None, None)": [
                        24,
                        106,
                        108
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitter', None)": [
                        35,
                        38,
                        42,
                        53,
                        70,
                        72,
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitter', None)": [
                        39,
                        40,
                        41,
                        52,
                        53,
                        54,
                        71,
                        72,
                        73,
                        75,
                        76,
                        87,
                        88,
                        89
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        67,
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        67,
                        68
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', None)": [
                        110,
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', None)": [
                        109,
                        110
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        28,
                        29
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractVectorialOptimizer', 'optimize(FUNC,double,double,double)')": [
                        123,
                        130,
                        133,
                        139,
                        140,
                        148,
                        149
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#BaseAbstractVectorialOptimizer', 'optimize(FUNC,double,double,double)')": [
                        121,
                        128,
                        131,
                        137,
                        138,
                        146,
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        124,
                        125
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        67,
                        68,
                        69,
                        128,
                        129,
                        130,
                        131
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        412,
                        413,
                        414
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        412,
                        413,
                        414
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'setMaxEvaluations(int)')": [
                        103
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'doOptimize')": [
                        156,
                        157,
                        158
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', None)": [
                        248,
                        263,
                        264,
                        274,
                        283
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'setMaxEvaluations(int)')": [
                        102
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'doOptimize')": [
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', None)": [
                        247,
                        262,
                        263,
                        281
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double)')": [
                        141,
                        144
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        150,
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double)')": [
                        141,
                        144
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        150,
                        151
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        22,
                        52,
                        54,
                        76,
                        78,
                        79,
                        84
                    ]
                },
                "new": {
                    "(None, None)": [
                        51,
                        53,
                        75,
                        77,
                        78,
                        83,
                        84
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        24,
                        26
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        92,
                        125,
                        237
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        89,
                        122,
                        234
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#AbstractUnivariateStatistic', None)": [
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive#AbstractUnivariateStatistic', None)": [
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/Incrementor.java": {
                "old": {
                    "('org.apache.commons.math.util#Incrementor', None)": [
                        41
                    ],
                    "('org.apache.commons.math.util#Incrementor', 'setMaximalCount(int)')": [
                        43,
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#Incrementor', None)": [
                        41
                    ],
                    "('org.apache.commons.math.util#Incrementor', 'setMaximalCount(int)')": [
                        43,
                        44
                    ]
                }
            }
        }
    },
    "7584e481bffc5a5ffb8673b0cb869b56c73d3b87": {
        "authored_data": "2010 Sep 08 01:24",
        "commit.message": "* Modified multiple regression newSample methods to ensure that by default in all cases,\n  regression models are estimated with intercept terms.  Prior to the fix for this issue, \n  newXSampleData(double[][]), newSampleData(double[], double[][]) and \n  newSampleData(double[], double[][], double[][]) all required columns of \"1's\"\n  to be inserted into the x[][] arrays to create a model with an intercept term;\n  while newSampleData(double[], int, int) created a model including an intercept\n  term without requiring the unitary column.  All methods have  been changed to\n  eliminate the need for users to add unitary columns to specify regression models.\n* Improved javadoc\n* Improved tests\nJIRA: MATH-411\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@993574 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "89ec5debd582fb0af1667ceea7339430fad6431b",
        "changes": {
            "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java": {
                "new": {
                    "(None, None)": [
                        129
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', None)": [
                        43,
                        44,
                        66,
                        67,
                        68,
                        75,
                        76,
                        77,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        105,
                        109,
                        110
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newXSampleData(double)')": [
                        80
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'validateSampleData(double,double)')": [
                        97
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        69,
                        99,
                        100,
                        101,
                        102,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        195,
                        196,
                        200,
                        201
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newSampleData(double,int,int)')": [
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newYSampleData(double)')": [
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newXSampleData(double)')": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'validateSampleData(double,double)')": [
                        182,
                        183,
                        184,
                        185,
                        186,
                        187
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', None)": [
                        80,
                        81,
                        135,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        186
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'newXSampleData(double)')": [
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', None)": [
                        80,
                        134,
                        170,
                        171,
                        172,
                        173,
                        174,
                        183
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'newXSampleData(double)')": [
                        178
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegressionTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegressionTest', 'setUp')": [
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegressionTest', 'getNumberOfRegressors')": [
                        118
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        23,
                        24,
                        25,
                        204,
                        205
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegressionTest', 'setUp')": [
                        38,
                        39,
                        40,
                        41,
                        42,
                        43
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegressionTest', 'getNumberOfRegressors')": [
                        121
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegressionTest', None)": [
                        141,
                        142,
                        143,
                        144,
                        145,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegressionTest', 'testNewSample2')": [
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegressionTest', 'testGLSOLSConsistency')": [
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', None)": [
                        28
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'createRegression')": [
                        35
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        124
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', None)": [
                        30,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        96,
                        97,
                        98,
                        102,
                        103,
                        104,
                        108,
                        109,
                        110,
                        114,
                        115,
                        116,
                        119,
                        120,
                        121
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'createRegression')": [
                        37
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'testNewSample')": [
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'testNewSampleNullData')": [
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'testNewSampleInvalidData')": [
                        105,
                        106,
                        107
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'testNewSampleInsufficientData')": [
                        111,
                        112,
                        113
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'testXSampleDataNull')": [
                        117,
                        118
                    ],
                    "('org.apache.commons.math.stat.regression#MultipleLinearRegressionAbstractTest', 'testYSampleDataNull')": [
                        122,
                        123
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'setUp')": [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'getNumberOfRegressors')": [
                        59
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', None)": [
                        66,
                        67,
                        70,
                        71,
                        72,
                        75,
                        76
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'cannotAddXSampleData')": [
                        68,
                        69
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'cannotAddNullYSampleData')": [
                        73,
                        74
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testSwissFertility')": [
                        251,
                        252,
                        253,
                        254,
                        261,
                        270,
                        291
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        428
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'setUp')": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'getNumberOfRegressors')": [
                        60
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', None)": [
                        67,
                        397,
                        398,
                        399,
                        400,
                        401,
                        418,
                        419,
                        420,
                        423,
                        424,
                        425
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testSwissFertility')": [
                        242,
                        243,
                        244,
                        251,
                        260,
                        281
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testNewSample2')": [
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testNewSampleDataYNull')": [
                        421,
                        422
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testNewSampleDataXNull')": [
                        426,
                        427
                    ]
                }
            }
        }
    },
    "44f6b8b20f0ed5bf1965ef575b9ad30bd4f8b256": {
        "authored_data": "2010 Sep 06 09:06",
        "commit.message": "MATH-413 (points 1, 2 and 10)\nReverted to the original version of the convergence checker (using only the\nprevious and current best points).\n\"LevenberMarquardtOptimizer\": Removed setters (control parameters must be\nset at construction). Added a contructor.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992976 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "fc5606177f0158f72e093b66a7e35c675c84c92e",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#AbstractConvergenceChecker', None)": [
                        28,
                        29,
                        68,
                        75
                    ],
                    "('org.apache.commons.math.optimization#AbstractConvergenceChecker', 'converged(int,T)')": [
                        84
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.math.optimization#AbstractConvergenceChecker', None)": [
                        30,
                        31,
                        70,
                        77
                    ],
                    "('org.apache.commons.math.optimization#AbstractConvergenceChecker', 'converged(int,PAIR,PAIR)')": [
                        86,
                        87,
                        88
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        40,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        40,
                        41,
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', None)": [
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        76,
                        77
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,RealPointValuePair)')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', None)": [
                        68,
                        69
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        73,
                        74,
                        75,
                        76
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        76,
                        77
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair)')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        68,
                        69
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        73,
                        74,
                        75,
                        76
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', None)": [
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        76,
                        77
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,VectorialPointValuePair)')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', None)": [
                        68,
                        69
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        73,
                        74,
                        75,
                        76
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', None)": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,VectorialPointValuePair)')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', None)": [
                        69,
                        70
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        74,
                        75,
                        76,
                        77
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        109,
                        112,
                        115,
                        118,
                        121,
                        124,
                        127,
                        130,
                        133,
                        135,
                        136,
                        138,
                        139,
                        141,
                        142,
                        145,
                        146,
                        148,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        178,
                        179,
                        180,
                        181,
                        182,
                        184,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'setInitialStepBoundFactor(double)')": [
                        186
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'setCostRelativeTolerance(double)')": [
                        196
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'setParRelativeTolerance(double)')": [
                        207
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'setOrthoTolerance(double)')": [
                        218
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'setQRRankingThreshold(double)')": [
                        231
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        237,
                        238,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        126,
                        128,
                        130,
                        133,
                        135,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        152,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        218,
                        219,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java": {
                "old": {
                    "(None, None)": [
                        38,
                        39
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        57,
                        58
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        59,
                        60,
                        65,
                        66,
                        67
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'doOptimize')": [
                        127
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        25,
                        26,
                        41,
                        42,
                        43,
                        44
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', None)": [
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        67,
                        68,
                        69,
                        70,
                        71,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        92,
                        93,
                        94,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'doOptimize')": [
                        122,
                        123,
                        124,
                        155,
                        156,
                        157,
                        158,
                        159,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        51,
                        52,
                        53,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        136
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        131,
                        132,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        149,
                        150,
                        176,
                        177,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        286,
                        287
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        97,
                        123,
                        124,
                        125,
                        126,
                        129,
                        130,
                        133,
                        134,
                        135,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        143,
                        179,
                        204,
                        226,
                        260,
                        275,
                        296,
                        313,
                        326,
                        361,
                        447,
                        521,
                        546,
                        601,
                        616,
                        627
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(DifferentiableMultivariateVectorialFunction,double,int,double,double,double,boolean)')": [
                        383,
                        384,
                        386,
                        387,
                        388
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMath199')": [
                        511,
                        512
                    ],
                    "(None, None)": [
                        672,
                        673,
                        674
                    ]
                },
                "new": {
                    "(None, None)": [
                        38,
                        658
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(DifferentiableMultivariateVectorialFunction,double,int,double,double,double,boolean)')": [
                        374,
                        375,
                        376,
                        377,
                        378,
                        379
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMath199')": [
                        502,
                        503
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        492,
                        494,
                        495,
                        496
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        492,
                        493,
                        494,
                        495
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'doTest(MultivariateRealFunction,double,double,GoalType,double,double)')": [
                        140,
                        142
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'doTest(MultivariateRealFunction,double,double,GoalType,double,double)')": [
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testSinMin')": [
                        41,
                        42,
                        45,
                        46,
                        48,
                        49
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMin')": [
                        67,
                        68
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMinStatistics')": [
                        83,
                        84,
                        104,
                        105
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMax')": [
                        113,
                        114
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testMinEndpoints')": [
                        130,
                        131,
                        136,
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testSinMin')": [
                        41,
                        44,
                        46
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMin')": [
                        64
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMinStatistics')": [
                        79,
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMax')": [
                        109
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testMinEndpoints')": [
                        125,
                        130,
                        133
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#MultiStartUnivariateRealOptimizerTest', 'testSinMin')": [
                        39,
                        40
                    ],
                    "('org.apache.commons.math.optimization.univariate#MultiStartUnivariateRealOptimizerTest', 'testQuinticMin')": [
                        63,
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#MultiStartUnivariateRealOptimizerTest', 'testSinMin')": [
                        39
                    ],
                    "('org.apache.commons.math.optimization.univariate#MultiStartUnivariateRealOptimizerTest', 'testQuinticMin')": [
                        62
                    ]
                }
            }
        }
    },
    "fc5606177f0158f72e093b66a7e35c675c84c92e": {
        "authored_data": "2010 Sep 05 21:37",
        "commit.message": "Fixed typo in Javadoc comment.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992897 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "80384009b319d3bcc8b1dae2bf73343d2514843a",
        "changes": {
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java": {
                "old": {
                    "(None, None)": [
                        27,
                        29
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        30
                    ]
                }
            }
        }
    },
    "80384009b319d3bcc8b1dae2bf73343d2514843a": {
        "authored_data": "2010 Sep 05 19:42",
        "commit.message": "fixed checkstyle warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992879 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "d3450752e72386c573a2a7b44d24c6ae459e460d",
        "changes": {
            "src/main/java/org/apache/commons/math/dfp/DfpMath.java": {
                "old": {
                    "('org.apache.commons.math.dfp#DfpMath', 'log(Dfp)')": [
                        324
                    ],
                    "('org.apache.commons.math.dfp#DfpMath', 'pow(Dfp,Dfp)')": [
                        527,
                        535
                    ]
                },
                "new": {
                    "('org.apache.commons.math.dfp#DfpMath', 'log(Dfp)')": [
                        324
                    ],
                    "('org.apache.commons.math.dfp#DfpMath', 'pow(Dfp,Dfp)')": [
                        527,
                        535
                    ]
                }
            }
        }
    },
    "d3450752e72386c573a2a7b44d24c6ae459e460d": {
        "authored_data": "2010 Sep 05 19:35",
        "commit.message": "removing unused variables\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992876 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "05aebba620856c6efe6783f4eaae551d794d4dc3",
        "changes": {
            "src/test/java/org/apache/commons/math/dfp/DfpDecTest.java": {
                "old": {
                    "('org.apache.commons.math.dfp#DfpDecTest', None)": [
                        30,
                        31,
                        32
                    ],
                    "('org.apache.commons.math.dfp#DfpDecTest', 'setUp')": [
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.math.dfp#DfpDecTest', 'tearDown')": [
                        51,
                        52,
                        53
                    ]
                }
            }
        }
    }
}