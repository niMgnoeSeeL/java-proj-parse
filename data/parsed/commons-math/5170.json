{
    "121f832ef93ed34b9c7da7b59e7da5d93e9b7eac": {
        "authored_data": "2009 Jul 01 20:31",
        "commit.message": "fixed another set of warnings identified by recent findbugs versions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@790368 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "1a303e82dbe1452af69643c70a3b3c09abc396ca",
        "changes": {
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java": {
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        275,
                        276
                    ],
                    "('org.apache.commons.math.stat.descriptive#AggregateSummaryStatistics', None)": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274
                    ]
                }
            },
            "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#GaussNewtonEstimatorTest', None)": [
                        632,
                        683,
                        684,
                        685,
                        693,
                        694,
                        695,
                        696,
                        702,
                        703,
                        708,
                        712,
                        717
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#GaussNewtonEstimatorTest', None)": [
                        632,
                        683,
                        684,
                        685,
                        689,
                        694,
                        695,
                        696,
                        697,
                        703,
                        704,
                        709,
                        713,
                        718,
                        723
                    ]
                }
            },
            "src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', None)": [
                        677,
                        728,
                        729,
                        730,
                        738,
                        739,
                        740,
                        741,
                        747,
                        748,
                        753,
                        757,
                        762,
                        793,
                        810,
                        816,
                        823,
                        828
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', None)": [
                        677,
                        728,
                        729,
                        730,
                        734,
                        739,
                        740,
                        741,
                        742,
                        748,
                        749,
                        754,
                        758,
                        763,
                        768,
                        795,
                        812,
                        816,
                        819,
                        822,
                        827,
                        832
                    ]
                }
            },
            "src/test/org/apache/commons/math/estimation/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#MinpackTest', None)": [
                        571,
                        588,
                        589,
                        590,
                        601,
                        610,
                        611,
                        612
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#MinpackTest', None)": [
                        571,
                        588,
                        589,
                        590,
                        593,
                        602,
                        611,
                        612,
                        613,
                        620
                    ]
                }
            }
        }
    },
    "1a303e82dbe1452af69643c70a3b3c09abc396ca": {
        "authored_data": "2009 Jul 01 20:29",
        "commit.message": "removed tabs\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@790366 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "63d0a79ce2a1a8f7857f3a0ce78f3698b66e1fc1",
        "changes": {
            "src/java/org/apache/commons/math/util/ResizableDoubleArray.java": {
                "old": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setContractionCriteria(float)')": [
                        652
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionFactor(float)')": [
                        699
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionMode(int)')": [
                        719
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setContractionCriteria(float)')": [
                        652
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionFactor(float)')": [
                        699
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionMode(int)')": [
                        719
                    ]
                }
            }
        }
    },
    "63d0a79ce2a1a8f7857f3a0ce78f3698b66e1fc1": {
        "authored_data": "2009 Jul 01 16:03",
        "commit.message": "fixed a number of warnings identified by findbugs eclipse plugin version 1.3.9\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@790243 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "1a5345519ce54e4ff84628e0d5465afffea51c24",
        "changes": {
            "src/java/org/apache/commons/math/genetics/RandomKey.java": {
                "old": {
                    "('org.apache.commons.math.genetics#RandomKey', 'isSame(Chromosome)')": [
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.math.genetics#RandomKey', 'isSame(Chromosome)')": [
                        151
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/RandomKeyMutation.java": {
                "old": {
                    "('org.apache.commons.math.genetics#RandomKeyMutation', 'mutate(Chromosome)')": [
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.math.genetics#RandomKeyMutation', 'mutate(Chromosome)')": [
                        40
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/SparseFieldVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseFieldVector', 'append(FieldVector)')": [
                        184
                    ],
                    "('org.apache.commons.math.linear#SparseFieldVector', 'outerProduct(FieldVector)')": [
                        441
                    ],
                    "('org.apache.commons.math.linear#SparseFieldVector', 'subtract(FieldVector)')": [
                        516
                    ],
                    "('org.apache.commons.math.linear#SparseFieldVector', 'add(FieldVector)')": [
                        576
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseFieldVector', 'append(FieldVector)')": [
                        184
                    ],
                    "('org.apache.commons.math.linear#SparseFieldVector', 'outerProduct(FieldVector)')": [
                        441
                    ],
                    "('org.apache.commons.math.linear#SparseFieldVector', 'subtract(FieldVector)')": [
                        516
                    ],
                    "('org.apache.commons.math.linear#SparseFieldVector', 'add(FieldVector)')": [
                        576
                    ]
                }
            },
            "src/java/org/apache/commons/math/transform/FastFourierTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        616,
                        617,
                        618,
                        619,
                        620
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        616,
                        617
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/ResizableDoubleArray.java": {
                "old": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', None)": [
                        341
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'checkContractExpand(float,float)')": [
                        346,
                        349,
                        354,
                        368
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setContractionCriteria(float)')": [
                        651
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionFactor(float)')": [
                        696
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionMode(int)')": [
                        714
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'hashCode')": [
                        879,
                        884,
                        889
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', None)": [
                        341,
                        653,
                        700,
                        720
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'checkContractExpand(float,float)')": [
                        346,
                        349,
                        354,
                        368
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setContractionCriteria(float)')": [
                        651,
                        652
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionFactor(float)')": [
                        698,
                        699
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionMode(int)')": [
                        718,
                        719
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'hashCode')": [
                        885
                    ]
                }
            },
            "src/test/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', None)": [
                        796,
                        797,
                        798,
                        799,
                        800,
                        801,
                        802,
                        803,
                        804,
                        805,
                        806,
                        807
                    ]
                }
            },
            "src/test/org/apache/commons/math/genetics/RandomKeyTest.java": {
                "old": {
                    "('org.apache.commons.math.genetics#RandomKeyTest', 'testConstructor1')": [
                        31,
                        32
                    ],
                    "('org.apache.commons.math.genetics#RandomKeyTest', 'testConstructor2')": [
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.math.genetics#RandomKeyTest', 'testConstructor1')": [
                        31
                    ],
                    "('org.apache.commons.math.genetics#RandomKeyTest', 'testConstructor2')": [
                        36
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/BlockFieldMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'testGetSubMatrix')": [
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        570,
                        571,
                        574,
                        575,
                        579
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,boolean)')": [
                        586,
                        587,
                        590,
                        591,
                        592,
                        595
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'testCopySubMatrix')": [
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        634,
                        635,
                        636,
                        637,
                        638,
                        639
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        643,
                        644,
                        650,
                        651,
                        652,
                        655
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,boolean)')": [
                        662,
                        663,
                        669,
                        670,
                        671,
                        674
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'testGetSubMatrix')": [
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int)')": [
                        570,
                        573,
                        574,
                        575,
                        579
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int)')": [
                        586,
                        589,
                        590,
                        591,
                        592,
                        595
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'testCopySubMatrix')": [
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        634,
                        635,
                        636,
                        637,
                        638,
                        639
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int)')": [
                        643,
                        649,
                        650,
                        651,
                        652,
                        655
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int)')": [
                        662,
                        668,
                        669,
                        670,
                        671,
                        674
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testGetSubMatrix')": [
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,int,int,boolean)')": [
                        497,
                        498,
                        501,
                        502,
                        503,
                        506
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,boolean)')": [
                        513,
                        514,
                        517,
                        518,
                        519,
                        522
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testCopySubMatrix')": [
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,int,int,boolean)')": [
                        568,
                        569,
                        575,
                        576,
                        577,
                        580
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,boolean)')": [
                        587,
                        588,
                        594,
                        595,
                        596,
                        599
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testGetSubMatrix')": [
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,int,int)')": [
                        497,
                        500,
                        501,
                        502,
                        503,
                        506
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int)')": [
                        513,
                        516,
                        517,
                        518,
                        519,
                        522
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testCopySubMatrix')": [
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,int,int)')": [
                        568,
                        574,
                        575,
                        576,
                        577,
                        580
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int)')": [
                        587,
                        593,
                        594,
                        595,
                        596,
                        599
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/EigenDecompositionImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'isIncludedColumn(double,RealMatrix,double)')": [
                        296,
                        302
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'isIncludedColumn(double,RealMatrix,double)')": [
                        296,
                        302
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetSubMatrix')": [
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        384,
                        385,
                        388,
                        389,
                        390,
                        393
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,boolean)')": [
                        400,
                        401,
                        404,
                        405,
                        406,
                        409
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testCopySubMatrix')": [
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        436,
                        437,
                        443,
                        444,
                        445,
                        448
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,boolean)')": [
                        455,
                        456,
                        462,
                        463,
                        464,
                        467
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetSubMatrix')": [
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int)')": [
                        384,
                        387,
                        388,
                        389,
                        390,
                        393
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int)')": [
                        400,
                        403,
                        404,
                        405,
                        406,
                        409
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testCopySubMatrix')": [
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int)')": [
                        436,
                        442,
                        443,
                        444,
                        445,
                        448
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int)')": [
                        455,
                        461,
                        462,
                        463,
                        464,
                        467
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testCopyFunctions')": [
                        152,
                        156
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testCopyFunctions')": [
                        152,
                        156
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testCopyFunctions')": [
                        133,
                        137
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testCopyFunctions')": [
                        133,
                        137
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/TestProblem1.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem1', None)": [
                        65,
                        66,
                        67,
                        68,
                        69
                    ],
                    "('org.apache.commons.math.ode#TestProblem1', 'clone')": [
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblem1', None)": [
                        65
                    ],
                    "('org.apache.commons.math.ode#TestProblem1', 'copy')": [
                        66
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/TestProblem2.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem2', None)": [
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    "('org.apache.commons.math.ode#TestProblem2', 'clone')": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblem2', None)": [
                        66
                    ],
                    "('org.apache.commons.math.ode#TestProblem2', 'copy')": [
                        67
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/TestProblem3.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem3', None)": [
                        81,
                        82,
                        83,
                        84,
                        85
                    ],
                    "('org.apache.commons.math.ode#TestProblem3', 'clone')": [
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblem3', None)": [
                        81
                    ],
                    "('org.apache.commons.math.ode#TestProblem3', 'copy')": [
                        82
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/TestProblem4.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem4', None)": [
                        71,
                        72,
                        73,
                        74,
                        75
                    ],
                    "('org.apache.commons.math.ode#TestProblem4', 'clone')": [
                        76
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblem4', None)": [
                        71
                    ],
                    "('org.apache.commons.math.ode#TestProblem4', 'copy')": [
                        72
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/TestProblem5.java": {
                "old": {
                    "(None, None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblem5', None)": [
                        38,
                        39
                    ],
                    "('org.apache.commons.math.ode#TestProblem5', 'copy')": [
                        40,
                        41
                    ],
                    "(None, None)": [
                        42
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/TestProblem6.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem6', None)": [
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    "('org.apache.commons.math.ode#TestProblem6', 'clone')": [
                        71,
                        72
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblem6', None)": [
                        66
                    ],
                    "('org.apache.commons.math.ode#TestProblem6', 'copy')": [
                        67,
                        68
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/TestProblemAbstract.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblemAbstract', None)": [
                        28,
                        85,
                        88
                    ],
                    "('org.apache.commons.math.ode#TestProblemAbstract', 'clone')": [
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblemAbstract', None)": [
                        28,
                        85
                    ],
                    "('org.apache.commons.math.ode#TestProblemAbstract', 'copy')": [
                        88
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testDecreasingSteps')": [
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testDecreasingSteps')": [
                        86
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testNoDenseOutput')": [
                        233
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testNoDenseOutput')": [
                        233
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testDecreasingSteps')": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testDecreasingSteps')": [
                        65
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testDecreasingSteps')": [
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testDecreasingSteps')": [
                        66
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testDecreasingSteps')": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testDecreasingSteps')": [
                        65
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testDecreasingSteps')": [
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testDecreasingSteps')": [
                        66
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', None)": [
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', None)": [
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizerTest', None)": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizerTest', None)": [
                        62
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', None)": [
                        207,
                        228
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', None)": [
                        207,
                        228
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        437,
                        438
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        437
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', None)": [
                        432,
                        433,
                        434,
                        435
                    ]
                }
            },
            "src/test/org/apache/commons/math/stat/ranking/NaturalRankingTest.java": {
                "new": {
                    "('org.apache.commons.math.stat.ranking#NaturalRankingTest', 'testNaNsAndInfs')": [
                        202
                    ]
                }
            },
            "src/test/org/apache/commons/math/util/MathUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'binomialCoefficient(int,int)')": [
                        55,
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'binomialCoefficient(int,int)')": [
                        55,
                        83
                    ]
                }
            }
        }
    },
    "6dcf0f6a12d507db81ee4906db5a65600b68fe65": {
        "authored_data": "2009 Jun 30 00:37",
        "commit.message": "Fixed broken javadoc links.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@789510 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "41fac55fe2e1bc76086f66f82e31c07c6584370a",
        "changes": {
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsIntegrator', None)": [
                        107,
                        124
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsIntegrator', None)": [
                        107,
                        124
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsNordsieckTransformer', None)": [
                        283,
                        300
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsNordsieckTransformer', None)": [
                        283,
                        300
                    ]
                }
            }
        }
    },
    "41fac55fe2e1bc76086f66f82e31c07c6584370a": {
        "authored_data": "2009 Jun 30 00:16",
        "commit.message": "Fixed incorrect javadoc link.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@789502 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "879518c3419c55def111485b4f41aaf1f63dcb31",
        "changes": {
            "src/java/org/apache/commons/math/genetics/RandomKeyMutation.java": {
                "old": {
                    "('org.apache.commons.math.genetics#RandomKeyMutation', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.math.genetics#RandomKeyMutation', None)": [
                        37
                    ]
                }
            }
        }
    },
    "879518c3419c55def111485b4f41aaf1f63dcb31": {
        "authored_data": "2009 Jun 29 15:20",
        "commit.message": "fixed a serialization error introduced by yesterday changes\n(sorry for the noise)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@789358 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "c7beb702d8aa7d7fb8221187a2d48aab625aae9d",
        "changes": {
            "src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#AbstractStepInterpolator', None)": [
                        365
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#AbstractStepInterpolator', None)": [
                        365
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'readExternal(ObjectInput)')": [
                        196,
                        201
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'writeExternal(ObjectOutput)')": [
                        190,
                        191,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212
                    ],
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', None)": [
                        213,
                        214
                    ],
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'readExternal(ObjectInput)')": [
                        220,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/sampling/NordsieckStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolatorTest', 'serialization')": [
                        65,
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolatorTest', 'serialization')": [
                        65,
                        66
                    ]
                }
            }
        }
    },
    "c7beb702d8aa7d7fb8221187a2d48aab625aae9d": {
        "authored_data": "2009 Jun 28 22:01",
        "commit.message": "fixed typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@789161 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "3cb90658a42ddf53d0c159e2c109dc9b0543a24d",
        "changes": {
            "src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'computeInterpolatedStateAndDerivatives(double,double)')": [
                        164
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'computeInterpolatedStateAndDerivatives(double,double)')": [
                        164
                    ]
                }
            }
        }
    },
    "3cb90658a42ddf53d0c159e2c109dc9b0543a24d": {
        "authored_data": "2009 Jun 28 21:56",
        "commit.message": "simplified and reorganized slightly the Adams integrators class hierarchy\nthis will allow a future BDF integrator development for stiff problems\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@789159 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "7614049449f65b9da27deb7e9a96b32052c2f9fc",
        "changes": {
            "src/java/org/apache/commons/math/ode/MultistepIntegrator.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        25
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        44,
                        45,
                        46,
                        59,
                        107,
                        144,
                        269,
                        270,
                        271,
                        272,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        304,
                        305,
                        347
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', 'writeObject(ObjectOutputStream)')": [
                        273,
                        274,
                        275,
                        276
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', 'readObject(ObjectInputStream)')": [
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        51,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        217,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        318
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', 'initializeHighOrderDerivatives(double,double)')": [
                        215,
                        216
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java": {
                "old": {
                    "(None, None)": [
                        20,
                        24
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        142,
                        145,
                        165
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        264,
                        265,
                        266
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        141,
                        144,
                        164
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        263,
                        264
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "(None, None)": [
                        23,
                        28,
                        131
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        159,
                        182
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        267,
                        268,
                        269,
                        284
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        130
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        158,
                        181
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        266,
                        267,
                        282
                    ]
                }
            }
        }
    }
}