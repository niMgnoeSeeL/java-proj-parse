{
    "5d699563b14402c410e32bc4b175419c18993918": {
        "authored_data": "2011 Nov 18 07:42",
        "commit.message": "Fixed BigFraction percentage method which did not work at all.\n\nJIRA: MATH-709\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1203516 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "9591a91f45ce63a964327d9429074418939fe29b",
        "changes": {
            "src/main/java/org/apache/commons/math/fraction/BigFraction.java": {
                "old": {
                    "('org.apache.commons.math.fraction#BigFraction', None)": [
                        88
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'percentageValue')": [
                        926
                    ]
                },
                "new": {
                    "('org.apache.commons.math.fraction#BigFraction', None)": [
                        88
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'percentageValue')": [
                        926
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/fraction/Fraction.java": {
                "new": {
                    "('org.apache.commons.math.fraction#Fraction', None)": [
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        598,
                        599,
                        600
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'percentageValue')": [
                        596,
                        597
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java": {
                "new": {
                    "('org.apache.commons.math.fraction#BigFractionTest', 'testPercentage')": [
                        561,
                        562
                    ],
                    "('org.apache.commons.math.fraction#BigFractionTest', None)": [
                        563,
                        564,
                        565
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/fraction/FractionTest.java": {
                "new": {
                    "('org.apache.commons.math.fraction#FractionTest', 'testPercentage')": [
                        241,
                        242
                    ],
                    "('org.apache.commons.math.fraction#FractionTest', None)": [
                        243,
                        244,
                        245
                    ]
                }
            }
        }
    },
    "9591a91f45ce63a964327d9429074418939fe29b": {
        "authored_data": "2011 Nov 17 14:33",
        "commit.message": "MATH-708.\nNew utility method.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1203205 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "e0bf2f8c2932a1c04a6322543a0e5137501c487e",
        "changes": {
            "src/main/java/org/apache/commons/math/util/Precision.java": {
                "new": {
                    "('org.apache.commons.math.util#Precision', None)": [
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491
                    ],
                    "('org.apache.commons.math.util#Precision', 'representableDelta(double,double)')": [
                        492,
                        493,
                        494
                    ],
                    "(None, None)": [
                        495
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/util/PrecisionTest.java": {
                "new": {
                    "('org.apache.commons.math.util#PrecisionTest', None)": [
                        467,
                        468,
                        469
                    ],
                    "('org.apache.commons.math.util#PrecisionTest', 'testRepresentableDelta')": [
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483
                    ],
                    "(None, None)": [
                        484
                    ]
                }
            }
        }
    },
    "e0bf2f8c2932a1c04a6322543a0e5137501c487e": {
        "authored_data": "2011 Nov 16 23:10",
        "commit.message": "Javadoc.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1202926 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "50af1b4d6384bbe48ecd7e66f6ddac534409bd50",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractSimpleBoundsScalarOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#BaseAbstractSimpleBoundsScalarOptimizer', None)": [
                        53,
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#BaseAbstractSimpleBoundsScalarOptimizer', None)": [
                        53,
                        54,
                        57
                    ]
                }
            }
        }
    },
    "50af1b4d6384bbe48ecd7e66f6ddac534409bd50": {
        "authored_data": "2011 Nov 16 23:05",
        "commit.message": "Character encoding.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1202922 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "1f7ef356d9d6ce05f7ac06ce498f3a761d61f8f0",
        "changes": {
            "src/main/java/org/apache/commons/math/random/StableRandomGenerator.java": {
                "old": {
                    "(None, None)": [
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ]
                }
            }
        }
    },
    "1f7ef356d9d6ce05f7ac06ce498f3a761d61f8f0": {
        "authored_data": "2011 Nov 16 15:45",
        "commit.message": "Character encoding.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1202746 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "4289e3e4ffcf5e6f95fa8f2201fd8ec712cfa51a",
        "changes": {
            "src/main/java/org/apache/commons/math/random/StableRandomGenerator.java": {
                "old": {
                    "(None, None)": [
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ]
                }
            }
        }
    },
    "4289e3e4ffcf5e6f95fa8f2201fd8ec712cfa51a": {
        "authored_data": "2011 Nov 15 13:35",
        "commit.message": "MATH-697\nAdded missing constructors.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1202186 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "754434a4c01e9108ca5064cbaf653974ac687d63",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractSimpleBoundsScalarOptimizer.java": {
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractSimpleBoundsScalarOptimizer', None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ]
                }
            }
        }
    },
    "754434a4c01e9108ca5064cbaf653974ac687d63": {
        "authored_data": "2011 Nov 15 11:47",
        "commit.message": "MATH-697\nNew interface and abstract base class for separate support of unconstrained\nand simple bounds constraints optimizers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1202140 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "3ad3a1fa41d3973b21b6c01525b24c7b9f489022",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        140
                    ],
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', None)": [
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', 'optimize(int,FUNC,GoalType,double,double,double)')": [
                        146,
                        147,
                        148,
                        149,
                        160,
                        161
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateRealOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        150
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizer', None)": [
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        32
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizer', None)": [
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        26,
                        39
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractScalarOptimizer', None)": [
                        54,
                        55,
                        56,
                        57,
                        112,
                        113,
                        114,
                        199,
                        200,
                        203,
                        204,
                        205,
                        206,
                        207,
                        210,
                        211,
                        212
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractScalarOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        111
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractScalarOptimizer', 'optimize(int,FUNC,GoalType,double,double,double)')": [
                        115,
                        116,
                        117,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractScalarOptimizer', 'getLowerBound')": [
                        201,
                        202
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractScalarOptimizer', 'getUpperBound')": [
                        208,
                        209
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'optimize(int,DifferentiableMultivariateRealFunction,GoalType,double)')": [
                        76
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'optimize(int,DifferentiableMultivariateRealFunction,GoalType,double,double,double)')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        89,
                        90,
                        91
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'optimize(int,DifferentiableMultivariateRealFunction,GoalType,double)')": [
                        79
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'doTest(MultivariateRealFunction,double,double,GoalType,double,double,int,RealPointValuePair)')": [
                        262
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'doTest(MultivariateRealFunction,double,double,GoalType,double,double,int,RealPointValuePair)')": [
                        262
                    ]
                }
            }
        }
    },
    "3ad3a1fa41d3973b21b6c01525b24c7b9f489022": {
        "authored_data": "2011 Nov 11 23:39",
        "commit.message": "Fixed a bad interaction between step handlers and event handlers in ODE\nintegrators.\n\nThe problem was due to an internal array from the step interpolator that\nwas changed by the step handlers. These array was expected to contain\nthe state at event time, but was overridden later on. the solution is\nsimply to clone the array. Note that the fact the array is reused *is*\ndocumented in the javadoc and is a feature of the interpolators ...\n\nJIRA: MATH-706\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1201105 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "ea13fac8769f59ffbb67ba63b851d33a182282a9",
        "changes": {
            "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'acceptStep(AbstractStepInterpolator,double,double,double)')": [
                        321
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'acceptStep(AbstractStepInterpolator,double,double,double)')": [
                        321
                    ]
                }
            }
        }
    },
    "ea13fac8769f59ffbb67ba63b851d33a182282a9": {
        "authored_data": "2011 Nov 10 21:03",
        "commit.message": "Added array constructor and getter for Vector2D and Vector3D.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1200546 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "0fd55c7ac3d3087903b1b7fcc7ee0f6411b5256c",
        "changes": {
            "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java": {
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Vector3D', None)": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Vector3D', 'toArray')": [
                        221,
                        222
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java": {
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.geometry.euclidean.twod#Vector2D', None)": [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164
                    ],
                    "('org.apache.commons.math.geometry.euclidean.twod#Vector2D', 'toArray')": [
                        165,
                        166
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java": {
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Vector3DTest', 'testConstructors')": [
                        45,
                        46
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Vector3DTest', None)": [
                        47,
                        48,
                        49
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Vector3DTest', 'testWrongDimension')": [
                        50,
                        51
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Vector3DTest', 'testCoordinates')": [
                        60,
                        61,
                        62,
                        63
                    ]
                }
            }
        }
    },
    "0fd55c7ac3d3087903b1b7fcc7ee0f6411b5256c": {
        "authored_data": "2011 Nov 10 21:02",
        "commit.message": "Added applyTo and applyInverseTo methods in the Rotation class that\nhandle directly arrays instead of Vector3D instances.\n\nPatch provided by Jan Kotek.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1200545 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "bb201d926ebf225439d0007e7015365a9fbc3578",
        "changes": {
            "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java": {
                "new": {
                    "('org.apache.commons.math.geometry.euclidean.threed#Rotation', None)": [
                        850,
                        851,
                        852,
                        853,
                        854,
                        866,
                        867,
                        868,
                        885,
                        886,
                        887,
                        888,
                        889,
                        890,
                        891,
                        892
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Rotation', 'applyTo(double,double)')": [
                        855,
                        856,
                        857,
                        858,
                        859,
                        860,
                        861,
                        862,
                        863,
                        864,
                        865
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#Rotation', 'applyInverseTo(double,double)')": [
                        893,
                        894,
                        895,
                        896,
                        897,
                        898,
                        899,
                        900,
                        901,
                        902,
                        903,
                        904
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java": {
                "new": {
                    "('org.apache.commons.math.geometry.euclidean.threed#RotationTest', 'testArray')": [
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459
                    ],
                    "('org.apache.commons.math.geometry.euclidean.threed#RotationTest', None)": [
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466
                    ]
                }
            }
        }
    }
}