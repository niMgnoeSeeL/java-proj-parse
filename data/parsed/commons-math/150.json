{
    "e693b4d264cf62f83f42ef5e6eadaa4807ceb1eb": {
        "authored_data": "2021 Aug 18 22:33",
        "commit.message": "Use JUnit 5 Assertions for exact double equality\n\nFix checkstyle\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "56b7b12c2a90afc4bdcc7658c9173d8c7ef064ea",
        "changes": {
            "commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMathTest.java": {
                "old": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', 'testAtan2SpecialCases')": [
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646
                    ],
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', 'assertAtan2(double,double,double,double)')": [
                        679,
                        680,
                        681,
                        682,
                        683,
                        685,
                        687
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', 'testAtan2SpecialCases')": [
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646
                    ],
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', 'assertAtan2(double,double,double,double)')": [
                        679,
                        680,
                        683,
                        684
                    ]
                }
            }
        }
    },
    "56b7b12c2a90afc4bdcc7658c9173d8c7ef064ea": {
        "authored_data": "2021 Aug 18 22:16",
        "commit.message": "Simplify atan2 expressions when y is non-zero",
        "commit.author.name": "Alex Herbert",
        "pcid": "7cb883c54b787f93a400eb0b41cc486acf79164e",
        "changes": {
            "commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMath.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMath', 'atan2(double,double)')": [
                        2695,
                        2696,
                        2702,
                        2703,
                        2704,
                        2734,
                        2735,
                        2736,
                        2737,
                        2738,
                        2739,
                        2740,
                        2744,
                        2745,
                        2746,
                        2747,
                        2748,
                        2749,
                        2750,
                        2756,
                        2757,
                        2758,
                        2759,
                        2760,
                        2761,
                        2762
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMath', 'atan2(double,double)')": [
                        2696,
                        2701,
                        2702,
                        2732,
                        2736,
                        2742
                    ]
                }
            }
        }
    },
    "7cb883c54b787f93a400eb0b41cc486acf79164e": {
        "authored_data": "2021 Aug 18 22:00",
        "commit.message": "sonar fix: avoid division by zero in atan2 when y=0",
        "commit.author.name": "Alex Herbert",
        "pcid": "f06bb2aa3ffa87be738f557e91d62b0ef2085271",
        "changes": {
            "commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMath.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMath', 'atan2(double,double)')": [
                        2690,
                        2692,
                        2703,
                        2704,
                        2705,
                        2706,
                        2707,
                        2709
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMath', 'atan2(double,double)')": [
                        2701,
                        2703
                    ]
                }
            }
        }
    },
    "f06bb2aa3ffa87be738f557e91d62b0ef2085271": {
        "authored_data": "2021 Aug 18 21:55",
        "commit.message": "Update atan2 special cases test\n\nEnumerate all combinations of 0, infinity and another value (0.1) with\n+/- for each. Results are the same with java.lang.Math.\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "f6fe96b23fededca66c998e41c28fc2a6d73d6ee",
        "changes": {
            "commons-math-legacy-core/src/test/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMathTest.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', 'testAtan2SpecialCases')": [
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        635,
                        636,
                        637,
                        638,
                        639,
                        640,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646,
                        647,
                        648,
                        649,
                        650
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', 'testAtan2SpecialCases')": [
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        635,
                        636,
                        637,
                        638,
                        639,
                        640,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646,
                        647,
                        648,
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        657,
                        658,
                        659,
                        660,
                        661,
                        662,
                        663,
                        664
                    ],
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', None)": [
                        665,
                        666,
                        667,
                        668,
                        669,
                        670,
                        671,
                        672,
                        673,
                        674,
                        688
                    ],
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathTest', 'assertAtan2(double,double,double,double)')": [
                        675,
                        676,
                        677,
                        678,
                        679,
                        680,
                        681,
                        682,
                        683,
                        684,
                        685,
                        686,
                        687
                    ]
                }
            }
        }
    },
    "f6fe96b23fededca66c998e41c28fc2a6d73d6ee": {
        "authored_data": "2021 Aug 18 17:30",
        "commit.message": "Sonar fix: Replace x != x with Double.isNaN\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "e97c3288a54f28a2fd2fb24140fc520098321aec",
        "changes": {
            "commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/dfp/Dfp.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.core.dfp#Dfp', None)": [
                        291
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.core.dfp#Dfp', None)": [
                        291
                    ]
                }
            },
            "commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/jdkmath/AccurateMathCalc.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathCalc', 'format(double)')": [
                        639
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.core.jdkmath#AccurateMathCalc', 'format(double)')": [
                        639
                    ]
                }
            }
        }
    },
    "e97c3288a54f28a2fd2fb24140fc520098321aec": {
        "authored_data": "2021 Aug 18 15:41",
        "commit.message": "Sonar fix: Cast operands to double before assigning result to double",
        "commit.author.name": "Alex Herbert",
        "pcid": "21a9aa44133fd2986cd24097c66045186b9fb373",
        "changes": {
            "commons-math-examples/examples-sofm/chinese-rings/src/main/java/org/apache/commons/math4/examples/sofm/chineserings/ChineseRingsClassifier.java": {
                "old": {
                    "('org.apache.commons.math4.examples.sofm.chineserings#ChineseRingsClassifier', 'createParallelTasks(int,long)')": [
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.examples.sofm.chineserings#ChineseRingsClassifier', 'createParallelTasks(int,long)')": [
                        81
                    ]
                }
            },
            "commons-math-legacy-core/src/main/java/org/apache/commons/math4/legacy/core/MathArrays.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.core#MathArrays', 'distance(int,int)')": [
                        247
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.core#MathArrays', 'distance(int,int)')": [
                        247
                    ]
                }
            },
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/integration/gauss/HermiteRuleFactory.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.analysis.integration.gauss#HermiteRuleFactory', 'computeRule(int)')": [
                        77,
                        78,
                        98,
                        123,
                        162
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.analysis.integration.gauss#HermiteRuleFactory', 'computeRule(int)')": [
                        77,
                        78,
                        98,
                        123,
                        162
                    ]
                }
            },
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/integration/gauss/LaguerreRuleFactory.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.analysis.integration.gauss#LaguerreRuleFactory', 'companionMatrix(int)')": [
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.analysis.integration.gauss#LaguerreRuleFactory', 'companionMatrix(int)')": [
                        68
                    ]
                }
            },
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/analysis/polynomials/PolynomialsUtils.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.analysis.polynomials#PolynomialsUtils', 'buildPolynomial(int,List,RecurrenceCoefficientsGenerator)')": [
                        373
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.analysis.polynomials#PolynomialsUtils', 'buildPolynomial(int,List,RecurrenceCoefficientsGenerator)')": [
                        373
                    ]
                }
            },
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#CMAESOptimizer', 'updateCovariance(boolean,RealMatrix,RealMatrix,int,RealMatrix)')": [
                        722
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#CMAESOptimizer', 'updateCovariance(boolean,RealMatrix,RealMatrix,int,RealMatrix)')": [
                        722
                    ]
                }
            },
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/stat/inference/KolmogorovSmirnovTest.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.stat.inference#KolmogorovSmirnovTest', 'pelzGood(double,int)')": [
                        622,
                        659
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.stat.inference#KolmogorovSmirnovTest', 'pelzGood(double,int)')": [
                        622,
                        659
                    ]
                }
            },
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/stat/interval/ClopperPearsonInterval.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.stat.interval#ClopperPearsonInterval', 'createInterval(int,int,double)')": [
                        43,
                        44,
                        51,
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.stat.interval#ClopperPearsonInterval', 'createInterval(int,int,double)')": [
                        43,
                        44,
                        51,
                        52
                    ]
                }
            },
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/stat/regression/SimpleRegression.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.stat.regression#SimpleRegression', 'getSlopeConfidenceInterval(double)')": [
                        701
                    ],
                    "('org.apache.commons.math4.legacy.stat.regression#SimpleRegression', 'getSignificance')": [
                        733
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.stat.regression#SimpleRegression', 'getSlopeConfidenceInterval(double)')": [
                        701
                    ],
                    "('org.apache.commons.math4.legacy.stat.regression#SimpleRegression', 'getSignificance')": [
                        733
                    ]
                }
            }
        }
    },
    "21a9aa44133fd2986cd24097c66045186b9fb373": {
        "authored_data": "2021 Aug 18 10:14",
        "commit.message": "Sonar fix: use equals to compare Integers",
        "commit.author.name": "Alex Herbert",
        "pcid": "0a42dc86cbbc7872068180cf932a500f354cb725",
        "changes": {
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/genetics/RandomKey.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.genetics#RandomKey', 'isSame(Chromosome)')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.genetics#RandomKey', 'isSame(Chromosome)')": [
                        166
                    ]
                }
            }
        }
    }
}