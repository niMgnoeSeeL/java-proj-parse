{
    "d99003bc0fb18a7cb45b44e9e1ab2f300efb41e6": {
        "authored_data": "2009 Mar 24 22:14",
        "commit.message": "updated univariate algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758056 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "c03fbc71a6ef4968853f879197a36ab8aff8d00c",
        "changes": {
            "src/test/org/apache/commons/math/optimization/univariate/BrentMinimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'suite')": [
                        39
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'testSinMin')": [
                        45,
                        46,
                        48
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'testQuinticMin')": [
                        56,
                        57,
                        58,
                        62
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'testMinEndpoints')": [
                        69,
                        72,
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'suite')": [
                        41
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'testSinMin')": [
                        47,
                        48,
                        50
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'testQuinticMin')": [
                        58,
                        59,
                        60,
                        64
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentMinimizerTest', 'testMinEndpoints')": [
                        71,
                        74,
                        77
                    ]
                }
            }
        }
    },
    "c03fbc71a6ef4968853f879197a36ab8aff8d00c": {
        "authored_data": "2009 Mar 24 22:13",
        "commit.message": "updated direct algorithms with latest interfaces definitions\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758054 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "891bb84cd0acfd15a466f41e6b0f8cc7a2a25d07",
        "changes": {
            "src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "(None, None)": [
                        25,
                        27,
                        28,
                        30,
                        31,
                        61,
                        68,
                        79
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        85,
                        91,
                        94,
                        97,
                        308,
                        314,
                        321,
                        363,
                        364
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setConvergenceChecker(ScalarConvergenceChecker)')": [
                        235
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getConvergenceChecker')": [
                        240
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ScalarObjectiveFunction,GoalType,double)')": [
                        245,
                        247,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        273
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'iterateSimplex(Comparator)')": [
                        313
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluate(double)')": [
                        325,
                        327
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        346,
                        347,
                        356
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex(Comparator)')": [
                        365,
                        366,
                        370,
                        373
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(ScalarPointValuePair,Comparator)')": [
                        386,
                        387,
                        391
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        26,
                        29,
                        30,
                        31,
                        61,
                        68,
                        79
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        85,
                        91,
                        94,
                        97,
                        312,
                        318,
                        325,
                        367,
                        368
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setConvergenceChecker(RealConvergenceChecker)')": [
                        235
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getConvergenceChecker')": [
                        240
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(MultivariateRealFunction,GoalType,double)')": [
                        245,
                        246,
                        248,
                        249,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        277
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'iterateSimplex(Comparator)')": [
                        317
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluate(double)')": [
                        329,
                        331
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        350,
                        351,
                        360
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex(Comparator)')": [
                        369,
                        370,
                        374,
                        377
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(RealPointValuePair,Comparator)')": [
                        390,
                        391,
                        395
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java": {
                "old": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        62,
                        63,
                        70,
                        71,
                        74,
                        78,
                        79,
                        90
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        105
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(ScalarPointValuePair,double,Comparator)')": [
                        108,
                        110,
                        111,
                        117,
                        125
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        62,
                        63,
                        70,
                        71,
                        74,
                        78,
                        79,
                        90
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        105
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(RealPointValuePair,double,Comparator)')": [
                        108,
                        110,
                        111,
                        117,
                        125
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/NelderMead.java": {
                "old": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        76,
                        77,
                        85,
                        86,
                        87,
                        109,
                        124,
                        143,
                        158,
                        175
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        76,
                        77,
                        85,
                        86,
                        87,
                        109,
                        124,
                        143,
                        158,
                        175
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28,
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testObjectiveExceptions')": [
                        39,
                        40,
                        41,
                        43,
                        45,
                        47,
                        57,
                        67
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        76,
                        87,
                        89,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        135,
                        136,
                        137,
                        138,
                        140,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        166,
                        167,
                        168,
                        169,
                        171,
                        185
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testFunctionEvaluationExceptions')": [
                        39,
                        40,
                        41,
                        43,
                        45,
                        47,
                        57,
                        67
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        76,
                        87,
                        89,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        135,
                        136,
                        137,
                        138,
                        140,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        166,
                        167,
                        168,
                        169,
                        171,
                        185
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28,
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testObjectiveExceptions')": [
                        39,
                        40,
                        41,
                        43,
                        45,
                        47,
                        57,
                        67
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        76,
                        87,
                        89,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        135,
                        136,
                        137,
                        138,
                        140,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        166,
                        167,
                        168,
                        169,
                        171,
                        185
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testFunctionEvaluationExceptions')": [
                        39,
                        40,
                        41,
                        43,
                        45,
                        47,
                        57,
                        67
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        76,
                        87,
                        89,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        135,
                        136,
                        137,
                        138,
                        140,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        166,
                        167,
                        168,
                        169,
                        171,
                        185
                    ]
                }
            }
        }
    },
    "891bb84cd0acfd15a466f41e6b0f8cc7a2a25d07": {
        "authored_data": "2009 Mar 24 22:12",
        "commit.message": "added new simple convergence checkers implementations\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758053 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "2d116267b463d296941fc691e2452640ff497493",
        "changes": {
            "src/java/org/apache/commons/math/optimization/RealConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        29
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            }
        }
    },
    "2d116267b463d296941fc691e2452640ff497493": {
        "authored_data": "2009 Mar 24 22:11",
        "commit.message": "improved consistency in class naming with respect to functions in the analysis package\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758052 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "fa4c993e5d68641fff5fe39138195facc63de420",
        "changes": {
            "src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24,
                        28,
                        29,
                        38,
                        48,
                        49
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        54,
                        60,
                        75,
                        101,
                        111,
                        134,
                        144
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', 'objective(double)')": [
                        159,
                        162,
                        164,
                        165
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22,
                        23,
                        26,
                        27,
                        31,
                        32,
                        41,
                        51,
                        52
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        57,
                        63,
                        78,
                        104,
                        114,
                        137,
                        147
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', 'value(double)')": [
                        162,
                        165,
                        167,
                        168
                    ]
                }
            }
        }
    },
    "fa4c993e5d68641fff5fe39138195facc63de420": {
        "authored_data": "2009 Mar 24 22:10",
        "commit.message": "removed spurious exception in optimization\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758051 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "07425ec8ae649e79ba5921460a3e900de6b6e244",
        "changes": {
            "src/test/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#ArgumentOutsideDomainExceptionTest', 'testConstructor')": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.math#ArgumentOutsideDomainExceptionTest', 'testConstructor')": [
                        34
                    ]
                }
            },
            "src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructor')": [
                        34
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorPatternArguments')": [
                        38
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructor')": [
                        34
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', None)": [
                        35,
                        36,
                        78,
                        79,
                        114,
                        115
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorArray')": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorPatternArguments')": [
                        49
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorArrayPatternArguments')": [
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        81
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorArrayPatternArgumentsCause')": [
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorArrayArgumentCause')": [
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133
                    ],
                    "(None, None)": [
                        134,
                        135
                    ]
                }
            }
        }
    },
    "07425ec8ae649e79ba5921460a3e900de6b6e244": {
        "authored_data": "2009 Mar 24 22:09",
        "commit.message": "improved consistency in class naming with respect to functions in the analysis package\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758049 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "70d82c4fe64f34f135da3467d3f84fa56f51252b",
        "changes": {
            "src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        34
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,ScalarPointValuePair,ScalarPointValuePair)')": [
                        75,
                        76
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        34
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        75,
                        76
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/VectorialPointValuePair.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        27,
                        28
                    ]
                }
            }
        }
    },
    "70d82c4fe64f34f135da3467d3f84fa56f51252b": {
        "authored_data": "2009 Mar 24 22:06",
        "commit.message": "removed spurious exception in optimization\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758047 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "187dd35c9a6a4c727dbaa64ea4bf86a819621e42",
        "changes": {
            "src/java/org/apache/commons/math/FunctionEvaluationException.java": {
                "old": {
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        30,
                        33,
                        42,
                        43,
                        57,
                        69,
                        85
                    ],
                    "('org.apache.commons.math#FunctionEvaluationException', 'getArgument')": [
                        93,
                        94
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        32,
                        35,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141
                    ],
                    "('org.apache.commons.math#FunctionEvaluationException', 'getArgument')": [
                        149,
                        150
                    ]
                }
            },
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        52,
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        52,
                        53,
                        144,
                        145,
                        146,
                        147
                    ]
                }
            }
        }
    },
    "187dd35c9a6a4c727dbaa64ea4bf86a819621e42": {
        "authored_data": "2009 Mar 24 22:05",
        "commit.message": "use a single set of consistent functions definitions in the analysis package\ninstead of one set in the analysis and another one in optimization\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758046 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "31e9c848f2dbb3619bb15a694c111834eb792d39",
        "changes": {
            "src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java": {
                "old": {
                    "(None, None)": [
                        26
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        28
                    ]
                }
            }
        }
    },
    "31e9c848f2dbb3619bb15a694c111834eb792d39": {
        "authored_data": "2009 Mar 22 13:19",
        "commit.message": "fixed a forgotten counter update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757183 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "87c0ddbc6e6143680ded83b3b63a6029ebc3b8ba",
        "changes": {
            "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "new": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        186
                    ]
                }
            }
        }
    },
    "87c0ddbc6e6143680ded83b3b63a6029ebc3b8ba": {
        "authored_data": "2009 Mar 22 13:00",
        "commit.message": "separated iteration counter from function evaluation counters,\nsome optimizers are based on gradient/jacobian only and cannot\nreliably be protected by monitoring the objective function calls.\n\nWe now have two or three counters for each algorithm:\n - iteration counter, which is checked against a max allowance\n   to prevent infinite loops if no convergence is reached\n - objective function evaluations, for user information only\n - objective function gradient/jacobian if the function is\n   differentiable, for user information only\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@757181 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "cfa4345431da001aa9f1d72cb25c5527bf159ded",
        "changes": {
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        121,
                        122
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        121
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', None)": [
                        41,
                        49,
                        50,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        121,
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'setMaxEvaluations(int)')": [
                        119,
                        120
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'getMaxEvaluations')": [
                        124,
                        125
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'optimize(ScalarDifferentiableObjectiveFunction,GoalType,double)')": [
                        144,
                        145,
                        151,
                        160
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', None)": [
                        41,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        55,
                        56,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        124,
                        125,
                        126,
                        129,
                        130,
                        131,
                        134,
                        135,
                        136
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'setMaxIterations(int)')": [
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'getMaxIterations')": [
                        127,
                        128
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'getIterations')": [
                        132,
                        133
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'getGradientEvaluations')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarDifferentiableOptimizer', 'optimize(ScalarDifferentiableObjectiveFunction,GoalType,double)')": [
                        162,
                        163,
                        164,
                        165,
                        171,
                        180,
                        181,
                        182
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', None)": [
                        41,
                        48,
                        49,
                        50,
                        73,
                        115,
                        116,
                        117,
                        120,
                        121,
                        122
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', 'setMaxEvaluations(int)')": [
                        118,
                        119
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', 'getMaxEvaluations')": [
                        123,
                        124
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', 'optimize(ScalarObjectiveFunction,GoalType,double)')": [
                        143,
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', None)": [
                        41,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        75,
                        76,
                        119,
                        120,
                        121,
                        124,
                        125,
                        126,
                        129,
                        130,
                        131
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', 'setMaxIterations(int)')": [
                        117,
                        118
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', 'getMaxIterations')": [
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', 'getIterations')": [
                        127,
                        128
                    ],
                    "('org.apache.commons.math.optimization#MultiStartScalarOptimizer', 'optimize(ScalarObjectiveFunction,GoalType,double)')": [
                        152,
                        153,
                        160,
                        169
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', None)": [
                        41,
                        51,
                        52,
                        53,
                        78,
                        125,
                        126,
                        127,
                        130,
                        131,
                        132
                    ],
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', 'setMaxEvaluations(int)')": [
                        128,
                        129
                    ],
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', 'getMaxEvaluations')": [
                        133,
                        134
                    ],
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', 'optimize(VectorialDifferentiableObjectiveFunction,double,double,double)')": [
                        153,
                        154,
                        161
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', None)": [
                        41,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        79,
                        80,
                        124,
                        125,
                        126,
                        129,
                        130,
                        131,
                        134,
                        135,
                        136
                    ],
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', 'setMaxIterations(int)')": [
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', 'getMaxIterations')": [
                        127,
                        128
                    ],
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', 'getIterations')": [
                        132,
                        133
                    ],
                    "('org.apache.commons.math.optimization#MultiStartVectorialDifferentiableOptimizer', 'optimize(VectorialDifferentiableObjectiveFunction,double,double,double)')": [
                        162,
                        163,
                        164,
                        171,
                        180
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/OptimizationException.java": {
                "old": {
                    "('org.apache.commons.math.optimization#OptimizationException', None)": [
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#OptimizationException', None)": [
                        33,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    "(None, None)": [
                        51,
                        52
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        32,
                        34,
                        35,
                        36,
                        37,
                        39,
                        40,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        57,
                        58,
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        44,
                        45,
                        46,
                        48,
                        50,
                        54,
                        55,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/ScalarOptimizer.java": {
                "old": {
                    "(None, None)": [
                        32,
                        34,
                        35,
                        36,
                        37,
                        39,
                        40,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        57,
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        44,
                        45,
                        46,
                        48,
                        50,
                        54,
                        60
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        42,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        36,
                        38,
                        39,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "(None, None)": [
                        31,
                        68
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        98,
                        100,
                        101,
                        102,
                        110,
                        111,
                        213,
                        214,
                        215,
                        282,
                        283,
                        284,
                        285,
                        294
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setMaxEvaluations(int)')": [
                        211,
                        212
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getMaxEvaluations')": [
                        216,
                        217
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ScalarObjectiveFunction,GoalType,double)')": [
                        232,
                        259,
                        260,
                        261,
                        262,
                        279,
                        280,
                        281
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getEvaluations')": [
                        286,
                        287
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        32,
                        69
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        114,
                        115,
                        217,
                        218,
                        219,
                        222,
                        223,
                        224,
                        227,
                        228,
                        229,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        303,
                        310
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setMaxIterations(int)')": [
                        215,
                        216
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getMaxIterations')": [
                        220,
                        221
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getIterations')": [
                        225,
                        226
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getEvaluations')": [
                        230,
                        231
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ScalarObjectiveFunction,GoalType,double)')": [
                        246,
                        268,
                        274,
                        275,
                        276
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'incrementIterationsCounter')": [
                        299,
                        300,
                        301,
                        302
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        65,
                        66,
                        96,
                        97,
                        98,
                        99
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        65,
                        66,
                        67
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/NelderMead.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        76
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        77,
                        78,
                        79
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        53,
                        54,
                        55,
                        102,
                        103,
                        104,
                        105,
                        108,
                        109,
                        110,
                        156,
                        157,
                        158,
                        161,
                        162,
                        167,
                        168
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'setMaxEvaluations(int)')": [
                        106,
                        107
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getMaxEvaluations')": [
                        111,
                        112
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateJacobian')": [
                        141
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'incrementJacobianEvaluationsCounter')": [
                        159,
                        160
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177
                    ],
                    "(None, None)": [
                        330
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        338
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        106,
                        107,
                        108,
                        109,
                        112,
                        113,
                        114,
                        117,
                        118,
                        119,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        153,
                        154
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'setMaxIterations(int)')": [
                        110,
                        111
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getMaxIterations')": [
                        115,
                        116
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getIterations')": [
                        120,
                        121
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'incrementIterationsCounter')": [
                        148,
                        149,
                        150,
                        151,
                        152
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateJacobian')": [
                        163
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        184
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(VectorialDifferentiableObjectiveFunction,double,double,double)')": [
                        308
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        56
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        70,
                        71,
                        125
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        56
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        70,
                        71,
                        72,
                        126
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        149,
                        159
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        149,
                        159
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        239,
                        240
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        97,
                        98
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        150,
                        151
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        183,
                        184
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        97,
                        98
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        150,
                        151
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        183,
                        184
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        97,
                        98
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        150,
                        151
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        183,
                        184
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        97,
                        98
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        150,
                        151
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        183,
                        184
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        109
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        125
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        148
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        167
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        190
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNonInversible')": [
                        213
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        233
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        270
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        293
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        314
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentEquations')": [
                        333
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes')": [
                        344
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMaxIterations')": [
                        385
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        407
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingBadInit')": [
                        461
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        109
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        125
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        148
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        167
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        190
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNonInversible')": [
                        213
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        233
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        270
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        293
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        314
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentEquations')": [
                        333
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes')": [
                        344
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMaxIterations')": [
                        385
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        407
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingBadInit')": [
                        461
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(VectorialDifferentiableObjectiveFunction,double,int,double,double,double,boolean)')": [
                        382
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(VectorialDifferentiableObjectiveFunction,double,int,double,double,double,boolean)')": [
                        382
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackKowalikOsborne')": [
                        222
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        508
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackKowalikOsborne')": [
                        222
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        508
                    ]
                }
            }
        }
    }
}