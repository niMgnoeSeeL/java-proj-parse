{
    "0cb01403a1b3eebe97adb97b71e2e5115422e5be": {
        "authored_data": "2009 Oct 16 14:51",
        "commit.message": "tighten checkstyle rules: declaring multiple variables in one statement is now forbidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@825919 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "88885e7a1c9409e22f4fd4c19378eb5bebcd228f",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        69,
                        70,
                        71,
                        78,
                        83,
                        84,
                        85,
                        86,
                        87,
                        99
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        75,
                        80,
                        81,
                        82,
                        83,
                        84
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'stage(UnivariateRealFunction,double,double,int)')": [
                        80,
                        81,
                        82,
                        87,
                        88,
                        89,
                        90
                    ],
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        112,
                        113,
                        114,
                        119,
                        120,
                        121,
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'stage(UnivariateRealFunction,double,double,int)')": [
                        84,
                        85,
                        86,
                        87,
                        88
                    ],
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        114,
                        115,
                        116
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolator', 'interpolate(double,double)')": [
                        60,
                        61,
                        72,
                        73,
                        74,
                        75,
                        76
                    ],
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolator', 'computeDividedDifference(double,double)')": [
                        97,
                        99,
                        100,
                        101,
                        105,
                        106,
                        107,
                        108,
                        109,
                        111,
                        113,
                        114,
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolator', 'interpolate(double,double)')": [
                        70,
                        71,
                        73
                    ],
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolator', 'computeDividedDifference(double,double)')": [
                        93,
                        98,
                        100,
                        101,
                        103,
                        104,
                        105
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolator', 'smooth(double,double,double)')": [
                        280
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolator', 'smooth(double,double,double)')": [
                        280,
                        281,
                        282,
                        283
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatingFunction', None)": [
                        165,
                        166,
                        167,
                        168,
                        169,
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatingFunction', None)": [
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', None)": [
                        46,
                        47,
                        48
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'evaluate(double,double,double)')": [
                        161,
                        162,
                        163,
                        166,
                        167,
                        168,
                        169,
                        170,
                        175,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        195
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'computeCoefficients')": [
                        221,
                        222,
                        223,
                        224,
                        226,
                        231,
                        233,
                        234,
                        241,
                        242,
                        244,
                        245,
                        259,
                        265
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', None)": [
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'evaluate(double,double,double)')": [
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        178,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        198
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'computeCoefficients')": [
                        224,
                        225,
                        227,
                        232,
                        234,
                        235,
                        242,
                        243,
                        245,
                        246,
                        260,
                        266
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionNewtonForm', None)": [
                        46,
                        50
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionNewtonForm', 'computeCoefficients')": [
                        173,
                        176,
                        181,
                        182
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionNewtonForm', None)": [
                        46,
                        47,
                        48,
                        49,
                        50,
                        54
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionNewtonForm', 'computeCoefficients')": [
                        177,
                        180,
                        185,
                        186
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        150,
                        151,
                        154,
                        155,
                        156,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        170,
                        171,
                        174,
                        211
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve2(UnivariateRealFunction,double,double)')": [
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        294,
                        295,
                        296,
                        298,
                        299,
                        300,
                        301,
                        302,
                        305,
                        306,
                        310,
                        313,
                        324,
                        327,
                        338,
                        339,
                        340,
                        342
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        159,
                        160,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        174,
                        175,
                        178
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve2(UnivariateRealFunction,double,double)')": [
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        298,
                        299,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        310,
                        311,
                        315,
                        318,
                        329,
                        332,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#RiddersSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        128,
                        129,
                        130,
                        131,
                        134,
                        135,
                        139,
                        142,
                        143,
                        148,
                        149,
                        150,
                        151,
                        152,
                        155,
                        169,
                        171,
                        172,
                        176,
                        178,
                        179
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#RiddersSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        128,
                        129,
                        130,
                        131,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        143,
                        146,
                        147,
                        152,
                        153,
                        154,
                        155,
                        156,
                        159,
                        173,
                        174,
                        176,
                        177,
                        178,
                        179,
                        183,
                        184,
                        186,
                        187,
                        188,
                        189
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateJacobian')": [
                        127
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateResidualsAndCost')": [
                        157
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateJacobian')": [
                        127,
                        128
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateResidualsAndCost')": [
                        158,
                        159
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'estimate(EstimationProblem)')": [
                        259,
                        318,
                        382
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMParameter(double,double,double,double,double,double)')": [
                        503,
                        528,
                        538,
                        553
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMDirection(double,double,double,double)')": [
                        694,
                        697,
                        701,
                        709,
                        716,
                        718
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'qTy(double)')": [
                        867,
                        871
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'estimate(EstimationProblem)')": [
                        259,
                        260,
                        319,
                        320,
                        322,
                        385,
                        386,
                        388
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMParameter(double,double,double,double,double,double)')": [
                        508,
                        509,
                        511,
                        535,
                        536,
                        546,
                        547,
                        549,
                        563,
                        564,
                        566
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMDirection(double,double,double,double)')": [
                        706,
                        707,
                        710,
                        714,
                        722,
                        729,
                        731
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'qTy(double)')": [
                        880,
                        881,
                        883,
                        886,
                        887,
                        889
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'toBlocksLayout(T)')": [
                        229,
                        233,
                        243,
                        245
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'createBlocksLayout(Field,int,int)')": [
                        276,
                        280
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'add(FieldMatrix)')": [
                        340,
                        341
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'subtract(FieldMatrix)')": [
                        411,
                        412
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(FieldMatrix)')": [
                        531,
                        536
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(BlockFieldMatrix)')": [
                        593
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getSubMatrix(int,int,int,int)')": [
                        679,
                        681,
                        746
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'transpose')": [
                        1276,
                        1278,
                        1279
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'operate(T)')": [
                        1326
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor)')": [
                        1415
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor)')": [
                        1438
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1466
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1494
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor)')": [
                        1508,
                        1511,
                        1515,
                        1516,
                        1518,
                        1519
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor)')": [
                        1530,
                        1533,
                        1537,
                        1538,
                        1540,
                        1541
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1566
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1594
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'toBlocksLayout(T)')": [
                        229,
                        230,
                        234,
                        244,
                        245,
                        247,
                        248,
                        249,
                        250
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'createBlocksLayout(Field,int,int)')": [
                        281,
                        282,
                        286,
                        291
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'add(FieldMatrix)')": [
                        347,
                        348,
                        349,
                        351
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'subtract(FieldMatrix)')": [
                        420,
                        421,
                        422,
                        424
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(FieldMatrix)')": [
                        542,
                        543,
                        548,
                        549,
                        551
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(BlockFieldMatrix)')": [
                        607,
                        608
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getSubMatrix(int,int,int,int)')": [
                        694,
                        695,
                        697,
                        698,
                        763,
                        764,
                        765,
                        766,
                        767
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'transpose')": [
                        1297,
                        1298,
                        1300,
                        1301,
                        1302,
                        1303,
                        1304
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'operate(T)')": [
                        1351,
                        1352
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor)')": [
                        1441,
                        1442,
                        1444
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor)')": [
                        1466,
                        1467,
                        1469
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1496,
                        1497,
                        1499
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1526,
                        1527,
                        1529
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor)')": [
                        1542,
                        1543,
                        1546,
                        1550,
                        1551,
                        1552,
                        1554,
                        1555,
                        1556,
                        1557
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor)')": [
                        1568,
                        1569,
                        1572,
                        1576,
                        1577,
                        1578,
                        1580,
                        1581,
                        1582,
                        1583
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1608,
                        1609,
                        1611
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1638,
                        1639,
                        1641
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'toBlocksLayout(double)')": [
                        223,
                        227,
                        237,
                        239
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'createBlocksLayout(int,int)')": [
                        266,
                        270
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'add(RealMatrix)')": [
                        330,
                        331
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'subtract(RealMatrix)')": [
                        401,
                        402
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(RealMatrix)')": [
                        520,
                        525,
                        528
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(BlockRealMatrix)')": [
                        580,
                        599
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getSubMatrix(int,int,int,int)')": [
                        702,
                        704,
                        769
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'transpose')": [
                        1297,
                        1299,
                        1300
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'operate(double)')": [
                        1346
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor)')": [
                        1432
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor)')": [
                        1455
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1483
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1511
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor)')": [
                        1525,
                        1528,
                        1532,
                        1533,
                        1535,
                        1536
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor)')": [
                        1547,
                        1550,
                        1554,
                        1555,
                        1557,
                        1558
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1583
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1611
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'toBlocksLayout(double)')": [
                        223,
                        224,
                        228,
                        238,
                        239,
                        241,
                        242,
                        243,
                        244
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'createBlocksLayout(int,int)')": [
                        271,
                        272,
                        276,
                        281
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'add(RealMatrix)')": [
                        337,
                        338,
                        339,
                        341
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'subtract(RealMatrix)')": [
                        410,
                        411,
                        412,
                        414
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(RealMatrix)')": [
                        531,
                        532,
                        537,
                        538,
                        540,
                        542,
                        543
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(BlockRealMatrix)')": [
                        595,
                        596,
                        615,
                        616
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getSubMatrix(int,int,int,int)')": [
                        719,
                        720,
                        722,
                        723,
                        788,
                        789,
                        790,
                        791,
                        792,
                        793
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'transpose')": [
                        1321,
                        1322,
                        1324,
                        1325,
                        1326,
                        1327,
                        1328
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'operate(double)')": [
                        1374,
                        1375
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor)')": [
                        1461,
                        1462,
                        1464
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor)')": [
                        1486,
                        1487,
                        1489
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1516,
                        1517,
                        1519
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1546,
                        1547,
                        1549
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor)')": [
                        1562,
                        1563,
                        1566,
                        1570,
                        1571,
                        1572,
                        1574,
                        1575,
                        1576,
                        1577
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor)')": [
                        1588,
                        1589,
                        1592,
                        1596,
                        1597,
                        1598,
                        1600,
                        1601,
                        1602,
                        1603
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1628,
                        1629,
                        1631
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1658,
                        1659,
                        1661
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenvalues')": [
                        673
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'flipIfWarranted(int,int)')": [
                        1129
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenvector(double,double,double)')": [
                        1737
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'stationaryQuotientDifferenceWithShift(double,double,double)')": [
                        1787
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'progressiveQuotientDifferenceWithShift(double,double,double)')": [
                        1813
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenvalues')": [
                        673,
                        674,
                        678
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'flipIfWarranted(int,int)')": [
                        1131,
                        1132,
                        1138
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenvector(double,double,double)')": [
                        1741,
                        1742,
                        1748
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'stationaryQuotientDifferenceWithShift(double,double,double)')": [
                        1793,
                        1794,
                        1803
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'progressiveQuotientDifferenceWithShift(double,double,double)')": [
                        1821,
                        1822,
                        1831
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        420,
                        421,
                        422
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        420,
                        421,
                        422,
                        423
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        211
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        211,
                        212,
                        216
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        223
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMParameter(double,double,double,double,double,double)')": [
                        495
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMDirection(double,double,double,double)')": [
                        661,
                        664,
                        668,
                        676,
                        683,
                        685
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        223,
                        224
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMParameter(double,double,double,double,double,double)')": [
                        496,
                        497
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMDirection(double,double,double,double)')": [
                        663,
                        664,
                        667,
                        671,
                        679,
                        686,
                        688
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'fct(double)')": [
                        221,
                        222,
                        223,
                        224,
                        229,
                        230,
                        231,
                        232,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'fct(double)')": [
                        221,
                        222,
                        223,
                        224,
                        229,
                        230,
                        231,
                        232,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'fft(Complex)')": [
                        347,
                        348,
                        352,
                        356,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        384,
                        385,
                        389,
                        390,
                        391,
                        392,
                        398
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'fft(Complex)')": [
                        347,
                        348,
                        352,
                        356,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        384,
                        385,
                        389,
                        390,
                        391,
                        392,
                        398
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastSineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastSineTransformer', 'fst(double)')": [
                        215,
                        223,
                        224,
                        225,
                        226,
                        230,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastSineTransformer', 'fst(double)')": [
                        215,
                        223,
                        224,
                        225,
                        226,
                        230,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtils', 'binomialCoefficient(int,int)')": [
                        208,
                        214,
                        221,
                        228,
                        229
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtils', 'binomialCoefficient(int,int)')": [
                        208,
                        209,
                        211,
                        216,
                        217,
                        224,
                        226,
                        232,
                        233,
                        234,
                        236
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java": {
                "old": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'get(int)')": [
                        189
                    ],
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'containsKey(int)')": [
                        218
                    ],
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'remove(int)')": [
                        361
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'get(int)')": [
                        189,
                        190
                    ],
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'containsKey(int)')": [
                        219,
                        220
                    ],
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'remove(int)')": [
                        363,
                        364
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java": {
                "old": {
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'get(int)')": [
                        201
                    ],
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'containsKey(int)')": [
                        230
                    ],
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'remove(int)')": [
                        373
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'get(int)')": [
                        201,
                        202
                    ],
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'containsKey(int)')": [
                        231,
                        232
                    ],
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'remove(int)')": [
                        375,
                        376
                    ]
                }
            }
        }
    },
    "88885e7a1c9409e22f4fd4c19378eb5bebcd228f": {
        "authored_data": "2009 Oct 16 14:47",
        "commit.message": "fixed a checkstyle warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@825917 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "925305f0fa55126cb59b0eae4468bedcb66dc16c",
        "changes": {
            "src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#OneWayAnovaImpl', None)": [
                        202
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.inference#OneWayAnovaImpl', None)": [
                        202
                    ]
                }
            }
        }
    },
    "925305f0fa55126cb59b0eae4468bedcb66dc16c": {
        "authored_data": "2009 Oct 16 07:12",
        "commit.message": "removed a Math.min computation that could be avoided\nimproved javadoc \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@825784 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "dd9b7b477a8ca235cc3dc69e9f58f804417fa117",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', None)": [
                        278
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'verifyInterpolationArray(double,double)')": [
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', None)": [
                        277,
                        278,
                        279,
                        280,
                        282,
                        283
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'verifyInterpolationArray(double,double)')": [
                        291,
                        292,
                        293,
                        298,
                        299,
                        300,
                        301
                    ],
                    "(None, None)": [
                        302,
                        303
                    ]
                }
            }
        }
    },
    "dd9b7b477a8ca235cc3dc69e9f58f804417fa117": {
        "authored_data": "2009 Oct 13 15:56",
        "commit.message": "improved array structure in Romberg integrator\nsince the integrator uses only two rows at a time, we allocate only two arrays and reuse them\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@824822 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "e9758259969de8e087f8a091ebde74236f254847",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#RombergIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        70,
                        71,
                        72,
                        73,
                        80,
                        81,
                        82,
                        83,
                        84,
                        86,
                        87,
                        89,
                        91,
                        92,
                        93,
                        100
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#RombergIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        70,
                        71,
                        72,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        91,
                        92,
                        93,
                        95,
                        97,
                        98
                    ]
                }
            }
        }
    },
    "e9758259969de8e087f8a091ebde74236f254847": {
        "authored_data": "2009 Oct 13 14:30",
        "commit.message": "tightened checkstyle rules\ncatching top level exceptions (Exception, Throwable and RuntimeException) is now forbidden\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@824783 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "50e9a948aabe6ef1bb5d3a413fb9d8ca3cd9cf4b",
        "changes": {
            "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(double)')": [
                        121
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(URL)')": [
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(File)')": [
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', None)": [
                        207,
                        209,
                        210,
                        214,
                        216,
                        217,
                        251,
                        263,
                        264,
                        265,
                        266,
                        267,
                        269,
                        270,
                        282,
                        283,
                        284,
                        285,
                        286,
                        318,
                        319,
                        320,
                        321,
                        322,
                        330,
                        331,
                        332,
                        333,
                        334,
                        336,
                        337
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'fillBinStats(Object)')": [
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(double)')": [
                        121
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(URL)')": [
                        139
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(File)')": [
                        166
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', None)": [
                        184,
                        188,
                        190,
                        191,
                        195,
                        197,
                        198,
                        199,
                        200,
                        234,
                        246,
                        247,
                        249,
                        261,
                        262,
                        294,
                        295,
                        303,
                        304,
                        306
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'fillBinStats(Object)')": [
                        339
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/EmpiricalDistributionTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionTest', 'testLoadNullDoubleArray')": [
                        198,
                        199
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#EmpiricalDistributionTest', 'testLoadNullDoubleArray')": [
                        197,
                        198
                    ]
                }
            }
        }
    },
    "50e9a948aabe6ef1bb5d3a413fb9d8ca3cd9cf4b": {
        "authored_data": "2009 Oct 13 13:48",
        "commit.message": "fixed checkstyle warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@824760 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "2c8a114f766d05929e908fd79c5e4baf5a3841ae",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java": {
                "old": {
                    "(None, None)": [
                        20,
                        22,
                        26,
                        29
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatingFunction', 'value(double)')": [
                        187,
                        188
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        27
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatingFunction', 'value(double)')": [
                        186
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatingFunction', None)": [
                        236
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolator', None)": [
                        110
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolator', 'setMicropshereElements(int)')": [
                        113,
                        119
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolator', None)": [
                        110
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolator', 'setMicropshereElements(int)')": [
                        113,
                        119
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java": {
                "old": {
                    "(None, None)": [
                        24,
                        43,
                        44
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        43
                    ]
                }
            }
        }
    },
    "2c8a114f766d05929e908fd79c5e4baf5a3841ae": {
        "authored_data": "2009 Oct 12 02:04",
        "commit.message": "Implemented alternative algorithm for generating poisson deviates when the mean is large. JIRA: MATH-294.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@824214 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "5fb5e80a151513a91cc961221e96267100abe1f4",
        "changes": {
            "src/main/java/org/apache/commons/math/random/RandomDataImpl.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataImpl', None)": [
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextPoisson(double)')": [
                        359,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        433,
                        434,
                        436,
                        437,
                        438
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#RandomDataImpl', None)": [
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextPoisson(double)')": [
                        346,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        427
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/RandomDataTest.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPoissionConistency')": [
                        231,
                        232,
                        237
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        238,
                        370,
                        371,
                        372,
                        373,
                        378
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPoissonLargeMean')": [
                        374,
                        375,
                        376,
                        377
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPoissionConistency')": [
                        231,
                        232,
                        235,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        244,
                        376
                    ]
                }
            }
        }
    },
    "5fb5e80a151513a91cc961221e96267100abe1f4": {
        "authored_data": "2009 Oct 11 21:45",
        "commit.message": "Added (disabled) test case demonstrating MATH-282 impact on poisson distribution for large means.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@824183 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "f5398ad3cf1447854d7f4c720f5d255f5012531b",
        "changes": {
            "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#PoissonDistributionTest', 'testLargeMeanCumulativeProbability')": [
                        156,
                        162
                    ]
                },
                "new": {
                    "('org.apache.commons.math.distribution#PoissonDistributionTest', 'testLargeMeanCumulativeProbability')": [
                        154,
                        155,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        170
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionTest', None)": [
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionTest', 'testCumulativeProbabilitySpecial')": [
                        179
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionTest', 'checkProbability(PoissonDistribution,double)')": [
                        192,
                        193,
                        194,
                        195,
                        196,
                        197
                    ]
                }
            }
        }
    },
    "f5398ad3cf1447854d7f4c720f5d255f5012531b": {
        "authored_data": "2009 Oct 07 18:56",
        "commit.message": "delay message build until really needed\nthis allows not wasting time dealing with resources, strings and formatting when the exception is discarded and its message not used\nthanks to Gilles for the suggestion\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@822850 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "2ed606cfc0bf85aae8aaf7e77409c31cc9aa86c0",
        "changes": {
            "src/main/java/org/apache/commons/math/MathException.java": {
                "old": {
                    "('org.apache.commons.math#MathException', None)": [
                        56,
                        69,
                        98,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        138,
                        139
                    ],
                    "('org.apache.commons.math#MathException', 'buildMessage(Locale,String,Object)')": [
                        136,
                        137
                    ],
                    "('org.apache.commons.math#MathException', 'getMessage(Locale)')": [
                        165,
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathException', None)": [
                        96,
                        154,
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.math#MathException', 'getMessage(Locale)')": [
                        152,
                        153
                    ],
                    "('org.apache.commons.math#MathException', 'getMessage')": [
                        158,
                        159
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/MathRuntimeException.java": {
                "old": {
                    "('org.apache.commons.math#MathRuntimeException', None)": [
                        60,
                        61,
                        62,
                        89,
                        90,
                        91
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArithmeticException(String,Object)')": [
                        196
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArrayIndexOutOfBoundsException(String,Object)')": [
                        219
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createEOFException(String,Object)')": [
                        242
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalArgumentException(String,Object)')": [
                        282
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalStateException(String,Object)')": [
                        318
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createConcurrentModificationException(String,Object)')": [
                        341
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createNoSuchElementException(String,Object)')": [
                        364
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createNullPointerException(String,Object)')": [
                        387
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createParseException(int,String,Object)')": [
                        413
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createInternalError(Throwable)')": [
                        436
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathRuntimeException', None)": [
                        60,
                        61,
                        88,
                        89,
                        90,
                        155,
                        156,
                        157,
                        158
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'getMessage')": [
                        159,
                        160
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArithmeticException(String,Object)')": [
                        201,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArrayIndexOutOfBoundsException(String,Object)')": [
                        230,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createEOFException(String,Object)')": [
                        259,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalArgumentException(String,Object)')": [
                        305,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalStateException(String,Object)')": [
                        347,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createConcurrentModificationException(String,Object)')": [
                        376,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createNoSuchElementException(String,Object)')": [
                        405,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createNullPointerException(String,Object)')": [
                        434,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createParseException(int,String,Object)')": [
                        466,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createInternalError(Throwable)')": [
                        495,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/MathConfigurationExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#MathConfigurationExceptionTest', 'testConstructor')": [
                        32,
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathConfigurationExceptionTest', 'testConstructor')": [
                        32,
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/MathExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#MathExceptionTest', 'testConstructor')": [
                        35,
                        36
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathExceptionTest', 'testConstructor')": [
                        35,
                        36
                    ]
                }
            }
        }
    },
    "2ed606cfc0bf85aae8aaf7e77409c31cc9aa86c0": {
        "authored_data": "2009 Oct 06 19:29",
        "commit.message": "fixed javadoc typo\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@822454 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "798518841b0802ace365eba80520172de7bf298c",
        "changes": {
            "src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java": {
                "old": {
                    "(None, None)": [
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ]
                }
            }
        }
    }
}