{
    "e42da5d9d21438c220768464b6a1f5b36bad92a5": {
        "authored_data": "2013 Dec 07 13:08",
        "commit.message": "[MATH-1068] Changed integer calculations with potential overflows to long.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1548907 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "8e5867eda8328e4cb2e103d098d0c9f3c2fab50e",
        "changes": {
            "src/main/java/org/apache/commons/math3/stat/correlation/KendallsCorrelation.java": {
                "old": {
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelation', 'correlation(double,double)')": [
                        163,
                        178,
                        179,
                        180,
                        181,
                        190,
                        194,
                        196,
                        201,
                        202,
                        242,
                        243,
                        250,
                        255
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelation', 'correlation(double,double)')": [
                        163,
                        178,
                        179,
                        180,
                        181,
                        190,
                        194,
                        196,
                        201,
                        202,
                        242,
                        243,
                        250,
                        255
                    ],
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelation', None)": [
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268
                    ],
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelation', 'sum(long)')": [
                        269,
                        270
                    ],
                    "(None, None)": [
                        271
                    ]
                }
            }
        }
    },
    "8e5867eda8328e4cb2e103d098d0c9f3c2fab50e": {
        "authored_data": "2013 Dec 03 23:50",
        "commit.message": "[MATH-1070] Fix Precision.round(float, int, int) for RoundingMode ROUND_UP. Thanks to  Oleksandr Muliarevych.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1547649 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "ba3c2201c6689818c457b5a03d14eb75af55063c",
        "changes": {
            "src/main/java/org/apache/commons/math3/util/Precision.java": {
                "old": {
                    "('org.apache.commons.math3.util#Precision', 'roundUnscaled(double,double,int)')": [
                        494,
                        495,
                        519
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.util#Precision', 'roundUnscaled(double,double,int)')": [
                        494,
                        518,
                        519,
                        520,
                        521
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/util/PrecisionTest.java": {
                "new": {
                    "('org.apache.commons.math3.util#PrecisionTest', 'testRoundFloat')": [
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499
                    ]
                }
            }
        }
    },
    "ba3c2201c6689818c457b5a03d14eb75af55063c": {
        "authored_data": "2013 Dec 03 23:03",
        "commit.message": "[MATH-1059] Use FastMath instead of Math.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1547633 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "b12610d35e7798c66fc1d9b0811d10aadb87569d",
        "changes": {
            "src/main/java/org/apache/commons/math3/analysis/function/Logistic.java": {
                "old": {
                    "('org.apache.commons.math3.analysis.function#Logistic', None)": [
                        171
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.analysis.function#Logistic', None)": [
                        171
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java": {
                "old": {
                    "('org.apache.commons.math3.distribution#AbstractIntegerDistribution', 'inverseCumulativeProbability(double)')": [
                        133,
                        138
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.distribution#AbstractIntegerDistribution', 'inverseCumulativeProbability(double)')": [
                        133,
                        138
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/distribution/KolmogorovSmirnovDistribution.java": {
                "old": {
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'cdf(double,boolean)')": [
                        172
                    ],
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'exactK(double)')": [
                        196
                    ],
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'roundedK(double)')": [
                        228
                    ],
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'createH(double)')": [
                        269
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'cdf(double,boolean)')": [
                        173
                    ],
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'exactK(double)')": [
                        197
                    ],
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'roundedK(double)')": [
                        229
                    ],
                    "('org.apache.commons.math3.distribution#KolmogorovSmirnovDistribution', 'createH(double)')": [
                        270
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java": {
                "old": {
                    "('org.apache.commons.math3.distribution.fitting#MultivariateNormalMixtureExpectationMaximization', 'fit(MixtureMultivariateNormalDistribution,int,double)')": [
                        168,
                        200,
                        254
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        35
                    ],
                    "('org.apache.commons.math3.distribution.fitting#MultivariateNormalMixtureExpectationMaximization', 'fit(MixtureMultivariateNormalDistribution,int,double)')": [
                        170,
                        202,
                        256
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/fraction/BigFraction.java": {
                "old": {
                    "('org.apache.commons.math3.fraction#BigFraction', 'doubleValue')": [
                        692,
                        693
                    ],
                    "('org.apache.commons.math3.fraction#BigFraction', 'floatValue')": [
                        745,
                        746
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.fraction#BigFraction', 'doubleValue')": [
                        692,
                        693
                    ],
                    "('org.apache.commons.math3.fraction#BigFraction', 'floatValue')": [
                        745,
                        746
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/fraction/ProperFractionFormat.java": {
                "old": {
                    "('org.apache.commons.math3.fraction#ProperFractionFormat', 'format(Fraction,StringBuffer,FieldPosition)')": [
                        104,
                        108,
                        109
                    ],
                    "('org.apache.commons.math3.fraction#ProperFractionFormat', 'parse(String,ParsePosition)')": [
                        218
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math3.fraction#ProperFractionFormat', 'format(Fraction,StringBuffer,FieldPosition)')": [
                        105,
                        109
                    ],
                    "('org.apache.commons.math3.fraction#ProperFractionFormat', 'parse(String,ParsePosition)')": [
                        218
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/optim/univariate/BracketFinder.java": {
                "old": {
                    "('org.apache.commons.math3.optim.univariate#BracketFinder', 'search(UnivariateFunction,GoalType,double,double)')": [
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('org.apache.commons.math3.optim.univariate#BracketFinder', 'search(UnivariateFunction,GoalType,double,double)')": [
                        140
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/optimization/univariate/BracketFinder.java": {
                "old": {
                    "('org.apache.commons.math3.optimization.univariate#BracketFinder', 'search(UnivariateFunction,GoalType,double,double)')": [
                        141
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('org.apache.commons.math3.optimization.univariate#BracketFinder', 'search(UnivariateFunction,GoalType,double,double)')": [
                        142
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/random/AbstractWell.java": {
                "old": {
                    "('org.apache.commons.math3.random#AbstractWell', 'setSeed(int)')": [
                        159
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math3.random#AbstractWell', 'setSeed(int)')": [
                        161
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/random/ISAACRandom.java": {
                "old": {
                    "('org.apache.commons.math3.random#ISAACRandom', 'setSeed(int)')": [
                        127
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.math3.random#ISAACRandom', 'setSeed(int)')": [
                        129
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/stat/inference/GTest.java": {
                "old": {
                    "('org.apache.commons.math3.stat.inference#GTest', 'g(double,long)')": [
                        98
                    ],
                    "('org.apache.commons.math3.stat.inference#GTest', 'entropy(long)')": [
                        273,
                        300
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.stat.inference#GTest', 'g(double,long)')": [
                        98
                    ],
                    "('org.apache.commons.math3.stat.inference#GTest', 'entropy(long)')": [
                        273,
                        300
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/stat/regression/AbstractMultipleLinearRegression.java": {
                "old": {
                    "('org.apache.commons.math3.stat.regression#AbstractMultipleLinearRegression', 'estimateRegressionStandardError')": [
                        324
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.stat.regression#AbstractMultipleLinearRegression', 'estimateRegressionStandardError')": [
                        324
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/stat/regression/MillerUpdatingRegression.java": {
                "old": {
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'tolset')": [
                        345,
                        352
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'regcf(int)')": [
                        386
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'singcheck')": [
                        416,
                        425
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'getPartialCorrelations(int)')": [
                        628,
                        638,
                        648
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'vmove(int,int)')": [
                        732,
                        735
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'getDiagonalOfHatMatrix(double)')": [
                        871
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'tolset')": [
                        345,
                        352
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'regcf(int)')": [
                        386
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'singcheck')": [
                        416,
                        425
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'getPartialCorrelations(int)')": [
                        628,
                        638,
                        648
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'vmove(int,int)')": [
                        732,
                        735
                    ],
                    "('org.apache.commons.math3.stat.regression#MillerUpdatingRegression', 'getDiagonalOfHatMatrix(double)')": [
                        871
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java": {
                "old": {
                    "('org.apache.commons.math3.util#ArithmeticUtils', 'gcdPositive(int,int)')": [
                        345
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.util#ArithmeticUtils', 'gcdPositive(int,int)')": [
                        345
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/util/MathArrays.java": {
                "old": {
                    "('org.apache.commons.math3.util#MathArrays', 'safeNorm(double)')": [
                        597
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.util#MathArrays', 'safeNorm(double)')": [
                        597
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/analysis/function/SqrtTest.java": {
                "old": {
                    "('org.apache.commons.math3.analysis.function#SqrtTest', 'testComparison')": [
                        33
                    ],
                    "('org.apache.commons.math3.analysis.function#SqrtTest', 'testDerivativeComparison')": [
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.analysis.function#SqrtTest', 'testComparison')": [
                        33
                    ],
                    "('org.apache.commons.math3.analysis.function#SqrtTest', 'testDerivativeComparison')": [
                        49
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/analysis/integration/gauss/GaussianQuadratureAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math3.analysis.integration.gauss#GaussianQuadratureAbstractTest', 'testAllMonomials')": [
                        108
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math3.analysis.integration.gauss#GaussianQuadratureAbstractTest', 'testAllMonomials')": [
                        109
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/analysis/solvers/RegulaFalsiSolverTest.java": {
                "old": {
                    "('org.apache.commons.math3.analysis.solvers#RegulaFalsiSolverTest', 'testIssue631')": [
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math3.analysis.solvers#RegulaFalsiSolverTest', 'testIssue631')": [
                        52
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/complex/QuaternionTest.java": {
                "old": {
                    "('org.apache.commons.math3.complex#QuaternionTest', 'testNorm')": [
                        294,
                        297
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.complex#QuaternionTest', 'testNorm')": [
                        294,
                        297
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math3.fitting.leastsquares#LevenbergMarquardtOptimizerTest', None)": [
                        372,
                        373,
                        393,
                        394,
                        395,
                        396
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.fitting.leastsquares#LevenbergMarquardtOptimizerTest', None)": [
                        372,
                        373,
                        393,
                        394,
                        395,
                        396
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/linear/ConjugateGradientTest.java": {
                "old": {
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedSolution')": [
                        94
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedInPlaceSolutionWithInitialGuess')": [
                        120
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedSolutionWithInitialGuess')": [
                        146
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedResidual')": [
                        207
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testPreconditionedSolution')": [
                        323
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testPreconditionedResidual')": [
                        379,
                        380,
                        381,
                        385,
                        386,
                        387
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testPreconditionedSolution2')": [
                        431
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedSolution')": [
                        94
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedInPlaceSolutionWithInitialGuess')": [
                        120
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedSolutionWithInitialGuess')": [
                        146
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testUnpreconditionedResidual')": [
                        207
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testPreconditionedSolution')": [
                        323
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testPreconditionedResidual')": [
                        379,
                        380,
                        384
                    ],
                    "('org.apache.commons.math3.linear#ConjugateGradientTest', 'testPreconditionedSolution2')": [
                        428
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/linear/SymmLQTest.java": {
                "old": {
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testUnpreconditionedSolution')": [
                        260
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testUnpreconditionedInPlaceSolutionWithInitialGuess')": [
                        286
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testUnpreconditionedSolutionWithInitialGuess')": [
                        312
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testPreconditionedSolution')": [
                        424
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testPreconditionedSolution2')": [
                        470
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testUnpreconditionedSolution')": [
                        260
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testUnpreconditionedInPlaceSolutionWithInitialGuess')": [
                        286
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testUnpreconditionedSolutionWithInitialGuess')": [
                        312
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testPreconditionedSolution')": [
                        424
                    ],
                    "('org.apache.commons.math3.linear#SymmLQTest', 'testPreconditionedSolution2')": [
                        470
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/linear/UnmodifiableRealVectorAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math3.linear#UnmodifiableRealVectorAbstractTest', 'equals(double,double)')": [
                        88,
                        89,
                        90,
                        91,
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math3.linear#UnmodifiableRealVectorAbstractTest', 'equals(double,double)')": [
                        89,
                        90,
                        91,
                        92,
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math3.optim.nonlinear.vector.jacobian#LevenbergMarquardtOptimizerTest', None)": [
                        381,
                        382,
                        402,
                        403,
                        404,
                        405
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.optim.nonlinear.vector.jacobian#LevenbergMarquardtOptimizerTest', None)": [
                        381,
                        382,
                        402,
                        403,
                        404,
                        405
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math3.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        367,
                        368
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        367,
                        368
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math3.random#EmpiricalDistributionTest', 'findBin(double)')": [
                        416,
                        417,
                        419
                    ]
                },
                "new": {
                    "(None, None)": [
                        39
                    ],
                    "('org.apache.commons.math3.random#EmpiricalDistributionTest', 'findBin(double)')": [
                        417,
                        418,
                        420
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/random/RandomDataGeneratorTest.java": {
                "old": {
                    "('org.apache.commons.math3.random#RandomDataGeneratorTest', 'testConfig')": [
                        823,
                        824
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.random#RandomDataGeneratorTest', 'testConfig')": [
                        823
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/special/ErfTest.java": {
                "old": {
                    "('org.apache.commons.math3.special#ErfTest', 'testErfcMaple')": [
                        193
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.special#ErfTest', 'testErfcMaple')": [
                        193
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/StatUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math3.stat#StatUtilsTest', 'testNormalize1')": [
                        474
                    ],
                    "('org.apache.commons.math3.stat#StatUtilsTest', 'testNormalize2')": [
                        493
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.stat#StatUtilsTest', 'testNormalize1')": [
                        474
                    ],
                    "('org.apache.commons.math3.stat#StatUtilsTest', 'testNormalize2')": [
                        493
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/inference/GTestTest.java": {
                "old": {
                    "('org.apache.commons.math3.stat.inference#GTestTest', 'testRootLogLikelihood')": [
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math3.stat.inference#GTestTest', 'testRootLogLikelihood')": [
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/inference/TestUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math3.stat.inference#TestUtilsTest', 'testRootLogLikelihood')": [
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math3.stat.inference#TestUtilsTest', 'testRootLogLikelihood')": [
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        529
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java": {
                "old": {
                    "('org.apache.commons.math3.stat.regression#SimpleRegressionTest', 'equals(SimpleRegression,SimpleRegression,double)')": [
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math3.stat.regression#SimpleRegressionTest', 'equals(SimpleRegression,SimpleRegression,double)')": [
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/util/MathUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math3.util#MathUtilsTest', 'testReduce')": [
                        163
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.util#MathUtilsTest', 'testReduce')": [
                        163
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/util/PrecisionTest.java": {
                "old": {
                    "('org.apache.commons.math3.util#PrecisionTest', 'testRepresentableDelta')": [
                        509
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.util#PrecisionTest', 'testRepresentableDelta')": [
                        509
                    ]
                }
            }
        }
    },
    "b12610d35e7798c66fc1d9b0811d10aadb87569d": {
        "authored_data": "2013 Dec 01 19:17",
        "commit.message": "[MATH-1068] Avoid overflow in Kendalls correlation for large input arrays.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1546840 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "aff82362cf13646b0dfae6375c895df7d5ca6b6b",
        "changes": {
            "src/main/java/org/apache/commons/math3/stat/correlation/KendallsCorrelation.java": {
                "old": {
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelation', 'correlation(double,double)')": [
                        163,
                        257,
                        258
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelation', 'correlation(double,double)')": [
                        163,
                        257,
                        258,
                        259
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/correlation/KendallsCorrelationTest.java": {
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        260
                    ],
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelationTest', None)": [
                        253
                    ],
                    "('org.apache.commons.math3.stat.correlation#KendallsCorrelationTest', 'testLargeArray')": [
                        254,
                        255,
                        256,
                        257,
                        258,
                        259
                    ]
                }
            }
        }
    },
    "aff82362cf13646b0dfae6375c895df7d5ca6b6b": {
        "authored_data": "2013 Nov 28 11:41",
        "commit.message": "MATH-1067\nAvoid infinite recursion. Thanks to Florian Erhard.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1546350 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "c1ba07bb65f41afed35c12c12b40b4e8d03a408a",
        "changes": {
            "src/main/java/org/apache/commons/math3/special/Beta.java": {
                "old": {
                    "('org.apache.commons.math3.special#Beta', 'regularizedBeta(double,double,double,double,int)')": [
                        192,
                        193,
                        195,
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.special#Beta', 'regularizedBeta(double,double,double,double,int)')": [
                        192,
                        193,
                        195,
                        196,
                        197
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/special/BetaTest.java": {
                "new": {
                    "('org.apache.commons.math3.special#BetaTest', None)": [
                        142,
                        143,
                        144,
                        154
                    ],
                    "('org.apache.commons.math3.special#BetaTest', 'testMath1067')": [
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153
                    ]
                }
            }
        }
    },
    "c1ba07bb65f41afed35c12c12b40b4e8d03a408a": {
        "authored_data": "2013 Nov 20 18:57",
        "commit.message": "MATH-1014\n\"PolynomialCurveFitter\" as replacement of \"PolynomialFitter\". Some tests have\nbeen obsoleted by the refactoring (which hides the optimizer and thus avoids\nsome potential misuses).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1543906 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "54a7796ff234a9cbd2c66f8b1e5621f0898402f1",
        "changes": {
            "src/main/java/org/apache/commons/math3/fitting/PolynomialFitter.java": {
                "new": {
                    "(None, None)": [
                        29,
                        30,
                        32
                    ]
                }
            }
        }
    },
    "54a7796ff234a9cbd2c66f8b1e5621f0898402f1": {
        "authored_data": "2013 Nov 18 21:24",
        "commit.message": "[MATH-970] Added SolutionCallback to SimplexSolver to retrieve the best solution found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1543169 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "3a45bc5b6d9b884be25f98982c9cabcaecdba96c",
        "changes": {
            "src/main/java/org/apache/commons/math3/optim/linear/SimplexSolver.java": {
                "new": {
                    "(None, None)": [
                        21,
                        23
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolver', None)": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        168,
                        169
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolver', 'optimize(OptimizationData)')": [
                        139,
                        140,
                        141,
                        142
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolver', 'parseOptimizationData(OptimizationData)')": [
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolver', 'doOptimize')": [
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        355,
                        356,
                        357,
                        358,
                        359
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/linear/SimplexSolverTest.java": {
                "old": {
                    "('org.apache.commons.math3.optim.linear#SimplexSolverTest', 'testMath930')": [
                        321,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23,
                        24,
                        861,
                        862,
                        863
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolverTest', 'testMath930')": [
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolverTest', None)": [
                        334,
                        335,
                        721,
                        762,
                        763,
                        826,
                        827,
                        828,
                        829,
                        830,
                        831,
                        832,
                        833,
                        834,
                        835,
                        836,
                        837,
                        838,
                        839,
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        846,
                        847,
                        848,
                        849,
                        850,
                        851,
                        852,
                        853,
                        854,
                        855,
                        856,
                        857,
                        858,
                        859,
                        860
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolverTest', 'createMath930Constraints')": [
                        336,
                        337,
                        435
                    ],
                    "('org.apache.commons.math3.optim.linear#SimplexSolverTest', 'testSolutionCallback')": [
                        722,
                        723,
                        724,
                        725,
                        726,
                        727,
                        728,
                        729,
                        730,
                        731,
                        732,
                        733,
                        734,
                        735,
                        736,
                        737,
                        738,
                        739,
                        740,
                        741,
                        742,
                        743,
                        744,
                        745,
                        746,
                        747,
                        748,
                        749,
                        750,
                        751,
                        752,
                        753,
                        754,
                        755,
                        756,
                        757,
                        758,
                        759,
                        760,
                        761
                    ]
                }
            }
        }
    },
    "3a45bc5b6d9b884be25f98982c9cabcaecdba96c": {
        "authored_data": "2013 Nov 16 18:48",
        "commit.message": "[MATH-1031] Added new ClusterEvaluation base class and refactored code in MultiKMeansPlusPlusClusterer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1542545 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "65646ba8bd64f9478c92c7240865ea923484dd13",
        "changes": {
            "src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math3.ml.clustering#MultiKMeansPlusPlusClusterer', 'cluster(Collection)')": [
                        95,
                        96,
                        97,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.math3.ml.clustering#MultiKMeansPlusPlusClusterer', None)": [
                        43,
                        44,
                        45,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        67,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ],
                    "('org.apache.commons.math3.ml.clustering#MultiKMeansPlusPlusClusterer', 'getClusterEvaluator')": [
                        91,
                        92
                    ],
                    "('org.apache.commons.math3.ml.clustering#MultiKMeansPlusPlusClusterer', 'cluster(Collection)')": [
                        121,
                        123
                    ]
                }
            }
        }
    }
}