{
    "cc5ae51f98d82863ff6ae37fc393297bb7f1daa3": {
        "authored_data": "2021 Aug 27 15:24",
        "commit.message": "Favouring the \"expanded\" simplex over the \"reflected\" one.\n\nThis modification decreases the number of function evaluations in several\ntest cases. Note however that the original description of the algorithm\nuses the strict inequality...\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "f1ad9d1b000e1535550aef452c07a92de602c573",
        "changes": {
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/MultiDirectionalTransform.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#MultiDirectionalTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        93
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#MultiDirectionalTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        93
                    ]
                }
            }
        }
    },
    "f1ad9d1b000e1535550aef452c07a92de602c573": {
        "authored_data": "2021 Aug 27 03:37",
        "commit.message": "Simplex search in higher-dimensional cases (unit test).\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "ca826ba76bccec6d8cade6a0a660230b180b4555",
        "changes": {
            "commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/SimplexOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizerTest', None)": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizerTest', None)": [
                        115
                    ]
                }
            }
        }
    },
    "ca826ba76bccec6d8cade6a0a660230b180b4555": {
        "authored_data": "2021 Aug 26 21:56",
        "commit.message": "Add (back) \"POwELL\" standard test function for optimizers.\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "f58da4abf50d8ff627cc66dc89ece734ab98a0e5",
        "changes": {
            "commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/TestFunction.java": {
                "old": {
                    "(None, None)": [
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166
                    ]
                },
                "new": {
                    "(None, None)": [
                        157,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323
                    ]
                }
            }
        }
    },
    "f58da4abf50d8ff627cc66dc89ece734ab98a0e5": {
        "authored_data": "2021 Aug 26 00:05",
        "commit.message": "Use default SA setup in \"SimplexOptimizerTest\" (unit test).\n\nA single additional search finds the optimum of the test functions.\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "06ec7ad0bc3c532232b2833940227a29eef242c9",
        "changes": {
            "commons-math-legacy/src/test/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/SimplexOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        51
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizerTest', None)": [
                        198,
                        208,
                        209,
                        212,
                        228,
                        229
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizerTest', None)": [
                        223
                    ]
                }
            }
        }
    },
    "06ec7ad0bc3c532232b2833940227a29eef242c9": {
        "authored_data": "2021 Aug 25 23:39",
        "commit.message": "MATH-1622: Simulated annealing entails at least one additional search.\n\nAlso ensure that the \"best list\" contains at least two points.\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "677f5f7a3f4c93936b61293bbf7ff787a8294b98",
        "changes": {
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java": {
                "old": {
                    "(None, None)": [
                        32,
                        93,
                        94,
                        95
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', None)": [
                        116,
                        117,
                        444
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', 'doOptimize')": [
                        247,
                        253,
                        261,
                        262,
                        263,
                        264
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', 'parseOptimizationData(OptimizationData)')": [
                        304
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', 'bestListSearch(MultivariateFunction,Comparator,List,IntSupplier)')": [
                        450,
                        452,
                        456,
                        458,
                        459
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', None)": [
                        119,
                        120,
                        121,
                        122,
                        349,
                        464,
                        465
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', 'doOptimize')": [
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        263,
                        271,
                        272,
                        277,
                        283,
                        284
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', 'parseOptimizationData(OptimizationData)')": [
                        315
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', 'checkParameters')": [
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366
                    ],
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#SimplexOptimizer', 'bestListSearch(MultivariateFunction,Comparator,List,IntSupplier)')": [
                        471,
                        473,
                        477,
                        478,
                        480,
                        481
                    ]
                }
            }
        }
    },
    "2ccdf8d0029776ae794139ad83dda6eb61f8bef2": {
        "authored_data": "2021 Aug 24 23:50",
        "commit.message": "MATH-1622: Simulated annealing variant of \"NelderMeadTransform\".\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "80a7eb18323a185a272ea445bb146380fb5ae9ec",
        "changes": {
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/NelderMeadTransform.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#NelderMeadTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        78,
                        108
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#NelderMeadTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        78,
                        108,
                        109,
                        110
                    ]
                }
            }
        }
    },
    "80a7eb18323a185a272ea445bb146380fb5ae9ec": {
        "authored_data": "2021 Aug 24 13:39",
        "commit.message": "Change how simulated annealing affects the transformed simplex (cf. MATH-1622).\n\nCompared with commit 97462b1a1b6f64ab10e06db331d5b6762d979aab, this commit is\nmore consistent with assumptions of the original (non-hybridized) algorithm.\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "c21a8105581af4320f5d496bd1d09ff3679b6a4b",
        "changes": {
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/MultiDirectionalTransform.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#MultiDirectionalTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        93,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#MultiDirectionalTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        93,
                        94,
                        95
                    ]
                }
            }
        }
    },
    "c21a8105581af4320f5d496bd1d09ff3679b6a4b": {
        "authored_data": "2021 Aug 24 02:09",
        "commit.message": "Useless local variable.\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "f8d747661445203eec963b79ba7aa5bf182f037a",
        "changes": {
            "commons-math-legacy/src/main/java/org/apache/commons/math4/legacy/optim/nonlinear/scalar/noderiv/NelderMeadTransform.java": {
                "old": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#NelderMeadTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        80,
                        81,
                        83,
                        86,
                        87,
                        88,
                        92,
                        101,
                        111,
                        113,
                        124,
                        133,
                        138
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.legacy.optim.nonlinear.scalar.noderiv#NelderMeadTransform', 'create(MultivariateFunction,Comparator,DoublePredicate)')": [
                        81,
                        84,
                        85,
                        86,
                        90,
                        99,
                        109,
                        111,
                        122,
                        131,
                        136
                    ]
                }
            }
        }
    }
}