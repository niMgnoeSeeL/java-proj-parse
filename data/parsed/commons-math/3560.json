{
    "196fa5d58bca841ac037e03dfbe090f4a1bc9cec": {
        "authored_data": "2011 Nov 30 06:33",
        "commit.message": "Corrected to camelCase some method names (MATH-677).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1208293 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastien Brisard",
        "pcid": "3f645310b52358ebdd36e8afa0f8ee98aadfabdd",
        "changes": {
            "src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastCosineTransformer', None)": [
                        44,
                        45,
                        46
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inversetransform(double)')": [
                        139
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inversetransform(UnivariateFunction,double,double,int)')": [
                        159
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inversetransform2(double)')": [
                        179
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inversetransform2(UnivariateFunction,double,double,int)')": [
                        197
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastCosineTransformer', None)": [
                        44
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inverseTransform(double)')": [
                        137
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inverseTransform(UnivariateFunction,double,double,int)')": [
                        157
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inverseTransform2(double)')": [
                        177
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'inverseTransform2(UnivariateFunction,double,double,int)')": [
                        195
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform(double)')": [
                        180
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform(UnivariateFunction,double,double,int)')": [
                        200
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform(Complex)')": [
                        219
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(double)')": [
                        237
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(UnivariateFunction,double,double,int)')": [
                        257
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(Complex)')": [
                        276
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        523
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'mdfft(MultiDimensionalComplexMatrix,boolean,int,int)')": [
                        572
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inverseTransform(double)')": [
                        180
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inverseTransform(UnivariateFunction,double,double,int)')": [
                        200
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inverseTransform(Complex)')": [
                        219
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inverseTransform2(double)')": [
                        237
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inverseTransform2(UnivariateFunction,double,double,int)')": [
                        257
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inverseTransform2(Complex)')": [
                        276
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        523
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'mdfft(MultiDimensionalComplexMatrix,boolean,int,int)')": [
                        572
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'inversetransform(double)')": [
                        50
                    ],
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'inversetransform(UnivariateFunction,double,double,int)')": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'inverseTransform(double)')": [
                        50
                    ],
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'inverseTransform(UnivariateFunction,double,double,int)')": [
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastSineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastSineTransformer', None)": [
                        44,
                        45,
                        46
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inversetransform(double)')": [
                        137
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inversetransform(UnivariateFunction,double,double,int)')": [
                        156
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inversetransform2(double)')": [
                        175
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inversetransform2(UnivariateFunction,double,double,int)')": [
                        193
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastSineTransformer', None)": [
                        44
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inverseTransform(double)')": [
                        135
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inverseTransform(UnivariateFunction,double,double,int)')": [
                        154
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inverseTransform2(double)')": [
                        173
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'inverseTransform2(UnivariateFunction,double,double,int)')": [
                        191
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/RealTransformer.java": {
                "old": {
                    "(None, None)": [
                        62,
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        62,
                        74
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testAdHocData')": [
                        52,
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testAdHocData')": [
                        52,
                        64
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testAdHocData')": [
                        60,
                        76
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testSinFunction')": [
                        138
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testAdHocData')": [
                        60,
                        76
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testSinFunction')": [
                        138
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastHadamardTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastHadamardTransformerTest', 'testNoIntInverse')": [
                        54
                    ],
                    "('org.apache.commons.math.transform#FastHadamardTransformerTest', 'checkInverseDoubleTransform(int,int)')": [
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastHadamardTransformerTest', 'testNoIntInverse')": [
                        54
                    ],
                    "('org.apache.commons.math.transform#FastHadamardTransformerTest', 'checkInverseDoubleTransform(int,int)')": [
                        118
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastSineTransformerTest', 'testAdHocData')": [
                        52,
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastSineTransformerTest', 'testAdHocData')": [
                        52,
                        64
                    ]
                }
            }
        }
    },
    "3f645310b52358ebdd36e8afa0f8ee98aadfabdd": {
        "authored_data": "2011 Nov 30 06:24",
        "commit.message": "Fixed array indexing error in Variance evaluate method for\ncomputing the weighted variance of an array segment.\n\nJIRA: MATH-704\nReported by Leonid Ilyevsky\nPatched by Thomas Niedhart\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1208291 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "d099c7c3436bd43094e7b3087c64e0552cfbec5b",
        "changes": {
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#Variance', 'evaluate(double,double,double,int,int)')": [
                        520
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive.moment#Variance', 'evaluate(double,double,double,int,int)')": [
                        520
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java": {
                "new": {
                    "('org.apache.commons.math.stat.descriptive#UnivariateStatisticAbstractTest', None)": [
                        116,
                        117,
                        144
                    ],
                    "('org.apache.commons.math.stat.descriptive#UnivariateStatisticAbstractTest', 'testEvaluateArraySegmentWeighted')": [
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143
                    ]
                }
            }
        }
    },
    "d099c7c3436bd43094e7b3087c64e0552cfbec5b": {
        "authored_data": "2011 Nov 29 19:36",
        "commit.message": "Updated tests and documentation for Kalman filter.\n\nPatch provided by Thomas Neidhart.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1208043 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "d8e892a21f149beaa31f7b29760a3b8a0e3b02cc",
        "changes": {
            "src/test/java/org/apache/commons/math/filter/KalmanFilterTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'testConstant')": [
                        89
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'assertVectorEquals(double,double)')": [
                        105
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'assertMatrixEquals(double,double)')": [
                        117
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        29
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', None)": [
                        34,
                        35,
                        57,
                        58,
                        59,
                        81,
                        82,
                        152,
                        243,
                        244
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'testTransitionMeasurementMatrixMismatch')": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'testTransitionControlMatrixMismatch')": [
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'testConstant')": [
                        85,
                        86,
                        141
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'testConstantAcceleration')": [
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'assertVectorEquals(double,double)')": [
                        250
                    ],
                    "('org.apache.commons.math.filter#KalmanFilterTest', 'assertMatrixEquals(double,double)')": [
                        262
                    ]
                }
            }
        }
    },
    "d8e892a21f149beaa31f7b29760a3b8a0e3b02cc": {
        "authored_data": "2011 Nov 29 19:35",
        "commit.message": "Fixed ignored scale in penalty function adapter for direct optimizers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1208041 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "cee29030d0f95a3612099b9a794a72d3fa921465",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapter.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapter', None)": [
                        155,
                        156,
                        157,
                        159
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapter', 'value(double)')": [
                        170,
                        172
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapter', None)": [
                        155,
                        156,
                        157,
                        158,
                        160
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapter', 'value(double)')": [
                        171,
                        173
                    ]
                }
            }
        }
    },
    "9c1e515346b13c823339a31379b2e32abb26cb86": {
        "authored_data": "2011 Nov 28 22:41",
        "commit.message": "MATH-707\nChanged \"...MultivariateVectorialFunction\" to \"...MultivariateVectorFunction\"\n(as suggested by Ted Dunning).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1207671 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "f656676e3a9a9611c368d1da462ed0ce5c93308d",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/DifferentiableMultivariateFunction.java": {
                "old": {
                    "(None, None)": [
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        49
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultiStartMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateVectorialOptimizer', None)": [
                        43,
                        63,
                        88,
                        90,
                        94,
                        103,
                        110
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization#BaseMultiStartMultivariateVectorialOptimizer', None)": [
                        43,
                        63,
                        88,
                        90,
                        94,
                        103,
                        110
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        35
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        24,
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        24,
                        31
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java": {
                "old": {
                    "(None, None)": [
                        21,
                        25,
                        51
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        59,
                        74,
                        110,
                        140
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        25,
                        51
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        59,
                        74,
                        110,
                        140
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', None)": [
                        35
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', None)": [
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java": {
                "old": {
                    "(None, None)": [
                        26
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractVectorialOptimizer', None)": [
                        41,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractVectorialOptimizer', None)": [
                        41,
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', None)": [
                        167
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', None)": [
                        167
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "(None, None)": [
                        22,
                        39,
                        41
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        52
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(int,DifferentiableMultivariateVectorialFunction,double,double,double)')": [
                        247
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        39,
                        41
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        52
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(int,DifferentiableMultivariateVectorFunction,double,double,double)')": [
                        247
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        42
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        42
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/package-info.java": {
                "old": {
                    "(None, None)": [
                        47,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        47,
                        54
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/SumSincFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis#SumSincFunction', 'gradient')": [
                        68,
                        69
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis#SumSincFunction', 'gradient')": [
                        68,
                        69
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/BatteryNISTTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization#BatteryNISTTest', None)": [
                        806,
                        846
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization#BatteryNISTTest', None)": [
                        806,
                        846
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizerTest', None)": [
                        124,
                        125
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizerTest', None)": [
                        124,
                        125
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', 'testNoOptimum')": [
                        147
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', None)": [
                        161
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', 'testNoOptimum')": [
                        147
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', None)": [
                        161
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares1')": [
                        133
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares2')": [
                        157
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares3')": [
                        181
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares1')": [
                        133
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares2')": [
                        157
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares3')": [
                        181
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.general#CircleScalar', 'gradient')": [
                        80,
                        81
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.general#CircleScalar', 'gradient')": [
                        80,
                        81
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.general#CircleVectorial', None)": [
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.general#CircleVectorial', None)": [
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', None)": [
                        449
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', None)": [
                        449
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(DifferentiableMultivariateVectorialFunction,double,int,double,double,double,boolean)')": [
                        368
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        514,
                        537
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(DifferentiableMultivariateVectorFunction,double,int,double,double,double,boolean)')": [
                        368
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        514,
                        537
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        525
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        525
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', None)": [
                        378,
                        379
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', None)": [
                        378,
                        379
                    ]
                }
            }
        }
    },
    "f656676e3a9a9611c368d1da462ed0ce5c93308d": {
        "authored_data": "2011 Nov 28 20:16",
        "commit.message": "Fixed case of unconstrained variables that still occur in the objective\nfunction in simplex solver.\n\nPatch provided by Thomas Neidhart\n\nJira: MATH-713\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1207566 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "f14fdb5447f4ed1e103db2cecc148f391294f342",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java": {
                "old": {
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'getSolution')": [
                        410
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'getSolution')": [
                        410,
                        411,
                        412,
                        413,
                        414,
                        415
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java": {
                "new": {
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', None)": [
                        31,
                        32,
                        44
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath713NegativeVariable')": [
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43
                    ]
                }
            }
        }
    },
    "399249653d7a5dd0a0ca3f1c615c0b44f7601a01": {
        "authored_data": "2011 Nov 28 10:56",
        "commit.message": "Added the initi method also to FixedStepHandler.\n\nJira: MATH-714\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1207066 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "6041336783ba94b46fe5953e8415884bf0cef32c",
        "changes": {
            "src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java": {
                "new": {
                    "(None, None)": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java": {
                "new": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', 'init(double,double,double)')": [
                        177,
                        183,
                        184,
                        185
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', None)": [
                        186
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerOutputTestBase.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizerOutputTestBase', None)": [
                        15,
                        16
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizerOutputTestBase', None)": [
                        15,
                        16,
                        216,
                        217,
                        218
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizerOutputTestBase', 'init(double,double,double)')": [
                        215
                    ],
                    "(None, None)": [
                        222
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizerTest', 'testBoundaries')": [
                        44
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizerTest', 'testBeforeEnd')": [
                        72
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizerTest', 'testBoundaries')": [
                        44,
                        45,
                        46
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizerTest', 'testBeforeEnd')": [
                        74,
                        75,
                        76
                    ]
                }
            }
        }
    },
    "6041336783ba94b46fe5953e8415884bf0cef32c": {
        "authored_data": "2011 Nov 28 10:20",
        "commit.message": "Added init methods to StepHandler and EventHandler interfaces.\n\nThe reset method in StepHandler interface has been renamed init and is\nprovided more information on the integration by the calling integrator.\nA similar init method has been added to the EventHandler interface.\n\nJira: MATH-714\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1207054 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "b789d44c4c79e3a8ccef7f7d534672c900455658",
        "changes": {
            "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        94,
                        182,
                        183
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'resetEvaluations')": [
                        184
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        94,
                        182,
                        183,
                        184,
                        185,
                        186,
                        200
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'initIntegration(double,double,double)')": [
                        187,
                        188,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java": {
                "old": {
                    "('org.apache.commons.math.ode#ContinuousOutputModel', None)": [
                        115,
                        166,
                        167,
                        168,
                        169,
                        176
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'reset')": [
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#ContinuousOutputModel', None)": [
                        115,
                        116,
                        117,
                        118,
                        169,
                        176
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'init(double,double,double)')": [
                        170
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        385
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        385
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/events/EventHandler.java": {
                "new": {
                    "(None, None)": [
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        197,
                        211,
                        212,
                        213,
                        214
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        209
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        214,
                        231,
                        232,
                        233,
                        234
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        229
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        197,
                        218,
                        219,
                        220,
                        221
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        216
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        549,
                        616,
                        617,
                        618,
                        619
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        615
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        99,
                        122,
                        123,
                        124,
                        125
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(ExpandableStatefulODE,double)')": [
                        120
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#DummyStepHandler', None)": [
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.math.ode.sampling#DummyStepHandler', 'reset')": [
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#DummyStepHandler', None)": [
                        53
                    ],
                    "('org.apache.commons.math.ode.sampling#DummyStepHandler', 'init(double,double,double)')": [
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/sampling/StepHandler.java": {
                "old": {
                    "(None, None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', None)": [
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', 'reset')": [
                        175
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', None)": [
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', 'init(double,double,double)')": [
                        176
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/TestProblem4.java": {
                "new": {
                    "('org.apache.commons.math.ode#TestProblem4', None)": [
                        118,
                        119,
                        120,
                        143,
                        144,
                        145
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/TestProblemHandler.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblemHandler', None)": [
                        58
                    ],
                    "('org.apache.commons.math.ode#TestProblemHandler', 'reset')": [
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblemHandler', None)": [
                        58,
                        59,
                        60,
                        61
                    ],
                    "('org.apache.commons.math.ode#TestProblemHandler', 'init(double,double,double)')": [
                        64
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/events/EventStateTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.events#EventStateTest', 'closeEvents')": [
                        39,
                        40
                    ],
                    "('org.apache.commons.math.ode.events#EventStateTest', None)": [
                        117,
                        118,
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/events/OverlappingEventsTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.events#OverlappingEventsTest', None)": [
                        139,
                        140,
                        141,
                        142
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/events/ReappearingEventTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.events#ReappearingEventTest', None)": [
                        70,
                        71,
                        72,
                        73
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', None)": [
                        245,
                        246,
                        247
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testStepSize')": [
                        284
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testMissedEndEvent')": [
                        74,
                        75,
                        76
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', None)": [
                        248,
                        249,
                        250
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testStepSize')": [
                        287
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', None)": [
                        127,
                        268,
                        269,
                        270,
                        309
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', None)": [
                        127,
                        268,
                        269,
                        308
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54StepInterpolatorTest', 'checkClone')": [
                        115,
                        135
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54StepInterpolatorTest', 'checkClone')": [
                        115,
                        135
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', None)": [
                        292,
                        293,
                        294,
                        329,
                        330,
                        331
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testMissedEndEvent')": [
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', None)": [
                        295,
                        296,
                        331,
                        332,
                        333,
                        334,
                        335
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolatorTest', 'checklone')": [
                        135
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolatorTest', 'checklone')": [
                        135
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testStepSize')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testStepSize')": [
                        166
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', None)": [
                        180,
                        181,
                        182
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testStepSize')": [
                        219
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', None)": [
                        180,
                        181
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testStepSize')": [
                        218
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testIssue596')": [
                        274
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', None)": [
                        303,
                        304,
                        305,
                        340,
                        341,
                        342
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testIssue596')": [
                        274,
                        275
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', None)": [
                        304,
                        305,
                        340,
                        341,
                        342,
                        343,
                        344
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolatorTest', 'checklone')": [
                        137
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolatorTest', 'checklone')": [
                        137
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testEventsErrors')": [
                        205,
                        206
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testEventsNoConvergence')": [
                        251,
                        252
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54StepInterpolatorTest', 'checkClone')": [
                        135
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54StepInterpolatorTest', 'checkClone')": [
                        135
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testStepSize')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testStepSize')": [
                        166
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#StepProblem', 'init(double,double,double)')": [
                        46
                    ],
                    "('org.apache.commons.math.ode.nonstiff#StepProblem', None)": [
                        47,
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', None)": [
                        173
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testStepSize')": [
                        213
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', None)": [
                        173
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testStepSize')": [
                        213
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#StepInterpolatorTestUtils', 'checkDerivativesConsistency(FirstOrderIntegrator,TestProblemAbstract,double)')": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#StepInterpolatorTestUtils', 'checkDerivativesConsistency(FirstOrderIntegrator,TestProblemAbstract,double)')": [
                        71
                    ]
                }
            }
        }
    }
}