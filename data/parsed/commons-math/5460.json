{
    "4f206ca3ee00be1430dfccb3de1b90c51af31976": {
        "authored_data": "2009 Mar 04 00:07",
        "commit.message": "continued refactoring of optimization framework:\n - improved general interfaces at top optimization level\n - added a simple implementation of ConvergenceChecker (ObjectiveValueChecker)\n - added a general multi-start wrapper\n - changed the direct search optimizers to the new interfaces\n\nThis work is still not complete yet. The general package classes\nare very close to the former design, they have almost not been changed\nstructurally.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@749850 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "4a64740b4a59f9735a2ddf8b08fccef65812e94f",
        "changes": {
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        109
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        73,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        121,
                        122
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/ConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        20,
                        22,
                        23,
                        24,
                        32,
                        35,
                        37,
                        39,
                        40,
                        41,
                        42,
                        43,
                        45,
                        48
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22,
                        23,
                        31,
                        34,
                        36,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        45,
                        46,
                        47,
                        50
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28,
                        29,
                        30,
                        31,
                        35,
                        36,
                        37
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        52,
                        66,
                        67,
                        68,
                        69,
                        76,
                        81,
                        82,
                        83,
                        84,
                        85,
                        88,
                        89,
                        90,
                        96,
                        97,
                        98,
                        99,
                        102,
                        106,
                        110,
                        111,
                        112,
                        115,
                        118,
                        119,
                        120,
                        121
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', 'objective(double)')": [
                        129,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        140,
                        141,
                        142,
                        143
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        28,
                        29,
                        30,
                        31,
                        32,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        57,
                        61,
                        62,
                        63,
                        73,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        87,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        100,
                        101,
                        102,
                        105,
                        107,
                        108,
                        109,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        125,
                        129,
                        133,
                        134,
                        135,
                        138,
                        139,
                        140,
                        141,
                        142,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', 'objective(double)')": [
                        161,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        174,
                        175,
                        176
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiObjectiveFunction.java": {
                "old": {
                    "(None, None)": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        35,
                        37,
                        38
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/ObjectiveFunction.java": {
                "old": {
                    "(None, None)": [
                        35
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        36,
                        37
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/Optimizer.java": {
                "old": {
                    "(None, None)": [
                        30,
                        31,
                        32,
                        33,
                        34,
                        52,
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        57,
                        58,
                        59,
                        60,
                        61,
                        66,
                        71,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/PointValuePair.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization#PointValuePair', None)": [
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#PointValuePair', None)": [
                        32
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        24,
                        25,
                        27,
                        28,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        52,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        85,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        109,
                        110,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        598,
                        607,
                        633
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,int,ConvergenceChecker,boolean,double,double)')": [
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,int,ConvergenceChecker,boolean,double,double,int,long)')": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,int,ConvergenceChecker,boolean,double)')": [
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,int,ConvergenceChecker,boolean,double,int,long)')": [
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,int,ConvergenceChecker,boolean,RandomVectorGenerator)')": [
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,int,ConvergenceChecker,boolean,RandomVectorGenerator,int)')": [
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double,double)')": [
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        427,
                        428,
                        429,
                        430,
                        431
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(RandomVectorGenerator)')": [
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setSingleStart')": [
                        455,
                        456,
                        457,
                        458
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setMultiStart(int,RandomVectorGenerator)')": [
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getOptima')": [
                        503,
                        504
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,int,ConvergenceChecker,boolean)')": [
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        537,
                        538,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getTotalEvaluations')": [
                        591,
                        592
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'iterateSimplex')": [
                        599
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluate(double)')": [
                        608,
                        610
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex')": [
                        616,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(PointValuePair)')": [
                        634,
                        637,
                        639
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        28,
                        29,
                        31,
                        43,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        84,
                        87,
                        95,
                        96,
                        101,
                        102,
                        103,
                        104,
                        105,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        212,
                        213,
                        214,
                        217,
                        218,
                        219,
                        222,
                        223,
                        224,
                        227,
                        228,
                        229,
                        281,
                        282,
                        283,
                        284,
                        290,
                        293,
                        294,
                        295,
                        297,
                        305,
                        306,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        339,
                        340,
                        344,
                        366,
                        367
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setStartConfiguration(double)')": [
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        199,
                        200,
                        201
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setMaxEvaluations(int)')": [
                        210,
                        211
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getMaxEvaluations')": [
                        215,
                        216
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        220,
                        221
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getConvergenceChecker')": [
                        225,
                        226
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,GoalType,double)')": [
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getEvaluations')": [
                        285,
                        286
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'iterateSimplex(Comparator)')": [
                        296
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluate(double)')": [
                        307,
                        308,
                        310
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex(Comparator)')": [
                        347,
                        348,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(PointValuePair,Comparator)')": [
                        368,
                        369,
                        372,
                        374
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        58,
                        59,
                        60,
                        61,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex')": [
                        62,
                        64,
                        68,
                        71,
                        72,
                        75,
                        76,
                        77,
                        79,
                        87,
                        88
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(PointValuePair,double)')": [
                        104,
                        105,
                        124,
                        125
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        61,
                        100,
                        106,
                        107
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        62,
                        63,
                        65,
                        66,
                        70,
                        73,
                        74,
                        77,
                        78,
                        79,
                        81,
                        89,
                        90,
                        97,
                        98,
                        99
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(PointValuePair,double,Comparator)')": [
                        111,
                        112,
                        113,
                        132,
                        133
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/NelderMead.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex')": [
                        73,
                        79,
                        80,
                        81,
                        82,
                        101,
                        103,
                        105,
                        108,
                        110,
                        117,
                        119,
                        121,
                        124,
                        129,
                        136,
                        138,
                        140,
                        149,
                        151,
                        153,
                        155,
                        170
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        75,
                        76,
                        82,
                        83,
                        84,
                        85,
                        104,
                        106,
                        108,
                        109,
                        112,
                        114,
                        121,
                        123,
                        125,
                        128,
                        133,
                        140,
                        142,
                        144,
                        153,
                        155,
                        157,
                        159,
                        174
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        25,
                        26,
                        27
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testObjectiveExceptions')": [
                        51,
                        52,
                        61,
                        62
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        89,
                        93,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        199,
                        200,
                        201,
                        202,
                        203
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', None)": [
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        26,
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testObjectiveExceptions')": [
                        54,
                        55,
                        64,
                        65
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        92,
                        96,
                        97,
                        98,
                        99,
                        100,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        182,
                        183,
                        184,
                        186,
                        187,
                        188,
                        189,
                        190
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', None)": [
                        191,
                        192
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testObjectiveExceptions')": [
                        44,
                        56,
                        57,
                        66,
                        67
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        90,
                        91,
                        94,
                        98,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        161,
                        165,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        238,
                        250,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', None)": [
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        26,
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testObjectiveExceptions')": [
                        42,
                        54,
                        55,
                        64,
                        65
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        88,
                        89,
                        92,
                        96,
                        97,
                        98,
                        99,
                        100,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        135,
                        139,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        170,
                        182,
                        183,
                        184,
                        186,
                        187,
                        188,
                        189,
                        190
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', None)": [
                        191,
                        192
                    ]
                }
            }
        }
    },
    "4a64740b4a59f9735a2ddf8b08fccef65812e94f": {
        "authored_data": "2009 Mar 01 22:21",
        "commit.message": "added compareTo method with epsilon\nJIRA: MATH-247\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@749139 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "722fc97a7a30103490089a5eb22a49fd433f74f3",
        "changes": {
            "src/java/org/apache/commons/math/util/MathUtils.java": {
                "new": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'compareTo(double,double,double)')": [
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366
                    ]
                }
            },
            "src/test/org/apache/commons/math/util/MathUtilsTest.java": {
                "new": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'testCompareTo')": [
                        308,
                        309,
                        310,
                        311
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', None)": [
                        312,
                        313
                    ]
                }
            }
        }
    },
    "722fc97a7a30103490089a5eb22a49fd433f74f3": {
        "authored_data": "2009 Feb 26 19:17",
        "commit.message": "started refactoring of optimization framework:\n - created subpackages optimization.direct, optimization.general,\n   optimization.linear (currently empty) and optimization.univariate\n - removed packages analysis.minimization and estimation\n - renamed all Cost-related interfaces/classes into Objective\n   (this allows both minimization and maximization)\n - added a few new general interfaces\n\nThis work is not complete yet. The direct and general packages classes\nare very close to the former design, they have almost not been changed\nstructurally.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@748274 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "1cf41555f1f4d03845d6e5149b50dfe7ed84faf5",
        "changes": {
            "src/java/org/apache/commons/math/optimization/ConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        35,
                        36,
                        39
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        48
                    ]
                }
            },
            "src/site/resources/userguide/TrajectoryDeterminationProblem.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        21,
                        22,
                        23
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        21,
                        22,
                        23
                    ]
                }
            }
        }
    },
    "1cf41555f1f4d03845d6e5149b50dfe7ed84faf5": {
        "authored_data": "2009 Feb 25 03:32",
        "commit.message": "epsilon needs to be set before calling isZero, plus copy epsilon for append\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@747650 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "William Barker",
        "pcid": "1fe117edf0a73e0c5476f41e7f74ecc8b20b5ea2",
        "changes": {
            "src/java/org/apache/commons/math/linear/SparseRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealVector', None)": [
                        82,
                        130,
                        157,
                        183
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealVector', None)": [
                        82,
                        124,
                        151,
                        177
                    ]
                }
            }
        }
    },
    "1fe117edf0a73e0c5476f41e7f74ecc8b20b5ea2": {
        "authored_data": "2009 Feb 24 20:59",
        "commit.message": "minor code cleanups\n(error messages, javadoc, avoiding array copies, final attributes ...)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@747544 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "fafe306ce7904ca73f5df7da85cfe581dde7b84c",
        "changes": {
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        108,
                        116,
                        120,
                        170,
                        174,
                        203,
                        204
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        72,
                        109,
                        117,
                        121,
                        171,
                        175,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        216,
                        219,
                        220,
                        221,
                        222
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/RealVectorImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealVectorImpl', None)": [
                        101,
                        114,
                        115,
                        116,
                        141,
                        142,
                        143
                    ],
                    "('org.apache.commons.math.linear#RealVectorImpl', 'checkVectorDimensions(int)')": [
                        1287,
                        1288
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RealVectorImpl', None)": [
                        101,
                        114,
                        115,
                        116,
                        141,
                        142,
                        143
                    ],
                    "('org.apache.commons.math.linear#RealVectorImpl', 'checkVectorDimensions(int)')": [
                        1287,
                        1288,
                        1289
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/SparseRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealVector', None)": [
                        31,
                        37,
                        49,
                        50,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        67,
                        72,
                        73,
                        74,
                        81,
                        82,
                        83,
                        84,
                        86,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        99,
                        104,
                        111,
                        112,
                        119,
                        120,
                        121,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        189,
                        190,
                        191,
                        192,
                        193,
                        199,
                        200,
                        201,
                        210,
                        218,
                        231,
                        232,
                        233,
                        234,
                        235,
                        267,
                        419,
                        524,
                        844,
                        1014,
                        1033,
                        1115,
                        1184,
                        1200
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'fromDoubleArray(double)')": [
                        181
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'add(RealVector)')": [
                        228
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'dotProduct(double)')": [
                        330
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getSubVector(int,int)')": [
                        388
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getDistance(SparseRealVector)')": [
                        439
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getLInfDistance(SparseRealVector)')": [
                        534,
                        542
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getLInfDistance(double)')": [
                        564
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'isInfinite')": [
                        597
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'isNaN')": [
                        608
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapAcosToSelf')": [
                        636
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapCosToSelf')": [
                        722
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapCoshToSelf')": [
                        735
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapInvToSelf')": [
                        806
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapLog10ToSelf')": [
                        824
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapLogToSelf')": [
                        847
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'outerproduct(SparseRealVector)')": [
                        1023,
                        1026
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'outerProduct(RealVector)')": [
                        1038,
                        1043,
                        1046
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'set(double)')": [
                        1109
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'unitize')": [
                        1170,
                        1172
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'equals(Object)')": [
                        1234,
                        1236,
                        1238,
                        1241,
                        1243,
                        1244,
                        1246,
                        1247,
                        1250,
                        1254,
                        1257
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealVector', None)": [
                        30,
                        31,
                        32,
                        34,
                        40,
                        52,
                        60,
                        61,
                        62,
                        63,
                        64,
                        68,
                        73,
                        74,
                        75,
                        82,
                        83,
                        84,
                        85,
                        86,
                        88,
                        91,
                        92,
                        93,
                        94,
                        95,
                        100,
                        105,
                        112,
                        119,
                        120,
                        121,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        194,
                        195,
                        204,
                        212,
                        226,
                        227,
                        228,
                        229,
                        261,
                        414,
                        520,
                        845,
                        1015,
                        1034,
                        1116,
                        1184,
                        1200
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'add(RealVector)')": [
                        222,
                        224
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'dotProduct(double)')": [
                        324,
                        326
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getSubVector(int,int)')": [
                        383
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getDistance(SparseRealVector)')": [
                        434,
                        435
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getLInfDistance(SparseRealVector)')": [
                        530,
                        532,
                        539,
                        541
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'getLInfDistance(double)')": [
                        562,
                        564
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'isInfinite')": [
                        596,
                        598
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'isNaN')": [
                        608,
                        610
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapAcosToSelf')": [
                        637
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapCosToSelf')": [
                        723
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapCoshToSelf')": [
                        736
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapInvToSelf')": [
                        807
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapLog10ToSelf')": [
                        825
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'mapLogToSelf')": [
                        848
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'outerproduct(SparseRealVector)')": [
                        1024,
                        1027
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'outerProduct(RealVector)')": [
                        1039,
                        1044,
                        1047
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'set(double)')": [
                        1110
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'unitize')": [
                        1171
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'equals(Object)')": [
                        1234,
                        1236,
                        1237,
                        1239,
                        1240,
                        1242,
                        1244,
                        1246,
                        1247,
                        1248,
                        1250,
                        1251,
                        1252,
                        1255,
                        1257,
                        1260,
                        1263,
                        1265
                    ]
                }
            }
        }
    },
    "fafe306ce7904ca73f5df7da85cfe581dde7b84c": {
        "authored_data": "2009 Feb 21 20:21",
        "commit.message": "fixed wrong word in javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@746583 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "f1ee00c759125e6532bf64ec6d78ee250e7265cc",
        "changes": {
            "src/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        377
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        377
                    ]
                }
            }
        }
    },
    "f1ee00c759125e6532bf64ec6d78ee250e7265cc": {
        "authored_data": "2009 Feb 21 20:16",
        "commit.message": "handle NaN and infinities correctly in the MathUtils.equals method with tolerance\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@746582 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "c1b97f87d579f43f70461c65395017bf48830194",
        "changes": {
            "src/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtils', 'equals(double,double,double)')": [
                        383
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        376,
                        377,
                        378
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'equals(double,double,double)')": [
                        386
                    ]
                }
            },
            "src/test/org/apache/commons/math/util/MathUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'testEqualsWithAllowedDelta')": [
                        339,
                        340,
                        341,
                        342,
                        343
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'testEqualsWithAllowedDelta')": [
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347
                    ]
                }
            }
        }
    },
    "c1b97f87d579f43f70461c65395017bf48830194": {
        "authored_data": "2009 Feb 21 20:02",
        "commit.message": "fixed exception type in a test\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@746579 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "2f335ac471c12c606c69f9936c4b6447f46df9cf",
        "changes": {
            "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BigMatrixImplTest', 'testTrace')": [
                        412,
                        413
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImplTest', 'testTrace')": [
                        414,
                        415
                    ]
                }
            }
        }
    },
    "2f335ac471c12c606c69f9936c4b6447f46df9cf": {
        "authored_data": "2009 Feb 21 20:01",
        "commit.message": "replaced Object[] parameters by variable arguments in exceptions constructors\nthis allows simpler error declaration and removes the need for the strange\nnull argument with fixed messages\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@746578 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "8bf548c5e83e067503d10f304d9f855ced1a449c",
        "changes": {
            "src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', None)": [
                        176,
                        177,
                        178,
                        179,
                        180
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'toRecursiveLayout(double)')": [
                        225
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setSubMatrix(double,int,int)')": [
                        1031,
                        1032,
                        1033,
                        1034
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setRowMatrix(int,RecursiveLayoutRealMatrix)')": [
                        1121,
                        1122,
                        1123,
                        1124,
                        1125,
                        1126
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setColumnMatrix(int,RecursiveLayoutRealMatrix)')": [
                        1199,
                        1200,
                        1201,
                        1202,
                        1203,
                        1204
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setRowVector(int,RealVector)')": [
                        1232,
                        1233,
                        1234,
                        1235,
                        1236
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setColumnVector(int,RealVector)')": [
                        1263,
                        1264,
                        1265,
                        1266,
                        1267
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setRow(int,double)')": [
                        1314,
                        1315,
                        1316,
                        1317,
                        1318
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setColumn(int,double)')": [
                        1365,
                        1366,
                        1367,
                        1368,
                        1369
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'getEntry(int,int)')": [
                        1391,
                        1392,
                        1393,
                        1394,
                        1395
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setEntry(int,int,double)')": [
                        1404,
                        1405,
                        1406,
                        1407,
                        1408
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'addToEntry(int,int,double)')": [
                        1417,
                        1418,
                        1419,
                        1420,
                        1421
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'multiplyEntry(int,int,double)')": [
                        1430,
                        1431,
                        1432,
                        1433,
                        1434
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'operate(double)')": [
                        1489,
                        1490,
                        1491,
                        1492,
                        1493
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'preMultiply(double)')": [
                        1534,
                        1535,
                        1536,
                        1537,
                        1538
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', None)": [
                        176,
                        177,
                        178
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'toRecursiveLayout(double)')": [
                        223
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setSubMatrix(double,int,int)')": [
                        1029,
                        1030,
                        1031
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setRowMatrix(int,RecursiveLayoutRealMatrix)')": [
                        1118,
                        1119,
                        1120,
                        1121
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setColumnMatrix(int,RecursiveLayoutRealMatrix)')": [
                        1194,
                        1195,
                        1196,
                        1197
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setRowVector(int,RealVector)')": [
                        1225,
                        1226,
                        1227
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setColumnVector(int,RealVector)')": [
                        1254,
                        1255,
                        1256
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setRow(int,double)')": [
                        1303,
                        1304,
                        1305
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setColumn(int,double)')": [
                        1352,
                        1353,
                        1354
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'getEntry(int,int)')": [
                        1376,
                        1377,
                        1378
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'setEntry(int,int,double)')": [
                        1387,
                        1388,
                        1389
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'addToEntry(int,int,double)')": [
                        1398,
                        1399,
                        1400
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'multiplyEntry(int,int,double)')": [
                        1409,
                        1410,
                        1411
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'operate(double)')": [
                        1466,
                        1467,
                        1468
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', 'preMultiply(double)')": [
                        1509,
                        1510,
                        1511
                    ]
                }
            },
            "src/java/org/apache/commons/math/ArgumentOutsideDomainException.java": {
                "old": {
                    "('org.apache.commons.math#ArgumentOutsideDomainException', None)": [
                        40,
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.math#ArgumentOutsideDomainException', None)": [
                        40
                    ]
                }
            },
            "src/java/org/apache/commons/math/ConvergenceException.java": {
                "old": {
                    "('org.apache.commons.math#ConvergenceException', None)": [
                        28,
                        34,
                        44,
                        61,
                        64,
                        65
                    ],
                    "(None, None)": [
                        67
                    ]
                },
                "new": {
                    "('org.apache.commons.math#ConvergenceException', None)": [
                        28,
                        34,
                        44,
                        59,
                        64,
                        65
                    ],
                    "(None, None)": [
                        67
                    ]
                }
            },
            "src/java/org/apache/commons/math/DimensionMismatchException.java": {
                "old": {
                    "('org.apache.commons.math#DimensionMismatchException', None)": [
                        36,
                        37,
                        38,
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.math#DimensionMismatchException', None)": [
                        36
                    ]
                }
            },
            "src/java/org/apache/commons/math/DuplicateSampleAbscissaException.java": {
                "old": {
                    "('org.apache.commons.math#DuplicateSampleAbscissaException', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.math#DuplicateSampleAbscissaException', None)": [
                        38
                    ]
                }
            },
            "src/java/org/apache/commons/math/FunctionEvaluationException.java": {
                "old": {
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        30,
                        42,
                        43,
                        56,
                        65,
                        68,
                        79,
                        82,
                        83,
                        84,
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        30,
                        42,
                        55,
                        63,
                        67,
                        75,
                        81,
                        82,
                        83,
                        84
                    ]
                }
            },
            "src/java/org/apache/commons/math/MathConfigurationException.java": {
                "old": {
                    "('org.apache.commons.math#MathConfigurationException', None)": [
                        44,
                        61,
                        64,
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathConfigurationException', None)": [
                        44,
                        59,
                        64,
                        65
                    ]
                }
            },
            "src/java/org/apache/commons/math/MathException.java": {
                "old": {
                    "('org.apache.commons.math#MathException', None)": [
                        39,
                        88,
                        112,
                        113,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142
                    ],
                    "('org.apache.commons.math#MathException', 'buildMessage(String,Object,Locale)')": [
                        91
                    ],
                    "('org.apache.commons.math#MathException', 'getMessage(Locale)')": [
                        173
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathException', None)": [
                        39,
                        86,
                        112,
                        113,
                        135,
                        136,
                        139,
                        140,
                        141,
                        142
                    ],
                    "('org.apache.commons.math#MathException', 'buildMessage(Locale,String,Object)')": [
                        91
                    ],
                    "('org.apache.commons.math#MathException', 'getMessage(Locale)')": [
                        173
                    ]
                }
            },
            "src/java/org/apache/commons/math/MathRuntimeException.java": {
                "old": {
                    "('org.apache.commons.math#MathRuntimeException', None)": [
                        40,
                        87,
                        88,
                        104,
                        105,
                        127,
                        128,
                        131,
                        132,
                        133,
                        134,
                        366,
                        367,
                        369,
                        370
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'buildMessage(String,Object,Locale)')": [
                        92,
                        93
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'getMessage(Locale)')": [
                        162
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArithmeticException(String,Object)')": [
                        199,
                        200,
                        207
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArrayIndexOutOfBoundsException(String,Object)')": [
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createEOFException(String,Object)')": [
                        243,
                        244,
                        251
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalArgumentException(String,Object)')": [
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalStateException(String,Object)')": [
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createConcurrentModificationException(String,Object)')": [
                        326,
                        327,
                        334
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createNoSuchElementException(String,Object)')": [
                        348,
                        349,
                        356
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createParseException(String,Object,int)')": [
                        371,
                        372,
                        373,
                        374,
                        381
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathRuntimeException', None)": [
                        40,
                        88,
                        89,
                        104,
                        105,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        367,
                        368,
                        369,
                        370
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'buildMessage(Locale,String,Object)')": [
                        92,
                        93
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'getMessage(Locale)')": [
                        162
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArithmeticException(String,Object)')": [
                        199,
                        200,
                        207
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createArrayIndexOutOfBoundsException(String,Object)')": [
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createEOFException(String,Object)')": [
                        243,
                        244,
                        251
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalArgumentException(String,Object)')": [
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createIllegalStateException(String,Object)')": [
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createConcurrentModificationException(String,Object)')": [
                        326,
                        327,
                        334
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createNoSuchElementException(String,Object)')": [
                        348,
                        349,
                        356
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createParseException(int,String,Object)')": [
                        371,
                        372,
                        373,
                        374,
                        381
                    ]
                }
            },
            "src/java/org/apache/commons/math/MaxIterationsExceededException.java": {
                "old": {
                    "('org.apache.commons.math#MaxIterationsExceededException', None)": [
                        32,
                        35,
                        42,
                        43,
                        44,
                        55,
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MaxIterationsExceededException', None)": [
                        32,
                        35,
                        42,
                        43,
                        54,
                        55
                    ]
                }
            },
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        50,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegrator', None)": [
                        153
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegrator', None)": [
                        153
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#RombergIntegrator', 'verifyIterationCount')": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#RombergIntegrator', 'verifyIterationCount')": [
                        115
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegrator', 'verifyIterationCount')": [
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegrator', 'verifyIterationCount')": [
                        114
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'verifyIterationCount')": [
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'verifyIterationCount')": [
                        147
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#UnivariateRealIntegratorImpl', 'getResult')": [
                        111
                    ],
                    "('org.apache.commons.math.analysis.integration#UnivariateRealIntegratorImpl', 'verifyInterval(double,double)')": [
                        162
                    ],
                    "('org.apache.commons.math.analysis.integration#UnivariateRealIntegratorImpl', 'verifyIterationCount')": [
                        175
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.integration#UnivariateRealIntegratorImpl', 'getResult')": [
                        111
                    ],
                    "('org.apache.commons.math.analysis.integration#UnivariateRealIntegratorImpl', 'verifyInterval(double,double)')": [
                        162
                    ],
                    "('org.apache.commons.math.analysis.integration#UnivariateRealIntegratorImpl', 'verifyIterationCount')": [
                        175
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/minimization/UnivariateRealMinimizerImpl.java": {
                "old": {
                    "('org.apache.commons.math.analysis.minimization#UnivariateRealMinimizerImpl', 'checkResultComputed')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.minimization#UnivariateRealMinimizerImpl', 'checkResultComputed')": [
                        63
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'value(double)')": [
                        94
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'computeCoefficients')": [
                        261,
                        262,
                        263
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'value(double)')": [
                        94
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'computeCoefficients')": [
                        261
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/BrentSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        181
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', None)": [
                        67
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        163
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', None)": [
                        67
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        163
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#NewtonSolver', 'solve(UnivariateRealFunction,double,double,double)')": [
                        135,
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#NewtonSolver', 'solve(UnivariateRealFunction,double,double,double)')": [
                        135
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', None)": [
                        79,
                        80
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'checkResultComputed')": [
                        107
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'verifyInterval(double,double)')": [
                        215
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'verifySequence(double,double,double)')": [
                        232
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'verifyBracketing(double,double,UnivariateRealFunction)')": [
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', None)": [
                        79
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'checkResultComputed')": [
                        106
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'verifyInterval(double,double)')": [
                        214
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'verifySequence(double,double,double)')": [
                        231
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', 'verifyBracketing(double,double,UnivariateRealFunction)')": [
                        255
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'bracket(UnivariateRealFunction,double,double,double,int)')": [
                        203,
                        204,
                        205
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'bracket(UnivariateRealFunction,double,double,double,int)')": [
                        203
                    ]
                }
            },
            "src/java/org/apache/commons/math/complex/Complex.java": {
                "old": {
                    "('org.apache.commons.math.complex#Complex', 'nthRoot(int)')": [
                        908,
                        909
                    ]
                },
                "new": {
                    "('org.apache.commons.math.complex#Complex', 'nthRoot(int)')": [
                        908,
                        909,
                        910
                    ]
                }
            },
            "src/java/org/apache/commons/math/complex/ComplexFormat.java": {
                "old": {
                    "('org.apache.commons.math.complex#ComplexFormat', 'parse(String)')": [
                        254,
                        255,
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.math.complex#ComplexFormat', 'parse(String)')": [
                        254,
                        255,
                        256
                    ]
                }
            },
            "src/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java": {
                "old": {
                    "('org.apache.commons.math.distribution#AbstractContinuousDistribution', 'inverseCumulativeProbability(double)')": [
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.math.distribution#AbstractContinuousDistribution', 'inverseCumulativeProbability(double)')": [
                        74
                    ]
                }
            },
            "src/java/org/apache/commons/math/distribution/BetaDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#BetaDistributionImpl', 'density(Double)')": [
                        101,
                        106
                    ]
                },
                "new": {
                    "('org.apache.commons.math.distribution#BetaDistributionImpl', 'density(Double)')": [
                        101,
                        106
                    ]
                }
            },
            "src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'setNumberOfElements(int)')": [
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'setExponent(double)')": [
                        103,
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'setNumberOfElements(int)')": [
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'setExponent(double)')": [
                        103,
                        104,
                        105
                    ]
                }
            },
            "src/java/org/apache/commons/math/estimation/AbstractEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateResidualsAndCost')": [
                        109
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'getCovariances(EstimationProblem)')": [
                        194,
                        195
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'guessParametersErrors(EstimationProblem)')": [
                        214,
                        215
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateResidualsAndCost')": [
                        109
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'getCovariances(EstimationProblem)')": [
                        194
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'guessParametersErrors(EstimationProblem)')": [
                        213,
                        214,
                        215
                    ]
                }
            },
            "src/java/org/apache/commons/math/estimation/EstimationException.java": {
                "old": {
                    "('org.apache.commons.math.estimation#EstimationException', None)": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#EstimationException', None)": [
                        42
                    ]
                }
            },
            "src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', 'estimate(EstimationProblem)')": [
                        213
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', 'estimate(EstimationProblem)')": [
                        213
                    ]
                }
            },
            "src/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'estimate(EstimationProblem)')": [
                        403,
                        408,
                        412
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'qrDecomposition')": [
                        764,
                        765
                    ]
                },
                "new": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'estimate(EstimationProblem)')": [
                        403,
                        408,
                        412
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'qrDecomposition')": [
                        764,
                        765,
                        766
                    ]
                }
            },
            "src/java/org/apache/commons/math/fraction/Fraction.java": {
                "old": {
                    "('org.apache.commons.math.fraction#Fraction', None)": [
                        212,
                        217
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'negate')": [
                        374
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'addSub(Fraction,boolean)')": [
                        465
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'divide(Fraction)')": [
                        513,
                        514
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'getReducedFraction(int,int)')": [
                        532,
                        533,
                        545,
                        546
                    ]
                },
                "new": {
                    "('org.apache.commons.math.fraction#Fraction', None)": [
                        212,
                        217
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'negate')": [
                        374
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'addSub(Fraction,boolean)')": [
                        465
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'divide(Fraction)')": [
                        513,
                        514,
                        515
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'getReducedFraction(int,int)')": [
                        533,
                        534,
                        535,
                        547,
                        548,
                        549
                    ]
                }
            },
            "src/java/org/apache/commons/math/fraction/FractionConversionException.java": {
                "old": {
                    "('org.apache.commons.math.fraction#FractionConversionException', None)": [
                        41,
                        42,
                        53,
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.math.fraction#FractionConversionException', None)": [
                        41,
                        52
                    ]
                }
            },
            "src/java/org/apache/commons/math/fraction/FractionFormat.java": {
                "old": {
                    "('org.apache.commons.math.fraction#FractionFormat', 'parse(String)')": [
                        247,
                        248,
                        249
                    ]
                },
                "new": {
                    "('org.apache.commons.math.fraction#FractionFormat', 'parse(String)')": [
                        247,
                        248,
                        249
                    ]
                }
            },
            "src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java": {
                "old": {
                    "('org.apache.commons.math.geometry#CardanEulerSingularityException', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.math.geometry#CardanEulerSingularityException', None)": [
                        38
                    ]
                }
            },
            "src/java/org/apache/commons/math/geometry/NotARotationMatrixException.java": {
                "old": {
                    "('org.apache.commons.math.geometry#NotARotationMatrixException', None)": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.math.geometry#NotARotationMatrixException', None)": [
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/geometry/Rotation.java": {
                "old": {
                    "('org.apache.commons.math.geometry#Rotation', None)": [
                        159,
                        160,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        225,
                        226,
                        227,
                        228,
                        229,
                        1029
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'orthogonalizeMatrix(double,double)')": [
                        1025,
                        1026,
                        1027,
                        1028
                    ]
                },
                "new": {
                    "('org.apache.commons.math.geometry#Rotation', None)": [
                        159,
                        208,
                        209,
                        210,
                        221,
                        222,
                        223
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'orthogonalizeMatrix(double,double)')": [
                        1019,
                        1020,
                        1021
                    ]
                }
            },
            "src/java/org/apache/commons/math/geometry/Vector3D.java": {
                "old": {
                    "('org.apache.commons.math.geometry#Vector3D', 'normalize')": [
                        270,
                        271
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'orthogonal')": [
                        295
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'angle(Vector3D,Vector3D)')": [
                        325
                    ]
                },
                "new": {
                    "('org.apache.commons.math.geometry#Vector3D', 'normalize')": [
                        270
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'orthogonal')": [
                        294
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'angle(Vector3D,Vector3D)')": [
                        324
                    ]
                }
            },
            "src/java/org/apache/commons/math/geometry/Vector3DFormat.java": {
                "old": {
                    "('org.apache.commons.math.geometry#Vector3DFormat', 'parse(String)')": [
                        258,
                        259,
                        260
                    ]
                },
                "new": {
                    "('org.apache.commons.math.geometry#Vector3DFormat', 'parse(String)')": [
                        258,
                        259,
                        260
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#AbstractRealMatrix', None)": [
                        64,
                        65,
                        66,
                        69,
                        70,
                        71,
                        1207,
                        1226
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'copySubMatrix(int,int,int,int,double)')": [
                        330,
                        331,
                        332,
                        333
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'copySubMatrix(int,int,double)')": [
                        375,
                        376,
                        377,
                        378
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setSubMatrix(double,int,int)')": [
                        397,
                        398,
                        403,
                        404,
                        409,
                        410,
                        411,
                        412
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setRowMatrix(int,RealMatrix)')": [
                        454,
                        455,
                        456,
                        457,
                        458,
                        459
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setColumnMatrix(int,RealMatrix)')": [
                        490,
                        491,
                        492,
                        493,
                        494,
                        495
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setRowVector(int,RealVector)')": [
                        516,
                        517,
                        518,
                        519,
                        520
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setColumnVector(int,RealVector)')": [
                        541,
                        542,
                        543,
                        544,
                        545
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setRow(int,double)')": [
                        575,
                        576,
                        577,
                        578,
                        579
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setColumn(int,double)')": [
                        609,
                        610,
                        611,
                        612,
                        613
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'operate(double)')": [
                        718,
                        719,
                        720,
                        721,
                        722
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'operate(RealVector)')": [
                        747,
                        748,
                        749,
                        750,
                        751
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'preMultiply(double)')": [
                        774,
                        775,
                        776,
                        777,
                        778
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'preMultiply(RealVector)')": [
                        804,
                        805,
                        806,
                        807,
                        808
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkRowIndex(int)')": [
                        1122
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkColumnIndex(int)')": [
                        1135
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkSubMatrixIndex(int,int,int,int)')": [
                        1155,
                        1162
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkSubMatrixIndex(int,int)')": [
                        1179,
                        1180,
                        1181
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkAdditionCompatible(RealMatrix)')": [
                        1200,
                        1201,
                        1202,
                        1203,
                        1204,
                        1205,
                        1206
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkSubtractionCompatible(RealMatrix)')": [
                        1219,
                        1220,
                        1221,
                        1222,
                        1223,
                        1224,
                        1225
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkMultiplicationCompatible(RealMatrix)')": [
                        1237,
                        1238,
                        1239,
                        1240,
                        1241,
                        1242,
                        1243
                    ],
                    "(None, None)": [
                        1244
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#AbstractRealMatrix', None)": [
                        64,
                        65,
                        66,
                        69,
                        70,
                        71
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'copySubMatrix(int,int,int,int,double)')": [
                        330,
                        331
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'copySubMatrix(int,int,double)')": [
                        373,
                        374
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setSubMatrix(double,int,int)')": [
                        393,
                        398,
                        403,
                        404,
                        405
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setRowMatrix(int,RealMatrix)')": [
                        447,
                        448,
                        449
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setColumnMatrix(int,RealMatrix)')": [
                        480,
                        481,
                        482
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setRowVector(int,RealVector)')": [
                        503,
                        504,
                        505
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setColumnVector(int,RealVector)')": [
                        526,
                        527,
                        528
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setRow(int,double)')": [
                        558,
                        559,
                        560
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'setColumn(int,double)')": [
                        590,
                        591,
                        592
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'operate(double)')": [
                        697,
                        698,
                        699
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'operate(RealVector)')": [
                        724,
                        725,
                        726
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'preMultiply(double)')": [
                        749,
                        750,
                        751
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'preMultiply(RealVector)')": [
                        777,
                        778,
                        779
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkRowIndex(int)')": [
                        1093
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkColumnIndex(int)')": [
                        1106
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkSubMatrixIndex(int,int,int,int)')": [
                        1126,
                        1133
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkSubMatrixIndex(int,int)')": [
                        1150,
                        1151,
                        1152
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkAdditionCompatible(RealMatrix)')": [
                        1171,
                        1172,
                        1173,
                        1174
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkSubtractionCompatible(RealMatrix)')": [
                        1186,
                        1187,
                        1188,
                        1189
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'checkMultiplicationCompatible(RealMatrix)')": [
                        1200,
                        1201,
                        1202,
                        1203
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/BigMatrixImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getSubMatrix(int,int,int,int)')": [
                        591,
                        598
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getSubMatrix(int,int)')": [
                        629,
                        630,
                        631
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'setSubMatrix(BigDecimal,int,int)')": [
                        705,
                        706,
                        709,
                        710
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getEntry(int,int)')": [
                        862,
                        863,
                        864,
                        865
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', None)": [
                        866
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getTrace')": [
                        992
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'operate(BigDecimal)')": [
                        1009,
                        1010
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'preMultiply(BigDecimal)')": [
                        1050
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'solve(BigDecimal)')": [
                        1078
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'solve(BigMatrix)')": [
                        1120,
                        1121,
                        1122,
                        1123
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'checkRowIndex(int)')": [
                        1483,
                        1484
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'checkColumnIndex(int)')": [
                        1496,
                        1497
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getSubMatrix(int,int,int,int)')": [
                        591,
                        598
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getSubMatrix(int,int)')": [
                        629,
                        630,
                        631
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'setSubMatrix(BigDecimal,int,int)')": [
                        705,
                        706,
                        707,
                        710,
                        711,
                        712
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getEntry(int,int)')": [
                        864,
                        865,
                        866
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'getTrace')": [
                        992
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'operate(BigDecimal)')": [
                        1009,
                        1010,
                        1011,
                        1012
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'preMultiply(BigDecimal)')": [
                        1052,
                        1053,
                        1054
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'solve(BigDecimal)')": [
                        1082,
                        1083,
                        1084
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'solve(BigMatrix)')": [
                        1126,
                        1127,
                        1128,
                        1129,
                        1130,
                        1131
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'checkRowIndex(int)')": [
                        1491,
                        1492,
                        1493
                    ],
                    "('org.apache.commons.math.linear#BigMatrixImpl', 'checkColumnIndex(int)')": [
                        1505,
                        1506,
                        1507
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/DenseRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#DenseRealMatrix', None)": [
                        169,
                        170,
                        171,
                        172,
                        173,
                        1211,
                        1229,
                        1247,
                        1265
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'toBlocksLayout(double)')": [
                        219
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setSubMatrix(double,int,int)')": [
                        804,
                        805,
                        812,
                        813,
                        814,
                        815
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setRowMatrix(int,DenseRealMatrix)')": [
                        911,
                        912,
                        913,
                        914,
                        915,
                        916
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setColumnMatrix(int,DenseRealMatrix)')": [
                        1000,
                        1001,
                        1002,
                        1003,
                        1004,
                        1005
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setRow(int,double)')": [
                        1124,
                        1125,
                        1126,
                        1127,
                        1128
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setColumn(int,double)')": [
                        1175,
                        1176,
                        1177,
                        1178,
                        1179
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'getEntry(int,int)')": [
                        1207,
                        1208,
                        1209,
                        1210
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setEntry(int,int,double)')": [
                        1225,
                        1226,
                        1227,
                        1228
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'addToEntry(int,int,double)')": [
                        1243,
                        1244,
                        1245,
                        1246
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'multiplyEntry(int,int,double)')": [
                        1261,
                        1262,
                        1263,
                        1264
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'operate(double)')": [
                        1320,
                        1321,
                        1322,
                        1323,
                        1324
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'preMultiply(double)')": [
                        1364,
                        1365,
                        1366,
                        1367,
                        1368
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#DenseRealMatrix', None)": [
                        169,
                        170,
                        171
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'toBlocksLayout(double)')": [
                        217
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setSubMatrix(double,int,int)')": [
                        802,
                        809,
                        810,
                        811
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setRowMatrix(int,DenseRealMatrix)')": [
                        907,
                        908,
                        909,
                        910
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setColumnMatrix(int,DenseRealMatrix)')": [
                        994,
                        995,
                        996,
                        997
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setRow(int,double)')": [
                        1116,
                        1117,
                        1118
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setColumn(int,double)')": [
                        1165,
                        1166,
                        1167
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'getEntry(int,int)')": [
                        1195,
                        1196,
                        1197
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'setEntry(int,int,double)')": [
                        1211,
                        1212,
                        1213
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'addToEntry(int,int,double)')": [
                        1227,
                        1228,
                        1229
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'multiplyEntry(int,int,double)')": [
                        1243,
                        1244,
                        1245
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'operate(double)')": [
                        1300,
                        1301,
                        1302
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrix', 'preMultiply(double)')": [
                        1342,
                        1343,
                        1344
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/InvalidMatrixException.java": {
                "old": {
                    "('org.apache.commons.math.linear#InvalidMatrixException', None)": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#InvalidMatrixException', None)": [
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/MatrixIndexException.java": {
                "old": {
                    "('org.apache.commons.math.linear#MatrixIndexException', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#MatrixIndexException', None)": [
                        37
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/RealMatrixImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealMatrixImpl', None)": [
                        123,
                        124,
                        128,
                        129,
                        133,
                        134,
                        135,
                        355,
                        369,
                        383,
                        397
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'setSubMatrix(double,int,int)')": [
                        311,
                        312,
                        315,
                        316,
                        320,
                        321,
                        326,
                        327,
                        332,
                        333,
                        334,
                        335
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'getEntry(int,int)')": [
                        351,
                        352,
                        353,
                        354
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'setEntry(int,int,double)')": [
                        365,
                        366,
                        367,
                        368
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'addToEntry(int,int,double)')": [
                        379,
                        380,
                        381,
                        382
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'multiplyEntry(int,int,double)')": [
                        393,
                        394,
                        395,
                        396
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'operate(double)')": [
                        417,
                        418,
                        419,
                        420,
                        421
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'preMultiply(double)')": [
                        442,
                        443,
                        444,
                        445,
                        446
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RealMatrixImpl', None)": [
                        123,
                        127,
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'setSubMatrix(double,int,int)')": [
                        309,
                        310,
                        311,
                        314,
                        315,
                        316,
                        320,
                        325,
                        330,
                        331,
                        332
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'getEntry(int,int)')": [
                        348,
                        349,
                        350
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'setEntry(int,int,double)')": [
                        360,
                        361,
                        362
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'addToEntry(int,int,double)')": [
                        372,
                        373,
                        374
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'multiplyEntry(int,int,double)')": [
                        384,
                        385,
                        386
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'operate(double)')": [
                        406,
                        407,
                        408
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImpl', 'preMultiply(double)')": [
                        429,
                        430,
                        431
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/RealVectorFormat.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealVectorFormat', 'parse(String)')": [
                        262,
                        263,
                        264
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RealVectorFormat', 'parse(String)')": [
                        262,
                        263,
                        264
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/RealVectorImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealVectorImpl', 'unitVector')": [
                        1072
                    ],
                    "('org.apache.commons.math.linear#RealVectorImpl', 'unitize')": [
                        1081,
                        1082
                    ],
                    "('org.apache.commons.math.linear#RealVectorImpl', 'checkIndex(int)')": [
                        1402,
                        1403
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RealVectorImpl', 'unitVector')": [
                        1072
                    ],
                    "('org.apache.commons.math.linear#RealVectorImpl', 'unitize')": [
                        1081
                    ],
                    "('org.apache.commons.math.linear#RealVectorImpl', 'checkIndex(int)')": [
                        1401,
                        1402,
                        1403
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/SparseRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealVector', 'unitize')": [
                        1171,
                        1172
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'checkIndex(int)')": [
                        1195
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'checkVectorDimensions(int)')": [
                        1211
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealVector', 'unitize')": [
                        1171
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'checkIndex(int)')": [
                        1194
                    ],
                    "('org.apache.commons.math.linear#SparseRealVector', 'checkVectorDimensions(int)')": [
                        1210
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#CholeskyDecompositionImpl', None)": [
                        227,
                        266,
                        315
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#CholeskyDecompositionImpl', None)": [
                        227,
                        266,
                        315
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#EigenDecompositionImpl', None)": [
                        180,
                        181,
                        415,
                        451,
                        487,
                        488,
                        489,
                        490
                    ],
                    "('org.apache.commons.math.linear.decomposition#EigenDecompositionImpl', 'process2RowsBlock(int)')": [
                        747
                    ],
                    "('org.apache.commons.math.linear.decomposition#EigenDecompositionImpl', 'process3RowsBlock(int)')": [
                        787
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#EigenDecompositionImpl', None)": [
                        180,
                        414,
                        450,
                        486
                    ],
                    "('org.apache.commons.math.linear.decomposition#EigenDecompositionImpl', 'process2RowsBlock(int)')": [
                        743
                    ],
                    "('org.apache.commons.math.linear.decomposition#EigenDecompositionImpl', 'process3RowsBlock(int)')": [
                        783
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#LUDecompositionImpl', None)": [
                        276,
                        319,
                        372
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#LUDecompositionImpl', None)": [
                        276,
                        319,
                        372
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#NonSquareMatrixException', None)": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#NonSquareMatrixException', None)": [
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#NotPositiveDefiniteMatrixException', None)": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#NotPositiveDefiniteMatrixException', None)": [
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#NotSymmetricMatrixException', None)": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#NotSymmetricMatrixException', None)": [
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#QRDecompositionImpl', None)": [
                        306,
                        377
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#QRDecompositionImpl', None)": [
                        306,
                        377
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#SingularMatrixException', None)": [
                        36
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#SingularMatrixException', None)": [
                        36
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear.decomposition#SingularValueDecompositionImpl', None)": [
                        346,
                        375,
                        404,
                        405,
                        406,
                        407
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear.decomposition#SingularValueDecompositionImpl', None)": [
                        346,
                        375,
                        404,
                        405
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'sanityChecks(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        161
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'sanityChecks(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        140,
                        141,
                        142,
                        143,
                        147,
                        148,
                        149,
                        150,
                        154,
                        155,
                        156
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/ContinuousOutputModel.java": {
                "old": {
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'setInterpolatedTime(double)')": [
                        318
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'setInterpolatedTime(double)')": [
                        318
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/DerivativeException.java": {
                "old": {
                    "('org.apache.commons.math.ode#DerivativeException', None)": [
                        37,
                        48,
                        49
                    ],
                    "(None, None)": [
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#DerivativeException', None)": [
                        32,
                        33,
                        34,
                        40
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/IntegratorException.java": {
                "old": {
                    "('org.apache.commons.math.ode#IntegratorException', None)": [
                        30,
                        36,
                        48,
                        49
                    ],
                    "(None, None)": [
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#IntegratorException', None)": [
                        30,
                        31,
                        32,
                        33,
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/events/EventException.java": {
                "old": {
                    "('org.apache.commons.math.ode.events#EventException', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.events#EventException', None)": [
                        38
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/events/EventState.java": {
                "old": {
                    "('org.apache.commons.math.ode.events#EventState', 'evaluateStep(StepInterpolator)')": [
                        200,
                        202
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.events#EventState', 'evaluateStep(StepInterpolator)')": [
                        200,
                        202
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'sanityChecks(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        164,
                        165,
                        166,
                        167,
                        168
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', None)": [
                        169
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'filterStep(double,boolean,boolean)')": [
                        270,
                        271,
                        272,
                        273,
                        274,
                        275
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'sanityChecks(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        155,
                        156,
                        157,
                        158,
                        162,
                        163,
                        164,
                        165
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'filterStep(double,boolean,boolean)')": [
                        266,
                        267,
                        268
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/CostException.java": {
                "old": {
                    "('org.apache.commons.math.optimization#CostException', None)": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#CostException', None)": [
                        42
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#DirectSearchOptimizer', 'minimize(CostFunction,int,ConvergenceChecker,double,int,long)')": [
                        273
                    ],
                    "('org.apache.commons.math.optimization#DirectSearchOptimizer', 'minimize(CostFunction,int,ConvergenceChecker)')": [
                        510,
                        511,
                        512,
                        513,
                        514
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#DirectSearchOptimizer', 'minimize(CostFunction,int,ConvergenceChecker,double,int,long)')": [
                        273
                    ],
                    "('org.apache.commons.math.optimization#DirectSearchOptimizer', 'minimize(CostFunction,int,ConvergenceChecker)')": [
                        510,
                        511,
                        512
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(URL)')": [
                        143
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'getNextValue')": [
                        416,
                        417,
                        437
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'load(URL)')": [
                        143
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'getNextValue')": [
                        416,
                        436
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/RandomAdaptor.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomAdaptor', None)": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#RandomAdaptor', None)": [
                        35,
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/ValueServer.java": {
                "old": {
                    "('org.apache.commons.math.random#ValueServer', 'getNext')": [
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119
                    ],
                    "('org.apache.commons.math.random#ValueServer', None)": [
                        120
                    ],
                    "('org.apache.commons.math.random#ValueServer', 'getNextDigest')": [
                        309
                    ],
                    "('org.apache.commons.math.random#ValueServer', 'getNextReplay')": [
                        343
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#ValueServer', 'getNext')": [
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115
                    ],
                    "('org.apache.commons.math.random#ValueServer', 'getNextDigest')": [
                        304
                    ],
                    "('org.apache.commons.math.random#ValueServer', 'getNextReplay')": [
                        338
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/correlation/Covariance.java": {
                "old": {
                    "('org.apache.commons.math.stat.correlation#Covariance', 'covariance(double,double,boolean)')": [
                        202,
                        204
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', 'checkSufficientData(RealMatrix)')": [
                        219,
                        220
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.correlation#Covariance', 'covariance(double,double,boolean)')": [
                        202,
                        204
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', 'checkSufficientData(RealMatrix)')": [
                        219,
                        220
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java": {
                "old": {
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', None)": [
                        94,
                        95
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'correlation(double,double)')": [
                        223,
                        224
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'checkSufficientData(RealMatrix)')": [
                        266,
                        267
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', None)": [
                        94
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'correlation(double,double)')": [
                        222,
                        223
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'checkSufficientData(RealMatrix)')": [
                        265,
                        266
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatistics', 'checkEmpty')": [
                        613,
                        614
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatistics', 'checkEmpty')": [
                        613,
                        614,
                        615
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#SummaryStatistics', 'checkEmpty')": [
                        613,
                        614
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive#SummaryStatistics', 'checkEmpty')": [
                        613,
                        614,
                        615
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#GeometricMean', 'checkEmpty')": [
                        189,
                        190
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive.moment#GeometricMean', 'checkEmpty')": [
                        189,
                        190,
                        191
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#Kurtosis', 'increment(double)')": [
                        94,
                        95,
                        96
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#Kurtosis', 'clear')": [
                        127,
                        128,
                        129
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive.moment#Kurtosis', 'increment(double)')": [
                        94,
                        95
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#Kurtosis', 'clear')": [
                        126,
                        127
                    ]
                }
            },
            "src/java/org/apache/commons/math/transform/FastCosineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'fct(double)')": [
                        227,
                        228
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'fct(double)')": [
                        227,
                        228,
                        229
                    ]
                }
            },
            "src/java/org/apache/commons/math/transform/FastFourierTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'sample(UnivariateRealFunction,double,double,int)')": [
                        434,
                        435
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(double)')": [
                        495,
                        496
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(Object)')": [
                        508,
                        509
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyInterval(double,double)')": [
                        524,
                        525
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        664,
                        665,
                        668,
                        669,
                        670,
                        671,
                        672,
                        694,
                        695,
                        700,
                        701,
                        702,
                        703,
                        704,
                        820,
                        821,
                        840,
                        841,
                        886,
                        887,
                        892,
                        911,
                        912,
                        917
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'sample(UnivariateRealFunction,double,double,int)')": [
                        434,
                        435,
                        436
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(double)')": [
                        496,
                        497,
                        498
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(Object)')": [
                        510,
                        511,
                        512
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyInterval(double,double)')": [
                        527,
                        528,
                        529
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        668,
                        669,
                        670,
                        673,
                        674,
                        675,
                        697,
                        698,
                        699,
                        704,
                        705,
                        706,
                        822,
                        841,
                        886,
                        891,
                        910,
                        915
                    ]
                }
            },
            "src/java/org/apache/commons/math/transform/FastHadamardTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'fht(double)')": [
                        165,
                        166
                    ],
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'fht(int)')": [
                        215,
                        216
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'fht(double)')": [
                        165,
                        166,
                        167
                    ],
                    "('org.apache.commons.math.transform#FastHadamardTransformer', 'fht(int)')": [
                        216,
                        217,
                        218
                    ]
                }
            },
            "src/java/org/apache/commons/math/transform/FastSineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastSineTransformer', 'fst(double)')": [
                        221,
                        222
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastSineTransformer', 'fst(double)')": [
                        221,
                        222,
                        223
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/ContinuedFraction.java": {
                "old": {
                    "('org.apache.commons.math.util#ContinuedFraction', 'evaluate(double,double,int)')": [
                        158,
                        175
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#ContinuedFraction', 'evaluate(double,double,int)')": [
                        158,
                        175
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/DefaultTransformer.java": {
                "old": {
                    "('org.apache.commons.math.util#DefaultTransformer', 'transform(Object)')": [
                        47,
                        57,
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#DefaultTransformer', 'transform(Object)')": [
                        47,
                        57,
                        58
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'gcd(int,int)')": [
                        546,
                        572
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtils', 'gcd(int,int)')": [
                        545,
                        571
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java": {
                "old": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', None)": [
                        526,
                        527,
                        530,
                        544,
                        545,
                        548,
                        562,
                        563,
                        577
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', None)": [
                        526,
                        529,
                        543,
                        546,
                        560,
                        574
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/ResizableDoubleArray.java": {
                "old": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'substituteMostRecentElement(double)')": [
                        324
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'checkContractExpand(float,float)')": [
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        370,
                        371,
                        372
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'discardExtremeElements(int,boolean)')": [
                        456,
                        457,
                        458,
                        459,
                        460,
                        461
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'getElement(int)')": [
                        539,
                        540,
                        544,
                        545
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setElement(int,double)')": [
                        669,
                        670
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionMode(int)')": [
                        708
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setInitialCapacity(int)')": [
                        725,
                        726,
                        727,
                        728,
                        729
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setNumElements(int)')": [
                        745,
                        746,
                        747
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'substituteMostRecentElement(double)')": [
                        324
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'checkContractExpand(float,float)')": [
                        350,
                        351,
                        352,
                        353,
                        354,
                        358,
                        359,
                        360,
                        361,
                        362,
                        366,
                        367,
                        368
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'discardExtremeElements(int,boolean)')": [
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'getElement(int)')": [
                        536,
                        537,
                        538,
                        542,
                        543,
                        544
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setElement(int,double)')": [
                        668,
                        669,
                        670
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setExpansionMode(int)')": [
                        708,
                        709,
                        710,
                        711
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setInitialCapacity(int)')": [
                        728,
                        729,
                        730,
                        731
                    ],
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'setNumElements(int)')": [
                        747,
                        748,
                        749
                    ]
                }
            },
            "src/test/org/apache/commons/math/ConvergenceExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#ConvergenceExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.math#ConvergenceExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        63
                    ]
                }
            },
            "src/test/org/apache/commons/math/FunctionEvaluationExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        56
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorArgumentCause')": [
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        56
                    ],
                    "('org.apache.commons.math#FunctionEvaluationExceptionTest', 'testConstructorArgumentCause')": [
                        70
                    ]
                }
            },
            "src/test/org/apache/commons/math/MathConfigurationExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#MathConfigurationExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathConfigurationExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        62
                    ]
                }
            },
            "src/test/org/apache/commons/math/MathExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#MathExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        65
                    ],
                    "('org.apache.commons.math#MathExceptionTest', 'testPrintStackTrace')": [
                        82,
                        83
                    ],
                    "('org.apache.commons.math#MathExceptionTest', 'testSerialization')": [
                        107,
                        108
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MathExceptionTest', 'testConstructorPatternArgumentsCause')": [
                        65
                    ],
                    "('org.apache.commons.math#MathExceptionTest', 'testPrintStackTrace')": [
                        82,
                        83
                    ],
                    "('org.apache.commons.math#MathExceptionTest', 'testSerialization')": [
                        107,
                        108
                    ]
                }
            },
            "src/test/org/apache/commons/math/MaxIterationsExceededExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#MaxIterationsExceededExceptionTest', 'testComplexConstructor')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MaxIterationsExceededExceptionTest', 'testComplexConstructor')": [
                        42
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/BigMatrixImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BigMatrixImplTest', 'splitLU(BigMatrix,BigDecimal,BigDecimal)')": [
                        786
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BigMatrixImplTest', 'splitLU(BigMatrix,BigDecimal,BigDecimal)')": [
                        786
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/InvalidMatrixExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#InvalidMatrixExceptionTest', None)": [
                        27,
                        28,
                        29
                    ],
                    "('org.apache.commons.math.linear#InvalidMatrixExceptionTest', 'testConstructorMessage')": [
                        32
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#InvalidMatrixExceptionTest', 'testConstructorMessage')": [
                        29
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/MatrixIndexExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#MatrixIndexExceptionTest', 'testConstructorMessage')": [
                        32
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#MatrixIndexExceptionTest', 'testConstructorMessage')": [
                        32
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'splitLU(RealMatrix,double,double)')": [
                        967
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'splitLU(RealMatrix,double,double)')": [
                        967
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/decomposition/CholeskySolverTest.java": {
                "old": {
                    "(None, None)": [
                        29,
                        30,
                        31
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/decomposition/EigenSolverTest.java": {
                "old": {
                    "(None, None)": [
                        31,
                        32,
                        33
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/decomposition/LUSolverTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/decomposition/QRSolverTest.java": {
                "old": {
                    "(None, None)": [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/decomposition/SingularValueSolverTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/FirstOrderConverterTest.java": {
                "old": {
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', None)": [
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', None)": [
                        81,
                        82,
                        83
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testWrongDerivative')": [
                        52
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testEventsErrors')": [
                        219,
                        220
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testWrongDerivative')": [
                        52
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testEventsErrors')": [
                        219
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/MultiDirectionalTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiDirectionalTest', 'testCostExceptions')": [
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiDirectionalTest', 'testCostExceptions')": [
                        41
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/NelderMeadTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#NelderMeadTest', 'testCostExceptions')": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#NelderMeadTest', 'testCostExceptions')": [
                        47
                    ]
                }
            },
            "src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        25
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ]
                }
            },
            "src/test/org/apache/commons/math/util/TestBean.java": {
                "old": {
                    "('org.apache.commons.math.util#TestBean', 'getZ')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#TestBean', 'getZ')": [
                        62
                    ]
                }
            }
        }
    },
    "8bf548c5e83e067503d10f304d9f855ced1a449c": {
        "authored_data": "2009 Feb 21 13:54",
        "commit.message": "Fixed an error in computing gcd and lcm for some extreme values at integer range boundaries.\nJIRA: MATH-243\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@746511 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "39a80bf2cda13f28b3430733e645b7fd13bb92ba",
        "changes": {
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        47,
                        48,
                        49,
                        50
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        513,
                        514,
                        515,
                        516,
                        663,
                        664,
                        665,
                        666,
                        667,
                        668
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'gcd(int,int)')": [
                        519,
                        543
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'lcm(int,int)')": [
                        672
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24
                    ],
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        692,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706,
                        707,
                        708,
                        709,
                        710,
                        711
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'gcd(int,int)')": [
                        539,
                        540,
                        541,
                        543,
                        544,
                        545,
                        546,
                        547,
                        570,
                        571,
                        572
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'lcm(int,int)')": [
                        715,
                        716,
                        717,
                        718,
                        719,
                        720,
                        721,
                        722
                    ]
                }
            },
            "src/test/org/apache/commons/math/util/MathUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'testGcd')": [
                        432,
                        433,
                        434
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', None)": [
                        437
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'testGcd')": [
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        451
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', None)": [
                        453
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testLcm')": [
                        577,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600,
                        601
                    ]
                }
            }
        }
    }
}