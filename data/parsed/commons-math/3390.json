{
    "0f2ef2d95437498b0f9d1a03e904979bdeca1115": {
        "authored_data": "2012 Feb 12 23:43",
        "commit.message": "MATH-707\nRenamed \"SimpleVectorialValueChecker\" to \"SimpleVectorValueChecker\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243370 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "1b8959c71177af29d103e10c2b96f496d234f20a",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', None)": [
                        58,
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', None)": [
                        58,
                        62
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        86
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        54,
                        73,
                        81
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        54,
                        73,
                        81
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateVectorMultiStartOptimizerTest', 'testTrivial')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateVectorMultiStartOptimizerTest', 'testNoOptimum')": [
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateVectorMultiStartOptimizerTest', 'testTrivial')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateVectorMultiStartOptimizerTest', 'testNoOptimum')": [
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        108
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        125
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        150
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        171
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        195
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNonInversible')": [
                        220
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        235
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        273
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        290
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        305
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentEquations')": [
                        324
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes1')": [
                        337
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes2')": [
                        356
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMaxEvaluations')": [
                        379
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        396
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingBadInit')": [
                        422
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingGoodInit')": [
                        440
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        108
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        125
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        150
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        171
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        195
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNonInversible')": [
                        220
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        235
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        273
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        290
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        305
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentEquations')": [
                        324
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes1')": [
                        337
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes2')": [
                        356
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMaxEvaluations')": [
                        379
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        396
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingBadInit')": [
                        422
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingGoodInit')": [
                        440
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        483
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        483
                    ]
                }
            }
        }
    },
    "1b8959c71177af29d103e10c2b96f496d234f20a": {
        "authored_data": "2012 Feb 12 23:38",
        "commit.message": "MATH-707\n\"SimpleScalarValueChecker\" renamed to \"SimpleValueChecker\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243366 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "0bee543107551ad6741b231970687d49e001c58f",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        29
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', None)": [
                        56,
                        60
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', None)": [
                        56,
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', None)": [
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', None)": [
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java": {
                "old": {
                    "(None, None)": [
                        38
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizer', None)": [
                        283
                    ]
                },
                "new": {
                    "(None, None)": [
                        38
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizer', None)": [
                        283
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizer', None)": [
                        93,
                        97,
                        112
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizer', None)": [
                        93,
                        97,
                        112
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        47,
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        47,
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', None)": [
                        57,
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', None)": [
                        57,
                        67
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateMultiStartOptimizerTest', 'testCircleFitting')": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateMultiStartOptimizerTest', 'testCircleFitting')": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultivariateMultiStartOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultivariateMultiStartOptimizerTest', 'testRosenbrock')": [
                        36
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultivariateMultiStartOptimizerTest', 'testRosenbrock')": [
                        36
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMaximize2')": [
                        76
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMaximize2')": [
                        76
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTrivial')": [
                        103
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testColumnsPermutation')": [
                        118
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNoDependency')": [
                        139
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testOneSet')": [
                        156
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTwoSets')": [
                        193
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNonInversible')": [
                        217
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testIllConditioned')": [
                        233
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        267
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        285
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testRedundantEquations')": [
                        301
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testInconsistentEquations')": [
                        319
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testCircleFitting')": [
                        336
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTrivial')": [
                        103
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testColumnsPermutation')": [
                        118
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNoDependency')": [
                        139
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testOneSet')": [
                        156
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTwoSets')": [
                        193
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNonInversible')": [
                        217
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testIllConditioned')": [
                        233
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        267
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        285
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testRedundantEquations')": [
                        301
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testInconsistentEquations')": [
                        319
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testCircleFitting')": [
                        336
                    ]
                }
            }
        }
    },
    "0bee543107551ad6741b231970687d49e001c58f": {
        "authored_data": "2012 Feb 12 23:29",
        "commit.message": "MATH-707\n\"SimpleRealPointChecker\" and \"SimpleVectorialPointChecker\" are replaced by\nthe generic \"SimplePointChecker\" (instantiated using \"PointValuePair\" and\n\"PointVectorValuePair\", respectively).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243365 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "7921608decee581d0ac2081b02519ee19790b854",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testOptimumOutsideRange')": [
                        82
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testHalfBounded')": [
                        128
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testOptimumOutsideRange')": [
                        82
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testHalfBounded')": [
                        128
                    ]
                }
            }
        }
    },
    "7921608decee581d0ac2081b02519ee19790b854": {
        "authored_data": "2012 Feb 12 20:00",
        "commit.message": "MATH-707\nRenamed \"VectorialPointValuePair\" to \"PointVectorValuePair\" and made it a\nsubclass of \"Pair<double[], double[]>\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243310 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "3390941cd16d535353714bde9888b4118b78941f",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorMultiStartOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', None)": [
                        56
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'getOptima')": [
                        113
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'getConvergenceChecker')": [
                        131
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'optimize(int,FUNC,double,double,double)')": [
                        138,
                        143
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'sortPairs(double,double)')": [
                        182,
                        183,
                        184,
                        192
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', None)": [
                        56
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'getOptima')": [
                        113
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'getConvergenceChecker')": [
                        131
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'optimize(int,FUNC,double,double,double)')": [
                        138,
                        143
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateVectorMultiStartOptimizer', 'sortPairs(double,double)')": [
                        182,
                        183,
                        184,
                        192
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorOptimizer.java": {
                "old": {
                    "(None, None)": [
                        36,
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        36,
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/PointValuePair.java": {
                "old": {
                    "('org.apache.commons.math.optimization#PointValuePair', None)": [
                        34,
                        35
                    ],
                    "('org.apache.commons.math.optimization#PointValuePair', 'getPoint')": [
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization#PointValuePair', None)": [
                        35,
                        36
                    ],
                    "('org.apache.commons.math.optimization#PointValuePair', 'getPoint')": [
                        67,
                        68
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        72,
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,PointVectorValuePair,PointVectorValuePair)')": [
                        72,
                        73
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        74,
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,PointVectorValuePair,PointVectorValuePair)')": [
                        74,
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', None)": [
                        46,
                        67
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', 'getConvergenceChecker')": [
                        82
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', 'optimize(int,FUNC,double,double,double)')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', 'doOptimize')": [
                        150
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', None)": [
                        46,
                        67
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', 'getConvergenceChecker')": [
                        82
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', 'optimize(int,FUNC,double,double,double)')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateVectorOptimizer', 'doOptimize')": [
                        150
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', 'fit(int,ParametricUnivariateFunction,double)')": [
                        157
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', 'fit(int,ParametricUnivariateFunction,double)')": [
                        157
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        92
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(int,DifferentiableMultivariateVectorFunction,double,double,double)')": [
                        255
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        92
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(int,DifferentiableMultivariateVectorFunction,double,double,double)')": [
                        255
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        67,
                        91
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        98,
                        100,
                        104,
                        110,
                        113
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        67,
                        91
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        98,
                        100,
                        104,
                        110,
                        113
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        169,
                        196
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        272,
                        299,
                        301,
                        310,
                        360,
                        460
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        169,
                        196
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        272,
                        299,
                        301,
                        310,
                        360,
                        460
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorMultiStartOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateVectorMultiStartOptimizerTest', 'testTrivial')": [
                        120,
                        124
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateVectorMultiStartOptimizerTest', 'testTrivial')": [
                        120,
                        124
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        110
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        127
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        152
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        173
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        197
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        237,
                        252
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        307
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes1')": [
                        339
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes2')": [
                        358
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        398
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingGoodInit')": [
                        442
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        110
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        127
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        152
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        173
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        197
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        237,
                        252
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        307
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes1')": [
                        339
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes2')": [
                        358
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        398
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingGoodInit')": [
                        442
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTrivial')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testQRColumnsPermutation')": [
                        133
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNoDependency')": [
                        154
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testOneSet')": [
                        172
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTwoSets')": [
                        193
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testIllConditioned')": [
                        233,
                        248
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        284
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testRedundantEquations')": [
                        303
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testInconsistentSizes')": [
                        330
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        401
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        484
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTrivial')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testQRColumnsPermutation')": [
                        133
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNoDependency')": [
                        154
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testOneSet')": [
                        172
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTwoSets')": [
                        193
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testIllConditioned')": [
                        233,
                        248
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        284
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testRedundantEquations')": [
                        303
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testInconsistentSizes')": [
                        330
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        401
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        484
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        512
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        582
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        512
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        582
                    ]
                }
            }
        }
    },
    "a436c93ce3d5816d0fc4518ea5948678c0db5755": {
        "authored_data": "2012 Feb 12 19:44",
        "commit.message": "Merged TTest implementation and interface, removed use of MathException.\nJIRA: MATH-488, MATH-739\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243304 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "36a39209241f69ad8802377193315c23802e30b8",
        "changes": {
            "src/main/java/org/apache/commons/math/stat/inference/TTest.java": {
                "old": {
                    "(None, None)": [
                        19,
                        23,
                        42,
                        43,
                        47,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        100,
                        101,
                        102,
                        103,
                        104,
                        126,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        155,
                        156,
                        157,
                        158,
                        167,
                        173,
                        174,
                        175,
                        176,
                        185,
                        208,
                        209,
                        210,
                        211,
                        220,
                        238,
                        239,
                        240,
                        241,
                        252,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        287,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        339,
                        340,
                        341,
                        342,
                        343,
                        376,
                        377,
                        378,
                        379,
                        380,
                        406,
                        407,
                        408,
                        409,
                        410,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        485,
                        486,
                        487,
                        488,
                        489,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525,
                        526,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        630,
                        631,
                        632,
                        633,
                        634,
                        635,
                        636,
                        637,
                        649,
                        669,
                        670,
                        671,
                        672,
                        673,
                        674,
                        675,
                        706,
                        707,
                        708,
                        709,
                        710,
                        711,
                        712,
                        763,
                        764,
                        765,
                        766,
                        767,
                        768,
                        769,
                        770
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        29,
                        32,
                        51,
                        52,
                        53,
                        1165,
                        1166,
                        1167,
                        1168
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', None)": [
                        57,
                        74,
                        75,
                        76,
                        77,
                        78,
                        89,
                        90,
                        91,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        136,
                        137,
                        138,
                        160,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        182,
                        183,
                        184,
                        198,
                        199,
                        200,
                        207,
                        208,
                        209,
                        218,
                        224,
                        225,
                        226,
                        233,
                        234,
                        235,
                        244,
                        267,
                        268,
                        269,
                        278,
                        279,
                        280,
                        289,
                        307,
                        308,
                        309,
                        318,
                        319,
                        320,
                        331,
                        350,
                        351,
                        352,
                        362,
                        363,
                        364,
                        375,
                        398,
                        399,
                        400,
                        410,
                        411,
                        412,
                        436,
                        437,
                        438,
                        439,
                        447,
                        448,
                        449,
                        482,
                        483,
                        484,
                        485,
                        486,
                        493,
                        494,
                        495,
                        521,
                        522,
                        523,
                        524,
                        532,
                        533,
                        534,
                        568,
                        569,
                        570,
                        571,
                        572,
                        580,
                        581,
                        582,
                        616,
                        617,
                        618,
                        619,
                        629,
                        630,
                        631,
                        662,
                        663,
                        664,
                        665,
                        677,
                        678,
                        679,
                        727,
                        728,
                        729,
                        730,
                        731,
                        739,
                        740,
                        741,
                        790,
                        791,
                        792,
                        793,
                        794,
                        802,
                        803,
                        804,
                        816,
                        836,
                        837,
                        838,
                        839,
                        850,
                        851,
                        852,
                        883,
                        884,
                        885,
                        886,
                        899,
                        900,
                        901,
                        952,
                        953,
                        954,
                        955,
                        956,
                        965,
                        966,
                        967,
                        968,
                        969,
                        970,
                        971,
                        972,
                        973,
                        974,
                        975,
                        976,
                        977,
                        978,
                        983,
                        984,
                        985,
                        986,
                        987,
                        988,
                        989,
                        990,
                        991,
                        992,
                        993,
                        997,
                        998,
                        999,
                        1000,
                        1001,
                        1002,
                        1003,
                        1004,
                        1005,
                        1006,
                        1007,
                        1008,
                        1009,
                        1010,
                        1011,
                        1016,
                        1017,
                        1018,
                        1019,
                        1020,
                        1021,
                        1022,
                        1023,
                        1024,
                        1025,
                        1026,
                        1027,
                        1028,
                        1029,
                        1035,
                        1036,
                        1037,
                        1038,
                        1039,
                        1040,
                        1041,
                        1042,
                        1043,
                        1044,
                        1045,
                        1046,
                        1054,
                        1055,
                        1056,
                        1057,
                        1058,
                        1059,
                        1060,
                        1061,
                        1062,
                        1063,
                        1064,
                        1065,
                        1066,
                        1067,
                        1068,
                        1069,
                        1070,
                        1071,
                        1081,
                        1082,
                        1083,
                        1084,
                        1085,
                        1086,
                        1087,
                        1088,
                        1089,
                        1090,
                        1091,
                        1092,
                        1093,
                        1094,
                        1095,
                        1096,
                        1097,
                        1098,
                        1108,
                        1109,
                        1110,
                        1111,
                        1112,
                        1113,
                        1114,
                        1115,
                        1116,
                        1123,
                        1124,
                        1125,
                        1126,
                        1127,
                        1128,
                        1129,
                        1130,
                        1131,
                        1132,
                        1133,
                        1144,
                        1145,
                        1146,
                        1147,
                        1148,
                        1149,
                        1150,
                        1151,
                        1152,
                        1153,
                        1154
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'pairedT(double,double)')": [
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'pairedTTest(double,double)')": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'pairedTTest(double,double,double)')": [
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 't(double,double)')": [
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 't(double,StatisticalSummary)')": [
                        227,
                        228,
                        229,
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'homoscedasticT(double,double)')": [
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 't(StatisticalSummary,StatisticalSummary)')": [
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'homoscedasticT(StatisticalSummary,StatisticalSummary)')": [
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(double,double)')": [
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627,
                        628
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(double,double,double)')": [
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        732,
                        733,
                        734,
                        735,
                        736,
                        737,
                        738
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(double,StatisticalSummary)')": [
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(double,StatisticalSummary,double)')": [
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'homoscedasticTTest(double,double)')": [
                        666,
                        667,
                        668,
                        669,
                        670,
                        671,
                        672,
                        673,
                        674,
                        675,
                        676
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'homoscedasticTTest(double,double,double)')": [
                        795,
                        796,
                        797,
                        798,
                        799,
                        800,
                        801
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(StatisticalSummary,StatisticalSummary)')": [
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        846,
                        847,
                        848,
                        849
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'homoscedasticTTest(StatisticalSummary,StatisticalSummary)')": [
                        887,
                        888,
                        889,
                        890,
                        891,
                        892,
                        893,
                        894,
                        895,
                        896,
                        897,
                        898
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(StatisticalSummary,StatisticalSummary,double)')": [
                        957,
                        958,
                        959,
                        960,
                        961,
                        962,
                        963,
                        964
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'df(double,double,double,double)')": [
                        979,
                        980,
                        981,
                        982
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 't(double,double,double,double)')": [
                        994,
                        995,
                        996
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 't(double,double,double,double,double,double)')": [
                        1012,
                        1013,
                        1014,
                        1015
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'homoscedasticT(double,double,double,double,double,double)')": [
                        1030,
                        1031,
                        1032,
                        1033,
                        1034
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(double,double,double,double)')": [
                        1047,
                        1048,
                        1049,
                        1050,
                        1051,
                        1052,
                        1053
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'tTest(double,double,double,double,double,double)')": [
                        1072,
                        1073,
                        1074,
                        1075,
                        1076,
                        1077,
                        1078,
                        1079,
                        1080
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'homoscedasticTTest(double,double,double,double,double,double)')": [
                        1099,
                        1100,
                        1101,
                        1102,
                        1103,
                        1104,
                        1105,
                        1106,
                        1107
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'checkSignificanceLevel(double)')": [
                        1117,
                        1118,
                        1119,
                        1120,
                        1121,
                        1122
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'checkSampleData(double)')": [
                        1134,
                        1135,
                        1136,
                        1137,
                        1138,
                        1139,
                        1140,
                        1141,
                        1142,
                        1143
                    ],
                    "('org.apache.commons.math.stat.inference#TTest', 'checkSampleData(StatisticalSummary)')": [
                        1155,
                        1156,
                        1157,
                        1158,
                        1159,
                        1160,
                        1161,
                        1162,
                        1163,
                        1164
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/inference/TestUtils.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', None)": [
                        41
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticT(double,double)')": [
                        61,
                        62
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticT(StatisticalSummary,StatisticalSummary)')": [
                        69,
                        70,
                        71
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticTTest(double,double,double)')": [
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticTTest(double,double)')": [
                        87,
                        88
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticTTest(StatisticalSummary,StatisticalSummary)')": [
                        95,
                        96,
                        97
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'pairedT(double,double)')": [
                        104,
                        105
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'pairedTTest(double,double,double)')": [
                        112,
                        113,
                        114
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'pairedTTest(double,double)')": [
                        121,
                        122
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 't(double,double)')": [
                        129,
                        130,
                        145,
                        146
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 't(double,StatisticalSummary)')": [
                        137,
                        138
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 't(StatisticalSummary,StatisticalSummary)')": [
                        153,
                        154,
                        155
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,double,double)')": [
                        162,
                        163,
                        195,
                        196
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,double)')": [
                        170,
                        171,
                        203,
                        204
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,StatisticalSummary,double)')": [
                        178,
                        179,
                        180
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,StatisticalSummary)')": [
                        187,
                        188
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(StatisticalSummary,StatisticalSummary,double)')": [
                        211,
                        212,
                        213
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(StatisticalSummary,StatisticalSummary)')": [
                        220,
                        221,
                        222
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        27
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', None)": [
                        42
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticT(double,double)')": [
                        62,
                        63
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticT(StatisticalSummary,StatisticalSummary)')": [
                        70,
                        71,
                        72
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticTTest(double,double,double)')": [
                        79,
                        80,
                        81,
                        82
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticTTest(double,double)')": [
                        89,
                        90
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'homoscedasticTTest(StatisticalSummary,StatisticalSummary)')": [
                        97,
                        98,
                        99
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'pairedT(double,double)')": [
                        106,
                        107,
                        108
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'pairedTTest(double,double,double)')": [
                        115,
                        116,
                        117,
                        118
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'pairedTTest(double,double)')": [
                        125,
                        126,
                        127
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 't(double,double)')": [
                        134,
                        135,
                        150,
                        151
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 't(double,StatisticalSummary)')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 't(StatisticalSummary,StatisticalSummary)')": [
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,double,double)')": [
                        167,
                        168,
                        169,
                        204,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,double)')": [
                        176,
                        177,
                        178,
                        214,
                        215,
                        216
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,StatisticalSummary,double)')": [
                        185,
                        186,
                        187,
                        188
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(double,StatisticalSummary)')": [
                        195,
                        196,
                        197
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(StatisticalSummary,StatisticalSummary,double)')": [
                        223,
                        224,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'tTest(StatisticalSummary,StatisticalSummary)')": [
                        234,
                        235,
                        236,
                        237
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/inference/TTestTest.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', None)": [
                        33,
                        117,
                        154,
                        243
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', 'testOneSampleT')": [
                        69,
                        70,
                        76,
                        77,
                        83,
                        84,
                        90,
                        91,
                        97,
                        98,
                        103,
                        104,
                        110,
                        111,
                        116
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', 'testOneSampleTTest')": [
                        146,
                        147,
                        153
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', 'testTwoSampleTHeterscedastic')": [
                        193,
                        194,
                        200,
                        201,
                        207,
                        208,
                        214,
                        215,
                        221,
                        222,
                        228,
                        229,
                        235,
                        236,
                        242
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', None)": [
                        35,
                        119,
                        156,
                        245
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', 'testOneSampleT')": [
                        71,
                        72,
                        78,
                        79,
                        85,
                        86,
                        92,
                        93,
                        99,
                        100,
                        105,
                        106,
                        112,
                        113,
                        118
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', 'testOneSampleTTest')": [
                        148,
                        149,
                        155
                    ],
                    "('org.apache.commons.math.stat.inference#TTestTest', 'testTwoSampleTHeterscedastic')": [
                        195,
                        196,
                        202,
                        203,
                        209,
                        210,
                        216,
                        217,
                        223,
                        224,
                        230,
                        231,
                        237,
                        238,
                        244
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testOneSampleT')": [
                        221,
                        222,
                        228,
                        229,
                        235,
                        236,
                        242,
                        243,
                        249,
                        250,
                        255,
                        256,
                        262,
                        263,
                        268
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', None)": [
                        269,
                        306,
                        395
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testOneSampleTTest')": [
                        298,
                        299,
                        305
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testTwoSampleTHeterscedastic')": [
                        345,
                        346,
                        352,
                        353,
                        359,
                        360,
                        366,
                        367,
                        373,
                        374,
                        380,
                        381,
                        387,
                        388,
                        394
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testOneSampleT')": [
                        222,
                        223,
                        229,
                        230,
                        236,
                        237,
                        243,
                        244,
                        250,
                        251,
                        256,
                        257,
                        263,
                        264,
                        269
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', None)": [
                        270,
                        307,
                        396
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testOneSampleTTest')": [
                        299,
                        300,
                        306
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testTwoSampleTHeterscedastic')": [
                        346,
                        347,
                        353,
                        354,
                        360,
                        361,
                        367,
                        368,
                        374,
                        375,
                        381,
                        382,
                        388,
                        389,
                        395
                    ]
                }
            }
        }
    },
    "36a39209241f69ad8802377193315c23802e30b8": {
        "authored_data": "2012 Feb 12 18:07",
        "commit.message": "Merged ChiSquareTest implementation and interface, removed use of MathException.\nJIRA: MATH-488, MATH-739\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243286 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "f994f9d4a9159a309410743bfa1c508e0fbcc641",
        "changes": {
            "src/main/java/org/apache/commons/math/stat/inference/ChiSquareTest.java": {
                "old": {
                    "(None, None)": [
                        19,
                        22,
                        23,
                        24,
                        25,
                        28,
                        29,
                        30,
                        35,
                        36,
                        41,
                        51,
                        52,
                        53,
                        54,
                        55,
                        72,
                        83,
                        84,
                        85,
                        86,
                        87,
                        91,
                        92,
                        93,
                        94,
                        104,
                        108,
                        118,
                        119,
                        120,
                        121,
                        122,
                        134,
                        147,
                        148,
                        149,
                        150,
                        151,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        178,
                        179,
                        180,
                        181,
                        182,
                        186,
                        187,
                        188,
                        189,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        206,
                        207,
                        216,
                        217,
                        218,
                        219,
                        220
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        32,
                        33,
                        34,
                        35,
                        36,
                        672,
                        673,
                        674,
                        675,
                        676
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', None)": [
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        53,
                        54,
                        59,
                        66,
                        67,
                        68,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        115,
                        116,
                        133,
                        140,
                        141,
                        142,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        161,
                        162,
                        166,
                        167,
                        168,
                        169,
                        179,
                        183,
                        187,
                        188,
                        189,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        214,
                        215,
                        227,
                        240,
                        241,
                        242,
                        243,
                        244,
                        276,
                        277,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        305,
                        306,
                        307,
                        308,
                        309,
                        319,
                        320,
                        324,
                        325,
                        326,
                        327,
                        328,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        345,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        599,
                        600,
                        601,
                        602,
                        603,
                        604,
                        605,
                        606,
                        607,
                        608,
                        609,
                        610,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        637,
                        638,
                        639,
                        640,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646,
                        647,
                        654,
                        655,
                        656,
                        657,
                        658,
                        659,
                        660,
                        661,
                        662,
                        663,
                        664
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquare(double,long)')": [
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquareTest(double,long)')": [
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquareTest(double,long,double)')": [
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquare(long)')": [
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquareTest(long)')": [
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquareTest(long,double)')": [
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquareDataSetsComparison(long,long)')": [
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquareTestDataSetsComparison(long,long)')": [
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'chiSquareTestDataSetsComparison(long,long,double)')": [
                        561,
                        562,
                        563,
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'checkArray(long)')": [
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'checkRectangular(long)')": [
                        611,
                        612,
                        613,
                        614,
                        615,
                        616,
                        617,
                        618,
                        619
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'checkPositive(double)')": [
                        631,
                        632,
                        633,
                        634,
                        635,
                        636
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTest', 'checkNonNegative(long)')": [
                        648,
                        649,
                        650,
                        651,
                        652,
                        653,
                        665,
                        666,
                        667,
                        668,
                        669,
                        670,
                        671
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/inference/TestUtils.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#TestUtils', None)": [
                        41,
                        42,
                        43,
                        44,
                        45,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        301,
                        302
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquare(double,long)')": [
                        237,
                        238
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquare(long)')": [
                        245,
                        246
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(double,long,double)')": [
                        253,
                        254,
                        255
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(double,long)')": [
                        262,
                        263
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(long,double)')": [
                        270,
                        271
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(long)')": [
                        278,
                        279
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareDataSetsComparison(long,long)')": [
                        288,
                        289,
                        290
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTestDataSetsComparison(long,long)')": [
                        298,
                        299,
                        300
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTestDataSetsComparison(long,long,double)')": [
                        309,
                        310,
                        311,
                        312
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25,
                        28
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', None)": [
                        44,
                        302
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquare(double,long)')": [
                        229,
                        230,
                        231
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquare(long)')": [
                        238,
                        239,
                        240
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(double,long,double)')": [
                        247,
                        248,
                        249,
                        250
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(double,long)')": [
                        257,
                        258,
                        259
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(long,double)')": [
                        266,
                        267,
                        268
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTest(long)')": [
                        275,
                        276,
                        277
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareDataSetsComparison(long,long)')": [
                        286,
                        287,
                        288,
                        289
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTestDataSetsComparison(long,long)')": [
                        297,
                        298,
                        299,
                        300,
                        301
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtils', 'chiSquareTestDataSetsComparison(long,long,double)')": [
                        309,
                        310,
                        311,
                        312,
                        313,
                        314
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/TestUtils.java": {
                "old": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math#TestUtils', 'assertChiSquareAccept(String,double,long,double)')": [
                        360
                    ]
                },
                "new": {
                    "('org.apache.commons.math#TestUtils', 'assertChiSquareAccept(String,double,long,double)')": [
                        359
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/RandomDataTest.java": {
                "old": {
                    "(None, None)": [
                        48
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        76
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        476
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        75
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        475
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/inference/ChiSquareTestTest.java": {
                "old": {
                    "(None, None)": [
                        19,
                        253
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', None)": [
                        32,
                        95,
                        155
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquare')": [
                        56,
                        57,
                        65,
                        66,
                        75,
                        76,
                        84,
                        85,
                        94
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareIndependence')": [
                        121,
                        122,
                        130,
                        131,
                        137,
                        138,
                        146,
                        147,
                        154
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareLargeTestStatistic')": [
                        170,
                        171
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareDataSetsComparisonEqualCounts')": [
                        192
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareDataSetsComparisonUnEqualCounts')": [
                        209
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareDataSetsComparisonBadCounts')": [
                        228,
                        234,
                        235,
                        243,
                        244,
                        252
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        21,
                        22,
                        23,
                        257
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', None)": [
                        36,
                        99,
                        159
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquare')": [
                        60,
                        61,
                        69,
                        70,
                        79,
                        80,
                        88,
                        89,
                        98
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareIndependence')": [
                        125,
                        126,
                        134,
                        135,
                        141,
                        142,
                        150,
                        151,
                        158
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareLargeTestStatistic')": [
                        174,
                        175
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareDataSetsComparisonEqualCounts')": [
                        196
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareDataSetsComparisonUnEqualCounts')": [
                        213
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestTest', 'testChiSquareDataSetsComparisonBadCounts')": [
                        232,
                        238,
                        239,
                        247,
                        248,
                        256
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/inference/TestUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testChiSquare')": [
                        57,
                        58,
                        66,
                        67,
                        76,
                        77,
                        85,
                        86,
                        95
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', None)": [
                        96,
                        156
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testChiSquareIndependence')": [
                        122,
                        123,
                        131,
                        132,
                        138,
                        139,
                        147,
                        148,
                        155
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testChiSquareLargeTestStatistic')": [
                        171,
                        172
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24,
                        25,
                        26
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testChiSquare')": [
                        61,
                        62,
                        70,
                        71,
                        80,
                        81,
                        89,
                        90,
                        99
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', None)": [
                        100,
                        160
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testChiSquareIndependence')": [
                        126,
                        127,
                        135,
                        136,
                        142,
                        143,
                        151,
                        152,
                        159
                    ],
                    "('org.apache.commons.math.stat.inference#TestUtilsTest', 'testChiSquareLargeTestStatistic')": [
                        175,
                        176
                    ]
                }
            }
        }
    },
    "eac9648b4f5f85a22969e007239e4c36f6503eb8": {
        "authored_data": "2012 Feb 12 15:18",
        "commit.message": "In package o.a.c.m.transform, created enum DctNormalization to be passed to the constructor of FastCosineTransformer (instead of boolean parameter).\nMade constructor public, and removed factory methods.\nSee MATH-743\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243263 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastien Brisard",
        "pcid": "dca41739a73d6fc69fba5f4def34b4d0967f7efe",
        "changes": {
            "src/main/java/org/apache/commons/math/transform/DftNormalization.java": {
                "old": {
                    "(None, None)": [
                        31,
                        32,
                        33,
                        47,
                        48,
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        32,
                        33,
                        47,
                        48,
                        49
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java": {
                "old": {
                    "(None, None)": [
                        38,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        108
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', None)": [
                        116,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        130,
                        131,
                        132,
                        133,
                        134,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'create')": [
                        148,
                        149
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'createOrthogonal')": [
                        160,
                        161
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'transform(double,TransformType)')": [
                        172,
                        179
                    ]
                },
                "new": {
                    "(None, None)": [
                        38
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', None)": [
                        75,
                        77,
                        78,
                        84,
                        85,
                        87,
                        88
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'transform(double,TransformType)')": [
                        99,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', None)": [
                        45,
                        53,
                        54,
                        90
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'data')": [
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'createRealTransformer')": [
                        86,
                        87,
                        88,
                        89
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'transform(double,TransformType)')": [
                        152,
                        154
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testAdHocData')": [
                        173,
                        198
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testParameters')": [
                        215
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testSinFunction')": [
                        246
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', None)": [
                        45,
                        53,
                        54
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'data')": [
                        74,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'createRealTransformer')": [
                        84
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'transform(double,TransformType)')": [
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testAdHocData')": [
                        179,
                        180,
                        205
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testParameters')": [
                        222,
                        223
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testSinFunction')": [
                        254,
                        255
                    ]
                }
            }
        }
    },
    "dca41739a73d6fc69fba5f4def34b4d0967f7efe": {
        "authored_data": "2012 Feb 12 00:37",
        "commit.message": "MATH-707\nRenamed \"RealPointValuePair\" to \"PointValuePair\" and made it a subclass\nof \"Pair<double[], Double>\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1243186 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "fb761ffb51ba1436163b094255b6af40bf69bd83",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateMultiStartOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', None)": [
                        56
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'getOptima')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'getConvergenceChecker')": [
                        130
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        137,
                        142
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'sortPairs(GoalType)')": [
                        176,
                        177,
                        178
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', None)": [
                        56
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'getOptima')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'getConvergenceChecker')": [
                        130
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        137,
                        142
                    ],
                    "('org.apache.commons.math.optimization#BaseMultivariateMultiStartOptimizer', 'sortPairs(GoalType)')": [
                        176,
                        177,
                        178
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateOptimizer.java": {
                "old": {
                    "(None, None)": [
                        37,
                        55
                    ]
                },
                "new": {
                    "(None, None)": [
                        37,
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java": {
                "old": {
                    "(None, None)": [
                        61
                    ]
                },
                "new": {
                    "(None, None)": [
                        61
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        73,
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,PointValuePair,PointValuePair)')": [
                        73,
                        74
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        73,
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,PointValuePair,PointValuePair)')": [
                        73,
                        74
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/AbstractSimplex.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', None)": [
                        52
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'iterate(MultivariateFunction,Comparator)')": [
                        206
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'build(double)')": [
                        221,
                        222,
                        231
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'evaluate(MultivariateFunction,Comparator)')": [
                        244,
                        247,
                        250
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'replaceWorstPoint(RealPointValuePair,Comparator)')": [
                        265,
                        266,
                        269
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'getPoints')": [
                        282,
                        283
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'getPoint(int)')": [
                        294
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'setPoint(int,RealPointValuePair)')": [
                        309
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'setPoints(RealPointValuePair)')": [
                        323
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', None)": [
                        52
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'iterate(MultivariateFunction,Comparator)')": [
                        206
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'build(double)')": [
                        221,
                        222,
                        231
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'evaluate(MultivariateFunction,Comparator)')": [
                        244,
                        247,
                        250
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'replaceWorstPoint(PointValuePair,Comparator)')": [
                        265,
                        266,
                        269
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'getPoints')": [
                        282,
                        283
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'getPoint(int)')": [
                        294
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'setPoint(int,PointValuePair)')": [
                        309
                    ],
                    "('org.apache.commons.math.optimization.direct#AbstractSimplex', 'setPoints(PointValuePair)')": [
                        323
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizer', 'doOptimize')": [
                        234,
                        246
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizer', 'doOptimize')": [
                        234,
                        246
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', None)": [
                        46,
                        65
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', 'getConvergenceChecker')": [
                        80
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        102
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', 'doOptimize')": [
                        148
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', None)": [
                        46,
                        65
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', 'getConvergenceChecker')": [
                        80
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        102
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateOptimizer', 'doOptimize')": [
                        148
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', None)": [
                        64
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        83
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', 'optimize(int,FUNC,GoalType,double,double,double)')": [
                        89
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', None)": [
                        64
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', 'optimize(int,FUNC,GoalType,double)')": [
                        83
                    ],
                    "('org.apache.commons.math.optimization.direct#BaseAbstractMultivariateSimpleBoundsOptimizer', 'optimize(int,FUNC,GoalType,double,double,double)')": [
                        89
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java": {
                "old": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizer', None)": [
                        306
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizer', 'doOptimize')": [
                        359,
                        371,
                        373,
                        428,
                        475,
                        476
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizer', None)": [
                        306
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizer', 'doOptimize')": [
                        359,
                        371,
                        373,
                        428,
                        475,
                        476
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectionalSimplex.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalSimplex', 'iterate(MultivariateFunction,Comparator)')": [
                        156,
                        158,
                        159,
                        162,
                        166,
                        167
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalSimplex', 'evaluateNewSimplex(MultivariateFunction,RealPointValuePair,double,Comparator)')": [
                        194,
                        195,
                        197,
                        209
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalSimplex', 'iterate(MultivariateFunction,Comparator)')": [
                        156,
                        158,
                        159,
                        162,
                        166,
                        167
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalSimplex', 'evaluateNewSimplex(MultivariateFunction,PointValuePair,double,Comparator)')": [
                        194,
                        195,
                        197,
                        209
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/NelderMeadSimplex.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadSimplex', 'iterate(MultivariateFunction,Comparator)')": [
                        188,
                        193,
                        194,
                        195,
                        217,
                        218,
                        230,
                        231,
                        247,
                        248,
                        260,
                        261,
                        277
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadSimplex', 'iterate(MultivariateFunction,Comparator)')": [
                        188,
                        193,
                        194,
                        195,
                        217,
                        218,
                        230,
                        231,
                        247,
                        248,
                        260,
                        261,
                        277
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java": {
                "old": {
                    "(None, None)": [
                        27,
                        32
                    ],
                    "('org.apache.commons.math.optimization.direct#PowellOptimizer', None)": [
                        81,
                        265
                    ],
                    "('org.apache.commons.math.optimization.direct#PowellOptimizer', 'doOptimize')": [
                        117,
                        127,
                        148,
                        165,
                        166,
                        198
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        32
                    ],
                    "('org.apache.commons.math.optimization.direct#PowellOptimizer', None)": [
                        81,
                        265
                    ],
                    "('org.apache.commons.math.optimization.direct#PowellOptimizer', 'doOptimize')": [
                        117,
                        127,
                        148,
                        165,
                        166,
                        198
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizer', None)": [
                        103
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizer', 'doOptimize')": [
                        126,
                        141,
                        142,
                        143,
                        144,
                        155,
                        157,
                        162
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizer', None)": [
                        103
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizer', 'doOptimize')": [
                        126,
                        141,
                        142,
                        143,
                        144,
                        155,
                        157,
                        162
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        54
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'optimize(int,DifferentiableMultivariateFunction,GoalType,double)')": [
                        72
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        54
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'optimize(int,DifferentiableMultivariateFunction,GoalType,double)')": [
                        72
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', None)": [
                        80,
                        98,
                        115
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'doOptimize')": [
                        146,
                        147,
                        167,
                        174,
                        175
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', None)": [
                        80,
                        98,
                        115
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'doOptimize')": [
                        146,
                        147,
                        167,
                        174,
                        175
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'optimize(LinearObjectiveFunction,Collection,GoalType,boolean)')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'doOptimize')": [
                        127
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'optimize(LinearObjectiveFunction,Collection,GoalType,boolean)')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'doOptimize')": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/linear/LinearOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24,
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        85
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolver', 'doOptimize')": [
                        185
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolver', 'doOptimize')": [
                        185
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java": {
                "old": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'getSolution')": [
                        396,
                        426
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'getSolution')": [
                        396,
                        426
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BaseAbstractUnivariateOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', None)": [
                        38,
                        55
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'optimize(int,UnivariateFunction,GoalType,double,double,double)')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'optimize(int,UnivariateFunction,GoalType,double,double)')": [
                        138
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'getConvergenceChecker')": [
                        148
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'doOptimize')": [
                        160
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', None)": [
                        38,
                        55
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'optimize(int,UnivariateFunction,GoalType,double,double,double)')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'optimize(int,UnivariateFunction,GoalType,double,double)')": [
                        138
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'getConvergenceChecker')": [
                        148
                    ],
                    "('org.apache.commons.math.optimization.univariate#BaseAbstractUnivariateOptimizer', 'doOptimize')": [
                        160
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateOptimizer.java": {
                "old": {
                    "(None, None)": [
                        38,
                        58,
                        82
                    ]
                },
                "new": {
                    "(None, None)": [
                        38,
                        58,
                        82
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        74
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        108,
                        115,
                        140,
                        141,
                        142,
                        257
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        74
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        108,
                        115,
                        140,
                        141,
                        142,
                        257
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/UnivariateMultiStartOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', None)": [
                        58
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'getConvergenceChecker')": [
                        91
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'getOptima')": [
                        132
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'optimize(int,FUNC,GoalType,double,double)')": [
                        140
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'optimize(int,FUNC,GoalType,double,double,double)')": [
                        147,
                        152
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'sortPairs(GoalType)')": [
                        186,
                        187,
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', None)": [
                        58
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'getConvergenceChecker')": [
                        91
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'getOptima')": [
                        132
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'optimize(int,FUNC,GoalType,double,double)')": [
                        140
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'optimize(int,FUNC,GoalType,double,double,double)')": [
                        147,
                        152
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizer', 'sortPairs(GoalType)')": [
                        186,
                        187,
                        188
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/DifferentiableMultivariateMultiStartOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateMultiStartOptimizerTest', 'testCircleFitting')": [
                        56,
                        59,
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#DifferentiableMultivariateMultiStartOptimizerTest', 'testCircleFitting')": [
                        56,
                        59,
                        60
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultivariateMultiStartOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultivariateMultiStartOptimizerTest', 'testRosenbrock')": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultivariateMultiStartOptimizerTest', 'testRosenbrock')": [
                        47
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testRosen')": [
                        79
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testMaximize')": [
                        89
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testEllipse')": [
                        104,
                        105
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testElliRotated')": [
                        115,
                        116
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testCigar')": [
                        126,
                        127
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testTwoAxes')": [
                        137,
                        138
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testCigTab')": [
                        148,
                        149
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testSphere')": [
                        159,
                        160
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testTablet')": [
                        170,
                        171
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testDiffPow')": [
                        181,
                        182
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testSsDiffPow')": [
                        192,
                        193
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testAckley')": [
                        203,
                        204
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testRastrigin')": [
                        215,
                        216
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testConstrainedRosen')": [
                        227,
                        228
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testConstrainedRosenWithMoreInterpolationPoints')": [
                        239
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'doTest(MultivariateFunction,double,double,GoalType,double,double,int,RealPointValuePair)')": [
                        275
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'doTest(MultivariateFunction,double,double,GoalType,double,double,int,int,RealPointValuePair,String)')": [
                        308,
                        316,
                        321
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testRosen')": [
                        79
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testMaximize')": [
                        89
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testEllipse')": [
                        104,
                        105
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testElliRotated')": [
                        115,
                        116
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testCigar')": [
                        126,
                        127
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testTwoAxes')": [
                        137,
                        138
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testCigTab')": [
                        148,
                        149
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testSphere')": [
                        159,
                        160
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testTablet')": [
                        170,
                        171
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testDiffPow')": [
                        181,
                        182
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testSsDiffPow')": [
                        192,
                        193
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testAckley')": [
                        203,
                        204
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testRastrigin')": [
                        215,
                        216
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testConstrainedRosen')": [
                        227,
                        228
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'testConstrainedRosenWithMoreInterpolationPoints')": [
                        239
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'doTest(MultivariateFunction,double,double,GoalType,double,double,int,PointValuePair)')": [
                        275
                    ],
                    "('org.apache.commons.math.optimization.direct#BOBYQAOptimizerTest', 'doTest(MultivariateFunction,double,double,GoalType,double,double,int,int,PointValuePair,String)')": [
                        308,
                        316,
                        321
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/CMAESOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInitOutofbounds')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testBoundariesDimensionMismatch')": [
                        63,
                        64
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testBoundariesNoData')": [
                        76,
                        77
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInputSigmaNegative')": [
                        88,
                        89
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInputSigmaOutOfRange')": [
                        100,
                        101
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInputSigmaDimensionMismatch')": [
                        112,
                        113
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testRosen')": [
                        125,
                        126
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testMaximize')": [
                        141,
                        142
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testEllipse')": [
                        161,
                        162
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testElliRotated')": [
                        176,
                        177
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testCigar')": [
                        191,
                        192
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testTwoAxes')": [
                        206,
                        207
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testCigTab')": [
                        221,
                        222
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testSphere')": [
                        236,
                        237
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testTablet')": [
                        251,
                        252
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testDiffPow')": [
                        266,
                        267
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testSsDiffPow')": [
                        281,
                        282
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testAckley')": [
                        296,
                        297
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testRastrigin')": [
                        311,
                        312
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testConstrainedRosen')": [
                        326,
                        327
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testDiagonalRosen')": [
                        341,
                        342
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'doTest(MultivariateFunction,double,double,double,GoalType,int,boolean,int,double,double,double,int,RealPointValuePair)')": [
                        375,
                        382
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInitOutofbounds')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testBoundariesDimensionMismatch')": [
                        63,
                        64
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testBoundariesNoData')": [
                        76,
                        77
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInputSigmaNegative')": [
                        88,
                        89
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInputSigmaOutOfRange')": [
                        100,
                        101
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testInputSigmaDimensionMismatch')": [
                        112,
                        113
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testRosen')": [
                        125,
                        126
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testMaximize')": [
                        141,
                        142
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testEllipse')": [
                        161,
                        162
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testElliRotated')": [
                        176,
                        177
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testCigar')": [
                        191,
                        192
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testTwoAxes')": [
                        206,
                        207
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testCigTab')": [
                        221,
                        222
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testSphere')": [
                        236,
                        237
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testTablet')": [
                        251,
                        252
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testDiffPow')": [
                        266,
                        267
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testSsDiffPow')": [
                        281,
                        282
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testAckley')": [
                        296,
                        297
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testRastrigin')": [
                        311,
                        312
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testConstrainedRosen')": [
                        326,
                        327
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'testDiagonalRosen')": [
                        341,
                        342
                    ],
                    "('org.apache.commons.math.optimization.direct#CMAESOptimizerTest', 'doTest(MultivariateFunction,double,double,double,GoalType,int,boolean,int,double,double,double,int,PointValuePair)')": [
                        375,
                        382
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionMappingAdapterTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testStartSimplexInsideRange')": [
                        45
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testOptimumOutsideRange')": [
                        71
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testUnbounded')": [
                        99
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testHalfBounded')": [
                        127
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testStartSimplexInsideRange')": [
                        45
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testOptimumOutsideRange')": [
                        71
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testUnbounded')": [
                        99
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionMappingAdapterTest', 'testHalfBounded')": [
                        127
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testStartSimplexInsideRange')": [
                        43
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testStartSimplexOutsideRange')": [
                        64
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testOptimumOutsideRange')": [
                        85
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testUnbounded')": [
                        108
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testHalfBounded')": [
                        131
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testStartSimplexInsideRange')": [
                        43
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testStartSimplexOutsideRange')": [
                        64
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testOptimumOutsideRange')": [
                        85
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testUnbounded')": [
                        108
                    ],
                    "('org.apache.commons.math.optimization.direct#MultivariateFunctionPenaltyAdapterTest', 'testHalfBounded')": [
                        131
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/PowellOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#PowellOptimizerTest', 'doTest(MultivariateFunction,double,double,GoalType,double,double)')": [
                        136
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#PowellOptimizerTest', 'doTest(MultivariateFunction,double,double,GoalType,double,double)')": [
                        136
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerMultiDirectionalTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMinimize1')": [
                        35
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMinimize2')": [
                        50
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMaximize1')": [
                        65
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMaximize2')": [
                        80
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testRosenbrock')": [
                        106
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testPowell')": [
                        132
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMath283')": [
                        147
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMinimize1')": [
                        35
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMinimize2')": [
                        50
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMaximize1')": [
                        65
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMaximize2')": [
                        80
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testRosenbrock')": [
                        106
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testPowell')": [
                        132
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerMultiDirectionalTest', 'testMath283')": [
                        147
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/SimplexOptimizerNelderMeadTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMinimize1')": [
                        40
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMinimize2')": [
                        55
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMaximize1')": [
                        70
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMaximize2')": [
                        85
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testRosenbrock')": [
                        102
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testPowell')": [
                        117
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares1')": [
                        140
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares2')": [
                        164
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares3')": [
                        190
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMinimize1')": [
                        40
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMinimize2')": [
                        55
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMaximize1')": [
                        70
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testMaximize2')": [
                        85
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testRosenbrock')": [
                        102
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testPowell')": [
                        117
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares1')": [
                        140
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares2')": [
                        164
                    ],
                    "('org.apache.commons.math.optimization.direct#SimplexOptimizerNelderMeadTest', 'testLeastSquares3')": [
                        190
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTrivial')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testColumnsPermutation')": [
                        119
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNoDependency')": [
                        140
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testOneSet')": [
                        157
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTwoSets')": [
                        197
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNonInversible')": [
                        218
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testIllConditioned')": [
                        235,
                        248
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        268
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        286
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testRedundantEquations')": [
                        302
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testInconsistentEquations')": [
                        320
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testCircleFitting')": [
                        338
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTrivial')": [
                        104
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testColumnsPermutation')": [
                        119
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNoDependency')": [
                        140
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testOneSet')": [
                        157
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTwoSets')": [
                        197
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNonInversible')": [
                        218
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testIllConditioned')": [
                        235,
                        248
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        268
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        286
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testRedundantEquations')": [
                        302
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testInconsistentEquations')": [
                        320
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testCircleFitting')": [
                        338
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath713NegativeVariable')": [
                        40
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath434NegativeVariable')": [
                        55
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath434PivotRowSelection')": [
                        87
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath434PivotRowSelection2')": [
                        110
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath272')": [
                        127
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath286')": [
                        146
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testDegeneracy')": [
                        165
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath288')": [
                        180
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath290GEQ')": [
                        190
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath293')": [
                        216,
                        238
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testSimplexSolver')": [
                        252
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testSingleVariableAndConstraint')": [
                        265
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testModelWithNoArtificialVars')": [
                        283
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMinimization')": [
                        298
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testSolutionWithNegativeDecisionVariable')": [
                        312
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testRestrictVariablesToNonNegative')": [
                        350
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testEpsilon')": [
                        369
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testTrivialModel')": [
                        383
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testLargeModel')": [
                        510
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath713NegativeVariable')": [
                        40
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath434NegativeVariable')": [
                        55
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath434PivotRowSelection')": [
                        87
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath434PivotRowSelection2')": [
                        110
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath272')": [
                        127
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath286')": [
                        146
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testDegeneracy')": [
                        165
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath288')": [
                        180
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath290GEQ')": [
                        190
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMath293')": [
                        216,
                        238
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testSimplexSolver')": [
                        252
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testSingleVariableAndConstraint')": [
                        265
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testModelWithNoArtificialVars')": [
                        283
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testMinimization')": [
                        298
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testSolutionWithNegativeDecisionVariable')": [
                        312
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testRestrictVariablesToNonNegative')": [
                        350
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testEpsilon')": [
                        369
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testTrivialModel')": [
                        383
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'testLargeModel')": [
                        510
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/univariate/UnivariateMultiStartOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizerTest', 'testSinMin')": [
                        41
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizerTest', 'testQuinticMin')": [
                        63,
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizerTest', 'testSinMin')": [
                        41
                    ],
                    "('org.apache.commons.math.optimization.univariate#UnivariateMultiStartOptimizerTest', 'testQuinticMin')": [
                        63,
                        68
                    ]
                }
            }
        }
    }
}