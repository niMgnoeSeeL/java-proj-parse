{
    "e3dda4407a3f59bd73350ac780f43eb885967b5f": {
        "authored_data": "2014 Oct 03 17:59",
        "commit.message": "Added statistics missing from toString method in SummaryStatistics.\nJIRA: MATH-1147\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "97accb47de63ee5063eda23641c6017e29ab81d7",
        "changes": {
            "src/main/java/org/apache/commons/math3/stat/descriptive/SummaryStatistics.java": {
                "new": {
                    "('org.apache.commons.math3.stat.descriptive#SummaryStatistics', 'toString')": [
                        330,
                        335,
                        336
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/descriptive/SummaryStatisticsTest.java": {
                "new": {
                    "('org.apache.commons.math3.stat.descriptive#SummaryStatisticsTest', None)": [
                        338,
                        339
                    ],
                    "('org.apache.commons.math3.stat.descriptive#SummaryStatisticsTest', 'testToString')": [
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354
                    ],
                    "(None, None)": [
                        355,
                        356
                    ]
                }
            }
        }
    },
    "97accb47de63ee5063eda23641c6017e29ab81d7": {
        "authored_data": "2014 Sep 30 19:16",
        "commit.message": "[MATH-1152] Improved performance of EnumeratedDistribution#sample(). Thanks to Andras Sereny.\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "97d32b14e6dc7cce01f9c2cd53e03bb996863e51",
        "changes": {
            "src/main/java/org/apache/commons/math3/distribution/EnumeratedDistribution.java": {
                "old": {
                    "('org.apache.commons.math3.distribution#EnumeratedDistribution', 'sample')": [
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        199,
                        200
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math3.distribution#EnumeratedDistribution', None)": [
                        68,
                        75,
                        76,
                        77,
                        78,
                        79,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ],
                    "('org.apache.commons.math3.distribution#EnumeratedDistribution', 'sample')": [
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        216,
                        217
                    ]
                }
            }
        }
    },
    "97d32b14e6dc7cce01f9c2cd53e03bb996863e51": {
        "authored_data": "2014 Sep 30 07:50",
        "commit.message": "Updated the example documentation for the GaussianCurveFitter.\n\nThis closes #4 pull request from GitHub.\n\nThanks to Ole for providing the patch.",
        "commit.author.name": "Ole",
        "pcid": "4080feff61e8dc1cd4af2361990c33c9f1014147",
        "changes": {
            "src/main/java/org/apache/commons/math3/fitting/GaussianCurveFitter.java": {
                "old": {
                    "(None, None)": [
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        67
                    ]
                }
            }
        }
    },
    "4080feff61e8dc1cd4af2361990c33c9f1014147": {
        "authored_data": "2014 Sep 29 16:25",
        "commit.message": "[MATH-1148] Fix MonotoneChain with collinear points as input: take tolerance factor into account when initially sorting the input points. Thanks to Guillaume Marceau for the report.\n",
        "commit.author.name": "Thomas Neidhart",
        "pcid": "5918daf872b1dbe3af6688e7f14477432d15cb7e",
        "changes": {
            "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHull2D.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHull2D', None)": [
                        70
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHull2D', 'isConvex(Vector2D)')": [
                        83,
                        92,
                        93,
                        95,
                        96,
                        99
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHull2D', None)": [
                        65,
                        66,
                        67
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHull2D', 'isConvex(Vector2D)')": [
                        85,
                        94,
                        95,
                        97,
                        98,
                        101
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChain.java": {
                "old": {
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#MonotoneChain', 'findHullVertices(Collection)')": [
                        83,
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#MonotoneChain', 'findHullVertices(Collection)')": [
                        84,
                        85,
                        86,
                        87,
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/ConvexHullGenerator2DAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHullGenerator2DAbstractTest', 'checkConvexHull(Collection,ConvexHull2D,boolean)')": [
                        341
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHullGenerator2DAbstractTest', 'isConvex(ConvexHull2D,boolean)')": [
                        346,
                        347,
                        362,
                        363,
                        364,
                        365,
                        372
                    ]
                },
                "new": {
                    "(None, None)": [
                        33,
                        34
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHullGenerator2DAbstractTest', None)": [
                        226,
                        227,
                        228,
                        383,
                        384
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHullGenerator2DAbstractTest', 'testCollinearPointsInAnyOrder')": [
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHullGenerator2DAbstractTest', 'checkConvexHull(Collection,ConvexHull2D,boolean)')": [
                        382
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHullGenerator2DAbstractTest', 'checkConvexHull(Collection,ConvexHull2D,boolean,double)')": [
                        385,
                        386,
                        388
                    ],
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#ConvexHullGenerator2DAbstractTest', 'isConvex(ConvexHull2D,boolean,double)')": [
                        393,
                        394,
                        397,
                        410,
                        411,
                        412,
                        413,
                        414,
                        421
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/hull/MonotoneChainTest.java": {
                "old": {
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#MonotoneChainTest', 'testConvergenceException')": [
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.geometry.euclidean.twod.hull#MonotoneChainTest', 'testConvergenceException')": [
                        52
                    ]
                }
            }
        }
    },
    "2a59e0ef4b8e70742a21bca76a629853aedbbd09": {
        "authored_data": "2014 Sep 23 18:57",
        "commit.message": "Recovered debugging method that were removed in the previous commit.\n\nThe methods are useful and the warning about them being unused could be\nsolved with an annotation.",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "e875e6d59875be86fb8de8df7642c370b652eb76",
        "changes": {
            "src/test/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenTrainingTaskTest.java": {
                "new": {
                    "(None, None)": [
                        20,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.math3.ml.neuralnet.sofm#KohonenTrainingTaskTest', None)": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        143,
                        144,
                        145,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189
                    ],
                    "('org.apache.commons.math3.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'travelCoordinatesTable(TravellingSalesmanSolver)')": [
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142
                    ],
                    "('org.apache.commons.math3.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'printSummary(String,TravellingSalesmanSolver)')": [
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204
                    ]
                }
            }
        }
    },
    "e875e6d59875be86fb8de8df7642c370b652eb76": {
        "authored_data": "2014 Sep 22 16:07",
        "commit.message": "Fixed lots of warnings due to missing @Deprecated annotations.\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "abffaf334c4302047e013a112c286a9e4d2c967e",
        "changes": {
            "src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java": {
                "old": {
                    "('org.apache.commons.math3.linear#SingularValueDecomposition', None)": [
                        270,
                        432,
                        469
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizer.java": {
                "new": {
                    "(None, None)": [
                        41
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java": {
                "new": {
                    "(None, None)": [
                        34
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/random/ValueServer.java": {
                "old": {
                    "('org.apache.commons.math3.random#ValueServer', None)": [
                        90,
                        96,
                        109,
                        120
                    ],
                    "('org.apache.commons.math3.random#ValueServer', 'computeDistribution(int)')": [
                        218
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.random#ValueServer', None)": [
                        90,
                        96,
                        109,
                        120
                    ],
                    "('org.apache.commons.math3.random#ValueServer', 'computeDistribution(int)')": [
                        218
                    ]
                }
            },
            "src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java": {
                "old": {
                    "('org.apache.commons.math3.util#ResizableDoubleArray', None)": [
                        414
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.util#ResizableDoubleArray', None)": [
                        414
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteTest.java": {
                "old": {
                    "('org.apache.commons.math3.analysis.integration.gauss#HermiteTest', 'testNormalDistribution')": [
                        35,
                        36
                    ],
                    "('org.apache.commons.math3.analysis.integration.gauss#HermiteTest', 'testNormalVariance')": [
                        90
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunctionTest.java": {
                "old": {
                    "('org.apache.commons.math3.analysis.interpolation#BicubicSplineInterpolatingFunctionTest', 'testInterpolation2')": [
                        598
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/distribution/KolmogorovSmirnovDistributionTest.java": {
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math3.distribution#MultivariateNormalMixtureModelDistributionTest', 'testWeightSumOverFlow')": [
                        61,
                        62
                    ],
                    "('org.apache.commons.math3.distribution#MultivariateNormalMixtureModelDistributionTest', 'testPreconditionPositiveWeights')": [
                        74,
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.distribution#MultivariateNormalMixtureModelDistributionTest', 'testWeightSumOverFlow')": [
                        61
                    ],
                    "('org.apache.commons.math3.distribution#MultivariateNormalMixtureModelDistributionTest', 'testPreconditionPositiveWeights')": [
                        73
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/CurveFitterTest.java": {
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/GaussianCurveFitterTest.java": {
                "old": {
                    "('org.apache.commons.math3.fitting#GaussianCurveFitterTest', 'testWithMaxIterations2')": [
                        213,
                        214,
                        215,
                        216
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.fitting#GaussianCurveFitterTest', 'testWithMaxIterations2')": [
                        213,
                        214,
                        215
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/GaussianFitterTest.java": {
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/HarmonicCurveFitterTest.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        25,
                        28,
                        30
                    ],
                    "('org.apache.commons.math3.fitting#HarmonicCurveFitterTest', 'testTinyVariationsData')": [
                        95
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        22,
                        24,
                        28
                    ],
                    "('org.apache.commons.math3.fitting#HarmonicCurveFitterTest', 'testTinyVariationsData')": [
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/HarmonicFitterTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        30
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/PolynomialCurveFitterTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        26,
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        25,
                        26,
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java": {
                "new": {
                    "(None, None)": [
                        20,
                        40
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizerAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math3.fitting.leastsquares#AbstractLeastSquaresOptimizerAbstractTest', 'testPointCopy')": [
                        559
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.fitting.leastsquares#AbstractLeastSquaresOptimizerAbstractTest', 'testPointCopy')": [
                        559
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/leastsquares/EvaluationTest.java": {
                "old": {
                    "('org.apache.commons.math3.fitting.leastsquares#EvaluationTest', 'testDirectEvaluation')": [
                        298
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.fitting.leastsquares#EvaluationTest', 'testDirectEvaluation')": [
                        298
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/leastsquares/EvaluationTestValidation.java": {
                "old": {
                    "('org.apache.commons.math3.fitting.leastsquares#EvaluationTestValidation', 'testParametersErrorMonteCarloParameters')": [
                        204,
                        221
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math3.fitting.leastsquares#LevenbergMarquardtOptimizerTest', None)": [
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/fitting/leastsquares/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math3.fitting.leastsquares#MinpackTest', None)": [
                        613,
                        652,
                        687,
                        731,
                        751,
                        797,
                        837,
                        868,
                        917,
                        973,
                        1024,
                        1095,
                        1135,
                        1171,
                        1219,
                        1297,
                        1358,
                        1411
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/linear/BlockFieldMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math3.linear#BlockFieldMatrixTest', 'testOperate')": [
                        379
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.linear#BlockFieldMatrixTest', 'testOperate')": [
                        379
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/linear/FieldMatrixImplTest.java": {
                "old": {
                    "('org.apache.commons.math3.linear#FieldMatrixImplTest', 'testOperate')": [
                        272
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.linear#FieldMatrixImplTest', 'testOperate')": [
                        272
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/ml/neuralnet/OffsetFeatureInitializer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/ml/neuralnet/oned/NeuronStringTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23,
                        24,
                        26,
                        28,
                        29,
                        30,
                        31,
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22,
                        23,
                        27,
                        32,
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/ml/neuralnet/sofm/KohonenTrainingTaskTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        26,
                        28,
                        29,
                        30,
                        31,
                        32,
                        34,
                        36,
                        37,
                        38,
                        39,
                        207,
                        208,
                        209
                    ],
                    "('org.apache.commons.math3.ml.neuralnet.sofm#KohonenTrainingTaskTest', None)": [
                        131,
                        132,
                        133,
                        134,
                        135,
                        146,
                        147,
                        148,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191
                    ],
                    "('org.apache.commons.math3.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'travelCoordinatesTable(TravellingSalesmanSolver)')": [
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.math3.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'printSummary(String,TravellingSalesmanSolver)')": [
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        25,
                        26,
                        29,
                        30,
                        31,
                        32,
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/ml/neuralnet/sofm/TravellingSalesmanSolver.java": {
                "old": {
                    "('org.apache.commons.math3.ml.neuralnet.sofm#TravellingSalesmanSolver', None)": [
                        82,
                        83,
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2DTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23,
                        24,
                        25,
                        27,
                        28,
                        29,
                        30,
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22,
                        23,
                        25,
                        27,
                        28,
                        34,
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/ode/sampling/DummyStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math3.ode.sampling#DummyStepInterpolatorTest', None)": [
                        123,
                        124,
                        125
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/MultiStartMultivariateVectorOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        99
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        18,
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerTestValidation.java": {
                "old": {
                    "('org.apache.commons.math3.optim.nonlinear.vector.jacobian#AbstractLeastSquaresOptimizerTestValidation', 'testParametersErrorMonteCarloParameters')": [
                        211,
                        212,
                        228
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        49,
                        318
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/CircleProblem.java": {
                "new": {
                    "(None, None)": [
                        20,
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/CircleVectorial.java": {
                "new": {
                    "(None, None)": [
                        21,
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        95
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math3.optim.nonlinear.vector.jacobian#LevenbergMarquardtOptimizerTest', None)": [
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/MinpackTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        98
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomCirclePointGenerator.java": {
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/RandomStraightLinePointGenerator.java": {
                "new": {
                    "(None, None)": [
                        21,
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/StatisticalReferenceDataset.java": {
                "new": {
                    "(None, None)": [
                        22,
                        36
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/StatisticalReferenceDatasetFactory.java": {
                "new": {
                    "(None, None)": [
                        23,
                        30
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/StraightLineProblem.java": {
                "new": {
                    "(None, None)": [
                        21,
                        41
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optim/univariate/BrentOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math3.optim.univariate#BrentOptimizerTest', 'testKeepInitIfBest')": [
                        258
                    ],
                    "('org.apache.commons.math3.optim.univariate#BrentOptimizerTest', 'testMath855')": [
                        292
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableMultiStartOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/MultivariateDifferentiableVectorMultiStartOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/MultivariateMultiStartOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/PointValuePairTest.java": {
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/PointVectorValuePairTest.java": {
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/SimplePointCheckerTest.java": {
                "new": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/SimpleValueCheckerTest.java": {
                "new": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/SimpleVectorValueCheckerTest.java": {
                "new": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/direct/BOBYQAOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        39
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/direct/MultivariateFunctionMappingAdapterTest.java": {
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/direct/MultivariateFunctionPenaltyAdapterTest.java": {
                "new": {
                    "(None, None)": [
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java": {
                "new": {
                    "(None, None)": [
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java": {
                "new": {
                    "(None, None)": [
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/fitting/CurveFitterTest.java": {
                "new": {
                    "(None, None)": [
                        26
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/fitting/GaussianFitterTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java": {
                "old": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math3.optimization.fitting#PolynomialFitterTest', 'testMath798WithToleranceTooLow')": [
                        141
                    ]
                },
                "new": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.commons.math3.optimization.fitting#PolynomialFitterTest', 'testMath798WithToleranceTooLow')": [
                        141
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerAbstractTest.java": {
                "new": {
                    "(None, None)": [
                        98
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizerTestValidation.java": {
                "old": {
                    "('org.apache.commons.math3.optimization.general#AbstractLeastSquaresOptimizerTestValidation', 'testParametersErrorMonteCarloParameters')": [
                        203,
                        219
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        45,
                        305
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/CircleProblem.java": {
                "new": {
                    "(None, None)": [
                        41
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/CircleScalar.java": {
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/CircleVectorial.java": {
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        100
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/MinpackTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/RandomCirclePointGenerator.java": {
                "new": {
                    "(None, None)": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/RandomStraightLinePointGenerator.java": {
                "new": {
                    "(None, None)": [
                        21,
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDataset.java": {
                "new": {
                    "(None, None)": [
                        34
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/StatisticalReferenceDatasetFactory.java": {
                "new": {
                    "(None, None)": [
                        30
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/general/StraightLineProblem.java": {
                "new": {
                    "(None, None)": [
                        39
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java": {
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/linear/SimplexTableauTest.java": {
                "new": {
                    "(None, None)": [
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/univariate/BracketFinderTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math3.optimization.univariate#BrentOptimizerTest', 'testKeepInitIfBest')": [
                        210
                    ],
                    "('org.apache.commons.math3.optimization.univariate#BrentOptimizerTest', 'testMath855')": [
                        242
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueCheckerTest.java": {
                "new": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/optimization/univariate/UnivariateMultiStartOptimizerTest.java": {
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/random/EmpiricalDistributionTest.java": {
                "old": {
                    "(None, None)": [
                        31,
                        38
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/special/BetaTest.java": {
                "old": {
                    "('org.apache.commons.math3.special#BetaTest', 'testMath1067')": [
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.special#BetaTest', 'testMath1067')": [
                        150
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/clustering/DBSCANClustererTest.java": {
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/clustering/EuclideanDoublePointTest.java": {
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/clustering/EuclideanIntegerPointTest.java": {
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/stat/clustering/KMeansPlusPlusClustererTest.java": {
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/util/MathUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math3.util#MathUtilsTest', 'testPermutedArrayHash')": [
                        97
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math3.util#MathUtilsTest', 'testPermutedArrayHash')": [
                        97
                    ]
                }
            },
            "src/test/java/org/apache/commons/math3/util/ResizableDoubleArrayTest.java": {
                "old": {
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testConstructors')": [
                        49,
                        56,
                        72,
                        76,
                        80,
                        86,
                        88,
                        89,
                        90,
                        94,
                        98,
                        104,
                        105,
                        109,
                        121,
                        122
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testSetElementArbitraryExpansion2')": [
                        182,
                        183
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testAddElements')": [
                        216,
                        217
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testAddElementRolling')": [
                        251,
                        252
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testWithInitialCapacityAndExpansionFactor')": [
                        337
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testMutators')": [
                        445
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testEqualsAndHashCode')": [
                        486,
                        488,
                        489
                    ]
                },
                "new": {
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testConstructors')": [
                        49,
                        56,
                        72,
                        76,
                        80,
                        86,
                        88,
                        89,
                        90,
                        94,
                        98,
                        104,
                        105,
                        109,
                        121,
                        122
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testSetElementArbitraryExpansion2')": [
                        182,
                        183
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testAddElements')": [
                        216,
                        217
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testAddElementRolling')": [
                        251,
                        252
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testWithInitialCapacityAndExpansionFactor')": [
                        337
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testMutators')": [
                        445
                    ],
                    "('org.apache.commons.math3.util#ResizableDoubleArrayTest', 'testEqualsAndHashCode')": [
                        486,
                        488,
                        489
                    ]
                }
            }
        }
    }
}