{
    "1644256e43d1cb6abd707cadcb816e1b0dfd08ec": {
        "authored_data": "2015 Jul 20 11:06",
        "commit.message": "Fixed checkstyle warning.",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "9c545d44a4a703c88d417a6fa43298a80ee67735",
        "changes": {
            "src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java": {
                "old": {
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', None)": [
                        937,
                        938,
                        940
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', None)": [
                        937,
                        938,
                        940
                    ]
                }
            }
        }
    },
    "9c545d44a4a703c88d417a6fa43298a80ee67735": {
        "authored_data": "2015 Jul 19 21:26",
        "commit.message": "MATH-1251\n\nFixed initial value of the \"number of calls\" counter.\n",
        "commit.author.name": "Gilles",
        "pcid": "af199c675de0f5dd693c222fa72f9e926a31ccba",
        "changes": {
            "src/main/java/org/apache/commons/math4/ml/neuralnet/sofm/KohonenUpdateAction.java": {
                "old": {
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', None)": [
                        77
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', 'update(Network,double)')": [
                        98
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', None)": [
                        77
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', 'update(Network,double)')": [
                        98
                    ]
                }
            }
        }
    },
    "7a8a7783315917b56b6a71c4f28cec4ed1d91a7f": {
        "authored_data": "2015 Jul 18 22:07",
        "commit.message": "New private method for factoring out some common code.\n",
        "commit.author.name": "Gilles",
        "pcid": "a7fe613853516f0abde34821996a0424882bb919",
        "changes": {
            "src/main/java/org/apache/commons/math4/ml/neuralnet/sofm/KohonenUpdateAction.java": {
                "old": {
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', 'updateNeighbouringNeuron(Neuron,double,double)')": [
                        159,
                        160,
                        161,
                        162,
                        163
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', 'findAndUpdateBestNeuron(Network,double,double)')": [
                        184,
                        185,
                        186,
                        187,
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', None)": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        166,
                        167,
                        168
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', 'attemptNeuronUpdate(Neuron,double,double)')": [
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', 'updateNeighbouringNeuron(Neuron,double,double)')": [
                        179
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenUpdateAction', 'findAndUpdateBestNeuron(Network,double,double)')": [
                        200
                    ]
                }
            }
        }
    },
    "a7fe613853516f0abde34821996a0424882bb919": {
        "authored_data": "2015 Jul 18 22:02",
        "commit.message": "MATH-1250\n\nMethods to estimate concurrency performance.\n",
        "commit.author.name": "Gilles",
        "pcid": "cf4416a84203ff9d360d4398da3b166e6d0c72b9",
        "changes": {
            "src/main/java/org/apache/commons/math4/ml/neuralnet/Neuron.java": {
                "old": {
                    "('org.apache.commons.math4.ml.neuralnet#Neuron', 'compareAndSetFeatures(double,double)')": [
                        134,
                        137
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math4.ml.neuralnet#Neuron', None)": [
                        45,
                        46,
                        47,
                        48,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174
                    ],
                    "('org.apache.commons.math4.ml.neuralnet#Neuron', 'compareAndSetFeatures(double,double)')": [
                        138,
                        139,
                        140,
                        142,
                        143,
                        146
                    ],
                    "('org.apache.commons.math4.ml.neuralnet#Neuron', 'getNumberOfAttemptedUpdates')": [
                        161,
                        162
                    ],
                    "('org.apache.commons.math4.ml.neuralnet#Neuron', 'getNumberOfSuccessfulUpdates')": [
                        175,
                        176
                    ]
                }
            },
            "src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/KohonenTrainingTaskTest.java": {
                "old": {
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'testTravellerSalesmanSquareTourSequentialSolver')": [
                        69
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'testTravellerSalesmanSquareTourParallelSolver')": [
                        108
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'testTravellerSalesmanSquareTourSequentialSolver')": [
                        69,
                        70,
                        71,
                        72,
                        73,
                        74
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#KohonenTrainingTaskTest', 'testTravellerSalesmanSquareTourParallelSolver')": [
                        113,
                        114,
                        128,
                        129,
                        130,
                        131,
                        132
                    ]
                }
            },
            "src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java": {
                "new": {
                    "('org.apache.commons.math4.ml.neuralnet.sofm#TravellingSalesmanSolver', None)": [
                        143,
                        144,
                        145,
                        146,
                        147,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        169,
                        170,
                        171
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#TravellingSalesmanSolver', 'getUpdateRatio')": [
                        148,
                        149
                    ],
                    "('org.apache.commons.math4.ml.neuralnet.sofm#TravellingSalesmanSolver', 'computeUpdateRatio(Network)')": [
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168
                    ]
                }
            }
        }
    },
    "cf4416a84203ff9d360d4398da3b166e6d0c72b9": {
        "authored_data": "2015 Jul 17 18:46",
        "commit.message": "[MATH-1242] fixed shuffle algorithm used by the Monte Carlo KS statistic\ncalculation method, moved shuffle algorithm to static package-private\nmethod that is now explicitly tested by a unit test",
        "commit.author.name": "Otmar Ertl",
        "pcid": "6913170b0def896d348d609baa5602972e76ef6c",
        "changes": {
            "src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java": {
                "old": {
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', 'monteCarloP(double,int,int,boolean,int)')": [
                        967,
                        968,
                        969,
                        970,
                        971,
                        972,
                        973,
                        974,
                        975
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', None)": [
                        937,
                        938,
                        939,
                        940,
                        941,
                        942,
                        943,
                        944,
                        945,
                        946,
                        947,
                        953,
                        954,
                        955,
                        956
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', 'fillBooleanArrayRandomlyWithFixedNumberTrueValues(boolean,int,RandomGenerator)')": [
                        948,
                        949,
                        950,
                        951,
                        952
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', 'monteCarloP(double,int,int,boolean,int)')": [
                        987
                    ]
                }
            },
            "src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java": {
                "new": {
                    "(None, None)": [
                        22,
                        25,
                        28
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTestTest', None)": [
                        485,
                        532,
                        533,
                        534
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTestTest', 'testFillBooleanArrayRandomlyWithFixedNumberTrueValues')": [
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531
                    ]
                }
            }
        }
    },
    "387880a630c65b955a3329a2f7b987214c41f6da": {
        "authored_data": "2015 Jul 11 22:44",
        "commit.message": "Use utility method for \"not null\" checks.\n",
        "commit.author.name": "Gilles",
        "pcid": "1fe7a43505aa9d00bd9dde45aee77935a5147561",
        "changes": {
            "src/main/java/org/apache/commons/math4/fraction/BigFraction.java": {
                "old": {
                    "('org.apache.commons.math4.fraction#BigFraction', 'add(BigFraction)')": [
                        522,
                        523,
                        524
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigInteger)')": [
                        645,
                        646,
                        647
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigFraction)')": [
                        698,
                        699,
                        700
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(BigInteger)')": [
                        905,
                        906,
                        907
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(BigFraction)')": [
                        963,
                        964,
                        965
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'subtract(BigInteger)')": [
                        1133,
                        1134,
                        1135
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'subtract(BigFraction)')": [
                        1184,
                        1185,
                        1186
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.fraction#BigFraction', 'add(BigFraction)')": [
                        522
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigInteger)')": [
                        643
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigFraction)')": [
                        694
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(BigInteger)')": [
                        899
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(BigFraction)')": [
                        955
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'subtract(BigInteger)')": [
                        1123
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'subtract(BigFraction)')": [
                        1172
                    ]
                }
            }
        }
    },
    "1fe7a43505aa9d00bd9dde45aee77935a5147561": {
        "authored_data": "2015 Jul 11 12:54",
        "commit.message": "MATH-1248\n\nUnnecessary allocations in \"BigFraction\".\nThanks to Chris Popp.\n",
        "commit.author.name": "Gilles",
        "pcid": "32d33210a92b1197a6c5a07f19aa25426af72723",
        "changes": {
            "src/main/java/org/apache/commons/math4/fraction/BigFraction.java": {
                "old": {
                    "('org.apache.commons.math4.fraction#BigFraction', None)": [
                        122,
                        125,
                        138
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'abs')": [
                        453
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'add(BigFraction)')": [
                        517
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigInteger)')": [
                        622
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigFraction)')": [
                        672
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(BigFraction)')": [
                        923,
                        924
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'pow(BigInteger)')": [
                        1004
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'reduce')": [
                        1050
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'subtract(BigFraction)')": [
                        1111
                    ]
                },
                "new": {
                    "('org.apache.commons.math4.fraction#BigFraction', None)": [
                        122,
                        125,
                        138,
                        1119
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'abs')": [
                        453
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'add(BigInteger)')": [
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'add(BigFraction)')": [
                        525,
                        527,
                        528,
                        529,
                        542,
                        543,
                        544,
                        545,
                        546
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'compareTo(BigFraction)')": [
                        618,
                        619,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigInteger)')": [
                        648,
                        650,
                        651,
                        652
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'divide(BigFraction)')": [
                        701,
                        703,
                        704,
                        705
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(BigInteger)')": [
                        908,
                        909,
                        910
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(int)')": [
                        926,
                        927,
                        928,
                        929
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(long)')": [
                        944,
                        945,
                        946,
                        947
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'multiply(BigFraction)')": [
                        966,
                        967
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'pow(int)')": [
                        1011,
                        1012,
                        1013,
                        1014,
                        1015,
                        1016,
                        1017
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'pow(long)')": [
                        1035,
                        1036,
                        1037,
                        1038,
                        1039,
                        1040,
                        1041
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'pow(BigInteger)')": [
                        1061,
                        1062,
                        1063,
                        1064,
                        1065,
                        1066,
                        1067,
                        1068
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'reduce')": [
                        1114,
                        1115,
                        1116,
                        1117,
                        1118
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'subtract(BigInteger)')": [
                        1136,
                        1137,
                        1138,
                        1139,
                        1140,
                        1141,
                        1142
                    ],
                    "('org.apache.commons.math4.fraction#BigFraction', 'subtract(BigFraction)')": [
                        1187,
                        1189,
                        1190,
                        1191
                    ]
                }
            }
        }
    },
    "32d33210a92b1197a6c5a07f19aa25426af72723": {
        "authored_data": "2015 Jul 10 18:55",
        "commit.message": "Fixed error in computing discrete distribution of D statistics for small-sample\n2-sample Kolmogorov-Smirnov tests. Error was causing incorrect p-values returned\nby exactP and monteCarloP methods (used by default for small, mid-size samples).\n\nJIRA: MATH-1245\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "0f6812858ad6e3b28e4a2843c526ec8cf501b176",
        "changes": {
            "src/main/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTest.java": {
                "old": {
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', 'exactP(double,int,int,boolean)')": [
                        901,
                        902,
                        903
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', 'monteCarloP(double,int,int,boolean,int)')": [
                        982
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', 'exactP(double,int,int,boolean)')": [
                        888,
                        903,
                        904
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTest', 'monteCarloP(double,int,int,boolean,int)')": [
                        962,
                        984,
                        985
                    ]
                }
            },
            "src/test/java/org/apache/commons/math4/stat/inference/KolmogorovSmirnovTestTest.java": {
                "new": {
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTestTest', None)": [
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        480
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTestTest', 'testDRounding')": [
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451
                    ],
                    "('org.apache.commons.math4.stat.inference#KolmogorovSmirnovTestTest', 'testDRoundingMonteCarlo')": [
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479
                    ]
                }
            }
        }
    }
}