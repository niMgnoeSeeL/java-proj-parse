{
    "a97a14915d375033d07e29426aa60c6c0d1da7f7": {
        "authored_data": "2009 Dec 09 02:37",
        "commit.message": "Unnecessary casts\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@888685 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "b9102858574301f09038cd18e06f8e0d736c9931",
        "changes": {
            "src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java": {
                "old": {
                    "('org.apache.commons.math.genetics#GeneticAlgorithmTestPermutations', None)": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.math.genetics#GeneticAlgorithmTestPermutations', None)": [
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testEqualsAndHashCode')": [
                        983,
                        984
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testEqualsAndHashCode')": [
                        983,
                        984
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/SparseRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testEqualsAndHashCode')": [
                        545
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testEqualsAndHashCode')": [
                        545
                    ]
                }
            }
        }
    },
    "b9102858574301f09038cd18e06f8e0d736c9931": {
        "authored_data": "2009 Dec 09 02:36",
        "commit.message": "Unnecessary ;\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@888684 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "0f98e5c13db5d3c9144111319f9b144cd590b974",
        "changes": {
            "src/test/java/org/apache/commons/math/ode/TestProblem3.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem3', 'computeTheoreticalState(double)')": [
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#TestProblem3', 'computeTheoreticalState(double)')": [
                        116
                    ]
                }
            }
        }
    },
    "0f98e5c13db5d3c9144111319f9b144cd590b974": {
        "authored_data": "2009 Dec 09 02:34",
        "commit.message": "Tab police\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@888683 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "e91eaa0c987224cc43be6fdd57534afa7509f279",
        "changes": {
            "src/test/java/org/apache/commons/math/linear/BlockFieldMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int)')": [
                        592
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int)')": [
                        650,
                        652
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int)')": [
                        669,
                        671
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int)')": [
                        592
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int)')": [
                        650,
                        652
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int)')": [
                        669,
                        671
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,int,int)')": [
                        501,
                        503
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int)')": [
                        517,
                        519
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,int,int)')": [
                        575,
                        577
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int)')": [
                        594,
                        596
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,int,int)')": [
                        501,
                        503
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int)')": [
                        517,
                        519
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,int,int)')": [
                        575,
                        577
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'checkCopy(RealMatrix,double,int,int)')": [
                        594,
                        596
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'testMathpbx02')": [
                        148,
                        149,
                        150,
                        153,
                        154,
                        160,
                        161,
                        162,
                        163,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'testMathpbx02')": [
                        148,
                        149,
                        150,
                        153,
                        154,
                        160,
                        161,
                        162,
                        163,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/FieldMatrixImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int)')": [
                        388,
                        390
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int)')": [
                        404,
                        406
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int)')": [
                        443,
                        445
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int)')": [
                        462,
                        464
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int)')": [
                        388,
                        390
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int)')": [
                        404,
                        406
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int)')": [
                        443,
                        445
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int)')": [
                        462,
                        464
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', None)": [
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', None)": [
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/RandomDataTest.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        62,
                        63,
                        68,
                        69,
                        74,
                        75,
                        76,
                        102,
                        103,
                        104,
                        130,
                        131,
                        132,
                        158,
                        159,
                        160,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        376,
                        377,
                        378,
                        379,
                        432,
                        433,
                        434,
                        487,
                        488,
                        489,
                        526,
                        527,
                        528,
                        533,
                        534,
                        535,
                        536,
                        556,
                        557,
                        558,
                        587,
                        588,
                        589,
                        636,
                        637,
                        638,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        712,
                        713,
                        714,
                        758,
                        759,
                        760,
                        761,
                        762,
                        763,
                        764,
                        765,
                        766,
                        767,
                        768,
                        769
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'suite')": [
                        58,
                        59,
                        60,
                        61
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextIntExtremeValues')": [
                        64,
                        65,
                        66,
                        67
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextLongExtremeValues')": [
                        70,
                        71,
                        72,
                        73
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextInt')": [
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextLong')": [
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSecureLong')": [
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSecureInt')": [
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPoisson')": [
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPoissonConsistency')": [
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextHex')": [
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSecureHex')": [
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextUniform')": [
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextUniformExclusiveEndpoints')": [
                        529,
                        530,
                        531,
                        532
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextGaussian')": [
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextExponential')": [
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testConfig')": [
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600,
                        601,
                        602,
                        603,
                        604,
                        605,
                        606,
                        607,
                        608,
                        609,
                        610,
                        611,
                        612,
                        613,
                        614,
                        615,
                        616,
                        617,
                        618,
                        619,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        635
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSample')": [
                        639,
                        640,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646,
                        647,
                        648,
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        657,
                        658,
                        659,
                        660,
                        661,
                        662,
                        663,
                        664,
                        665,
                        666,
                        667,
                        668,
                        669,
                        670,
                        671,
                        672,
                        673,
                        674,
                        675,
                        676,
                        677,
                        678,
                        679,
                        680,
                        681,
                        682,
                        683,
                        684,
                        685,
                        686,
                        687,
                        688,
                        689,
                        690,
                        691,
                        692
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'findSample(Object,Object)')": [
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706,
                        707,
                        708,
                        709,
                        710,
                        711
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPermutation')": [
                        715,
                        716,
                        717,
                        718,
                        719,
                        720,
                        721,
                        722,
                        723,
                        724,
                        725,
                        726,
                        727,
                        728,
                        729,
                        730,
                        731,
                        732,
                        733,
                        734,
                        735,
                        736,
                        737,
                        738,
                        739,
                        740,
                        741,
                        742,
                        743,
                        744,
                        745,
                        746,
                        747,
                        748,
                        749,
                        750,
                        751,
                        752,
                        753,
                        754,
                        755,
                        756,
                        757
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'findPerm(int,int)')": [
                        770,
                        771,
                        772,
                        773,
                        774,
                        775,
                        776,
                        777,
                        778,
                        779,
                        780,
                        781,
                        782,
                        783
                    ],
                    "(None, None)": [
                        784
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        62,
                        63,
                        68,
                        69,
                        74,
                        75,
                        76,
                        102,
                        103,
                        104,
                        130,
                        131,
                        132,
                        158,
                        159,
                        160,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        376,
                        377,
                        378,
                        379,
                        432,
                        433,
                        434,
                        487,
                        488,
                        489,
                        526,
                        527,
                        528,
                        533,
                        534,
                        535,
                        536,
                        556,
                        557,
                        558,
                        587,
                        588,
                        589,
                        636,
                        637,
                        638,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        712,
                        713,
                        714,
                        758,
                        759,
                        760,
                        761,
                        762,
                        763,
                        764,
                        765,
                        766,
                        767,
                        768,
                        769
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'suite')": [
                        58,
                        59,
                        60,
                        61
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextIntExtremeValues')": [
                        64,
                        65,
                        66,
                        67
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextLongExtremeValues')": [
                        70,
                        71,
                        72,
                        73
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextInt')": [
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextLong')": [
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSecureLong')": [
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSecureInt')": [
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPoisson')": [
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPoissonConsistency')": [
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextHex')": [
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSecureHex')": [
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextUniform')": [
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextUniformExclusiveEndpoints')": [
                        529,
                        530,
                        531,
                        532
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextGaussian')": [
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextExponential')": [
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testConfig')": [
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600,
                        601,
                        602,
                        603,
                        604,
                        605,
                        606,
                        607,
                        608,
                        609,
                        610,
                        611,
                        612,
                        613,
                        614,
                        615,
                        616,
                        617,
                        618,
                        619,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        635
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextSample')": [
                        639,
                        640,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646,
                        647,
                        648,
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        657,
                        658,
                        659,
                        660,
                        661,
                        662,
                        663,
                        664,
                        665,
                        666,
                        667,
                        668,
                        669,
                        670,
                        671,
                        672,
                        673,
                        674,
                        675,
                        676,
                        677,
                        678,
                        679,
                        680,
                        681,
                        682,
                        683,
                        684,
                        685,
                        686,
                        687,
                        688,
                        689,
                        690,
                        691,
                        692
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'findSample(Object,Object)')": [
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706,
                        707,
                        708,
                        709,
                        710,
                        711
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPermutation')": [
                        715,
                        716,
                        717,
                        718,
                        719,
                        720,
                        721,
                        722,
                        723,
                        724,
                        725,
                        726,
                        727,
                        728,
                        729,
                        730,
                        731,
                        732,
                        733,
                        734,
                        735,
                        736,
                        737,
                        738,
                        739,
                        740,
                        741,
                        742,
                        743,
                        744,
                        745,
                        746,
                        747,
                        748,
                        749,
                        750,
                        751,
                        752,
                        753,
                        754,
                        755,
                        756,
                        757
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'findPerm(int,int)')": [
                        770,
                        771,
                        772,
                        773,
                        774,
                        775,
                        776,
                        777,
                        778,
                        779,
                        780,
                        781,
                        782,
                        783
                    ],
                    "(None, None)": [
                        784
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#ChiSquareFactoryTest', 'setUp')": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.inference#ChiSquareFactoryTest', 'setUp')": [
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/inference/TTestFactoryTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#TTestFactoryTest', 'setUp')": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.inference#TTestFactoryTest', 'setUp')": [
                        35
                    ]
                }
            }
        }
    },
    "e91eaa0c987224cc43be6fdd57534afa7509f279": {
        "authored_data": "2009 Dec 09 02:30",
        "commit.message": "Unnecessary casts; tab police\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@888680 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "f7c0b403d2585912e40b471cf83ac1d72cdd459b",
        "changes": {
            "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealVectorTest', 'testDataInOut')": [
                        538,
                        554,
                        566,
                        579,
                        592
                    ],
                    "('org.apache.commons.math.linear#SparseRealVectorTest', 'testBasicFunctions')": [
                        1039
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealVectorTest', 'testDataInOut')": [
                        538,
                        554,
                        566,
                        579,
                        592
                    ],
                    "('org.apache.commons.math.linear#SparseRealVectorTest', 'testBasicFunctions')": [
                        1039
                    ]
                }
            }
        }
    },
    "f7c0b403d2585912e40b471cf83ac1d72cdd459b": {
        "authored_data": "2009 Dec 06 23:04",
        "commit.message": "Fixed an error in handling of very close events during ODE integration\nJIRA: MATH-322\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@887794 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "335572b99ea84b7b0665e6a818cba41e34f97203",
        "changes": {
            "src/main/java/org/apache/commons/math/ode/events/EventState.java": {
                "old": {
                    "('org.apache.commons.math.ode.events#EventState', 'evaluateStep(StepInterpolator)')": [
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.ode.events#EventState', 'evaluateStep(StepInterpolator)')": [
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        229,
                        230,
                        231
                    ]
                }
            }
        }
    },
    "335572b99ea84b7b0665e6a818cba41e34f97203": {
        "authored_data": "2009 Nov 29 21:53",
        "commit.message": "Prevent NaN to occur for singular matrices\nNumerical inaccuracies in the underlying eigendecomposition could induce\nvery small negative eigenvalues, so the square root produced NaNs. The\neigenvalues really cannot be negative, so it is safe to replace the negative\nones by 0.\nThere are remaining problems with singular matrices:\n - the singular vectors also contain NaNs\n - the solver does not really work in least square sense and\n   complain about singular matrices\nJIRA: MATH-320 \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885279 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "93dbc5a0c3044ece1880fb2ebaa131fe4c2a7c7b",
        "changes": {
            "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', None)": [
                        118
                    ],
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', 'getU')": [
                        136,
                        142,
                        143
                    ],
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', 'getV')": [
                        222,
                        223
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', None)": [
                        118,
                        119
                    ],
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', 'getU')": [
                        137,
                        139,
                        140,
                        145
                    ],
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', 'getV')": [
                        220,
                        221,
                        226
                    ]
                }
            }
        }
    },
    "93dbc5a0c3044ece1880fb2ebaa131fe4c2a7c7b": {
        "authored_data": "2009 Nov 29 21:47",
        "commit.message": "replaced duplicated strings by a single static string in many classes\nthis will later allow enabling the MultipleStringLiterals rule in checkstyle\n(there are many other duplicated strings, so this cannot be enabled yet, I'll\ndo another pass on it later on)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885278 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "9a324dc5463ea6329e0b2e59bb46073117d68168",
        "changes": {
            "src/main/java/org/apache/commons/math/FunctionEvaluationException.java": {
                "old": {
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        44,
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        34,
                        35,
                        36,
                        37,
                        48,
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        46,
                        47,
                        48,
                        49,
                        228,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        395,
                        405,
                        423,
                        424,
                        425,
                        426,
                        651,
                        652,
                        653,
                        654,
                        655,
                        682,
                        683,
                        685,
                        686
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        46,
                        47,
                        226,
                        290,
                        291,
                        292,
                        293,
                        297,
                        298,
                        299,
                        300,
                        385,
                        395,
                        637,
                        638,
                        639,
                        640,
                        641,
                        668,
                        670
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', None)": [
                        36,
                        37,
                        65
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'evaluate(double,double)')": [
                        125
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'differentiate(double)')": [
                        234
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        69
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'evaluate(double,double)')": [
                        129
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'differentiate(double)')": [
                        238
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', None)": [
                        63
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        165
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solveAll(Complex,Complex)')": [
                        258
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(Complex,Complex)')": [
                        306
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', None)": [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        72
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        174
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solveAll(Complex,Complex)')": [
                        267
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(Complex,Complex)')": [
                        315
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'bracket(UnivariateRealFunction,double,double,double,int)')": [
                        171
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'setup(UnivariateRealFunction)')": [
                        228
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', None)": [
                        30,
                        31,
                        32,
                        33,
                        34
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'bracket(UnivariateRealFunction,double,double,double,int)')": [
                        176
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'setup(UnivariateRealFunction)')": [
                        233
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java": {
                "old": {
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(double,double)')": [
                        82,
                        83
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(int,int)')": [
                        140,
                        141
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'inverseCumulativeProbability(double)')": [
                        160
                    ]
                },
                "new": {
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', None)": [
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(double,double)')": [
                        90
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(int,int)')": [
                        147
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'inverseCumulativeProbability(double)')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setNumeratorDegreesOfFreedom(double)')": [
                        167,
                        168
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setDenominatorDegreesOfFreedom(double)')": [
                        190,
                        191
                    ]
                },
                "new": {
                    "('org.apache.commons.math.distribution#FDistributionImpl', None)": [
                        35,
                        36,
                        37,
                        38
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setNumeratorDegreesOfFreedom(double)')": [
                        171
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setDenominatorDegreesOfFreedom(double)')": [
                        193
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/fraction/BigFraction.java": {
                "old": {
                    "('org.apache.commons.math.fraction#BigFraction', None)": [
                        128
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'divide(BigInteger)')": [
                        618
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'divide(BigFraction)')": [
                        671
                    ]
                },
                "new": {
                    "('org.apache.commons.math.fraction#BigFraction', None)": [
                        83,
                        84,
                        85,
                        86,
                        132
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'divide(BigInteger)')": [
                        622
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'divide(BigFraction)')": [
                        675
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/fraction/Fraction.java": {
                "old": {
                    "('org.apache.commons.math.fraction#Fraction', None)": [
                        255,
                        256,
                        260,
                        261
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'negate')": [
                        412,
                        413
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'addSub(Fraction,boolean)')": [
                        484
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'multiply(Fraction)')": [
                        541
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'divide(Fraction)')": [
                        576
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'getReducedFraction(int,int)')": [
                        609,
                        610,
                        623,
                        624
                    ]
                },
                "new": {
                    "('org.apache.commons.math.fraction#Fraction', None)": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        267,
                        268,
                        272,
                        273
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'negate')": [
                        424,
                        425
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'addSub(Fraction,boolean)')": [
                        496
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'multiply(Fraction)')": [
                        553
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'divide(Fraction)')": [
                        588
                    ],
                    "('org.apache.commons.math.fraction#Fraction', 'getReducedFraction(int,int)')": [
                        621,
                        634
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', None)": [
                        114,
                        118,
                        123,
                        124
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'setSubMatrix(T,int,int)')": [
                        309,
                        310,
                        314,
                        315,
                        319,
                        324,
                        330,
                        331
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'getEntry(int,int)')": [
                        349,
                        350
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'setEntry(int,int,T)')": [
                        362,
                        363
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'addToEntry(int,int,T)')": [
                        375,
                        376
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'multiplyEntry(int,int,T)')": [
                        388,
                        389
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'operate(T)')": [
                        413,
                        414
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'preMultiply(T)')": [
                        437,
                        438
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', None)": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        134,
                        135,
                        139,
                        140,
                        145
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'setSubMatrix(T,int,int)')": [
                        330,
                        334,
                        338,
                        339,
                        344,
                        345,
                        351
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'getEntry(int,int)')": [
                        369
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'setEntry(int,int,T)')": [
                        381
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'addToEntry(int,int,T)')": [
                        393
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'multiplyEntry(int,int,T)')": [
                        405
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'operate(T)')": [
                        429
                    ],
                    "('org.apache.commons.math.linear#Array2DRowFieldMatrix', 'preMultiply(T)')": [
                        452
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', None)": [
                        123,
                        127,
                        132,
                        133
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'setSubMatrix(double,int,int)')": [
                        317,
                        318,
                        322,
                        323,
                        327,
                        332,
                        338,
                        339
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'getEntry(int,int)')": [
                        357,
                        358
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'setEntry(int,int,double)')": [
                        370,
                        371
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'addToEntry(int,int,double)')": [
                        383,
                        384
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'multiplyEntry(int,int,double)')": [
                        396,
                        397
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'operate(double)')": [
                        421,
                        422
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'preMultiply(double)')": [
                        445,
                        446
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', None)": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        143,
                        144,
                        148,
                        149,
                        154
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'setSubMatrix(double,int,int)')": [
                        338,
                        342,
                        346,
                        347,
                        352,
                        353,
                        359
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'getEntry(int,int)')": [
                        377
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'setEntry(int,int,double)')": [
                        389
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'addToEntry(int,int,double)')": [
                        401
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'multiplyEntry(int,int,double)')": [
                        413
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'operate(double)')": [
                        437
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrix', 'preMultiply(double)')": [
                        460
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#ArrayRealVector', None)": [
                        115,
                        116,
                        142,
                        143
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#ArrayRealVector', None)": [
                        32,
                        33,
                        34,
                        35,
                        119,
                        145
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        265,
                        266,
                        310,
                        311
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        39,
                        40,
                        41,
                        42,
                        269,
                        313
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setStartConfiguration(double)')": [
                        149,
                        150,
                        187,
                        188,
                        201,
                        202
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        363,
                        364
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setStartConfiguration(double)')": [
                        157,
                        194,
                        207
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        368
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java": {
                "old": {
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'initializeColumnLabels')": [
                        134
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'getSolution')": [
                        366
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', None)": [
                        65,
                        66,
                        67
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'initializeColumnLabels')": [
                        137
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'getSolution')": [
                        369
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#DescriptiveStatistics', 'getPercentile(double)')": [
                        380,
                        385,
                        386,
                        389,
                        390
                    ],
                    "('org.apache.commons.math.stat.descriptive#DescriptiveStatistics', 'setPercentileImpl(UnivariateStatistic)')": [
                        563,
                        572,
                        573
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive#DescriptiveStatistics', None)": [
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.stat.descriptive#DescriptiveStatistics', 'getPercentile(double)')": [
                        391,
                        396,
                        397,
                        400,
                        401
                    ],
                    "('org.apache.commons.math.stat.descriptive#DescriptiveStatistics', 'setPercentileImpl(UnivariateStatistic)')": [
                        574,
                        583,
                        584
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'checkSampleData(double)')": [
                        1042
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'checkSampleData(StatisticalSummary)')": [
                        1055
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.inference#TTestImpl', None)": [
                        36,
                        37,
                        38,
                        39
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'checkSampleData(double)')": [
                        1046
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'checkSampleData(StatisticalSummary)')": [
                        1059
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(double)')": [
                        497,
                        498
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(Object)')": [
                        511,
                        512
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        666,
                        667,
                        673,
                        674,
                        697,
                        698,
                        704,
                        705,
                        821,
                        885,
                        889,
                        890,
                        909,
                        913,
                        914
                    ]
                },
                "new": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        680,
                        686,
                        709,
                        715,
                        831,
                        895,
                        899,
                        918,
                        922
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(double)')": [
                        513
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'verifyDataSet(Object)')": [
                        526
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java": {
                "old": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', None)": [
                        529,
                        532,
                        546,
                        549,
                        563,
                        577
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', None)": [
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        537,
                        538,
                        541,
                        555,
                        556,
                        559,
                        573,
                        574,
                        588
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java": {
                "old": {
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', None)": [
                        541,
                        544,
                        558,
                        561,
                        575,
                        589
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', None)": [
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        549,
                        550,
                        553,
                        567,
                        568,
                        571,
                        585,
                        586,
                        600
                    ]
                }
            }
        }
    },
    "9a324dc5463ea6329e0b2e59bb46073117d68168": {
        "authored_data": "2009 Nov 29 21:21",
        "commit.message": "fixed some NaN appearing in eigenvectors when null pivots occurred in dstqds or dqds algorithms\nthis is a partial fix for MATH-297 but not a complete one as for example computing the\neigendecomposition if identity leads to three times the same vector ...\nJIRA: MATH-297\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885268 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "abb1b3fdd6711eaa8ba9c8518cbb7ff83699df3f",
        "changes": {
            "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'stationaryQuotientDifferenceWithShift(double,double,double)')": [
                        1836
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'stationaryQuotientDifferenceWithShift(double,double,double)')": [
                        1835,
                        1837,
                        1843,
                        1844,
                        1845,
                        1846,
                        1847,
                        1848,
                        1849,
                        1850,
                        1851,
                        1852,
                        1853,
                        1854,
                        1855,
                        1856,
                        1857,
                        1858,
                        1859,
                        1860,
                        1861,
                        1862
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'progressiveQuotientDifferenceWithShift(double,double,double)')": [
                        1892,
                        1893,
                        1894,
                        1895,
                        1896,
                        1897,
                        1898,
                        1899,
                        1900,
                        1901,
                        1902,
                        1903,
                        1904,
                        1905,
                        1906,
                        1907,
                        1908,
                        1909,
                        1910
                    ]
                }
            }
        }
    },
    "abb1b3fdd6711eaa8ba9c8518cbb7ff83699df3f": {
        "authored_data": "2009 Nov 27 23:27",
        "commit.message": "removed an unneeded constant\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885049 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "79383e3ad386e1ba1e5dcf625179005522609b05",
        "changes": {
            "src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testSingularMatrix')": [
                        131,
                        134,
                        135,
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testSingularMatrix')": [
                        133,
                        134,
                        135
                    ]
                }
            }
        }
    },
    "79383e3ad386e1ba1e5dcf625179005522609b05": {
        "authored_data": "2009 Nov 27 23:24",
        "commit.message": "added a test with a singular matrix\nupdated class to Junit4\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@885048 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "ef9b639afc3dd8d1c35eab23cc9cb6b3a6a2c858",
        "changes": {
            "src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24,
                        25,
                        26,
                        27
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', None)": [
                        28,
                        42,
                        43,
                        44,
                        45,
                        62,
                        63,
                        64,
                        78,
                        79,
                        96,
                        97,
                        151,
                        152,
                        153,
                        158,
                        159
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkdimensions(RealMatrix)')": [
                        56,
                        57,
                        58,
                        59,
                        60,
                        61
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkAEqualUSVt(RealMatrix)')": [
                        77
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkOrthogonal(RealMatrix)')": [
                        95
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkBiDiagonal(RealMatrix)')": [
                        111,
                        115
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testMatricesValues')": [
                        141,
                        143,
                        145,
                        148,
                        149,
                        150
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testUpperOrLower')": [
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'suite')": [
                        160,
                        161
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', None)": [
                        26,
                        40,
                        57,
                        58,
                        59,
                        60,
                        74,
                        75,
                        76,
                        83,
                        94,
                        95,
                        96,
                        121,
                        161,
                        162,
                        163,
                        164,
                        194,
                        195,
                        196,
                        197
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkdimensions(RealMatrix)')": [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkAEqualUSVt(RealMatrix)')": [
                        73
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkOrthogonal(RealMatrix)')": [
                        93
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'checkBiDiagonal(RealMatrix)')": [
                        110,
                        114
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testSingularMatrix')": [
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testMatricesValues')": [
                        184,
                        186,
                        188,
                        191,
                        192,
                        193
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testUpperOrLower')": [
                        199,
                        200,
                        201
                    ]
                }
            }
        }
    }
}