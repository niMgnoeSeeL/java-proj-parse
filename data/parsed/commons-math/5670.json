{
    "d3f7151590189213b544c9736c0611332dc022c1": {
        "authored_data": "2008 Sep 28 15:51",
        "commit.message": "pulled some solve-related methods higher in the classes hierarchy\n(isNonSinglular(), getInverse())\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@699844 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "44e04f2a0ac9f489477138331e5e0dd66f00f8a8",
        "changes": {
            "src/java/org/apache/commons/math/linear/DecompositionSolver.java": {
                "old": {
                    "(None, None)": [
                        48,
                        61,
                        74,
                        87
                    ]
                },
                "new": {
                    "(None, None)": [
                        48,
                        61,
                        74,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/LUDecomposition.java": {
                "old": {
                    "(None, None)": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/LUDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        35
                    ],
                    "('org.apache.commons.math.linear#LUDecompositionImpl', 'decompose(RealMatrix,double)')": [
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        35,
                        416,
                        421,
                        422
                    ],
                    "('org.apache.commons.math.linear#LUDecompositionImpl', 'decompose(RealMatrix,double)')": [
                        111
                    ],
                    "('org.apache.commons.math.linear#LUDecompositionImpl', 'getInverse')": [
                        417,
                        418,
                        419,
                        420
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/QRDecomposition.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        29,
                        30,
                        31,
                        32
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/QRDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        39
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'isFullRank')": [
                        270
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(double)')": [
                        295
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(RealMatrix)')": [
                        369
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        39,
                        415,
                        416,
                        417
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'isNonSingular')": [
                        270
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(double)')": [
                        295
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(RealMatrix)')": [
                        369
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getInverse')": [
                        418,
                        419,
                        420,
                        421
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testRank')": [
                        203,
                        206,
                        209,
                        212
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testNoDecompose')": [
                        355
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testRank')": [
                        203,
                        206,
                        209,
                        212
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testNoDecompose')": [
                        355
                    ]
                }
            }
        }
    },
    "44e04f2a0ac9f489477138331e5e0dd66f00f8a8": {
        "authored_data": "2008 Sep 28 02:07",
        "commit.message": "Fixed error in javadoc added in r699704\nJIRA: MATH-207\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@699762 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "6460cd272a4c0605c1e9167f641930bba16715ba",
        "changes": {
            "src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java": {
                "old": {
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', None)": [
                        113,
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', None)": [
                        113,
                        114
                    ]
                }
            }
        }
    },
    "6460cd272a4c0605c1e9167f641930bba16715ba": {
        "authored_data": "2008 Sep 27 18:05",
        "commit.message": "Eliminated the \"mutation requirement\" in nextGeneration method.\nAdded algorithm description in javadoc.\nJIRA: MATH-207\nReported and patched by David Stefka\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@699704 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "dbd8ffb54f72f45acc644f1f16709dd549d0cfc9",
        "changes": {
            "src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java": {
                "old": {
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', None)": [
                        102
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'nextGeneration(Population)')": [
                        115,
                        121,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', None)": [
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'nextGeneration(Population)')": [
                        133,
                        135,
                        140,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155
                    ]
                }
            }
        }
    },
    "dbd8ffb54f72f45acc644f1f16709dd549d0cfc9": {
        "authored_data": "2008 Sep 26 19:51",
        "commit.message": "propagated trunk changes from r699157 into branch 2.0\nMATH-227.  fixed F distribution inverse CDF computation for small denominator degrees of freedom.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@699468 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "e1e21f2f6895333304f6efe8272549d32ede20be",
        "changes": {
            "src/java/org/apache/commons/math/distribution/FDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getInitialDomain(double)')": [
                        144,
                        145
                    ]
                },
                "new": {
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getInitialDomain(double)')": [
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150
                    ]
                }
            },
            "src/test/org/apache/commons/math/distribution/FDistributionTest.java": {
                "new": {
                    "('org.apache.commons.math.distribution#FDistributionTest', None)": [
                        108
                    ],
                    "('org.apache.commons.math.distribution#FDistributionTest', 'testSmallDegreesOfFreedom')": [
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120
                    ],
                    "(None, None)": [
                        121,
                        122
                    ]
                }
            }
        }
    },
    "57e0c33a52a0f1e641161e6bf1278e63ee6384cc": {
        "authored_data": "2008 Sep 26 03:09",
        "commit.message": "MATH-227.  fixed F distribution inverse CDF computation for small denominator degrees of freedom.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@699157 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Brent Worden",
        "pcid": "7f35915afd4aed48f284f9967419f571788b044f",
        "changes": {
            "src/java/org/apache/commons/math/distribution/FDistributionImpl.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28,
                        190
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', None)": [
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'cumulativeProbability(double)')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getDomainLowerBound(double)')": [
                        118,
                        119
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getDomainUpperBound(double)')": [
                        131,
                        132
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getInitialDomain(double)')": [
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setNumeratorDegreesOfFreedom(double)')": [
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getNumeratorDegreesOfFreedom')": [
                        166,
                        167
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setDenominatorDegreesOfFreedom(double)')": [
                        176,
                        177,
                        178,
                        179,
                        180,
                        181
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getDenominatorDegreesOfFreedom')": [
                        188,
                        189
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        29,
                        210
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', None)": [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'cumulativeProbability(double)')": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getDomainLowerBound(double)')": [
                        125,
                        126
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getDomainUpperBound(double)')": [
                        139,
                        140
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getInitialDomain(double)')": [
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setNumeratorDegreesOfFreedom(double)')": [
                        170,
                        171,
                        172,
                        173,
                        174,
                        175
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getNumeratorDegreesOfFreedom')": [
                        183,
                        184
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'setDenominatorDegreesOfFreedom(double)')": [
                        195,
                        196,
                        197,
                        198,
                        199,
                        200
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'getDenominatorDegreesOfFreedom')": [
                        208,
                        209
                    ]
                }
            },
            "src/test/org/apache/commons/math/distribution/FDistributionTest.java": {
                "new": {
                    "('org.apache.commons.math.distribution#FDistributionTest', None)": [
                        108
                    ],
                    "('org.apache.commons.math.distribution#FDistributionTest', 'testSmallDegreesOfFreedom')": [
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120
                    ],
                    "(None, None)": [
                        121
                    ]
                }
            }
        }
    },
    "e1e21f2f6895333304f6efe8272549d32ede20be": {
        "authored_data": "2008 Sep 16 21:00",
        "commit.message": "Fixed an error in CorrelatedRandomVectorGenerator leading to a component of the generated vector being constant\nJIRA: MATH-226\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@696054 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "7684119c582e734d10ba5acf72382dffdc89ae5a",
        "changes": {
            "src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java": {
                "old": {
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGenerator', 'decompose(RealMatrix,double)')": [
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGenerator', 'decompose(RealMatrix,double)')": [
                        256
                    ]
                }
            },
            "src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java": {
                "new": {
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGeneratorTest', None)": [
                        40,
                        41,
                        61,
                        62
                    ],
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGeneratorTest', 'testMath226')": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ]
                }
            }
        }
    },
    "7684119c582e734d10ba5acf72382dffdc89ae5a": {
        "authored_data": "2008 Sep 14 16:38",
        "commit.message": "Greatly improved QR-decomposition speed using transposed matrices internally\nJIRA: MATH-223\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@695251 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "f4c984a31bffd7e1d6d88dd3b603f9b19a998ef2",
        "changes": {
            "src/java/org/apache/commons/math/linear/QRDecompositionImpl.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        30
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        37,
                        40,
                        41,
                        42,
                        43,
                        45
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'decompose(RealMatrix)')": [
                        85,
                        106,
                        109,
                        122,
                        131,
                        136,
                        139,
                        140,
                        142,
                        146,
                        147
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getR')": [
                        163,
                        164,
                        168,
                        169,
                        171
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getQ')": [
                        193,
                        194,
                        195,
                        202,
                        203,
                        207,
                        208,
                        212,
                        214,
                        217,
                        224
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getH')": [
                        241,
                        242,
                        246
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(double)')": [
                        281,
                        282,
                        298,
                        299,
                        300,
                        303,
                        311,
                        314
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(RealMatrix)')": [
                        353,
                        354,
                        378,
                        379,
                        380,
                        383,
                        394
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'checkDecomposed')": [
                        411
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        32
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        39,
                        42,
                        43,
                        44,
                        45,
                        47
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'decompose(RealMatrix)')": [
                        85,
                        88,
                        100,
                        101,
                        102,
                        112,
                        115,
                        128,
                        137,
                        142,
                        143,
                        146,
                        148,
                        152
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getR')": [
                        168,
                        169,
                        173,
                        174,
                        176,
                        177,
                        178
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getQ')": [
                        200,
                        201,
                        202,
                        209,
                        210,
                        214,
                        215,
                        216,
                        220,
                        222,
                        225,
                        232
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getH')": [
                        249,
                        250,
                        253,
                        255
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(double)')": [
                        290,
                        291,
                        305,
                        308,
                        309,
                        310,
                        313,
                        321,
                        322,
                        325
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'solve(RealMatrix)')": [
                        364,
                        365,
                        387,
                        390,
                        391,
                        392,
                        395,
                        404,
                        407
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'checkDecomposed')": [
                        424
                    ]
                }
            }
        }
    },
    "f4c984a31bffd7e1d6d88dd3b603f9b19a998ef2": {
        "authored_data": "2008 Sep 11 09:57",
        "commit.message": "Fixed an infinite loop encountered in some backward integration cases for ODE solvers\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@694197 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "81c6a9a29df8099dc327fb556d2cd21da5387923",
        "changes": {
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        94
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        119
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        94
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        119
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        110
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        135
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        110
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        135
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', None)": [
                        74,
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', None)": [
                        74,
                        75
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', None)": [
                        76
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        112,
                        183
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', None)": [
                        76
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        112,
                        183
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', None)": [
                        201
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', None)": [
                        201,
                        218,
                        219
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'testBackward')": [
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'testBackward')": [
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', None)": [
                        228,
                        229
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testBackward')": [
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', None)": [
                        164,
                        165
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', 'testBackward')": [
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', None)": [
                        125,
                        126
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testBackward')": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', None)": [
                        149,
                        150
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testBackward')": [
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', None)": [
                        146,
                        147
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testBackward')": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', None)": [
                        144,
                        145
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testBackward')": [
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', None)": [
                        114,
                        115
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testBackward')": [
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', None)": [
                        162,
                        163
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testBackward')": [
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', None)": [
                        146,
                        147
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testBackward')": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', None)": [
                        144,
                        145
                    ]
                }
            }
        }
    }
}