{
    "9f631fecc80e69a15db3f92e3301fed9836ec8e3": {
        "authored_data": "2010 Aug 31 12:05",
        "commit.message": "Added checks for \"null\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@991164 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "a21faeae6ed850c618b4fb739a422e3b144db135",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java": {
                "new": {
                    "(None, None)": [
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateVectorialOptimizer.java": {
                "new": {
                    "(None, None)": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java": {
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'optimize(T,GoalType,double)')": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/BaseAbstractVectorialOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#BaseAbstractVectorialOptimizer', 'optimize(FUNC,double,double,double)')": [
                        125
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractVectorialOptimizer', 'optimize(FUNC,double,double,double)')": [
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java": {
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double,double)')": [
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java": {
                "new": {
                    "(None, None)": [
                        22,
                        84
                    ]
                }
            }
        }
    },
    "a21faeae6ed850c618b4fb739a422e3b144db135": {
        "authored_data": "2010 Aug 30 13:06",
        "commit.message": "MATH-394, MATH-397, MATH-404\nOverhaul of the \"optimization\" package.\nRemoved lots of duplicate code.\nRemoved methods referring to the concept of \"iteration\".\nRemoved interface methods to access the number of evaluations of the\ngradient and Jacobian.\nRemoved all references to \"OptimizationException\" (replaced by\n\"ConvergenceException\").\nJavadoc comments updated.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990792 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "320194b3cbfac9bcebe854c7775191e8f32e922c",
        "changes": {
            "src/main/java/org/apache/commons/math/ConvergingAlgorithm.java": {
                "new": {
                    "(None, None)": [
                        29,
                        30
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java": {
                "new": {
                    "(None, None)": [
                        26
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        28,
                        29,
                        30,
                        32,
                        33,
                        35,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        104,
                        105,
                        107,
                        108,
                        109,
                        110,
                        111,
                        113,
                        114
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27,
                        28,
                        29,
                        30,
                        32,
                        33,
                        35,
                        37,
                        38,
                        43,
                        44,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        54,
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        31,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25,
                        26,
                        27,
                        29,
                        31,
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24,
                        30,
                        31,
                        32,
                        36,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', None)": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        71,
                        72,
                        73,
                        75,
                        76,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        124,
                        125,
                        126,
                        129,
                        130,
                        131,
                        134,
                        135,
                        136,
                        139,
                        140,
                        141,
                        144,
                        145,
                        146,
                        149,
                        150,
                        151,
                        154,
                        155,
                        156,
                        159,
                        160,
                        161,
                        164,
                        165,
                        166,
                        169,
                        170,
                        171
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getOptima')": [
                        119,
                        120,
                        121,
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'setMaxIterations(int)')": [
                        127,
                        128
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getMaxIterations')": [
                        132,
                        133
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getIterations')": [
                        137,
                        138
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'setMaxEvaluations(int)')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getMaxEvaluations')": [
                        147,
                        148
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getEvaluations')": [
                        152,
                        153
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getGradientEvaluations')": [
                        157,
                        158
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'setConvergenceChecker(RealConvergenceChecker)')": [
                        162,
                        163
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getConvergenceChecker')": [
                        167,
                        168
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'optimize(DifferentiableMultivariateRealFunction,GoalType,double)')": [
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25,
                        31,
                        32,
                        33,
                        37
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', None)": [
                        42,
                        45,
                        46,
                        47,
                        48,
                        50,
                        51,
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        26,
                        30,
                        31,
                        32,
                        36,
                        235,
                        236,
                        237
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', None)": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        74,
                        75,
                        76,
                        78,
                        79,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        128,
                        129,
                        130,
                        133,
                        134,
                        135,
                        138,
                        139,
                        140,
                        143,
                        144,
                        145,
                        148,
                        149,
                        150,
                        153,
                        154,
                        155,
                        158,
                        159,
                        160,
                        163,
                        164,
                        165,
                        168,
                        169,
                        170,
                        173,
                        174,
                        175
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getOptima')": [
                        123,
                        124,
                        125,
                        126,
                        127
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'setMaxIterations(int)')": [
                        131,
                        132
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getMaxIterations')": [
                        136,
                        137
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getIterations')": [
                        141,
                        142
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'setMaxEvaluations(int)')": [
                        146,
                        147
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getMaxEvaluations')": [
                        151,
                        152
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getEvaluations')": [
                        156,
                        157
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getJacobianEvaluations')": [
                        161,
                        162
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'setConvergenceChecker(VectorialConvergenceChecker)')": [
                        166,
                        167
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getConvergenceChecker')": [
                        171,
                        172
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'optimize(DifferentiableMultivariateVectorialFunction,double,double,double)')": [
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25,
                        26,
                        30
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', None)": [
                        35,
                        38,
                        39,
                        40,
                        41,
                        43,
                        44,
                        50
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        26,
                        32,
                        36,
                        213,
                        214,
                        215
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', None)": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        68,
                        69,
                        70,
                        72,
                        73,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        119,
                        120,
                        121,
                        124,
                        125,
                        126,
                        129,
                        130,
                        131,
                        134,
                        135,
                        136,
                        139,
                        140,
                        141,
                        144,
                        145,
                        146,
                        149,
                        150,
                        151,
                        154,
                        155,
                        156,
                        159,
                        160,
                        161
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'getOptima')": [
                        114,
                        115,
                        116,
                        117,
                        118
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'setMaxIterations(int)')": [
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'getMaxIterations')": [
                        127,
                        128
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'setMaxEvaluations(int)')": [
                        132,
                        133
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'getMaxEvaluations')": [
                        137,
                        138
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'getIterations')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'getEvaluations')": [
                        147,
                        148
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'setConvergenceChecker(RealConvergenceChecker)')": [
                        152,
                        153
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'getConvergenceChecker')": [
                        157,
                        158
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', 'optimize(MultivariateRealFunction,GoalType,double)')": [
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        30
                    ],
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', None)": [
                        35,
                        38,
                        39,
                        40,
                        41,
                        43,
                        44,
                        49
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java": {
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/RealConvergenceChecker.java": {
                "old": {
                    "(None, None)": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java": {
                "old": {
                    "(None, None)": [
                        21,
                        24,
                        26,
                        31,
                        33,
                        86
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', None)": [
                        35,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        61,
                        66,
                        67,
                        68,
                        71
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        73,
                        74,
                        75,
                        76,
                        79,
                        80
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22,
                        25,
                        27,
                        32,
                        34
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        43,
                        44,
                        48,
                        53,
                        54,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,RealPointValuePair)')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        89,
                        90,
                        91
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java": {
                "old": {
                    "(None, None)": [
                        21,
                        24,
                        26,
                        31,
                        33
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        35,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        61,
                        67,
                        68,
                        71
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        73,
                        74,
                        75,
                        76,
                        78,
                        79
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22,
                        25,
                        27,
                        32,
                        34
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        43,
                        44,
                        48,
                        54,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair)')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        88,
                        89,
                        90
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java": {
                "old": {
                    "(None, None)": [
                        20,
                        24,
                        26,
                        31,
                        33,
                        89
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', None)": [
                        35,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        61,
                        67,
                        68,
                        71
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        73,
                        74,
                        75,
                        76,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        24,
                        26,
                        31,
                        33
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', None)": [
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        42,
                        43,
                        44,
                        48,
                        54,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,VectorialPointValuePair)')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java": {
                "old": {
                    "(None, None)": [
                        24,
                        26,
                        31,
                        33,
                        89
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', None)": [
                        35,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        61,
                        67,
                        68,
                        71
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        73,
                        74,
                        75,
                        76,
                        82,
                        83
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        25,
                        27,
                        32,
                        34
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        43,
                        44,
                        45,
                        49,
                        55,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,VectorialPointValuePair)')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        93,
                        94
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26,
                        32,
                        70,
                        419
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        89,
                        90,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        115,
                        119,
                        120,
                        121,
                        122,
                        123,
                        135,
                        136,
                        137,
                        157,
                        158,
                        160,
                        161,
                        162,
                        164,
                        211,
                        212,
                        213,
                        219,
                        220,
                        221,
                        224,
                        225,
                        226,
                        229,
                        230,
                        231,
                        234,
                        235,
                        236,
                        239,
                        240,
                        241,
                        244,
                        245,
                        246,
                        249,
                        250,
                        251,
                        254,
                        255,
                        256,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setStartConfiguration(double)')": [
                        186,
                        187
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setMaxIterations(int)')": [
                        217,
                        218
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getMaxIterations')": [
                        222,
                        223
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setMaxEvaluations(int)')": [
                        227,
                        228
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getMaxEvaluations')": [
                        232,
                        233
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getIterations')": [
                        237,
                        238
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getEvaluations')": [
                        242,
                        243
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setConvergenceChecker(RealConvergenceChecker)')": [
                        247,
                        248
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getConvergenceChecker')": [
                        252,
                        253
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(MultivariateRealFunction,GoalType,double)')": [
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        265,
                        266,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        292,
                        293,
                        296,
                        304
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'incrementIterationsCounter')": [
                        316,
                        317,
                        318,
                        319
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluate(double)')": [
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        356,
                        357,
                        361,
                        362,
                        371
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex(Comparator)')": [
                        387,
                        388,
                        389,
                        394,
                        395,
                        396,
                        397,
                        398
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(RealPointValuePair,Comparator)')": [
                        413,
                        414
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        27,
                        28,
                        29,
                        34,
                        37,
                        73
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        92,
                        93,
                        94,
                        100,
                        101,
                        105,
                        106,
                        107,
                        108,
                        109,
                        121,
                        122,
                        123,
                        124,
                        144,
                        145,
                        146,
                        148,
                        149,
                        150,
                        151,
                        153,
                        199,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setStartConfiguration(double)')": [
                        175
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'doOptimize')": [
                        203,
                        204,
                        205,
                        206,
                        209,
                        210,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        232,
                        233,
                        235,
                        238,
                        246,
                        249
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        272,
                        276,
                        285
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex(Comparator)')": [
                        302,
                        303,
                        304,
                        309,
                        310,
                        311,
                        312,
                        313
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(RealPointValuePair,Comparator)')": [
                        329,
                        330
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24,
                        142,
                        144
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        62,
                        64,
                        67,
                        68,
                        69,
                        73,
                        77,
                        81,
                        86,
                        89,
                        92,
                        96,
                        97,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        105,
                        107,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(RealPointValuePair,double,Comparator)')": [
                        122,
                        127,
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        61,
                        63,
                        64,
                        66,
                        68,
                        72,
                        76,
                        80,
                        87,
                        90,
                        94,
                        97
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', None)": [
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(RealPointValuePair,double,Comparator)')": [
                        121,
                        126,
                        138
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/direct/NelderMead.java": {
                "old": {
                    "(None, None)": [
                        23,
                        176,
                        178,
                        180
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        75,
                        76,
                        77,
                        107,
                        122,
                        141,
                        156
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        74,
                        104,
                        105,
                        120,
                        121,
                        140,
                        141,
                        156,
                        157
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', None)": [
                        123,
                        124,
                        146
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', 'fit(ParametricRealFunction,double)')": [
                        128
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', None)": [
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitter', 'fit(ParametricRealFunction,double)')": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitter', None)": [
                        72
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitter', 'fit')": [
                        74,
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitter', None)": [
                        72
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitter', 'fit')": [
                        74
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        30,
                        32,
                        39,
                        40,
                        362,
                        363
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        55,
                        58,
                        61,
                        64,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        82,
                        85,
                        88,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        126,
                        127,
                        128,
                        131,
                        132,
                        133,
                        136,
                        137,
                        138,
                        141,
                        142,
                        143,
                        146,
                        147,
                        148,
                        151,
                        152,
                        153,
                        156,
                        157,
                        158,
                        161,
                        162,
                        163,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        176,
                        228,
                        260,
                        298,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'setMaxIterations(int)')": [
                        124,
                        125
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getMaxIterations')": [
                        129,
                        130
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getIterations')": [
                        134,
                        135
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'setMaxEvaluations(int)')": [
                        139,
                        140
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getMaxEvaluations')": [
                        144,
                        145
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getEvaluations')": [
                        149,
                        150
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'setConvergenceChecker(VectorialConvergenceChecker)')": [
                        159,
                        160
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getConvergenceChecker')": [
                        164,
                        165
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'incrementIterationsCounter')": [
                        172,
                        173,
                        174,
                        175
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getChiSquare')": [
                        252
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getCovariances')": [
                        264,
                        288
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'guessParametersErrors')": [
                        303,
                        305,
                        306,
                        307
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(DifferentiableMultivariateVectorialFunction,double,double,double)')": [
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        350
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'doOptimize')": [
                        361
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        30,
                        37,
                        38,
                        39,
                        256
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        44,
                        45,
                        46,
                        49,
                        52,
                        63,
                        64,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        176,
                        214
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateJacobian')": [
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        126,
                        127,
                        132,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getChiSquare')": [
                        168
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getCovariances')": [
                        180,
                        204
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'guessParametersErrors')": [
                        219,
                        221,
                        222
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(DifferentiableMultivariateVectorialFunction,double,double,double)')": [
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        255
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        40,
                        41,
                        42,
                        43,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        66,
                        67,
                        68,
                        73,
                        74,
                        76,
                        77,
                        79,
                        80,
                        81,
                        82,
                        83,
                        90,
                        91,
                        92
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'getGradientEvaluations')": [
                        84,
                        85
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'computeObjectiveGradient(double)')": [
                        96
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'optimize(DifferentiableMultivariateRealFunction,GoalType,double)')": [
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        111,
                        112,
                        113
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        39,
                        40,
                        46,
                        47,
                        48,
                        53,
                        55,
                        57,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'optimize(DifferentiableMultivariateRealFunction,GoalType,double)')": [
                        79,
                        80
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractScalarOptimizer.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarOptimizer', None)": [
                        36,
                        37,
                        38,
                        43,
                        44,
                        46,
                        47,
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarOptimizer', None)": [
                        37,
                        38,
                        43,
                        45,
                        47
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        27,
                        203
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', None)": [
                        47,
                        48,
                        49,
                        50,
                        51,
                        53,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        71,
                        72,
                        73,
                        76,
                        77,
                        78,
                        82,
                        83,
                        85,
                        86,
                        89,
                        90,
                        91,
                        92,
                        93,
                        96,
                        97,
                        98,
                        101,
                        102,
                        103,
                        134,
                        135,
                        136,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        195,
                        199,
                        200
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'setMaxIterations(int)')": [
                        94,
                        95
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getMaxIterations')": [
                        99,
                        100
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getIterations')": [
                        104,
                        105
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'setMaxEvaluations(int)')": [
                        110
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getMaxEvaluations')": [
                        115
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getEvaluations')": [
                        120
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'setConvergenceChecker(RealConvergenceChecker)')": [
                        124
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getConvergenceChecker')": [
                        129
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'incrementIterationsCounter')": [
                        138,
                        139,
                        140,
                        141
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'computeObjectiveValue(double)')": [
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'optimize(T,GoalType,double)')": [
                        166,
                        168,
                        169,
                        170,
                        171,
                        172
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        28,
                        41,
                        161
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', None)": [
                        49,
                        50,
                        52,
                        62,
                        63,
                        66,
                        70,
                        72,
                        75,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        154,
                        155
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'setMaxEvaluations(int)')": [
                        80
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getMaxEvaluations')": [
                        85
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getEvaluations')": [
                        90
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        94
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'getConvergenceChecker')": [
                        99
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'computeObjectiveValue(double)')": [
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        119
                    ],
                    "('org.apache.commons.math.optimization.general#BaseAbstractScalarOptimizer', 'optimize(T,GoalType,double)')": [
                        126,
                        127,
                        128,
                        130,
                        135
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java": {
                "old": {
                    "(None, None)": [
                        28,
                        132,
                        134
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        46,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        65,
                        70,
                        71,
                        102,
                        106,
                        118,
                        119,
                        120,
                        125,
                        127,
                        129
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        65,
                        69,
                        71,
                        78,
                        79,
                        80,
                        119,
                        120,
                        125
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "(None, None)": [
                        23,
                        886
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        153,
                        155,
                        168,
                        169,
                        170,
                        171,
                        179,
                        474,
                        475,
                        476,
                        477,
                        478,
                        773,
                        796,
                        797,
                        865
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        242,
                        243,
                        276,
                        293,
                        310,
                        428,
                        435,
                        436,
                        437,
                        438,
                        465,
                        468,
                        471
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMDirection(double,double,double,double)')": [
                        736,
                        744
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'qrDecomposition')": [
                        798,
                        824,
                        861,
                        862,
                        863
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        154,
                        469,
                        470,
                        785,
                        786
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        237,
                        266,
                        267,
                        269,
                        270,
                        423,
                        430,
                        431,
                        432,
                        433,
                        460,
                        463,
                        466
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'qrDecomposition')": [
                        787,
                        813,
                        850
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        27
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', None)": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        221
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'doOptimize')": [
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        132,
                        133,
                        134,
                        135,
                        136,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'findUpperBound(UnivariateRealFunction,double,double)')": [
                        225,
                        235
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', None)": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        209,
                        210,
                        221,
                        222
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'doOptimize')": [
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        180,
                        181,
                        182,
                        183,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        208
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'findUpperBound(UnivariateRealFunction,double,double)')": [
                        226,
                        236
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java": {
                "old": {
                    "(None, None)": [
                        23,
                        26
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', None)": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        203,
                        204,
                        205,
                        206,
                        207,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        236,
                        237,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'doOptimize')": [
                        92,
                        93,
                        107,
                        120,
                        121,
                        122,
                        134,
                        160,
                        161,
                        162
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        30,
                        37,
                        38,
                        39,
                        40
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        57,
                        58,
                        68,
                        69,
                        70,
                        71,
                        196,
                        204,
                        211,
                        212,
                        213,
                        214,
                        215,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'setMaxEvaluations(int)')": [
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizer', 'doOptimize')": [
                        85,
                        98,
                        100,
                        113,
                        114,
                        115,
                        127,
                        153,
                        154,
                        155
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        22,
                        23,
                        25,
                        27,
                        267
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', None)": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        49,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        91,
                        92,
                        93,
                        94,
                        100,
                        101,
                        102,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        137,
                        138,
                        161,
                        167,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        197,
                        198,
                        199,
                        200,
                        204,
                        205,
                        241,
                        242,
                        243,
                        249,
                        260,
                        261
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'checkResultComputed')": [
                        88,
                        89,
                        90
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getResult')": [
                        95,
                        96,
                        97,
                        98,
                        99
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getFunctionValue')": [
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setResult(double,double,int)')": [
                        123,
                        124,
                        125,
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'clearResult')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setMaxEvaluations(int)')": [
                        141
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getMaxEvaluations')": [
                        146
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getEvaluations')": [
                        151
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getGoalType')": [
                        158
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'computeObjectiveValue(UnivariateRealFunction,double)')": [
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'computeObjectiveValue(double)')": [
                        209,
                        210,
                        211,
                        212
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double,double)')": [
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        229,
                        230,
                        231,
                        234,
                        235,
                        237
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setFunctionValue(double)')": [
                        245,
                        246
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double)')": [
                        250,
                        251,
                        252,
                        253
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'doOptimize')": [
                        266
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        26,
                        163
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        42,
                        74,
                        80,
                        97,
                        98,
                        99,
                        100,
                        128,
                        130,
                        139,
                        145,
                        146,
                        147,
                        156,
                        157
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setMaxEvaluations(int)')": [
                        54
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getMaxEvaluations')": [
                        59
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getEvaluations')": [
                        64
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getGoalType')": [
                        71
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'computeObjectiveValue(double)')": [
                        104,
                        105,
                        106,
                        107
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double,double)')": [
                        113,
                        114,
                        115,
                        116,
                        117,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        127
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double)')": [
                        131,
                        132,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        141,
                        142
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getConvergenceChecker')": [
                        148,
                        149
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'doOptimize')": [
                        162
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BracketFinder.java": {
                "old": {
                    "(None, None)": [
                        21,
                        297
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', None)": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        92,
                        96,
                        100,
                        101,
                        105,
                        115,
                        214,
                        215,
                        216,
                        217,
                        218,
                        221,
                        231,
                        281,
                        290,
                        291,
                        292,
                        293
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'search(UnivariateRealFunction,GoalType,double,double)')": [
                        124,
                        125,
                        126,
                        147,
                        148,
                        149,
                        150,
                        190,
                        203,
                        204,
                        211,
                        212
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'getIterations')": [
                        219,
                        220
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'getEvaluations')": [
                        226
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'getFLow')": [
                        241
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'eval(UnivariateRealFunction,double)')": [
                        286,
                        287
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'reset')": [
                        294,
                        295,
                        296
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        21,
                        22,
                        31
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', None)": [
                        47,
                        48,
                        49,
                        87,
                        91,
                        95,
                        96,
                        100,
                        110,
                        214,
                        215,
                        216,
                        222,
                        223,
                        224,
                        225,
                        226,
                        233,
                        283,
                        284,
                        285
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'search(UnivariateRealFunction,GoalType,double,double)')": [
                        119,
                        120,
                        128,
                        181,
                        192,
                        194,
                        200,
                        202,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'getMaxEvaluations')": [
                        220,
                        221
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'getEvaluations')": [
                        228
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'getFLo')": [
                        243
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinder', 'eval(UnivariateRealFunction,double)')": [
                        290,
                        291,
                        292,
                        293,
                        294
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        23
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        41,
                        43,
                        44,
                        45,
                        46,
                        47,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        51,
                        52,
                        53,
                        54,
                        55
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'localMin(boolean,double,double,double,double,double)')": [
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        120,
                        220,
                        221,
                        222,
                        223,
                        224
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        25,
                        26,
                        27,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        136,
                        137,
                        138
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        131,
                        132,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'doOptimize')": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        174,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        286,
                        287,
                        288,
                        289
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizerTest', 'testCircleFitting')": [
                        42,
                        58,
                        59,
                        64,
                        65,
                        75,
                        76,
                        79,
                        80
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizerTest', None)": [
                        122,
                        136,
                        138
                    ],
                    "(None, None)": [
                        156,
                        158
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizerTest', 'testCircleFitting')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', 'testTrivial')": [
                        115,
                        137,
                        138,
                        139,
                        140,
                        141
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', None)": [
                        144
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', 'testNoOptimum')": [
                        155
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', 'testTrivial')": [
                        116,
                        138
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', None)": [
                        141
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizerTest', 'testNoOptimum')": [
                        152
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizerTest', 'testRosenbrock')": [
                        51,
                        56,
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizerTest', 'testRosenbrock')": [
                        51,
                        56,
                        57
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        94
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        149
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        183
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMath283')": [
                        199
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        94
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        149
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        183
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "(None, None)": [
                        26,
                        28,
                        29,
                        30,
                        37,
                        41,
                        333,
                        334,
                        335,
                        336
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', None)": [
                        45,
                        46,
                        80,
                        81,
                        82,
                        83,
                        140,
                        141,
                        142,
                        143,
                        161,
                        162,
                        163,
                        164,
                        178,
                        179,
                        180,
                        181,
                        205,
                        206,
                        207,
                        231,
                        232,
                        233,
                        259,
                        260,
                        261,
                        274,
                        275,
                        276,
                        277,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testFunctionEvaluationExceptions')": [
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testLeastSquares1')": [
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testLeastSquares2')": [
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testLeastSquares3')": [
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMaxIterations')": [
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMaxEvaluations')": [
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        298,
                        299
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', None)": [
                        40,
                        74,
                        75,
                        76,
                        77,
                        134,
                        135,
                        136,
                        154,
                        155,
                        156,
                        170,
                        171,
                        172,
                        196,
                        197,
                        198,
                        222,
                        223,
                        224,
                        250,
                        251,
                        252,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testFunctionEvaluationExceptions')": [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testLeastSquares1')": [
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testLeastSquares2')": [
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testLeastSquares3')": [
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMaxIterations')": [
                        253,
                        254,
                        255,
                        256,
                        257,
                        258
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testNoError')": [
                        36
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testSmallError')": [
                        60
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'checkUnsolvableProblem(DifferentiableMultivariateVectorialOptimizer,boolean)')": [
                        119
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testNoError')": [
                        36
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testSmallError')": [
                        60
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'checkUnsolvableProblem(DifferentiableMultivariateVectorialOptimizer,boolean)')": [
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        107,
                        111
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        120,
                        127
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        140,
                        150
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        161,
                        169
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        180,
                        192
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNonInversible')": [
                        215,
                        220
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        227,
                        235
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        272,
                        278
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        295,
                        301
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        308,
                        316
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentEquations')": [
                        327,
                        335
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes')": [
                        342,
                        346,
                        360
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMaxIterations')": [
                        379,
                        387,
                        394
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        401,
                        409
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingBadInit')": [
                        422,
                        463,
                        468
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29,
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        109,
                        113
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        122,
                        129
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNoDependency')": [
                        142,
                        152
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testOneSet')": [
                        163,
                        171
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTwoSets')": [
                        182,
                        194
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testNonInversible')": [
                        217,
                        222
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testIllConditioned')": [
                        229,
                        237
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        274,
                        280
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        297,
                        303
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testRedundantEquations')": [
                        310,
                        318
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentEquations')": [
                        329,
                        337
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testInconsistentSizes')": [
                        344,
                        348,
                        362
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testMaxEvaluations')": [
                        381,
                        389,
                        396
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        403,
                        411
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFittingBadInit')": [
                        424,
                        465,
                        470
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTrivial')": [
                        107,
                        117
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testQRColumnsPermutation')": [
                        126
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNoDependency')": [
                        144
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testOneSet')": [
                        163
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTwoSets')": [
                        180
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNonInversible')": [
                        205,
                        219
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testIllConditioned')": [
                        227
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        261
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        276
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testRedundantEquations')": [
                        297
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testInconsistentEquations')": [
                        314
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testInconsistentSizes')": [
                        327,
                        343
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(DifferentiableMultivariateVectorialFunction,double,int,double,double,double,boolean)')": [
                        383,
                        389,
                        390,
                        392
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        399
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        448
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        516
                    ]
                },
                "new": {
                    "(None, None)": [
                        29,
                        30,
                        31
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTrivial')": [
                        109,
                        119
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testQRColumnsPermutation')": [
                        128
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNoDependency')": [
                        146
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testOneSet')": [
                        165
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTwoSets')": [
                        182
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNonInversible')": [
                        207,
                        221
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testIllConditioned')": [
                        229
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        263
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        278
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testRedundantEquations')": [
                        299
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testInconsistentEquations')": [
                        316
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testInconsistentSizes')": [
                        329,
                        345
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'checkEstimate(DifferentiableMultivariateVectorialFunction,double,int,double,double,double,boolean)')": [
                        385,
                        391,
                        392,
                        394
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        401
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        450
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        518
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        493,
                        506
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        493,
                        506
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTrivial')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testColumnsPermutation')": [
                        128
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNoDependency')": [
                        149
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testOneSet')": [
                        167
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTwoSets')": [
                        190
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNonInversible')": [
                        225
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testIllConditioned')": [
                        241
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        280
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        299
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testRedundantEquations')": [
                        315
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testInconsistentEquations')": [
                        333
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testCircleFitting')": [
                        350
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTrivial')": [
                        112
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testColumnsPermutation')": [
                        128
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNoDependency')": [
                        149
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testOneSet')": [
                        167
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testTwoSets')": [
                        190
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testNonInversible')": [
                        225
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testIllConditioned')": [
                        241
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersSimple')": [
                        280
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testMoreEstimatedParametersUnsorted')": [
                        299
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testRedundantEquations')": [
                        315
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testInconsistentEquations')": [
                        333
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', 'testCircleFitting')": [
                        350
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'testSumSinc')": [
                        51,
                        57
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'testQuadratic')": [
                        83,
                        89
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'testMaximizeQuadratic')": [
                        115,
                        121
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', None)": [
                        129,
                        130
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'doTest(MultivariateRealFunction,double,double,GoalType,double,double,double)')": [
                        139,
                        143,
                        144
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'testSumSinc')": [
                        51,
                        57
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'testQuadratic')": [
                        83,
                        89
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'testMaximizeQuadratic')": [
                        115,
                        121
                    ],
                    "('org.apache.commons.math.optimization.general#PowellOptimizerTest', 'doTest(MultivariateRealFunction,double,double,GoalType,double,double)')": [
                        140,
                        141,
                        142
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/univariate/BracketFinderTest.java": {
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        29,
                        123
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinderTest', None)": [
                        76,
                        77,
                        95,
                        96,
                        97
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinderTest', 'testMinimumIsOnIntervalBoundary')": [
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.math.optimization.univariate#BracketFinderTest', 'testIntervalBoundsOrdering')": [
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        26,
                        31,
                        33
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testSinMin')": [
                        44,
                        45,
                        46,
                        48,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMin')": [
                        76,
                        77,
                        78,
                        79,
                        82,
                        83
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMinStatistics')": [
                        90,
                        91,
                        92,
                        94,
                        105,
                        106,
                        107,
                        111,
                        112,
                        113,
                        114,
                        115
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', None)": [
                        118
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMax')": [
                        123,
                        124,
                        125,
                        127,
                        129
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testMinEndpoints')": [
                        139,
                        140,
                        141,
                        144,
                        145,
                        147,
                        148
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        25
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testSinMin')": [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        54,
                        56
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMin')": [
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        75,
                        76
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMinStatistics')": [
                        83,
                        84,
                        85,
                        87,
                        98,
                        99,
                        103,
                        104,
                        105
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', None)": [
                        108
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMax')": [
                        113,
                        114,
                        115,
                        116,
                        118,
                        120
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testMinEndpoints')": [
                        130,
                        131,
                        132,
                        135,
                        136,
                        138,
                        139
                    ]
                }
            }
        }
    },
    "79c6cb129d6429f2714dab46c86bd92c8db5f5e9": {
        "authored_data": "2010 Aug 30 00:50",
        "commit.message": "MATH-361 and MATH-195 (continued).\nAdded new exceptions.\nCorrected some typos in Javadoc.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990678 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "0ec92a0fc205fb0704d3b9032b88ebb0d4e561a9",
        "changes": {
            "src/main/java/org/apache/commons/math/exception/NumberIsTooLargeException.java": {
                "old": {
                    "('org.apache.commons.math.exception#NumberIsTooLargeException', None)": [
                        46,
                        57,
                        59,
                        78,
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.math.exception#NumberIsTooLargeException', None)": [
                        46,
                        57,
                        59,
                        78,
                        85
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java": {
                "old": {
                    "('org.apache.commons.math.exception#NumberIsTooSmallException', None)": [
                        46,
                        58,
                        60,
                        79,
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.math.exception#NumberIsTooSmallException', None)": [
                        46,
                        58,
                        60,
                        79,
                        86
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/exception/ZeroException.java": {
                "old": {
                    "('org.apache.commons.math.exception#ZeroException', None)": [
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.math.exception#ZeroException', None)": [
                        43
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java": {
                "old": {
                    "(None, None)": [
                        78,
                        205,
                        210
                    ]
                },
                "new": {
                    "(None, None)": [
                        78,
                        138,
                        139,
                        207,
                        212
                    ]
                }
            }
        }
    },
    "0ec92a0fc205fb0704d3b9032b88ebb0d4e561a9": {
        "authored_data": "2010 Aug 29 22:04",
        "commit.message": "added FastMath and used it everywhere in replacement of java.util.Math\nthe unit tests have not been added yet (waiting for dfp library addition)\nJIRA: MATH-375\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@990658 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "bb38a224ebd20c62d01ca12f2156d1c3c33a8ee2",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/BinaryFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis#BinaryFunction', None)": [
                        68,
                        73,
                        77,
                        82
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.analysis#BinaryFunction', None)": [
                        69,
                        74,
                        78,
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/ComposableFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis#ComposableFunction', None)": [
                        58,
                        63,
                        85,
                        90,
                        91,
                        92,
                        93,
                        94,
                        99,
                        100,
                        101,
                        102,
                        103,
                        108,
                        109,
                        110,
                        111,
                        112,
                        117,
                        118,
                        119,
                        120,
                        121,
                        126,
                        127,
                        128,
                        129,
                        130,
                        135,
                        136,
                        137,
                        138,
                        139,
                        144,
                        145,
                        146,
                        147,
                        148,
                        153,
                        154,
                        155,
                        156,
                        157,
                        162,
                        163,
                        164,
                        165,
                        166,
                        171,
                        172,
                        173,
                        174,
                        175,
                        180,
                        181,
                        182,
                        183,
                        184,
                        189,
                        190,
                        191,
                        192,
                        193,
                        198,
                        199,
                        200,
                        201,
                        202,
                        207,
                        208,
                        209,
                        210,
                        211,
                        215,
                        216,
                        217,
                        218,
                        219,
                        224,
                        225,
                        226,
                        227,
                        228,
                        233,
                        234,
                        235,
                        236,
                        237,
                        242,
                        243,
                        244,
                        245,
                        246,
                        251,
                        252,
                        253,
                        254,
                        255,
                        260,
                        261,
                        262,
                        263,
                        264,
                        269
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.analysis#ComposableFunction', None)": [
                        59,
                        64,
                        86,
                        91,
                        92,
                        93,
                        94,
                        95,
                        100,
                        101,
                        102,
                        103,
                        104,
                        109,
                        110,
                        111,
                        112,
                        113,
                        118,
                        119,
                        120,
                        121,
                        122,
                        127,
                        128,
                        129,
                        130,
                        131,
                        136,
                        137,
                        138,
                        139,
                        140,
                        145,
                        146,
                        147,
                        148,
                        149,
                        154,
                        155,
                        156,
                        157,
                        158,
                        163,
                        164,
                        165,
                        166,
                        167,
                        172,
                        173,
                        174,
                        175,
                        176,
                        181,
                        182,
                        183,
                        184,
                        185,
                        190,
                        191,
                        192,
                        193,
                        194,
                        199,
                        200,
                        201,
                        202,
                        203,
                        208,
                        209,
                        210,
                        211,
                        212,
                        216,
                        217,
                        218,
                        219,
                        220,
                        225,
                        226,
                        227,
                        228,
                        229,
                        234,
                        235,
                        236,
                        237,
                        238,
                        243,
                        244,
                        245,
                        246,
                        247,
                        252,
                        253,
                        254,
                        255,
                        256,
                        261,
                        262,
                        263,
                        264,
                        265,
                        270
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegrator', None)": [
                        57,
                        58,
                        69,
                        71,
                        83,
                        84,
                        85,
                        86,
                        91,
                        92,
                        93,
                        94,
                        99,
                        100,
                        102,
                        103,
                        108,
                        109,
                        111,
                        112
                    ],
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        181,
                        183,
                        184,
                        193,
                        194
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegrator', None)": [
                        58,
                        59,
                        70,
                        72,
                        84,
                        85,
                        86,
                        87,
                        92,
                        93,
                        94,
                        95,
                        100,
                        101,
                        103,
                        104,
                        109,
                        110,
                        112,
                        113
                    ],
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        182,
                        184,
                        185,
                        194,
                        195
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#RombergIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        98,
                        99
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.analysis.integration#RombergIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        99,
                        100
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        87,
                        89
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        88,
                        90
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        119,
                        121
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegrator', 'integrate(UnivariateRealFunction,double,double)')": [
                        120,
                        122
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolator', 'smooth(double,double,double)')": [
                        280,
                        300,
                        309,
                        327
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolator', 'smooth(double,double,double)')": [
                        281,
                        301,
                        310,
                        328
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatingFunction', 'value(double)')": [
                        203,
                        210
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatingFunction', 'value(double)')": [
                        204,
                        211
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'add(PolynomialFunction)')": [
                        143,
                        144
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'subtract(PolynomialFunction)')": [
                        169,
                        170
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'multiply(PolynomialFunction)')": [
                        213,
                        214
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'toString')": [
                        308
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'add(PolynomialFunction)')": [
                        144,
                        145
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'subtract(PolynomialFunction)')": [
                        170,
                        171
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'multiply(PolynomialFunction)')": [
                        214,
                        215
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunction', 'toString')": [
                        309
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'evaluate(double,double,double)')": [
                        182
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionLagrangeForm', 'evaluate(double,double,double)')": [
                        183
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialsUtils', 'buildPolynomial(int,ArrayList,RecurrenceCoefficientsGenerator)')": [
                        196
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialsUtils', 'buildPolynomial(int,ArrayList,RecurrenceCoefficientsGenerator)')": [
                        197
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#BisectionSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        99
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.analysis.solvers#BisectionSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        100
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double,double)')": [
                        139,
                        146,
                        158
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        207,
                        210
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double,double,double,double,double)')": [
                        261,
                        270,
                        279,
                        280,
                        284,
                        285,
                        312,
                        313,
                        328
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double,double)')": [
                        140,
                        147,
                        159
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        208,
                        211
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolver', 'solve(UnivariateRealFunction,double,double,double,double,double,double)')": [
                        262,
                        271,
                        280,
                        281,
                        285,
                        286,
                        313,
                        314,
                        329
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'isRootOK(double,double,Complex)')": [
                        211,
                        213
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(Complex,Complex)')": [
                        339
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'isRootOK(double,double,Complex)')": [
                        212,
                        214
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', 'solve(Complex,Complex)')": [
                        340
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        170,
                        171,
                        178,
                        179,
                        183
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve2(UnivariateRealFunction,double,double)')": [
                        310,
                        311,
                        312,
                        314,
                        315,
                        326,
                        332,
                        333,
                        337
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        171,
                        172,
                        179,
                        180,
                        184
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', 'solve2(UnivariateRealFunction,double,double)')": [
                        311,
                        312,
                        313,
                        315,
                        316,
                        327,
                        333,
                        334,
                        338
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#NewtonSolver', 'solve(UnivariateRealFunction,double,double,double)')": [
                        122
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.analysis.solvers#NewtonSolver', 'solve(UnivariateRealFunction,double,double,double)')": [
                        123
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#RiddersSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        148,
                        154,
                        159,
                        160,
                        164
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        149,
                        155,
                        160,
                        161,
                        165
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#SecantSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        139,
                        147,
                        151,
                        152,
                        157
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.analysis.solvers#SecantSolver', 'solve(UnivariateRealFunction,double,double)')": [
                        140,
                        148,
                        152,
                        153,
                        158
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'bracket(UnivariateRealFunction,double,double,double,int)')": [
                        192,
                        193
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtils', 'bracket(UnivariateRealFunction,double,double,double,int)')": [
                        193,
                        194
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/complex/Complex.java": {
                "old": {
                    "('org.apache.commons.math.complex#Complex', 'abs')": [
                        116,
                        118,
                        121,
                        124,
                        127
                    ],
                    "('org.apache.commons.math.complex#Complex', 'divide(Complex)')": [
                        224
                    ],
                    "('org.apache.commons.math.complex#Complex', 'cos')": [
                        550,
                        551
                    ],
                    "('org.apache.commons.math.complex#Complex', 'cosh')": [
                        584,
                        585
                    ],
                    "('org.apache.commons.math.complex#Complex', 'exp')": [
                        619,
                        620
                    ],
                    "('org.apache.commons.math.complex#Complex', 'log')": [
                        657,
                        658
                    ],
                    "('org.apache.commons.math.complex#Complex', 'sin')": [
                        716,
                        717
                    ],
                    "('org.apache.commons.math.complex#Complex', 'sinh')": [
                        750,
                        751
                    ],
                    "('org.apache.commons.math.complex#Complex', 'sqrt')": [
                        796,
                        800
                    ],
                    "('org.apache.commons.math.complex#Complex', 'tan')": [
                        860,
                        861,
                        862
                    ],
                    "('org.apache.commons.math.complex#Complex', 'tanh')": [
                        898,
                        899,
                        900
                    ],
                    "('org.apache.commons.math.complex#Complex', 'getArgument')": [
                        920
                    ],
                    "('org.apache.commons.math.complex#Complex', 'nthRoot(int)')": [
                        962,
                        966,
                        970,
                        971
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.complex#Complex', 'abs')": [
                        117,
                        119,
                        122,
                        125,
                        128
                    ],
                    "('org.apache.commons.math.complex#Complex', 'divide(Complex)')": [
                        225
                    ],
                    "('org.apache.commons.math.complex#Complex', 'cos')": [
                        551,
                        552
                    ],
                    "('org.apache.commons.math.complex#Complex', 'cosh')": [
                        585,
                        586
                    ],
                    "('org.apache.commons.math.complex#Complex', 'exp')": [
                        620,
                        621
                    ],
                    "('org.apache.commons.math.complex#Complex', 'log')": [
                        658,
                        659
                    ],
                    "('org.apache.commons.math.complex#Complex', 'sin')": [
                        717,
                        718
                    ],
                    "('org.apache.commons.math.complex#Complex', 'sinh')": [
                        751,
                        752
                    ],
                    "('org.apache.commons.math.complex#Complex', 'sqrt')": [
                        797,
                        801
                    ],
                    "('org.apache.commons.math.complex#Complex', 'tan')": [
                        861,
                        862,
                        863
                    ],
                    "('org.apache.commons.math.complex#Complex', 'tanh')": [
                        899,
                        900,
                        901
                    ],
                    "('org.apache.commons.math.complex#Complex', 'getArgument')": [
                        921
                    ],
                    "('org.apache.commons.math.complex#Complex', 'nthRoot(int)')": [
                        963,
                        967,
                        971,
                        972
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/complex/ComplexUtils.java": {
                "old": {
                    "('org.apache.commons.math.complex#ComplexUtils', 'polar2Complex(double,double)')": [
                        68
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.complex#ComplexUtils', 'polar2Complex(double,double)')": [
                        69
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java": {
                "old": {
                    "('org.apache.commons.math.distribution#AbstractContinuousDistribution', 'inverseCumulativeProbability(double)')": [
                        127,
                        130
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.distribution#AbstractContinuousDistribution', 'inverseCumulativeProbability(double)')": [
                        128,
                        131
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java": {
                "old": {
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(double)')": [
                        70
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(double,double)')": [
                        93,
                        94,
                        95,
                        97,
                        98
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'probability(double)')": [
                        126
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(double)')": [
                        71
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'cumulativeProbability(double,double)')": [
                        94,
                        95,
                        96,
                        98,
                        99
                    ],
                    "('org.apache.commons.math.distribution#AbstractIntegerDistribution', 'probability(double)')": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#BetaDistributionImpl', 'density(double)')": [
                        159,
                        160,
                        161
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.distribution#BetaDistributionImpl', 'density(double)')": [
                        160,
                        161,
                        162
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#BinomialDistributionImpl', 'probability(int)')": [
                        187
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.distribution#BinomialDistributionImpl', 'probability(int)')": [
                        188
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#CauchyDistributionImpl', 'cumulativeProbability(double)')": [
                        91
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionImpl', 'density(double)')": [
                        120
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        146
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionImpl', 'cumulativeProbability(double)')": [
                        92
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionImpl', 'density(double)')": [
                        121
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#ExponentialDistributionImpl', 'density(double)')": [
                        123
                    ],
                    "('org.apache.commons.math.distribution#ExponentialDistributionImpl', 'cumulativeProbability(double)')": [
                        146
                    ],
                    "('org.apache.commons.math.distribution#ExponentialDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        173
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.distribution#ExponentialDistributionImpl', 'density(double)')": [
                        124
                    ],
                    "('org.apache.commons.math.distribution#ExponentialDistributionImpl', 'cumulativeProbability(double)')": [
                        147
                    ],
                    "('org.apache.commons.math.distribution#ExponentialDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        174
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'density(double)')": [
                        91,
                        92,
                        93,
                        94,
                        95
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.distribution#FDistributionImpl', 'density(double)')": [
                        92,
                        93,
                        94,
                        95,
                        96
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#GammaDistributionImpl', 'density(double)')": [
                        205
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.distribution#GammaDistributionImpl', 'density(double)')": [
                        206
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'getLowerDomain(int,int,int)')": [
                        147
                    ],
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'getUpperDomain(int,int)')": [
                        186
                    ],
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'probability(int)')": [
                        211
                    ],
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'probability(int,int,int,int)')": [
                        228
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'getLowerDomain(int,int,int)')": [
                        148
                    ],
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'getUpperDomain(int,int)')": [
                        187
                    ],
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'probability(int)')": [
                        212
                    ],
                    "('org.apache.commons.math.distribution#HypergeometricDistributionImpl', 'probability(int,int,int,int)')": [
                        229
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#NormalDistributionImpl', None)": [
                        47
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionImpl', 'density(double)')": [
                        168
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionImpl', 'cumulativeProbability(double)')": [
                        182
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionImpl', None)": [
                        48
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionImpl', 'density(double)')": [
                        169
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionImpl', 'cumulativeProbability(double)')": [
                        183
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#PascalDistributionImpl', 'probability(int)')": [
                        179,
                        180
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.distribution#PascalDistributionImpl', 'probability(int)')": [
                        180,
                        181
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#PoissonDistributionImpl', 'setNormalAndMeanInternal(NormalDistribution,double)')": [
                        177
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionImpl', 'probability(int)')": [
                        192,
                        194,
                        196
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionImpl', 'sample')": [
                        260
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionImpl', 'setNormalAndMeanInternal(NormalDistribution,double)')": [
                        178
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionImpl', 'probability(int)')": [
                        193,
                        195,
                        197
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionImpl', 'sample')": [
                        261
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java": {
                "old": {
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', None)": [
                        48
                    ],
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', 'getStirlingError(double)')": [
                        110,
                        113
                    ],
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', 'getDeviancePart(double,double)')": [
                        146,
                        162
                    ],
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', 'logBinomialProbability(int,int,double,double)')": [
                        183,
                        189,
                        196
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', None)": [
                        49
                    ],
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', 'getStirlingError(double)')": [
                        111,
                        114
                    ],
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', 'getDeviancePart(double,double)')": [
                        147,
                        163
                    ],
                    "('org.apache.commons.math.distribution#SaddlePointExpansion', 'logBinomialProbability(int,int,double,double)')": [
                        184,
                        190,
                        197
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#TDistributionImpl', 'density(double)')": [
                        116,
                        117
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.distribution#TDistributionImpl', 'density(double)')": [
                        117,
                        118
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'cumulativeProbability(double)')": [
                        89
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'density(double)')": [
                        124,
                        127,
                        128,
                        129,
                        133
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        159
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'getInitialDomain(double)')": [
                        247
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'cumulativeProbability(double)')": [
                        90
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'density(double)')": [
                        125,
                        128,
                        129,
                        130,
                        134
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'inverseCumulativeProbability(double)')": [
                        160
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionImpl', 'getInitialDomain(double)')": [
                        248
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'probability(int)')": [
                        147
                    ],
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'generalizedHarmonic(int,double)')": [
                        208
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'probability(int)')": [
                        148
                    ],
                    "('org.apache.commons.math.distribution#ZipfDistributionImpl', 'generalizedHarmonic(int,double)')": [
                        209
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateJacobian')": [
                        131
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateResidualsAndCost')": [
                        163,
                        166
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'getRMS(EstimationProblem)')": [
                        188
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'guessParametersErrors(EstimationProblem)')": [
                        265,
                        268
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateJacobian')": [
                        132
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'updateResidualsAndCost')": [
                        164,
                        167
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'getRMS(EstimationProblem)')": [
                        189
                    ],
                    "('org.apache.commons.math.estimation#AbstractEstimator', 'guessParametersErrors(EstimationProblem)')": [
                        266,
                        269
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', None)": [
                        100,
                        125
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', 'estimate(EstimationProblem)')": [
                        225,
                        226
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', None)": [
                        101,
                        126
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', 'estimate(EstimationProblem)')": [
                        226,
                        227
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java": {
                "old": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'estimate(EstimationProblem)')": [
                        253,
                        306,
                        326,
                        336,
                        364,
                        368,
                        413,
                        429,
                        443,
                        452
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMParameter(double,double,double,double,double,double)')": [
                        527,
                        573,
                        577,
                        582,
                        591,
                        592,
                        593,
                        607,
                        613,
                        640,
                        642,
                        646
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMDirection(double,double,double,double)')": [
                        711,
                        713,
                        717
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'qrDecomposition')": [
                        808,
                        845
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'estimate(EstimationProblem)')": [
                        254,
                        307,
                        327,
                        337,
                        365,
                        369,
                        414,
                        430,
                        444,
                        453
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMParameter(double,double,double,double,double,double)')": [
                        528,
                        574,
                        578,
                        583,
                        592,
                        593,
                        594,
                        608,
                        614,
                        641,
                        643,
                        647
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'determineLMDirection(double,double,double,double)')": [
                        712,
                        714,
                        718
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimator', 'qrDecomposition')": [
                        809,
                        846
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/fraction/BigFraction.java": {
                "old": {
                    "('org.apache.commons.math.fraction#BigFraction', None)": [
                        273,
                        280,
                        299,
                        308
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'pow(double)')": [
                        997,
                        998
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', None)": [
                        274,
                        281,
                        300,
                        309
                    ],
                    "('org.apache.commons.math.fraction#BigFraction', 'pow(double)')": [
                        998,
                        999
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/fraction/Fraction.java": {
                "old": {
                    "('org.apache.commons.math.fraction#Fraction', None)": [
                        179,
                        186,
                        205,
                        213
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.fraction#Fraction', None)": [
                        180,
                        187,
                        206,
                        214
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/genetics/ElitisticListPopulation.java": {
                "old": {
                    "('org.apache.commons.math.genetics#ElitisticListPopulation', 'nextGeneration')": [
                        79
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.math.genetics#ElitisticListPopulation', 'nextGeneration')": [
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/geometry/Rotation.java": {
                "old": {
                    "('org.apache.commons.math.geometry#Rotation', None)": [
                        137,
                        180,
                        181,
                        182,
                        257,
                        266,
                        275,
                        283,
                        332,
                        343,
                        419,
                        467
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'getAxis')": [
                        555,
                        558
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'getAngle')": [
                        568,
                        570,
                        571,
                        572
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'getAngles(RotationOrder)')": [
                        626,
                        627,
                        628,
                        644,
                        645,
                        646,
                        662,
                        663,
                        664,
                        680,
                        681,
                        682,
                        698,
                        699,
                        700,
                        716,
                        717,
                        718,
                        734,
                        735,
                        736,
                        752,
                        753,
                        754,
                        770,
                        771,
                        772,
                        788,
                        789,
                        790,
                        806,
                        807,
                        808,
                        824,
                        825,
                        826
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'orthogonalizeMatrix(double,double)')": [
                        1020
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.geometry#Rotation', None)": [
                        138,
                        181,
                        182,
                        183,
                        258,
                        267,
                        276,
                        284,
                        333,
                        344,
                        420,
                        468
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'getAxis')": [
                        556,
                        559
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'getAngle')": [
                        569,
                        571,
                        572,
                        573
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'getAngles(RotationOrder)')": [
                        627,
                        628,
                        629,
                        645,
                        646,
                        647,
                        663,
                        664,
                        665,
                        681,
                        682,
                        683,
                        699,
                        700,
                        701,
                        717,
                        718,
                        719,
                        735,
                        736,
                        737,
                        753,
                        754,
                        755,
                        771,
                        772,
                        773,
                        789,
                        790,
                        791,
                        807,
                        808,
                        809,
                        825,
                        826,
                        827
                    ],
                    "('org.apache.commons.math.geometry#Rotation', 'orthogonalizeMatrix(double,double)')": [
                        1021
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/geometry/Vector3D.java": {
                "old": {
                    "('org.apache.commons.math.geometry#Vector3D', None)": [
                        110,
                        111,
                        112,
                        113
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getNorm1')": [
                        206
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getNorm')": [
                        213
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getNormInf')": [
                        227
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getAlpha')": [
                        235
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getDelta')": [
                        243
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'orthogonal')": [
                        315,
                        318,
                        321
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'angle(Vector3D,Vector3D)')": [
                        350,
                        352,
                        356
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'distance1(Vector3D,Vector3D)')": [
                        474,
                        475,
                        476
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'distance(Vector3D,Vector3D)')": [
                        492
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'distanceInf(Vector3D,Vector3D)')": [
                        504,
                        505,
                        506,
                        507
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', None)": [
                        111,
                        112,
                        113,
                        114
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getNorm1')": [
                        207
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getNorm')": [
                        214
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getNormInf')": [
                        228
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getAlpha')": [
                        236
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'getDelta')": [
                        244
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'orthogonal')": [
                        316,
                        319,
                        322
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'angle(Vector3D,Vector3D)')": [
                        351,
                        353,
                        357
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'distance1(Vector3D,Vector3D)')": [
                        475,
                        476,
                        477
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'distance(Vector3D,Vector3D)')": [
                        493
                    ],
                    "('org.apache.commons.math.geometry#Vector3D', 'distanceInf(Vector3D,Vector3D)')": [
                        505,
                        506,
                        507,
                        508
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getNorm')": [
                        216,
                        218
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getFrobeniusNorm')": [
                        252
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getNorm')": [
                        217,
                        219
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getFrobeniusNorm')": [
                        253
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/AbstractRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getDistance(RealVector)')": [
                        205
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getNorm')": [
                        217
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getL1Norm')": [
                        226
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getLInfNorm')": [
                        237
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getL1Distance(RealVector)')": [
                        254
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getL1Distance(double)')": [
                        266
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getLInfDistance(RealVector)')": [
                        278
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getLInfDistance(double)')": [
                        290
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getDistance(RealVector)')": [
                        206
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getNorm')": [
                        218
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getL1Norm')": [
                        227
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getLInfNorm')": [
                        238
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getL1Distance(RealVector)')": [
                        255
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getL1Distance(double)')": [
                        267
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getLInfDistance(RealVector)')": [
                        279
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVector', 'getLInfDistance(double)')": [
                        291
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapPowToSelf(double)')": [
                        387
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapExpToSelf')": [
                        396
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapExpm1ToSelf')": [
                        405
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapLogToSelf')": [
                        414
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapLog10ToSelf')": [
                        423
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapLog1pToSelf')": [
                        432
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCoshToSelf')": [
                        441
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSinhToSelf')": [
                        450
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapTanhToSelf')": [
                        459
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCosToSelf')": [
                        468
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSinToSelf')": [
                        477
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapTanToSelf')": [
                        486
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAcosToSelf')": [
                        495
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAsinToSelf')": [
                        504
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAtanToSelf')": [
                        513
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAbsToSelf')": [
                        531
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSqrtToSelf')": [
                        540
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCbrtToSelf')": [
                        549
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCeilToSelf')": [
                        558
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapFloorToSelf')": [
                        567
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapRintToSelf')": [
                        576
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSignumToSelf')": [
                        585
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapUlpToSelf')": [
                        594
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getNorm')": [
                        738
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getL1Norm')": [
                        746
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getLInfNorm')": [
                        756
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getDistance(RealVector)')": [
                        774
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getDistance(double)')": [
                        788
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getL1Distance(RealVector)')": [
                        820
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getL1Distance(double)')": [
                        834
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getLInfDistance(RealVector)')": [
                        868
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getLInfDistance(double)')": [
                        882
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapPowToSelf(double)')": [
                        388
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapExpToSelf')": [
                        397
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapExpm1ToSelf')": [
                        406
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapLogToSelf')": [
                        415
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapLog10ToSelf')": [
                        424
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapLog1pToSelf')": [
                        433
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCoshToSelf')": [
                        442
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSinhToSelf')": [
                        451
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapTanhToSelf')": [
                        460
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCosToSelf')": [
                        469
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSinToSelf')": [
                        478
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapTanToSelf')": [
                        487
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAcosToSelf')": [
                        496
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAsinToSelf')": [
                        505
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAtanToSelf')": [
                        514
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapAbsToSelf')": [
                        532
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSqrtToSelf')": [
                        541
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCbrtToSelf')": [
                        550
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapCeilToSelf')": [
                        559
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapFloorToSelf')": [
                        568
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapRintToSelf')": [
                        577
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapSignumToSelf')": [
                        586
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'mapUlpToSelf')": [
                        595
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getNorm')": [
                        739
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getL1Norm')": [
                        747
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getLInfNorm')": [
                        757
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getDistance(RealVector)')": [
                        775
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getDistance(double)')": [
                        789
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getL1Distance(RealVector)')": [
                        821
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getL1Distance(double)')": [
                        835
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getLInfDistance(RealVector)')": [
                        869
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVector', 'getLInfDistance(double)')": [
                        883
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/BiDiagonalTransformer.java": {
                "old": {
                    "('org.apache.commons.math.linear#BiDiagonalTransformer', None)": [
                        64
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformer', 'transformToUpperBiDiagonal')": [
                        268,
                        293
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformer', 'transformToLowerBiDiagonal')": [
                        332,
                        357
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformer', None)": [
                        66
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformer', 'transformToUpperBiDiagonal')": [
                        270,
                        295
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformer', 'transformToLowerBiDiagonal')": [
                        334,
                        359
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'toBlocksLayout(T)')": [
                        233,
                        237
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'createBlocksLayout(Field,int,int)')": [
                        285,
                        289
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'add(FieldMatrix)')": [
                        345,
                        347
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'subtract(FieldMatrix)')": [
                        418,
                        420
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(FieldMatrix)')": [
                        528,
                        533
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(BlockFieldMatrix)')": [
                        592
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getData')": [
                        654
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'setSubMatrix(T,int,int)')": [
                        836,
                        837,
                        842,
                        843
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'transpose')": [
                        1295,
                        1297
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'operate(T)')": [
                        1347,
                        1351
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'preMultiply(T)')": [
                        1397,
                        1401
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor)')": [
                        1435,
                        1440
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor)')": [
                        1460,
                        1465
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1488,
                        1489,
                        1494,
                        1495
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1518,
                        1519,
                        1524,
                        1525
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor)')": [
                        1546,
                        1549
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor)')": [
                        1572,
                        1575
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1600,
                        1601,
                        1605,
                        1606
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1630,
                        1631,
                        1635,
                        1636
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'toBlocksLayout(T)')": [
                        234,
                        238
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'createBlocksLayout(Field,int,int)')": [
                        286,
                        290
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'add(FieldMatrix)')": [
                        346,
                        348
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'subtract(FieldMatrix)')": [
                        419,
                        421
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(FieldMatrix)')": [
                        529,
                        534
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'multiply(BlockFieldMatrix)')": [
                        593
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getData')": [
                        655
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'setSubMatrix(T,int,int)')": [
                        837,
                        838,
                        843,
                        844
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'transpose')": [
                        1296,
                        1298
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'operate(T)')": [
                        1348,
                        1352
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'preMultiply(T)')": [
                        1398,
                        1402
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor)')": [
                        1436,
                        1441
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor)')": [
                        1461,
                        1466
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1489,
                        1490,
                        1495,
                        1496
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1519,
                        1520,
                        1525,
                        1526
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor)')": [
                        1547,
                        1550
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor)')": [
                        1573,
                        1576
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)')": [
                        1601,
                        1602,
                        1606,
                        1607
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)')": [
                        1631,
                        1632,
                        1636,
                        1637
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'toBlocksLayout(double)')": [
                        227,
                        231
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'createBlocksLayout(int,int)')": [
                        275,
                        279
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'add(RealMatrix)')": [
                        335,
                        337
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'subtract(RealMatrix)')": [
                        408,
                        410
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(RealMatrix)')": [
                        517,
                        522
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(BlockRealMatrix)')": [
                        580
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getData')": [
                        641
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getNorm')": [
                        676,
                        682
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getFrobeniusNorm')": [
                        697
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'setSubMatrix(double,int,int)')": [
                        862,
                        863,
                        868,
                        869
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'transpose')": [
                        1319,
                        1321
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'operate(double)')": [
                        1370,
                        1374
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'preMultiply(double)')": [
                        1418,
                        1422
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor)')": [
                        1455,
                        1460
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor)')": [
                        1480,
                        1485
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1508,
                        1509,
                        1514,
                        1515
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1538,
                        1539,
                        1544,
                        1545
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor)')": [
                        1566,
                        1569
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor)')": [
                        1592,
                        1595
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1620,
                        1621,
                        1625,
                        1626
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1650,
                        1651,
                        1655,
                        1656
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'toBlocksLayout(double)')": [
                        228,
                        232
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'createBlocksLayout(int,int)')": [
                        276,
                        280
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'add(RealMatrix)')": [
                        336,
                        338
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'subtract(RealMatrix)')": [
                        409,
                        411
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(RealMatrix)')": [
                        518,
                        523
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'multiply(BlockRealMatrix)')": [
                        581
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getData')": [
                        642
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getNorm')": [
                        677,
                        683
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getFrobeniusNorm')": [
                        698
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'setSubMatrix(double,int,int)')": [
                        863,
                        864,
                        869,
                        870
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'transpose')": [
                        1320,
                        1322
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'operate(double)')": [
                        1371,
                        1375
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'preMultiply(double)')": [
                        1419,
                        1423
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor)')": [
                        1456,
                        1461
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor)')": [
                        1481,
                        1486
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1509,
                        1510,
                        1515,
                        1516
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInRowOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1539,
                        1540,
                        1545,
                        1546
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor)')": [
                        1567,
                        1570
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor)')": [
                        1593,
                        1596
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixChangingVisitor,int,int,int,int)')": [
                        1621,
                        1622,
                        1626,
                        1627
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'walkInOptimizedOrder(RealMatrixPreservingVisitor,int,int,int,int)')": [
                        1651,
                        1652,
                        1656,
                        1657
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#CholeskyDecompositionImpl', None)": [
                        121,
                        122,
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.linear#CholeskyDecompositionImpl', None)": [
                        122,
                        123,
                        140
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'isSymmetric(RealMatrix)')": [
                        148
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenVectors(double)')": [
                        487,
                        488,
                        489,
                        490,
                        491,
                        497,
                        500,
                        511,
                        512,
                        522,
                        535,
                        537,
                        543,
                        597,
                        598,
                        604
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'isSymmetric(RealMatrix)')": [
                        149
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenVectors(double)')": [
                        488,
                        489,
                        490,
                        491,
                        492,
                        498,
                        501,
                        512,
                        513,
                        523,
                        536,
                        538,
                        544,
                        598,
                        599,
                        605
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        126,
                        127,
                        133
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        127,
                        128,
                        134
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'isDefaultValue(double)')": [
                        207
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getDistance(OpenMapRealVector)')": [
                        432
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getDistance(double)')": [
                        454
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getL1Distance(OpenMapRealVector)')": [
                        476,
                        484,
                        485
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getL1Distance(double)')": [
                        507
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getLInfDistance(OpenMapRealVector)')": [
                        523
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getLInfDistance(double)')": [
                        557
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'isDefaultValue(double)')": [
                        208
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getDistance(OpenMapRealVector)')": [
                        433
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getDistance(double)')": [
                        455
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getL1Distance(OpenMapRealVector)')": [
                        477,
                        485,
                        486
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getL1Distance(double)')": [
                        508
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getLInfDistance(OpenMapRealVector)')": [
                        524
                    ],
                    "('org.apache.commons.math.linear#OpenMapRealVector', 'getLInfDistance(double)')": [
                        558
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        76,
                        87,
                        103,
                        305,
                        381,
                        388
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getR')": [
                        158
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getQT')": [
                        195,
                        199
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getH')": [
                        233
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        77,
                        88,
                        104,
                        306,
                        382,
                        389
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getR')": [
                        159
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getQT')": [
                        196,
                        200
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImpl', 'getH')": [
                        234
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', None)": [
                        140
                    ],
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', 'getRank')": [
                        254
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', None)": [
                        141
                    ],
                    "('org.apache.commons.math.linear#SingularValueDecompositionImpl', 'getRank')": [
                        255
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/TriDiagonalTransformer.java": {
                "old": {
                    "('org.apache.commons.math.linear#TriDiagonalTransformer', 'transform')": [
                        216
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.math.linear#TriDiagonalTransformer', 'transform')": [
                        218
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'sanityChecks(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        209,
                        212
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'addEndTimeChecker(double,double,CombinedEventsManager)')": [
                        239
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'sanityChecks(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        210,
                        213
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'addEndTimeChecker(double,double,CombinedEventsManager)')": [
                        240
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java": {
                "old": {
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'append(ContinuousOutputModel)')": [
                        152,
                        154
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'setInterpolatedTime(double)')": [
                        300,
                        317,
                        321,
                        322
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'append(ContinuousOutputModel)')": [
                        153,
                        155
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModel', 'setInterpolatedTime(double)')": [
                        301,
                        318,
                        322,
                        323
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        131,
                        170
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', 'computeStepGrowShrinkFactor(double)')": [
                        294
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        132,
                        171
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', 'computeStepGrowShrinkFactor(double)')": [
                        295
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/events/EventState.java": {
                "old": {
                    "('org.apache.commons.math.ode.events#EventState', None)": [
                        98
                    ],
                    "('org.apache.commons.math.ode.events#EventState', 'evaluateStep(StepInterpolator)')": [
                        174,
                        230,
                        231,
                        236,
                        238
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.ode.events#EventState', None)": [
                        99
                    ],
                    "('org.apache.commons.math.ode.events#EventState', 'evaluateStep(StepInterpolator)')": [
                        175,
                        231,
                        232,
                        237,
                        239
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        242,
                        249,
                        276
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        243,
                        250,
                        277
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        294
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        439,
                        448
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        295
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        440,
                        449
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', None)": [
                        108,
                        109
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'initializeStep(FirstOrderDifferentialEquations,boolean,int,double,double,double,double,double,double)')": [
                        242,
                        259,
                        263,
                        265,
                        266,
                        267,
                        268
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'filterStep(double,boolean,boolean)')": [
                        296,
                        302
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'resetInternalState')": [
                        331
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', None)": [
                        109,
                        110
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'initializeStep(FirstOrderDifferentialEquations,boolean,int,double,double,double,double,double,double)')": [
                        243,
                        260,
                        264,
                        266,
                        267,
                        268,
                        269
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'filterStep(double,boolean,boolean)')": [
                        297,
                        303
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'resetInternalState')": [
                        332
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54Integrator', 'estimateError(double,double,double,double)')": [
                        143,
                        152
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54Integrator', 'estimateError(double,double,double,double)')": [
                        145,
                        154
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853Integrator', None)": [
                        62,
                        63,
                        71,
                        74,
                        77,
                        80,
                        81,
                        84,
                        87,
                        88,
                        91,
                        92,
                        96,
                        97,
                        103,
                        104,
                        110,
                        111,
                        118,
                        119
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853Integrator', 'estimateError(double,double,double,double)')": [
                        262,
                        277
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853Integrator', None)": [
                        64,
                        65,
                        73,
                        76,
                        79,
                        82,
                        83,
                        86,
                        89,
                        90,
                        93,
                        94,
                        98,
                        99,
                        105,
                        106,
                        112,
                        113,
                        120,
                        121
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853Integrator', 'estimateError(double,double,double,double)')": [
                        264,
                        279
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        248,
                        252,
                        294,
                        317,
                        318,
                        355,
                        356,
                        357
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        249,
                        253,
                        295,
                        318,
                        319,
                        356,
                        357,
                        358
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegrator', None)": [
                        55,
                        56,
                        61
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegrator', None)": [
                        57,
                        58,
                        63
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GillStepInterpolator', None)": [
                        51,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillStepInterpolator', None)": [
                        52,
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'rescale(double,double,double)')": [
                        437,
                        442
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'tryStep(double,double,double,int,double,double,double,double,double)')": [
                        512
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        616,
                        617,
                        618,
                        619,
                        696,
                        713,
                        716,
                        720,
                        725,
                        729,
                        730,
                        731,
                        732,
                        836,
                        842,
                        874,
                        887,
                        889,
                        940,
                        949,
                        956,
                        957,
                        981
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'rescale(double,double,double)')": [
                        438,
                        443
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'tryStep(double,double,double,int,double,double,double,double,double)')": [
                        513
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        617,
                        618,
                        619,
                        620,
                        697,
                        714,
                        717,
                        721,
                        726,
                        730,
                        731,
                        732,
                        733,
                        837,
                        843,
                        875,
                        888,
                        890,
                        941,
                        950,
                        957,
                        958,
                        982
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolator', 'resetTables(int)')": [
                        214
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolator', 'estimateError(double)')": [
                        304
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolator', 'resetTables(int)')": [
                        215
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolator', 'estimateError(double)')": [
                        305
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54Integrator', 'estimateError(double,double,double,double)')": [
                        117,
                        126
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54Integrator', 'estimateError(double,double,double,double)')": [
                        119,
                        128
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', None)": [
                        91
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        174
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', None)": [
                        92
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        175
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'computeInterpolatedStateAndDerivatives(double,double)')": [
                        200
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'computeInterpolatedStateAndDerivatives(double,double)')": [
                        201
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/ode/sampling/StepNormalizer.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', None)": [
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizer', None)": [
                        76
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double)')": [
                        245,
                        246
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double)')": [
                        246,
                        247
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        77,
                        78
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization#SimpleRealPointChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        78,
                        79
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        76,
                        77
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization#SimpleScalarValueChecker', 'converged(int,RealPointValuePair,RealPointValuePair)')": [
                        77,
                        78
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        79,
                        80
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialPointChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        80,
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java": {
                "old": {
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        79,
                        80
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.optimization#SimpleVectorialValueChecker', 'converged(int,VectorialPointValuePair,VectorialPointValuePair)')": [
                        80,
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java": {
                "old": {
                    "('org.apache.commons.math.optimization.fitting#HarmonicCoefficientsGuesser', 'guessAOmega')": [
                        244,
                        245
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicCoefficientsGuesser', 'guessPhi')": [
                        269,
                        270,
                        276
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicCoefficientsGuesser', 'guessAOmega')": [
                        245,
                        246
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicCoefficientsGuesser', 'guessPhi')": [
                        270,
                        271,
                        277
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java": {
                "old": {
                    "('org.apache.commons.math.optimization.fitting#HarmonicFitter', None)": [
                        117,
                        126,
                        127
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicFitter', None)": [
                        118,
                        127,
                        128
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFunction.java": {
                "old": {
                    "('org.apache.commons.math.optimization.fitting#HarmonicFunction', 'value(double)')": [
                        50
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicFunction', 'derivative')": [
                        55
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicFunction', 'value(double)')": [
                        51
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicFunction', 'derivative')": [
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateJacobian')": [
                        192
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        222,
                        226
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getRMS')": [
                        241
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'guessParametersErrors')": [
                        309,
                        312
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateJacobian')": [
                        193
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        223,
                        227
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getRMS')": [
                        242
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'guessParametersErrors')": [
                        310,
                        313
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/BaseAbstractScalarOptimizer.java": {
                "old": {
                    "(None, None)": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        245,
                        305,
                        323,
                        336,
                        367,
                        370,
                        413,
                        429,
                        454,
                        463
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMParameter(double,double,double,double,double,double)')": [
                        531,
                        573,
                        577,
                        582,
                        591,
                        592,
                        593,
                        607,
                        613,
                        640,
                        642,
                        646
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMDirection(double,double,double,double)')": [
                        711,
                        713,
                        717
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'qrDecomposition')": [
                        807,
                        841
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        246,
                        306,
                        324,
                        337,
                        368,
                        371,
                        414,
                        430,
                        455,
                        464
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMParameter(double,double,double,double,double,double)')": [
                        532,
                        574,
                        578,
                        583,
                        592,
                        593,
                        594,
                        608,
                        614,
                        641,
                        643,
                        647
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'determineLMDirection(double,double,double,double)')": [
                        712,
                        714,
                        718
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'qrDecomposition')": [
                        808,
                        842
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'findUpperBound(UnivariateRealFunction,double,double)')": [
                        227
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizer', 'findUpperBound(UnivariateRealFunction,double,double)')": [
                        228
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        37
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'localMin(boolean,double,double,double,double,double)')": [
                        115,
                        119,
                        125,
                        142,
                        175
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', None)": [
                        38
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'localMin(boolean,double,double,double,double,double)')": [
                        116,
                        120,
                        126,
                        143,
                        176
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/AbstractRandomGenerator.java": {
                "old": {
                    "('org.apache.commons.math.random#AbstractRandomGenerator', 'nextGaussian')": [
                        266
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.random#AbstractRandomGenerator', 'nextGaussian')": [
                        267
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java": {
                "old": {
                    "('org.apache.commons.math.random#BitsStreamGenerator', 'nextGaussian')": [
                        102,
                        103,
                        104,
                        105
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.random#BitsStreamGenerator', 'nextGaussian')": [
                        103,
                        104,
                        105,
                        106
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java": {
                "old": {
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGenerator', 'decompose(RealMatrix,double)')": [
                        246
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGenerator', 'decompose(RealMatrix,double)')": [
                        247
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java": {
                "old": {
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'findBin(double)')": [
                        359,
                        360
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'getNextValue')": [
                        377
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'findBin(double)')": [
                        360,
                        361
                    ],
                    "('org.apache.commons.math.random#EmpiricalDistributionImpl', 'getNextValue')": [
                        378
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/MersenneTwister.java": {
                "old": {
                    "('org.apache.commons.math.random#MersenneTwister', 'setSeed(int)')": [
                        170
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.math.random#MersenneTwister', 'setSeed(int)')": [
                        172
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/RandomDataImpl.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextPoisson(double)')": [
                        365,
                        381,
                        383,
                        386,
                        389,
                        390,
                        407,
                        411,
                        420
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextExponential(double)')": [
                        490
                    ]
                },
                "new": {
                    "(None, None)": [
                        46
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextPoisson(double)')": [
                        366,
                        382,
                        384,
                        387,
                        390,
                        391,
                        408,
                        412,
                        421
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextExponential(double)')": [
                        491
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java": {
                "old": {
                    "('org.apache.commons.math.random#UniformRandomGenerator', None)": [
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math.random#UniformRandomGenerator', None)": [
                        40
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/random/UnitSphereRandomVectorGenerator.java": {
                "old": {
                    "('org.apache.commons.math.random#UnitSphereRandomVectorGenerator', 'nextVector')": [
                        73
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.random#UnitSphereRandomVectorGenerator', 'nextVector')": [
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/special/Beta.java": {
                "old": {
                    "('org.apache.commons.math.special#Beta', 'regularizedBeta(double,double,double,double,int)')": [
                        151,
                        152
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.special#Beta', 'regularizedBeta(double,double,double,double,int)')": [
                        152,
                        153
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/special/Gamma.java": {
                "old": {
                    "('org.apache.commons.math.special#Gamma', None)": [
                        61
                    ],
                    "('org.apache.commons.math.special#Gamma', 'logGamma(double)')": [
                        109,
                        110
                    ],
                    "('org.apache.commons.math.special#Gamma', 'regularizedGammaP(double,double,double,int)')": [
                        178,
                        191
                    ],
                    "('org.apache.commons.math.special#Gamma', 'regularizedGammaQ(double,double,double,int)')": [
                        266
                    ],
                    "('org.apache.commons.math.special#Gamma', 'digamma(double)')": [
                        306
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.special#Gamma', None)": [
                        62
                    ],
                    "('org.apache.commons.math.special#Gamma', 'logGamma(double)')": [
                        110,
                        111
                    ],
                    "('org.apache.commons.math.special#Gamma', 'regularizedGammaP(double,double,double,int)')": [
                        179,
                        192
                    ],
                    "('org.apache.commons.math.special#Gamma', 'regularizedGammaQ(double,double,double,int)')": [
                        267
                    ],
                    "('org.apache.commons.math.special#Gamma', 'digamma(double)')": [
                        307
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java": {
                "old": {
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationStandardErrors')": [
                        144
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationPValues')": [
                        173
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'covarianceToCorrelation(RealMatrix)')": [
                        257,
                        261
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationStandardErrors')": [
                        145
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationPValues')": [
                        174
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'covarianceToCorrelation(RealMatrix)')": [
                        258,
                        262
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#DescriptiveStatistics', 'getStandardDeviation')": [
                        210
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.stat.descriptive#DescriptiveStatistics', 'getStandardDeviation')": [
                        211
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatistics', 'getStandardDeviation')": [
                        251
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatistics', 'getStandardDeviation')": [
                        252
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#StatisticalSummaryValues', 'getStandardDeviation')": [
                        111
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math.stat.descriptive#StatisticalSummaryValues', 'getStandardDeviation')": [
                        113
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#SummaryStatistics', 'getStandardDeviation')": [
                        220
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.stat.descriptive#SummaryStatistics', 'getStandardDeviation')": [
                        221
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#GeometricMean', 'getResult')": [
                        109
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#GeometricMean', 'evaluate(double,int,int)')": [
                        142
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#GeometricMean', 'getResult')": [
                        110
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#GeometricMean', 'evaluate(double,int,int)')": [
                        143
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#Kurtosis', 'evaluate(double,int,int)')": [
                        173,
                        179,
                        181,
                        189
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#Kurtosis', 'evaluate(double,int,int)')": [
                        174,
                        180,
                        182,
                        190
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/Skewness.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#Skewness', 'getResult')": [
                        112
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#Skewness', 'evaluate(double,int,int)')": [
                        178
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#Skewness', 'getResult')": [
                        113
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#Skewness', 'evaluate(double,int,int)')": [
                        179
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'getResult')": [
                        125
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double)')": [
                        152
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double,int,int)')": [
                        175
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double,double,int,int)')": [
                        204
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double,double)')": [
                        229
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'getResult')": [
                        126
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double)')": [
                        153
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double,int,int)')": [
                        176
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double,double,int,int)')": [
                        205
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviation', 'evaluate(double,double)')": [
                        230
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.rank#Percentile', 'evaluate(double,int,int,double)')": [
                        213
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.stat.descriptive.rank#Percentile', 'evaluate(double,int,int,double)')": [
                        214
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.summary#Product', 'evaluate(double,double,int,int)')": [
                        165
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.stat.descriptive.summary#Product', 'evaluate(double,double,int,int)')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.summary#SumOfLogs', 'increment(double)')": [
                        80
                    ],
                    "('org.apache.commons.math.stat.descriptive.summary#SumOfLogs', 'evaluate(double,int,int)')": [
                        135
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.stat.descriptive.summary#SumOfLogs', 'increment(double)')": [
                        81
                    ],
                    "('org.apache.commons.math.stat.descriptive.summary#SumOfLogs', 'evaluate(double,int,int)')": [
                        136
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#ChiSquareTestImpl', 'chiSquare(double,long)')": [
                        85
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestImpl', 'chiSquareDataSetsComparison(long,long)')": [
                        259
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestImpl', 'chiSquare(double,long)')": [
                        86
                    ],
                    "('org.apache.commons.math.stat.inference#ChiSquareTestImpl', 'chiSquareDataSetsComparison(long,long)')": [
                        260
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/inference/TTestImpl.java": {
                "old": {
                    "('org.apache.commons.math.stat.inference#TTestImpl', 't(double,double,double,double)')": [
                        908
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 't(double,double,double,double,double,double)')": [
                        926
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'homoscedasticT(double,double,double,double,double,double)')": [
                        944
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'tTest(double,double,double,double)')": [
                        959
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'tTest(double,double,double,double,double,double)')": [
                        982
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'homoscedasticTTest(double,double,double,double,double,double)')": [
                        1007
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 't(double,double,double,double)')": [
                        909
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 't(double,double,double,double,double,double)')": [
                        927
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'homoscedasticT(double,double,double,double,double,double)')": [
                        945
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'tTest(double,double,double,double)')": [
                        960
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'tTest(double,double,double,double,double,double)')": [
                        983
                    ],
                    "('org.apache.commons.math.stat.inference#TTestImpl', 'homoscedasticTTest(double,double,double,double,double,double)')": [
                        1008
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/ranking/NaturalRanking.java": {
                "old": {
                    "('org.apache.commons.math.stat.ranking#NaturalRanking', 'resolveTie(double,List)')": [
                        345,
                        354
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.stat.ranking#NaturalRanking', 'resolveTie(double,List)')": [
                        346,
                        355
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'estimateRegressionParametersStandardErrors')": [
                        156
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'estimateRegressionParametersStandardErrors')": [
                        157
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSlope')": [
                        302
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSumSquaredErrors')": [
                        338
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getR')": [
                        434
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getInterceptStdErr')": [
                        472
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSlopeStdErr')": [
                        488
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSignificance')": [
                        582
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSlope')": [
                        303
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSumSquaredErrors')": [
                        339
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getR')": [
                        435
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getInterceptStdErr')": [
                        473
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSlopeStdErr')": [
                        489
                    ],
                    "('org.apache.commons.math.stat.regression#SimpleRegression', 'getSignificance')": [
                        583
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'transform2(double)')": [
                        102
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'transform2(UnivariateRealFunction,double,double,int)')": [
                        128
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'fct(double)')": [
                        243,
                        244
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'transform2(double)')": [
                        103
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'transform2(UnivariateRealFunction,double,double,int)')": [
                        129
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformer', 'fct(double)')": [
                        244,
                        245
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'transform2(double)')": [
                        128
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'transform2(UnivariateRealFunction,double,double,int)')": [
                        152
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'transform2(Complex)')": [
                        170
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(double)')": [
                        246
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(UnivariateRealFunction,double,double,int)')": [
                        270
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(Complex)')": [
                        288
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        840,
                        847,
                        848,
                        849
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'transform2(double)')": [
                        129
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'transform2(UnivariateRealFunction,double,double,int)')": [
                        153
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'transform2(Complex)')": [
                        171
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(double)')": [
                        247
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(UnivariateRealFunction,double,double,int)')": [
                        271
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', 'inversetransform2(Complex)')": [
                        289
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformer', None)": [
                        841,
                        848,
                        849,
                        850
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/transform/FastSineTransformer.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastSineTransformer', 'transform2(double)')": [
                        102
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'transform2(UnivariateRealFunction,double,double,int)')": [
                        127
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'fst(double)')": [
                        235
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'transform2(double)')": [
                        103
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'transform2(UnivariateRealFunction,double,double,int)')": [
                        128
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformer', 'fst(double)')": [
                        236
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/ContinuedFraction.java": {
                "old": {
                    "('org.apache.commons.math.util#ContinuedFraction', 'evaluate(double,double,int)')": [
                        152,
                        190
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#ContinuedFraction', 'evaluate(double,double,int)')": [
                        152,
                        190
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        48,
                        1120,
                        1156,
                        1157,
                        1158,
                        1193
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'binomialCoefficientDouble(int,int)')": [
                        290
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'binomialCoefficientLog(int,int)')": [
                        317,
                        325,
                        333,
                        347,
                        352
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'cosh(double)')": [
                        405
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'equals(double,double,double)')": [
                        448
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'equalsIncludingNaN(double,double,double)')": [
                        462
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'equals(double,double,int)')": [
                        498
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'factorialDouble(int)')": [
                        638
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'factorialLog(int)')": [
                        661,
                        665
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'gcd(int,int)')": [
                        708
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'gcd(long,long)')": [
                        797
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'lcm(int,int)')": [
                        967
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'lcm(long,long)')": [
                        1002
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'log(double,double)')": [
                        1028
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'nextAfter(double,double)')": [
                        1122,
                        1123,
                        1124,
                        1125,
                        1126,
                        1127,
                        1128,
                        1129,
                        1130,
                        1131,
                        1132,
                        1133,
                        1134,
                        1135,
                        1136,
                        1137,
                        1138,
                        1139,
                        1140,
                        1141,
                        1142,
                        1143,
                        1144,
                        1145,
                        1146,
                        1147,
                        1148,
                        1149,
                        1150,
                        1151,
                        1152,
                        1153,
                        1154,
                        1155
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'normalizeAngle(double,double)')": [
                        1208
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'round(float,int,int)')": [
                        1334
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'roundUnscaled(double,double,int)')": [
                        1355,
                        1357,
                        1361,
                        1365,
                        1367,
                        1372,
                        1374,
                        1376,
                        1381,
                        1383,
                        1385,
                        1388,
                        1390,
                        1392,
                        1399,
                        1401,
                        1403,
                        1408,
                        1413
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'sinh(double)')": [
                        1533
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance1(double,double)')": [
                        1790
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance1(int,int)')": [
                        1805
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance(double,double)')": [
                        1823
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance(int,int)')": [
                        1839
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distanceInf(double,double)')": [
                        1852
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distanceInf(int,int)')": [
                        1867
                    ],
                    "(None, None)": [
                        2072
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        48,
                        1120,
                        1121,
                        1122,
                        1159
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'binomialCoefficientDouble(int,int)')": [
                        290
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'binomialCoefficientLog(int,int)')": [
                        317,
                        325,
                        333,
                        347,
                        352
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'cosh(double)')": [
                        405
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'equals(double,double,double)')": [
                        448
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'equalsIncludingNaN(double,double,double)')": [
                        462
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'equals(double,double,int)')": [
                        498
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'factorialDouble(int)')": [
                        638
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'factorialLog(int)')": [
                        661,
                        665
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'gcd(int,int)')": [
                        708
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'gcd(long,long)')": [
                        797
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'lcm(int,int)')": [
                        967
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'lcm(long,long)')": [
                        1002
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'log(double,double)')": [
                        1028
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'nextAfter(double,double)')": [
                        1124
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'normalizeAngle(double,double)')": [
                        1174
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'round(float,int,int)')": [
                        1300
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'roundUnscaled(double,double,int)')": [
                        1321,
                        1323,
                        1327,
                        1331,
                        1333,
                        1338,
                        1340,
                        1342,
                        1347,
                        1349,
                        1351,
                        1354,
                        1356,
                        1358,
                        1365,
                        1367,
                        1369,
                        1374,
                        1379
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'sinh(double)')": [
                        1499
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance1(double,double)')": [
                        1756
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance1(int,int)')": [
                        1771
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance(double,double)')": [
                        1789
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distance(int,int)')": [
                        1805
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distanceInf(double,double)')": [
                        1818
                    ],
                    "('org.apache.commons.math.util#MathUtils', 'distanceInf(int,int)')": [
                        1833
                    ],
                    "(None, None)": [
                        2038
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java": {
                "old": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'computeCapacity(int)')": [
                        156
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#OpenIntToDoubleHashMap', 'computeCapacity(int)')": [
                        156
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java": {
                "old": {
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'computeCapacity(int)')": [
                        168
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#OpenIntToFieldHashMap', 'computeCapacity(int)')": [
                        168
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java": {
                "old": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'expand')": [
                        476,
                        483,
                        485
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#ResizableDoubleArray', 'expand')": [
                        476,
                        483,
                        485
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ArgumentOutsideDomainExceptionTest.java": {
                "old": {
                    "('org.apache.commons.math#ArgumentOutsideDomainExceptionTest', 'testConstructor')": [
                        30,
                        34
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.math#ArgumentOutsideDomainExceptionTest', 'testConstructor')": [
                        32,
                        36
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/TestUtils.java": {
                "old": {
                    "('org.apache.commons.math#TestUtils', 'assertRelativelyEquals(String,double,double,double)')": [
                        176
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math#TestUtils', 'assertRelativelyEquals(String,double,double,double)')": [
                        177
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/BinaryFunctionTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis#BinaryFunctionTest', 'testAtan2')": [
                        57,
                        58
                    ],
                    "('org.apache.commons.math.analysis#BinaryFunctionTest', 'testFix1st')": [
                        65
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.analysis#BinaryFunctionTest', 'testAtan2')": [
                        58,
                        59
                    ],
                    "('org.apache.commons.math.analysis#BinaryFunctionTest', 'testFix1st')": [
                        66
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/ComposableFunctionTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis#ComposableFunctionTest', 'testComposition')": [
                        81,
                        87,
                        93,
                        99
                    ],
                    "('org.apache.commons.math.analysis#ComposableFunctionTest', 'testCombine')": [
                        111
                    ],
                    "('org.apache.commons.math.analysis#ComposableFunctionTest', 'testSimpleCombination')": [
                        126,
                        127,
                        128,
                        129,
                        130,
                        131
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.analysis#ComposableFunctionTest', 'testComposition')": [
                        82,
                        88,
                        94,
                        100
                    ],
                    "('org.apache.commons.math.analysis#ComposableFunctionTest', 'testCombine')": [
                        112
                    ],
                    "('org.apache.commons.math.analysis#ComposableFunctionTest', 'testSimpleCombination')": [
                        127,
                        128,
                        129,
                        130,
                        131,
                        132
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/Expm1Function.java": {
                "old": {
                    "('org.apache.commons.math.analysis#Expm1Function', 'value(double)')": [
                        29,
                        30
                    ],
                    "('org.apache.commons.math.analysis#Expm1Function', 'derivative')": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.analysis#Expm1Function', 'value(double)')": [
                        30,
                        31
                    ],
                    "('org.apache.commons.math.analysis#Expm1Function', 'derivative')": [
                        37
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/SinFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis#SinFunction', 'value(double)')": [
                        37
                    ],
                    "('org.apache.commons.math.analysis#SinFunction', 'derivative')": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.analysis#SinFunction', 'value(double)')": [
                        38
                    ],
                    "('org.apache.commons.math.analysis#SinFunction', 'derivative')": [
                        46
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegratorTest', 'testSinFunction')": [
                        47,
                        48,
                        49,
                        53,
                        54,
                        55
                    ],
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegratorTest', 'testExactIntegration')": [
                        95
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegratorTest', 'testSinFunction')": [
                        48,
                        49,
                        50,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.math.analysis.integration#LegendreGaussIntegratorTest', 'testExactIntegration')": [
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/integration/RombergIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#RombergIntegratorTest', 'testSinFunction')": [
                        45,
                        46,
                        50,
                        51
                    ],
                    "('org.apache.commons.math.analysis.integration#RombergIntegratorTest', 'testQuinticFunction')": [
                        65,
                        70,
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.integration#RombergIntegratorTest', 'testSinFunction')": [
                        46,
                        47,
                        51,
                        52
                    ],
                    "('org.apache.commons.math.analysis.integration#RombergIntegratorTest', 'testQuinticFunction')": [
                        66,
                        71,
                        76
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/integration/SimpsonIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegratorTest', 'testSinFunction')": [
                        44,
                        45,
                        49,
                        50
                    ],
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegratorTest', 'testQuinticFunction')": [
                        64,
                        69,
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegratorTest', 'testSinFunction')": [
                        45,
                        46,
                        50,
                        51
                    ],
                    "('org.apache.commons.math.analysis.integration#SimpsonIntegratorTest', 'testQuinticFunction')": [
                        65,
                        70,
                        75
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/integration/TrapezoidIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegratorTest', 'testSinFunction')": [
                        44,
                        45,
                        49,
                        50
                    ],
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegratorTest', 'testQuinticFunction')": [
                        64,
                        69,
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegratorTest', 'testSinFunction')": [
                        45,
                        46,
                        50,
                        51
                    ],
                    "('org.apache.commons.math.analysis.integration#TrapezoidIntegratorTest', 'testQuinticFunction')": [
                        65,
                        70,
                        75
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolatorTest', 'testSinFunction')": [
                        54,
                        64,
                        65,
                        68,
                        69
                    ],
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolatorTest', 'testExpm1Function')": [
                        92,
                        96,
                        100,
                        104
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolatorTest', 'testSinFunction')": [
                        55,
                        65,
                        66,
                        69,
                        70
                    ],
                    "('org.apache.commons.math.analysis.interpolation#DividedDifferenceInterpolatorTest', 'testExpm1Function')": [
                        93,
                        97,
                        101,
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/LoessInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'testOnDistortedSine')": [
                        80,
                        84,
                        85
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'testIncreasingBandwidthIncreasesSmoothness')": [
                        113
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers')": [
                        146
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'generateSineData(double,double,double,double)')": [
                        245,
                        249,
                        250
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'testOnDistortedSine')": [
                        81,
                        85,
                        86
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'testIncreasingBandwidthIncreasesSmoothness')": [
                        114
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers')": [
                        147
                    ],
                    "('org.apache.commons.math.analysis.interpolation#LoessInterpolatorTest', 'generateSineData(double,double,double,double)')": [
                        246,
                        250,
                        251
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatorTest', 'testLinearFunction2D')": [
                        72
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatorTest', 'testParaboloid2D')": [
                        124
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatorTest', 'testLinearFunction2D')": [
                        73
                    ],
                    "('org.apache.commons.math.analysis.interpolation#MicrosphereInterpolatorTest', 'testParaboloid2D')": [
                        125
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/NevilleInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#NevilleInterpolatorTest', 'testSinFunction')": [
                        54,
                        64,
                        65,
                        68,
                        69
                    ],
                    "('org.apache.commons.math.analysis.interpolation#NevilleInterpolatorTest', 'testExpm1Function')": [
                        92,
                        96,
                        100,
                        104
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.interpolation#NevilleInterpolatorTest', 'testSinFunction')": [
                        55,
                        65,
                        66,
                        69,
                        70
                    ],
                    "('org.apache.commons.math.analysis.interpolation#NevilleInterpolatorTest', 'testExpm1Function')": [
                        93,
                        97,
                        101,
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#SmoothingPolynomialBicubicSplineInterpolatorTest', 'testPlane')": [
                        94
                    ],
                    "('org.apache.commons.math.analysis.interpolation#SmoothingPolynomialBicubicSplineInterpolatorTest', 'testParaboloid')": [
                        142
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.analysis.interpolation#SmoothingPolynomialBicubicSplineInterpolatorTest', 'testPlane')": [
                        95
                    ],
                    "('org.apache.commons.math.analysis.interpolation#SmoothingPolynomialBicubicSplineInterpolatorTest', 'testParaboloid')": [
                        143
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/SplineInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#SplineInterpolatorTest', 'testInterpolateSin')": [
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        157,
                        158
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.interpolation#SplineInterpolatorTest', 'testInterpolateSin')": [
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        158,
                        159
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunctionTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolatingFunctionTest', 'testWave')": [
                        395,
                        412,
                        427,
                        442,
                        457,
                        472,
                        487,
                        502
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolatingFunctionTest', 'testWave')": [
                        396,
                        413,
                        428,
                        443,
                        458,
                        473,
                        488,
                        503
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolatorTest', 'testWave')": [
                        168
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolatorTest', 'testWave')": [
                        169
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionTest', 'testfirstDerivativeComparison')": [
                        158,
                        159
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionTest', 'testMath341')": [
                        258,
                        259
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionTest', 'testfirstDerivativeComparison')": [
                        159,
                        160
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialFunctionTest', 'testMath341')": [
                        259,
                        260
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.polynomials#PolynomialsUtilsTest', 'testChebyshevBounds')": [
                        46
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialsUtilsTest', 'testHighDegreeLegendre')": [
                        194
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialsUtilsTest', 'testChebyshevBounds')": [
                        48
                    ],
                    "('org.apache.commons.math.analysis.polynomials#PolynomialsUtilsTest', 'testHighDegreeLegendre')": [
                        196
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#BisectionSolverTest', 'testDeprecated')": [
                        38,
                        41
                    ],
                    "('org.apache.commons.math.analysis.solvers#BisectionSolverTest', 'testSinZero')": [
                        50,
                        53
                    ],
                    "('org.apache.commons.math.analysis.solvers#BisectionSolverTest', 'testMath369')": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.solvers#BisectionSolverTest', 'testDeprecated')": [
                        39,
                        42
                    ],
                    "('org.apache.commons.math.analysis.solvers#BisectionSolverTest', 'testSinZero')": [
                        51,
                        54
                    ],
                    "('org.apache.commons.math.analysis.solvers#BisectionSolverTest', 'testMath369')": [
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#BrentSolverTest', 'testDeprecated')": [
                        56,
                        63,
                        70,
                        76
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolverTest', 'testSinZero')": [
                        93,
                        100,
                        107,
                        113
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolverTest', 'testRootEndpoints')": [
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolverTest', 'testDeprecated')": [
                        57,
                        64,
                        71,
                        77
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolverTest', 'testSinZero')": [
                        94,
                        101,
                        108,
                        114
                    ],
                    "('org.apache.commons.math.analysis.solvers#BrentSolverTest', 'testRootEndpoints')": [
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testDeprecated')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testLinearFunction')": [
                        69,
                        70
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testQuadraticFunction')": [
                        87,
                        88,
                        93,
                        94
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testQuinticFunction')": [
                        111,
                        112,
                        117,
                        118,
                        123,
                        124
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testQuinticFunction2')": [
                        142,
                        143,
                        147,
                        148,
                        151,
                        152,
                        153,
                        157,
                        158,
                        161,
                        162,
                        163
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testDeprecated')": [
                        53,
                        54
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testLinearFunction')": [
                        71,
                        72
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testQuadraticFunction')": [
                        89,
                        90,
                        95,
                        96
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testQuinticFunction')": [
                        113,
                        114,
                        119,
                        120,
                        125,
                        126
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolverTest', 'testQuinticFunction2')": [
                        144,
                        145,
                        149,
                        150,
                        153,
                        154,
                        155,
                        159,
                        160,
                        163,
                        164,
                        165
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testDeprecated')": [
                        51,
                        52,
                        53,
                        58,
                        59
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testDeprecated2')": [
                        74,
                        75,
                        80,
                        81,
                        86,
                        87
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testSinFunction')": [
                        100,
                        101,
                        102,
                        107,
                        108
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testSinFunction2')": [
                        121,
                        122,
                        123,
                        128,
                        129
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testQuinticFunction')": [
                        143,
                        144,
                        149,
                        150,
                        155,
                        156
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testQuinticFunction2')": [
                        170,
                        171,
                        176,
                        177,
                        182,
                        183
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testExpm1Function')": [
                        201,
                        202,
                        207,
                        208,
                        213,
                        214
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testExpm1Function2')": [
                        230,
                        231,
                        236,
                        237,
                        242,
                        243
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testDeprecated')": [
                        52,
                        53,
                        54,
                        59,
                        60
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testDeprecated2')": [
                        75,
                        76,
                        81,
                        82,
                        87,
                        88
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testSinFunction')": [
                        101,
                        102,
                        103,
                        108,
                        109
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testSinFunction2')": [
                        122,
                        123,
                        124,
                        129,
                        130
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testQuinticFunction')": [
                        144,
                        145,
                        150,
                        151,
                        156,
                        157
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testQuinticFunction2')": [
                        171,
                        172,
                        177,
                        178,
                        183,
                        184
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testExpm1Function')": [
                        202,
                        203,
                        208,
                        209,
                        214,
                        215
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolverTest', 'testExpm1Function2')": [
                        231,
                        232,
                        237,
                        238,
                        243,
                        244
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#NewtonSolverTest', 'testDeprecated')": [
                        39,
                        42
                    ],
                    "('org.apache.commons.math.analysis.solvers#NewtonSolverTest', 'testSinZero')": [
                        57,
                        60
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.analysis.solvers#NewtonSolverTest', 'testDeprecated')": [
                        40,
                        43
                    ],
                    "('org.apache.commons.math.analysis.solvers#NewtonSolverTest', 'testSinZero')": [
                        58,
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testDeprecated')": [
                        49,
                        50,
                        51,
                        56,
                        57
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testSinFunction')": [
                        70,
                        71,
                        72,
                        77,
                        78
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testQuinticFunction')": [
                        92,
                        93,
                        98,
                        99,
                        104,
                        105
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testExpm1Function')": [
                        119,
                        120,
                        125,
                        126,
                        131,
                        132
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testDeprecated')": [
                        50,
                        51,
                        52,
                        57,
                        58
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testSinFunction')": [
                        71,
                        72,
                        73,
                        78,
                        79
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testQuinticFunction')": [
                        93,
                        94,
                        99,
                        100,
                        105,
                        106
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolverTest', 'testExpm1Function')": [
                        120,
                        121,
                        126,
                        127,
                        132,
                        133
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtilsTest', 'testSolveSin')": [
                        57
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtilsTest', 'testSolveAccuracySin')": [
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtilsTest', 'testSolveSin')": [
                        58
                    ],
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverUtilsTest', 'testSolveAccuracySin')": [
                        75
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/complex/ComplexFormatAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.complex#ComplexFormatAbstractTest', 'testFormatNumber')": [
                        340
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.complex#ComplexFormatAbstractTest', 'testFormatNumber')": [
                        341
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/complex/ComplexTest.java": {
                "old": {
                    "('org.apache.commons.math.complex#ComplexTest', None)": [
                        35
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testAcos')": [
                        350
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testSqrtPolar')": [
                        659
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testGetArgument')": [
                        906,
                        909,
                        912,
                        915,
                        918,
                        921,
                        924
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testGetArgumentInf')": [
                        932,
                        933,
                        935,
                        937,
                        938,
                        939
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', None)": [
                        36
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testAcos')": [
                        351
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testSqrtPolar')": [
                        660
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testGetArgument')": [
                        907,
                        910,
                        913,
                        916,
                        919,
                        922,
                        925
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testGetArgumentInf')": [
                        933,
                        934,
                        936,
                        938,
                        939,
                        940
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/complex/ComplexUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.complex#ComplexUtilsTest', None)": [
                        32
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.complex#ComplexUtilsTest', None)": [
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/distribution/CauchyDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#CauchyDistributionTest', 'testMedian')": [
                        86
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionTest', 'testScale')": [
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionTest', 'testMedian')": [
                        88
                    ],
                    "('org.apache.commons.math.distribution#CauchyDistributionTest', 'testScale')": [
                        95
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/distribution/ContinuousDistributionAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#ContinuousDistributionAbstractTest', 'testConsistency')": [
                        226,
                        227
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.distribution#ContinuousDistributionAbstractTest', 'testConsistency')": [
                        227,
                        228
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/distribution/ExponentialDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#ExponentialDistributionTest', 'testDensity')": [
                        97,
                        98
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19
                    ],
                    "('org.apache.commons.math.distribution#ExponentialDistributionTest', 'testDensity')": [
                        99,
                        100
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/distribution/IntegerDistributionAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#IntegerDistributionAbstractTest', 'testFloatingPointArguments')": [
                        215,
                        216
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.distribution#IntegerDistributionAbstractTest', 'testFloatingPointArguments')": [
                        216,
                        217
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#NormalDistributionTest', 'testSetMean')": [
                        124
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionTest', 'testSetStandardDeviation')": [
                        136
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionTest', 'testSetMean')": [
                        125
                    ],
                    "('org.apache.commons.math.distribution#NormalDistributionTest', 'testSetStandardDeviation')": [
                        137
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#PoissonDistributionTest', 'testLargeMeanCumulativeProbability')": [
                        155
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.distribution#PoissonDistributionTest', 'testLargeMeanCumulativeProbability')": [
                        156
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/distribution/WeibullDistributionTest.java": {
                "old": {
                    "('org.apache.commons.math.distribution#WeibullDistributionTest', 'testAlpha')": [
                        77
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionTest', 'testBeta')": [
                        84
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionTest', 'testAlpha')": [
                        79
                    ],
                    "('org.apache.commons.math.distribution#WeibullDistributionTest', 'testBeta')": [
                        86
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/estimation/EstimatedParameterTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#EstimatedParameterTest', 'checkValue(double,double)')": [
                        70
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.estimation#EstimatedParameterTest', 'checkValue(double,double)')": [
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#GaussNewtonEstimatorTest', 'testCircleFitting')": [
                        511
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimatorTest', None)": [
                        703
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimatorTest', 'testCircleFitting')": [
                        513
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimatorTest', None)": [
                        705
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimatorTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', 'testNonInversible')": [
                        270
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', 'testCircleFitting')": [
                        504,
                        521,
                        522
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', None)": [
                        748
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', 'testNonInversible')": [
                        272
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', 'testCircleFitting')": [
                        506,
                        523,
                        524
                    ],
                    "('org.apache.commons.math.estimation#LevenbergMarquardtEstimatorTest', None)": [
                        750
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/estimation/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#MinpackTest', 'testMinpackRosenbrok')": [
                        121,
                        123,
                        125
                    ],
                    "('org.apache.commons.math.estimation#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        493,
                        494
                    ],
                    "('org.apache.commons.math.estimation#MinpackTest', None)": [
                        547,
                        552,
                        560,
                        714,
                        715,
                        790,
                        807,
                        812,
                        820,
                        859,
                        860,
                        1023,
                        1037,
                        1141,
                        1142,
                        1143,
                        1157,
                        1158,
                        1182,
                        1194,
                        1221,
                        1222,
                        1223,
                        1240,
                        1241,
                        1413,
                        1414,
                        1432,
                        1433,
                        1473,
                        1474,
                        1475,
                        1476,
                        1510,
                        1511,
                        1512,
                        1513
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.estimation#MinpackTest', 'testMinpackRosenbrok')": [
                        122,
                        124,
                        126
                    ],
                    "('org.apache.commons.math.estimation#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        494,
                        495
                    ],
                    "('org.apache.commons.math.estimation#MinpackTest', None)": [
                        548,
                        553,
                        561,
                        715,
                        716,
                        791,
                        808,
                        813,
                        821,
                        860,
                        861,
                        1024,
                        1038,
                        1142,
                        1143,
                        1144,
                        1158,
                        1159,
                        1183,
                        1195,
                        1222,
                        1223,
                        1224,
                        1241,
                        1242,
                        1414,
                        1415,
                        1433,
                        1434,
                        1474,
                        1475,
                        1476,
                        1477,
                        1511,
                        1512,
                        1513,
                        1514
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/estimation/WeightedMeasurementTest.java": {
                "old": {
                    "('org.apache.commons.math.estimation#WeightedMeasurementTest', 'checkValue(double,double)')": [
                        82
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.estimation#WeightedMeasurementTest', 'checkValue(double,double)')": [
                        83
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/fraction/BigFractionFormatTest.java": {
                "old": {
                    "('org.apache.commons.math.fraction#BigFractionFormatTest', 'testParseBig')": [
                        258,
                        264
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.math.fraction#BigFractionFormatTest', 'testParseBig')": [
                        260,
                        266
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java": {
                "old": {
                    "('org.apache.commons.math.fraction#BigFractionTest', 'testGoldenRatio')": [
                        92
                    ],
                    "('org.apache.commons.math.fraction#BigFractionTest', 'testSerial')": [
                        567
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.fraction#BigFractionTest', 'testGoldenRatio')": [
                        93
                    ],
                    "('org.apache.commons.math.fraction#BigFractionTest', 'testSerial')": [
                        568
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/fraction/FractionFormatTest.java": {
                "old": {
                    "('org.apache.commons.math.fraction#FractionFormatTest', 'testDoubleFormat')": [
                        299
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.math.fraction#FractionFormatTest', 'testDoubleFormat')": [
                        301
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/fraction/FractionTest.java": {
                "old": {
                    "('org.apache.commons.math.fraction#FractionTest', 'testGoldenRatio')": [
                        71
                    ],
                    "('org.apache.commons.math.fraction#FractionTest', 'testSerial')": [
                        578
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.fraction#FractionTest', 'testGoldenRatio')": [
                        72
                    ],
                    "('org.apache.commons.math.fraction#FractionTest', 'testSerial')": [
                        579
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/genetics/GeneticAlgorithmTestPermutations.java": {
                "old": {
                    "('org.apache.commons.math.genetics#GeneticAlgorithmTestPermutations', None)": [
                        118
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithmTestPermutations', None)": [
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/geometry/RotationTest.java": {
                "old": {
                    "('org.apache.commons.math.geometry#RotationTest', 'testAxisAngle')": [
                        60,
                        64,
                        66,
                        67,
                        68,
                        69,
                        76,
                        78,
                        79,
                        80,
                        82
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testVectorOnePair')": [
                        104
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testVectorTwoPairs')": [
                        134,
                        135,
                        136
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testMatrix')": [
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        274,
                        276,
                        292
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testSingularities')": [
                        359,
                        379
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testApplyInverseTo')": [
                        457,
                        458,
                        459,
                        469,
                        470,
                        471,
                        477,
                        480,
                        481,
                        482
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testAxisAngle')": [
                        61,
                        65,
                        67,
                        68,
                        69,
                        70,
                        77,
                        79,
                        80,
                        81,
                        83
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testVectorOnePair')": [
                        105
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testVectorTwoPairs')": [
                        135,
                        136,
                        137
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testMatrix')": [
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        275,
                        277,
                        293
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testSingularities')": [
                        360,
                        380
                    ],
                    "('org.apache.commons.math.geometry#RotationTest', 'testApplyInverseTo')": [
                        458,
                        459,
                        460,
                        470,
                        471,
                        472,
                        478,
                        481,
                        482,
                        483
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java": {
                "old": {
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testConstructors')": [
                        32,
                        33,
                        34
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testCoordinates')": [
                        51,
                        52,
                        53
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testNorm')": [
                        63
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testDistance')": [
                        83
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testVectorialProducts')": [
                        140,
                        145,
                        146
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testAngular')": [
                        154,
                        157,
                        160,
                        161
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testAngularSeparation')": [
                        170,
                        171,
                        172
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testConstructors')": [
                        33,
                        34,
                        35
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testCoordinates')": [
                        52,
                        53,
                        54
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testNorm')": [
                        64
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testDistance')": [
                        84
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testVectorialProducts')": [
                        141,
                        146,
                        147
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testAngular')": [
                        155,
                        158,
                        161,
                        162
                    ],
                    "('org.apache.commons.math.geometry#Vector3DTest', 'testAngularSeparation')": [
                        171,
                        172,
                        173
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/AbstractRealVectorTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#AbstractRealVectorTest', None)": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.linear#AbstractRealVectorTest', None)": [
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/Array2DRowRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#Array2DRowRealMatrixTest', 'testFrobeniusNorm')": [
                        156,
                        157
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.linear#Array2DRowRealMatrixTest', 'testFrobeniusNorm')": [
                        157,
                        158
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#ArrayRealVectorTest', 'testPredicates')": [
                        1287
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.linear#ArrayRealVectorTest', 'testPredicates')": [
                        1288
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/BiDiagonalTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testSingularMatrix')": [
                        129,
                        130,
                        131
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testMatricesValues')": [
                        167
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testSingularMatrix')": [
                        130,
                        131,
                        132
                    ],
                    "('org.apache.commons.math.linear#BiDiagonalTransformerTest', 'testMatricesValues')": [
                        168
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/BlockRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testFrobeniusNorm')": [
                        160,
                        161
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', 'testFrobeniusNorm')": [
                        161,
                        162
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'testZeroDivide')": [
                        380,
                        382,
                        384
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'isIncludedValue(double,double,double)')": [
                        411
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'isIncludedColumn(double,RealMatrix,double)')": [
                        444,
                        445,
                        448
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'createOrthogonalMatrix(Random,int)')": [
                        511
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'createDiagonalMatrix(double,int,int)')": [
                        526
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'testZeroDivide')": [
                        381,
                        383,
                        385
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'isIncludedValue(double,double,double)')": [
                        412
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'isIncludedColumn(double,RealMatrix,double)')": [
                        445,
                        446,
                        449
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'createOrthogonalMatrix(Random,int)')": [
                        512
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImplTest', 'createDiagonalMatrix(double,int,int)')": [
                        527
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/RealMatrixImplTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testFrobeniusNorm')": [
                        156,
                        157
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testFrobeniusNorm')": [
                        157,
                        158
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealVectorTest', 'testPredicates')": [
                        1190
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.linear#SparseRealVectorTest', 'testPredicates')": [
                        1191
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/linear/TriDiagonalTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#TriDiagonalTransformerTest', 'testMatricesValues5')": [
                        132
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.math.linear#TriDiagonalTransformerTest', 'testMatricesValues5')": [
                        134
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/ContinuousOutputModelTest.java": {
                "old": {
                    "('org.apache.commons.math.ode#ContinuousOutputModelTest', 'testModelsMerging')": [
                        104,
                        112,
                        113,
                        122,
                        125,
                        128,
                        129
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModelTest', 'checkValue(double,double)')": [
                        177
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModelTest', 'testModelsMerging')": [
                        105,
                        113,
                        114,
                        123,
                        126,
                        129,
                        130
                    ],
                    "('org.apache.commons.math.ode#ContinuousOutputModelTest', 'checkValue(double,double)')": [
                        178
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/FirstOrderConverterTest.java": {
                "old": {
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'testDecreasingSteps')": [
                        49,
                        51,
                        53
                    ],
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'testSmallStep')": [
                        63,
                        64
                    ],
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'testBigStep')": [
                        70,
                        71
                    ],
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'integrateWithSpecifiedStep(double,double,double,double)')": [
                        104,
                        105
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'testDecreasingSteps')": [
                        50,
                        52,
                        54
                    ],
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'testSmallStep')": [
                        64,
                        65
                    ],
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'testBigStep')": [
                        71,
                        72
                    ],
                    "('org.apache.commons.math.ode#FirstOrderConverterTest', 'integrateWithSpecifiedStep(double,double,double,double)')": [
                        105,
                        106
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/TestProblem1.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem1', 'computeTheoreticalState(double)')": [
                        82
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode#TestProblem1', 'computeTheoreticalState(double)')": [
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/TestProblem2.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem2', 'computeTheoreticalState(double)')": [
                        84
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode#TestProblem2', 'computeTheoreticalState(double)')": [
                        86
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/TestProblem3.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem3', None)": [
                        56
                    ],
                    "('org.apache.commons.math.ode#TestProblem3', 'doComputeDerivatives(double,double,double)')": [
                        92
                    ],
                    "('org.apache.commons.math.ode#TestProblem3', 'computeTheoreticalState(double)')": [
                        109,
                        110,
                        112,
                        119,
                        120,
                        123,
                        125
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode#TestProblem3', None)": [
                        58
                    ],
                    "('org.apache.commons.math.ode#TestProblem3', 'doComputeDerivatives(double,double,double)')": [
                        94
                    ],
                    "('org.apache.commons.math.ode#TestProblem3', 'computeTheoreticalState(double)')": [
                        111,
                        112,
                        114,
                        121,
                        122,
                        125,
                        127
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/TestProblem4.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblem4', None)": [
                        53
                    ],
                    "('org.apache.commons.math.ode#TestProblem4', 'computeTheoreticalState(double)')": [
                        90,
                        91,
                        92
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.ode#TestProblem4', None)": [
                        54
                    ],
                    "('org.apache.commons.math.ode#TestProblem4', 'computeTheoreticalState(double)')": [
                        91,
                        92,
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/TestProblemHandler.java": {
                "old": {
                    "('org.apache.commons.math.ode#TestProblemHandler', 'handleStep(StepInterpolator,boolean)')": [
                        78,
                        82,
                        96,
                        97,
                        112,
                        113
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.ode#TestProblemHandler', 'handleStep(StepInterpolator,boolean)')": [
                        79,
                        83,
                        97,
                        98,
                        113,
                        114
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobiansTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testHighAccuracyExternalDifferentiation')": [
                        87,
                        88
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testFinalResult')": [
                        162
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testStepHandlerResult')": [
                        189
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testEventHandler')": [
                        253,
                        275
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', None)": [
                        370,
                        371,
                        381,
                        382,
                        390,
                        391,
                        401,
                        402,
                        412,
                        413,
                        421,
                        422
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testHighAccuracyExternalDifferentiation')": [
                        88,
                        89
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testFinalResult')": [
                        163
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testStepHandlerResult')": [
                        190
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', 'testEventHandler')": [
                        254,
                        276
                    ],
                    "('org.apache.commons.math.ode.jacobians#FirstOrderIntegratorWithJacobiansTest', None)": [
                        371,
                        372,
                        382,
                        383,
                        391,
                        392,
                        402,
                        403,
                        413,
                        414,
                        422,
                        423
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'testIncreasingTolerance')": [
                        73
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'backward')": [
                        121
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'polynomial')": [
                        138
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'testIncreasingTolerance')": [
                        74
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'backward')": [
                        122
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'polynomial')": [
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'testIncreasingTolerance')": [
                        73
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'backward')": [
                        121
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'polynomial')": [
                        138
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'testIncreasingTolerance')": [
                        74
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'backward')": [
                        122
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'polynomial')": [
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testMissedEndEvent')": [
                        72,
                        92
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testDecreasingSteps')": [
                        140,
                        159
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testBackward')": [
                        211
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testMissedEndEvent')": [
                        73,
                        93
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testDecreasingSteps')": [
                        141,
                        160
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegratorTest', 'testBackward')": [
                        212
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', 'testSmallLastStep')": [
                        89
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', None)": [
                        150,
                        336,
                        339
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', 'testIncreasingTolerance')": [
                        171
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', 'testSmallLastStep')": [
                        90
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', None)": [
                        151,
                        337,
                        340
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', 'testIncreasingTolerance')": [
                        172
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54StepInterpolatorTest', 'checkClone')": [
                        123,
                        129
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54StepInterpolatorTest', 'checkClone')": [
                        124,
                        130
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testMissedEndEvent')": [
                        74,
                        95
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testIncreasingTolerance')": [
                        163
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', None)": [
                        386,
                        389
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testMissedEndEvent')": [
                        75,
                        96
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testIncreasingTolerance')": [
                        164
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', None)": [
                        387,
                        390
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolatorTest', 'checklone')": [
                        123,
                        129
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolatorTest', 'checklone')": [
                        124,
                        130
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/EulerIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testDecreasingSteps')": [
                        67,
                        85
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testBackward')": [
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testDecreasingSteps')": [
                        68,
                        86
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegratorTest', 'testBackward')": [
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'noReset')": [
                        53
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationAtBounds')": [
                        84,
                        90
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationInside')": [
                        109,
                        110,
                        111,
                        115,
                        116,
                        117
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'noReset')": [
                        54
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationAtBounds')": [
                        85,
                        91
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationInside')": [
                        110,
                        111,
                        112,
                        116,
                        117,
                        118
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/GillIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testDecreasingSteps')": [
                        68,
                        86
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testBackward')": [
                        138
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testDecreasingSteps')": [
                        69,
                        87
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegratorTest', 'testBackward')": [
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testMinStep')": [
                        77,
                        78
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testIncreasingTolerance')": [
                        129
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', None)": [
                        339,
                        342
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testMinStep')": [
                        78,
                        79
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testIncreasingTolerance')": [
                        130
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', None)": [
                        340,
                        343
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolatorTest', 'checklone')": [
                        125,
                        131
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerStepInterpolatorTest', 'checklone')": [
                        126,
                        132
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testIncreasingTolerance')": [
                        117
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testIncreasingTolerance')": [
                        118
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54StepInterpolatorTest', 'checkClone')": [
                        123,
                        129
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54StepInterpolatorTest', 'checkClone')": [
                        124,
                        130
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/MidpointIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testDecreasingSteps')": [
                        67,
                        85
                    ],
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testBackward')": [
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testDecreasingSteps')": [
                        68,
                        86
                    ],
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegratorTest', 'testBackward')": [
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testDecreasingSteps')": [
                        68,
                        86
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testBackward')": [
                        138
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testDecreasingSteps')": [
                        69,
                        87
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegratorTest', 'testBackward')": [
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', 'testNoReset')": [
                        48
                    ],
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', 'testFixedState')": [
                        66,
                        72
                    ],
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', 'testSerialization')": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', 'testNoReset')": [
                        49
                    ],
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', 'testFixedState')": [
                        67,
                        73
                    ],
                    "('org.apache.commons.math.ode.sampling#DummyStepInterpolatorTest', 'testSerialization')": [
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/sampling/StepInterpolatorTestUtils.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#StepInterpolatorTestUtils', 'checkDerivativesConsistency(FirstOrderIntegrator,TestProblemAbstract,double)')": [
                        44
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.ode.sampling#StepInterpolatorTestUtils', 'checkDerivativesConsistency(FirstOrderIntegrator,TestProblemAbstract,double)')": [
                        45
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/ode/sampling/StepNormalizerTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#StepNormalizerTest', 'checkValue(double,double)')": [
                        92
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.ode.sampling#StepNormalizerTest', 'checkValue(double,double)')": [
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizerTest', 'testSinMin')": [
                        46,
                        47
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizerTest', 'testSinMin')": [
                        47,
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        87
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', None)": [
                        241
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        88
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', None)": [
                        242
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        100
                    ]
                },
                "new": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        101
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/fitting/CurveFitterTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.fitting#CurveFitterTest', 'testMath372')": [
                        97,
                        108,
                        115,
                        118
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.fitting#CurveFitterTest', 'testMath372')": [
                        98,
                        109,
                        116,
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.fitting#HarmonicFitterTest', 'testNoError')": [
                        48
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.fitting#HarmonicFitterTest', 'testNoError')": [
                        49
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testNoError')": [
                        49,
                        50
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testSmallError')": [
                        75,
                        76,
                        77,
                        78
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testNoError')": [
                        50,
                        51
                    ],
                    "('org.apache.commons.math.optimization.fitting#PolynomialFitterTest', 'testSmallError')": [
                        76,
                        77,
                        78,
                        79
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        414
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testCircleFitting')": [
                        415
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNonInversible')": [
                        214
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        412,
                        428,
                        429
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testNonInversible')": [
                        215
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFitting')": [
                        413,
                        429,
                        430
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackRosenbrok')": [
                        120,
                        122,
                        124
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        493,
                        494
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        567,
                        576,
                        680,
                        758,
                        775,
                        780,
                        788,
                        829,
                        830,
                        1001,
                        1015,
                        1123,
                        1124,
                        1125,
                        1139,
                        1140,
                        1166,
                        1178,
                        1207,
                        1208,
                        1209,
                        1226,
                        1227,
                        1404,
                        1405,
                        1423,
                        1424,
                        1466,
                        1467,
                        1468,
                        1469,
                        1503,
                        1504,
                        1505,
                        1506
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackRosenbrok')": [
                        121,
                        123,
                        125
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        494,
                        495
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        568,
                        577,
                        681,
                        759,
                        776,
                        781,
                        789,
                        830,
                        831,
                        1002,
                        1016,
                        1124,
                        1125,
                        1126,
                        1140,
                        1141,
                        1167,
                        1179,
                        1208,
                        1209,
                        1210,
                        1227,
                        1228,
                        1405,
                        1406,
                        1424,
                        1425,
                        1467,
                        1468,
                        1469,
                        1470,
                        1504,
                        1505,
                        1506,
                        1507
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testSinMin')": [
                        54,
                        56
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMinStatistics')": [
                        113,
                        114
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testMinEndpoints')": [
                        143,
                        144,
                        146,
                        147
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testSinMin')": [
                        55,
                        57
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testQuinticMinStatistics')": [
                        114,
                        115
                    ],
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizerTest', 'testMinEndpoints')": [
                        144,
                        145,
                        147,
                        148
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java": {
                "old": {
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGeneratorTest', 'testMath226')": [
                        61
                    ],
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGeneratorTest', 'testMeanAndCovariance')": [
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGeneratorTest', 'testMath226')": [
                        62
                    ],
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGeneratorTest', 'testMeanAndCovariance')": [
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/MersenneTwisterTest.java": {
                "old": {
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testDouble')": [
                        46
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testFloat')": [
                        59
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNextInt')": [
                        98
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNextLong')": [
                        112
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNexBoolean')": [
                        126
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNexBytes')": [
                        143,
                        144
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testDouble')": [
                        47
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testFloat')": [
                        60
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNextInt')": [
                        99
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNextLong')": [
                        113
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNexBoolean')": [
                        127
                    ],
                    "('org.apache.commons.math.random#MersenneTwisterTest', 'testNexBytes')": [
                        144,
                        145
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/RandomDataTest.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        306
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextGaussian')": [
                        566
                    ]
                },
                "new": {
                    "(None, None)": [
                        49
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        307
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextGaussian')": [
                        567
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/special/ErfTest.java": {
                "old": {
                    "('org.apache.commons.math.special#ErfTest', 'testErf1960')": [
                        36
                    ],
                    "('org.apache.commons.math.special#ErfTest', 'testErf2576')": [
                        47
                    ],
                    "('org.apache.commons.math.special#ErfTest', 'testErf2807')": [
                        58
                    ],
                    "('org.apache.commons.math.special#ErfTest', 'testErf3291')": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.special#ErfTest', 'testErf1960')": [
                        37
                    ],
                    "('org.apache.commons.math.special#ErfTest', 'testErf2576')": [
                        48
                    ],
                    "('org.apache.commons.math.special#ErfTest', 'testErf2807')": [
                        59
                    ],
                    "('org.apache.commons.math.special#ErfTest', 'testErf3291')": [
                        70
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/special/GammaTest.java": {
                "old": {
                    "('org.apache.commons.math.special#GammaTest', 'testDigammaSmallArgs')": [
                        118
                    ],
                    "('org.apache.commons.math.special#GammaTest', 'checkRelativeError(String,double,double,double)')": [
                        148
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.special#GammaTest', 'testDigammaSmallArgs')": [
                        119
                    ],
                    "('org.apache.commons.math.special#GammaTest', 'checkRelativeError(String,double,double,double)')": [
                        149
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/StatUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.stat#StatUtilsTest', 'testSumLog')": [
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212
                    ],
                    "('org.apache.commons.math.stat#StatUtilsTest', 'testGeometricMean')": [
                        417,
                        419
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.stat#StatUtilsTest', 'testSumLog')": [
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213
                    ],
                    "('org.apache.commons.math.stat#StatUtilsTest', 'testGeometricMean')": [
                        418,
                        420
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPointTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.clustering#EuclideanIntegerPointTest', 'testDistance')": [
                        41
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.stat.clustering#EuclideanIntegerPointTest', 'testDistance')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'testStdErrorConsistency')": [
                        230
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'testStdErrorConsistency')": [
                        231
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#ListUnivariateImpl', 'getValues')": [
                        86
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.stat.descriptive#ListUnivariateImpl', 'getValues')": [
                        87
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImplTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#ListUnivariateImplTest', None)": [
                        42
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.stat.descriptive#ListUnivariateImplTest', None)": [
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/MixedListUnivariateImplTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#MixedListUnivariateImplTest', None)": [
                        43
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.stat.descriptive#MixedListUnivariateImplTest', None)": [
                        44
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatisticsTest', 'testStats')": [
                        205,
                        206
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatisticsTest', 'testStats')": [
                        206,
                        207
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#StorelessUnivariateStatisticAbstractTest', 'testCopyConsistency')": [
                        186
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.descriptive#StorelessUnivariateStatisticAbstractTest', 'testCopyConsistency')": [
                        187
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#SummaryStatisticsTest', None)": [
                        40
                    ],
                    "('org.apache.commons.math.stat.descriptive#SummaryStatisticsTest', 'testSetterInjection')": [
                        278
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.stat.descriptive#SummaryStatisticsTest', None)": [
                        41
                    ],
                    "('org.apache.commons.math.stat.descriptive#SummaryStatisticsTest', 'testSetterInjection')": [
                        279
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#UnivariateStatisticAbstractTest', None)": [
                        38,
                        59
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.stat.descriptive#UnivariateStatisticAbstractTest', None)": [
                        39,
                        60
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviationTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviationTest', 'populationStandardDeviation(double)')": [
                        95
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.descriptive.moment#StandardDeviationTest', 'populationStandardDeviation(double)')": [
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastCosineTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testAdHocData')": [
                        55
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testSinFunction')": [
                        79,
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testAdHocData')": [
                        56
                    ],
                    "('org.apache.commons.math.transform#FastCosineTransformerTest', 'testSinFunction')": [
                        80,
                        86
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastFourierTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testAdHocData')": [
                        65
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testSinFunction')": [
                        122,
                        133
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testAdHocData')": [
                        66
                    ],
                    "('org.apache.commons.math.transform#FastFourierTransformerTest', 'testSinFunction')": [
                        123,
                        134
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/transform/FastSineTransformerTest.java": {
                "old": {
                    "('org.apache.commons.math.transform#FastSineTransformerTest', 'testAdHocData')": [
                        55
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformerTest', 'testSinFunction')": [
                        76,
                        83
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformerTest', 'testAdHocData')": [
                        56
                    ],
                    "('org.apache.commons.math.transform#FastSineTransformerTest', 'testSinFunction')": [
                        77,
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/util/BigRealTest.java": {
                "old": {
                    "('org.apache.commons.math.util#BigRealTest', 'testSerial')": [
                        120
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#BigRealTest', 'testSerial')": [
                        120
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/util/MathUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'testBinomialCoefficient')": [
                        167,
                        179
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testBinomialCoefficientLarge')": [
                        214,
                        240
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testEqualsWithAllowedUlps')": [
                        365,
                        366,
                        367,
                        368,
                        369,
                        374,
                        375
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testEqualsIncludingNaNWithAllowedUlps')": [
                        403,
                        404,
                        405,
                        406,
                        407,
                        412,
                        413
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testArrayEquals')": [
                        459
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testArrayEqualsIncludingNaN')": [
                        480
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testFactorial')": [
                        487
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testArrayHash')": [
                        683
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testNextAfter')": [
                        910,
                        913,
                        916,
                        919,
                        922,
                        925,
                        928,
                        931,
                        934,
                        937,
                        940,
                        943,
                        946,
                        949,
                        952,
                        955,
                        958,
                        961,
                        964,
                        967
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testNextAfterSpecialCases')": [
                        972,
                        973,
                        974,
                        975,
                        976,
                        977,
                        978,
                        979,
                        980
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testScalb')": [
                        987
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testNormalizeAngle')": [
                        997,
                        998,
                        999,
                        1000
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtilsTest', 'testBinomialCoefficient')": [
                        167,
                        179
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testBinomialCoefficientLarge')": [
                        214,
                        240
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testEqualsWithAllowedUlps')": [
                        365,
                        366,
                        367,
                        368,
                        369,
                        374,
                        375
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testEqualsIncludingNaNWithAllowedUlps')": [
                        403,
                        404,
                        405,
                        406,
                        407,
                        412,
                        413
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testArrayEquals')": [
                        459
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testArrayEqualsIncludingNaN')": [
                        480
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testFactorial')": [
                        487
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testArrayHash')": [
                        683
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testNextAfter')": [
                        910,
                        913,
                        916,
                        919,
                        922,
                        925,
                        928,
                        931,
                        934,
                        937,
                        940,
                        943,
                        946,
                        949,
                        952,
                        955,
                        958,
                        961,
                        964,
                        967
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testNextAfterSpecialCases')": [
                        972,
                        973,
                        974,
                        975,
                        976,
                        977,
                        978,
                        979,
                        980
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testScalb')": [
                        987
                    ],
                    "('org.apache.commons.math.util#MathUtilsTest', 'testNormalizeAngle')": [
                        997,
                        998,
                        999,
                        1000
                    ]
                }
            }
        }
    },
    "bb38a224ebd20c62d01ca12f2156d1c3c33a8ee2": {
        "authored_data": "2010 Aug 26 08:59",
        "commit.message": "MATH-410\nWrong variable (\"argument\" instead of \"arguments\").\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@989543 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "f119c3a5472f2d998bb5eac12cdc6b4afba2b811",
        "changes": {
            "src/main/java/org/apache/commons/math/FunctionEvaluationException.java": {
                "old": {
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        73,
                        100,
                        153,
                        184
                    ],
                    "(None, None)": [
                        211
                    ]
                },
                "new": {
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        73,
                        100,
                        153,
                        184
                    ]
                }
            }
        }
    },
    "f119c3a5472f2d998bb5eac12cdc6b4afba2b811": {
        "authored_data": "2010 Aug 25 01:23",
        "commit.message": "Fix test that was failing on Windows\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@988777 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "William Barker",
        "pcid": "95ebe8294c66d2aeb91db99911c9de42ab3dc87b",
        "changes": {
            "src/test/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatisticsTest', 'testToString')": [
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.descriptive#MultivariateSummaryStatisticsTest', 'testToString')": [
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                }
            }
        }
    },
    "95ebe8294c66d2aeb91db99911c9de42ab3dc87b": {
        "authored_data": "2010 Aug 23 02:55",
        "commit.message": "Added R-squared and adjusted R-squared statistics to\nOLSMultipleLinearRegression\nJIRA: MATH-386\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@987983 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "ad63c1629dea162273b3448407545cdd3cb6b586",
        "changes": {
            "src/main/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java": {
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', None)": [
                        126,
                        127,
                        128,
                        129,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        171,
                        172,
                        173,
                        174
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'calculateTotalSumOfSquares')": [
                        130,
                        131
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'calculateResidualSumOfSquares')": [
                        139,
                        140,
                        141
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'calculateRSquared')": [
                        153,
                        154
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'calculateAdjustedRSquared')": [
                        167,
                        168,
                        169,
                        170
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', None)": [
                        112
                    ]
                },
                "new": {
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testPerfectFit')": [
                        112
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testLongly')": [
                        188,
                        189,
                        190,
                        191
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testSwissFertility')": [
                        301,
                        302,
                        303,
                        304
                    ]
                }
            }
        }
    },
    "ad63c1629dea162273b3448407545cdd3cb6b586": {
        "authored_data": "2010 Aug 22 23:45",
        "commit.message": "Indentation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@987962 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gilles Sadowski",
        "pcid": "25c9e050afb8ecf737d68708b6968b8989d1870e",
        "changes": {
            "src/main/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtils', 'checkOrder(double,int,boolean)')": [
                        1951
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtils', 'checkOrder(double,int,boolean)')": [
                        1951
                    ]
                }
            }
        }
    },
    "25c9e050afb8ecf737d68708b6968b8989d1870e": {
        "authored_data": "2010 Aug 22 13:25",
        "commit.message": "Eliminated unnecessary residual calculation (should have been rmoved in r987897 fixing JIRA: MATH-392).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@987901 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "30c9e8c111f0e49acb8e9e7f6119230844fe1ee3",
        "changes": {
            "src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java": {
                "old": {
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'estimateRegressionParametersStandardErrors')": [
                        152
                    ]
                }
            }
        }
    }
}