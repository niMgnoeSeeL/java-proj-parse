{
    "913ff1facc13b4ea0bb6d99e99924c3479a7ec95": {
        "authored_data": "2009 Jun 17 04:02",
        "commit.message": "More Serialization changes, mostly for ode and friends.\n\nUnfortunately, had to leave some abstract base classes as Serializable, since they had no senible default construters.  But left them with meaningless UIDs, to break anyone that doesn't override it.\n\nOf course, if anyone has a better patch, I'm happy to implement it.  At this point, the serialization changes for [math] should be almost done.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@785473 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "William Barker",
        "pcid": "e082a039f895458c231226e66f39e39cbf3b5ef2",
        "changes": {
            "src/java/org/apache/commons/math/ConvergingAlgorithm.java": {
                "old": {
                    "(None, None)": [
                        19,
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ]
                }
            },
            "src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java": {
                "old": {
                    "('org.apache.commons.math#ConvergingAlgorithmImpl', None)": [
                        27,
                        29,
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math#ConvergingAlgorithmImpl', None)": [
                        29,
                        31,
                        32,
                        33,
                        34
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#BisectionSolver', None)": [
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.analysis.solvers#BisectionSolver', None)": [
                        33
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', None)": [
                        39
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.analysis.solvers#LaguerreSolver', None)": [
                        41
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/MullerSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', None)": [
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.analysis.solvers#MullerSolver', None)": [
                        40
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#NewtonSolver', None)": [
                        34
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math.analysis.solvers#NewtonSolver', None)": [
                        36
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#RiddersSolver', None)": [
                        37
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19
                    ],
                    "('org.apache.commons.math.analysis.solvers#RiddersSolver', None)": [
                        39
                    ]
                }
            },
            "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', None)": [
                        34,
                        35,
                        36
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        35,
                        36,
                        37,
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        81,
                        82,
                        83,
                        84
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/MultistepIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        42,
                        43,
                        44,
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/ODEIntegrator.java": {
                "old": {
                    "(None, None)": [
                        20,
                        34
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/events/EventHandler.java": {
                "old": {
                    "(None, None)": [
                        19,
                        20,
                        55
                    ]
                },
                "new": {
                    "(None, None)": [
                        53
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        158
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        159
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        172,
                        173,
                        174,
                        175,
                        217,
                        493,
                        494
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        220,
                        221,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', None)": [
                        57,
                        58,
                        59
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', None)": [
                        57
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegrator', None)": [
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ClassicalRungeKuttaIntegrator', None)": [
                        48
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54Integrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54Integrator', None)": [
                        47
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54Integrator', None)": [
                        49
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853Integrator', None)": [
                        55
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853Integrator', None)": [
                        57
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', None)": [
                        67,
                        68,
                        69
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/EulerIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegrator', None)": [
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerIntegrator', None)": [
                        51
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/GillIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GillIntegrator', None)": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GillIntegrator', None)": [
                        47
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', None)": [
                        96
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', None)": [
                        98
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/HighamHall54Integrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54Integrator', None)": [
                        35
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54Integrator', None)": [
                        37
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/MidpointIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegrator', None)": [
                        43
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#MidpointIntegrator', None)": [
                        45
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', None)": [
                        56,
                        57,
                        58
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegrator', None)": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#ThreeEighthesIntegrator', None)": [
                        47
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java": {
                "old": {
                    "(None, None)": [
                        19,
                        20,
                        43
                    ]
                },
                "new": {
                    "(None, None)": [
                        41
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'serialization')": [
                        195,
                        196,
                        197
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'serialization')": [
                        195
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'serialization')": [
                        179,
                        180,
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'serialization')": [
                        179
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'serialization')": [
                        146,
                        147,
                        148,
                        149,
                        169
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', None)": [
                        176,
                        177
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'serialization')": [
                        146
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', None)": [
                        172
                    ]
                }
            }
        }
    },
    "e082a039f895458c231226e66f39e39cbf3b5ef2": {
        "authored_data": "2009 Jun 14 19:04",
        "commit.message": "Added Genetic Algorithm implementation.\nJIRA: MATH-207\nContributed by David Stefka\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@784604 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "496d85cf172c8340c6d29a12fe5cfc6e0777319b",
        "changes": {
            "src/java/org/apache/commons/math/genetics/Chromosome.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23,
                        25,
                        29
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        108,
                        109,
                        110
                    ],
                    "('org.apache.commons.math.genetics#Chromosome', None)": [
                        28,
                        29,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103
                    ],
                    "('org.apache.commons.math.genetics#Chromosome', 'getFitness')": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49
                    ],
                    "('org.apache.commons.math.genetics#Chromosome', 'compareTo(Chromosome)')": [
                        64,
                        65
                    ],
                    "('org.apache.commons.math.genetics#Chromosome', 'isSame(Chromosome)')": [
                        75,
                        76
                    ],
                    "('org.apache.commons.math.genetics#Chromosome', 'findSameChromosome(Population)')": [
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.math.genetics#Chromosome', 'searchForFitnessUpdate(Population)')": [
                        104,
                        105,
                        106,
                        107
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/ChromosomePair.java": {
                "old": {
                    "('org.apache.commons.math.genetics#ChromosomePair', None)": [
                        25,
                        28,
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        68
                    ],
                    "('org.apache.commons.math.genetics#ChromosomePair', None)": [
                        27,
                        30,
                        38,
                        61,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('org.apache.commons.math.genetics#ChromosomePair', 'toString')": [
                        66,
                        67
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/CrossoverPolicy.java": {
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/Fitness.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        24
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/GeneticAlgorithm.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23,
                        205
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', None)": [
                        27,
                        30,
                        33,
                        36,
                        39,
                        40,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        121,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getCrossoverPolicy')": [
                        62,
                        63
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getCrossoverRate')": [
                        71,
                        72
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getMutationPolicy')": [
                        80,
                        81
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getMutationRate')": [
                        89,
                        90
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getSelectionPolicy')": [
                        98,
                        99
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'nextGeneration(Population)')": [
                        125,
                        128,
                        129,
                        134,
                        136,
                        137,
                        141,
                        144,
                        145,
                        146,
                        152,
                        153
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'setCrossoverPolicy(CrossoverPolicy)')": [
                        167,
                        168
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'setCrossoverRate(double)')": [
                        176,
                        177
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'setMutationPolicy(MutationPolicy)')": [
                        185,
                        186
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'setMutationRate(double)')": [
                        194,
                        195
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'setSelectionPolicy(SelectionPolicy)')": [
                        203,
                        204
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        21,
                        25,
                        26,
                        27,
                        205,
                        206
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', None)": [
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        55,
                        56,
                        58,
                        61,
                        64,
                        67,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'setRandomGenerator(RandomGenerator)')": [
                        44,
                        45
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getRandomGenerator')": [
                        53,
                        54
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'nextGeneration(Population)')": [
                        134,
                        137,
                        142,
                        144,
                        148,
                        151,
                        152,
                        158
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getCrossoverPolicy')": [
                        171,
                        172
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getCrossoverRate')": [
                        179,
                        180
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getMutationPolicy')": [
                        187,
                        188
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getMutationRate')": [
                        195,
                        196
                    ],
                    "('org.apache.commons.math.genetics#GeneticAlgorithm', 'getSelectionPolicy')": [
                        203,
                        204
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/MutationPolicy.java": {
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/Population.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        25
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/SelectionPolicy.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/java/org/apache/commons/math/genetics/StoppingCondition.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            }
        }
    },
    "496d85cf172c8340c6d29a12fe5cfc6e0777319b": {
        "authored_data": "2009 Jun 11 12:35",
        "commit.message": "removed remaining references to DenseXxx{Matrix/Vector}\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783741 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "30ab6c8c3dd318d316521bb340ab831b9e104a31",
        "changes": {
            "src/experimental/org/apache/commons/math/linear/RecursiveLayoutRealMatrix.java": {
                "old": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', None)": [
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.math.linear#RecursiveLayoutRealMatrix', None)": [
                        139
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/BlockFieldMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockFieldMatrix', None)": [
                        197,
                        258
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockFieldMatrix', None)": [
                        197,
                        258
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/BlockRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrix', None)": [
                        194,
                        252
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockRealMatrix', None)": [
                        194,
                        252
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/BlockRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', None)": [
                        288
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockRealMatrixTest', None)": [
                        288
                    ]
                }
            }
        }
    },
    "30ab6c8c3dd318d316521bb340ab831b9e104a31": {
        "authored_data": "2009 Jun 11 08:54",
        "commit.message": "renamed RealMatrixImpl, RealVectorImpl, FieldMatrixImpl and FieldVectorImpl\ninto Array2DRowRealMatrix, ArrayRealVector, Array2DRowFieldMatrix and ArrayFieldVector\nas suggested by Sam in http://markmail.org/message/hh37ivxpzaoapekj\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783702 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "6fb3ae713e36030e418bf611094f1e307472e184",
        "changes": {
            "src/experimental/org/apache/commons/math/linear/CholeskySolver.java": {
                "old": {
                    "('org.apache.commons.math.linear#CholeskySolver', None)": [
                        40
                    ],
                    "('org.apache.commons.math.linear#CholeskySolver', 'decompose(RealMatrix)')": [
                        111
                    ],
                    "('org.apache.commons.math.linear#CholeskySolver', 'getDecomposition')": [
                        122
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#CholeskySolver', None)": [
                        40
                    ],
                    "('org.apache.commons.math.linear#CholeskySolver', 'decompose(RealMatrix)')": [
                        111
                    ],
                    "('org.apache.commons.math.linear#CholeskySolver', 'getDecomposition')": [
                        122
                    ]
                }
            },
            "src/experimental/org/apache/commons/math/linear/CholeskySolverTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testNumericalZero')": [
                        101
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testDecompose')": [
                        130
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolve')": [
                        165
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testDecompose(double,String)')": [
                        204
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolve(double,String)')": [
                        223,
                        224,
                        225,
                        235,
                        238
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testGetDeterminant(double,double,String)')": [
                        250
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testNumericalZero')": [
                        101
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testDecompose')": [
                        130
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolve')": [
                        165
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testDecompose(double,String)')": [
                        204
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolve(double,String)')": [
                        223,
                        224,
                        225,
                        235,
                        238
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testGetDeterminant(double,double,String)')": [
                        250
                    ]
                }
            },
            "src/java/org/apache/commons/math/FunctionEvaluationException.java": {
                "old": {
                    "(None, None)": [
                        19
                    ],
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        56
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('org.apache.commons.math#FunctionEvaluationException', None)": [
                        56
                    ]
                }
            },
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        368,
                        373,
                        374,
                        569
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        368,
                        373,
                        374,
                        569
                    ]
                }
            },
            "src/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', 'estimate(EstimationProblem)')": [
                        166,
                        176
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.estimation#GaussNewtonEstimator', 'estimate(EstimationProblem)')": [
                        166,
                        176
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/AbstractFieldMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'getRowVector(int)')": [
                        502
                    ],
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'getColumnVector(int)')": [
                        525
                    ],
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'operate(FieldVector)')": [
                        700,
                        719
                    ],
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'preMultiply(FieldVector)')": [
                        752,
                        772
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'getRowVector(int)')": [
                        502
                    ],
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'getColumnVector(int)')": [
                        525
                    ],
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'operate(FieldVector)')": [
                        700,
                        719
                    ],
                    "('org.apache.commons.math.linear#AbstractFieldMatrix', 'preMultiply(FieldVector)')": [
                        752,
                        772
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/AbstractRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getRowVector(int)')": [
                        477
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getColumnVector(int)')": [
                        500
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'operate(RealVector)')": [
                        701,
                        720
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'preMultiply(RealVector)')": [
                        753,
                        773
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getRowVector(int)')": [
                        477
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'getColumnVector(int)')": [
                        500
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'operate(RealVector)')": [
                        701,
                        720
                    ],
                    "('org.apache.commons.math.linear#AbstractRealMatrix', 'preMultiply(RealVector)')": [
                        753,
                        773
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/BigMatrixImpl.java": {
                "old": {
                    "(None, None)": [
                        50
                    ]
                },
                "new": {
                    "(None, None)": [
                        50
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/BlockFieldMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getRowVector(int)')": [
                        1033
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'setRowVector(int,FieldVector)')": [
                        1042
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getColumnVector(int)')": [
                        1069
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'setColumnVector(int,FieldVector)')": [
                        1078
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getRowVector(int)')": [
                        1033
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'setRowVector(int,FieldVector)')": [
                        1042
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'getColumnVector(int)')": [
                        1069
                    ],
                    "('org.apache.commons.math.linear#BlockFieldMatrix', 'setColumnVector(int,FieldVector)')": [
                        1078
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/BlockRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getRowVector(int)')": [
                        1056
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'setRowVector(int,RealVector)')": [
                        1065
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getColumnVector(int)')": [
                        1092
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'setColumnVector(int,RealVector)')": [
                        1101
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getRowVector(int)')": [
                        1056
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'setRowVector(int,RealVector)')": [
                        1065
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'getColumnVector(int)')": [
                        1092
                    ],
                    "('org.apache.commons.math.linear#BlockRealMatrix', 'setColumnVector(int,RealVector)')": [
                        1101
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#CholeskyDecompositionImpl', None)": [
                        248,
                        279,
                        291,
                        293,
                        343
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#CholeskyDecompositionImpl', None)": [
                        248,
                        279,
                        291,
                        293,
                        343
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', None)": [
                        142,
                        369,
                        378,
                        408,
                        444,
                        452,
                        482
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenVectors')": [
                        1690
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenvector(double,double,double)')": [
                        1721,
                        1768,
                        1769
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', None)": [
                        142,
                        369,
                        378,
                        408,
                        444,
                        452,
                        482
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenVectors')": [
                        1690
                    ],
                    "('org.apache.commons.math.linear#EigenDecompositionImpl', 'findEigenvector(double,double,double)')": [
                        1721,
                        1768,
                        1769
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', 'getL')": [
                        158
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', 'getU')": [
                        174
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', 'getP')": [
                        189
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', None)": [
                        307,
                        344,
                        356,
                        358,
                        416,
                        424
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', 'getL')": [
                        158
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', 'getU')": [
                        174
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', 'getP')": [
                        189
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImpl', None)": [
                        307,
                        344,
                        356,
                        358,
                        416,
                        424
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/LUDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        304,
                        341,
                        353,
                        355,
                        412
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#LUDecompositionImpl', None)": [
                        304,
                        341,
                        353,
                        355,
                        412
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/MatrixUtils.java": {
                "old": {
                    "('org.apache.commons.math.linear#MatrixUtils', None)": [
                        52,
                        93,
                        697,
                        741
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(int,int)')": [
                        62
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(Field,int,int)')": [
                        84
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(double)')": [
                        107
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(T)')": [
                        130
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldIdentityMatrix(Field,int)')": [
                        170
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealVector(double)')": [
                        307
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldVector(T)')": [
                        320
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'deserializeRealVector(Object,String,ObjectInputStream)')": [
                        827
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'deserializeRealMatrix(Object,String,ObjectInputStream)')": [
                        936
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#MatrixUtils', None)": [
                        52,
                        93,
                        697,
                        741
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(int,int)')": [
                        62
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(Field,int,int)')": [
                        84
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(double)')": [
                        107
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(T)')": [
                        130
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldIdentityMatrix(Field,int)')": [
                        170
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealVector(double)')": [
                        307
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldVector(T)')": [
                        320
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'deserializeRealVector(Object,String,ObjectInputStream)')": [
                        827
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'deserializeRealMatrix(Object,String,ObjectInputStream)')": [
                        936
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/QRDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        338,
                        340,
                        351,
                        353
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        338,
                        340,
                        351,
                        353
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/RealMatrixImpl.java": {
                "new": {
                    "(None, None)": [
                        51,
                        53
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/RealVectorFormat.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealVectorFormat', 'parse(String)')": [
                        261,
                        263
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormat', 'parse(String,ParsePosition)')": [
                        278,
                        324
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RealVectorFormat', 'parse(String)')": [
                        261,
                        263
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormat', 'parse(String,ParsePosition)')": [
                        278,
                        324
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java": {
                "old": {
                    "(None, None)": [
                        33,
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'convertToNordsieckHigh(double)')": [
                        340
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        414,
                        455
                    ]
                },
                "new": {
                    "(None, None)": [
                        33,
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'convertToNordsieckHigh(double)')": [
                        340
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', None)": [
                        414,
                        455
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "(None, None)": [
                        33,
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'convertToNordsieckHigh(double)')": [
                        401
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        530,
                        571
                    ]
                },
                "new": {
                    "(None, None)": [
                        33,
                        37
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'convertToNordsieckHigh(double)')": [
                        401
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', None)": [
                        530,
                        571
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'readExternal(ObjectInput)')": [
                        254
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', 'readExternal(ObjectInput)')": [
                        254
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/linear/LinearConstraint.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.linear#LinearConstraint', None)": [
                        81,
                        131
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.linear#LinearConstraint', None)": [
                        81,
                        131
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/linear/LinearObjectiveFunction.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.linear#LinearObjectiveFunction', None)": [
                        58
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.math.optimization.linear#LinearObjectiveFunction', None)": [
                        58
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', None)": [
                        114
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'discardArtificialVariables')": [
                        300
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', None)": [
                        114
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexTableau', 'discardArtificialVariables')": [
                        300
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newSampleData(double,int,int)')": [
                        58,
                        59
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newYSampleData(double)')": [
                        68
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newXSampleData(double)')": [
                        77
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newSampleData(double,int,int)')": [
                        58,
                        59
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newYSampleData(double)')": [
                        68
                    ],
                    "('org.apache.commons.math.stat.regression#AbstractMultipleLinearRegression', 'newXSampleData(double)')": [
                        77
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegression', 'newCovarianceData(double)')": [
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.regression#GLSMultipleLinearRegression', 'newCovarianceData(double)')": [
                        71
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java": {
                "old": {
                    "(None, None)": [
                        24,
                        26
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'calculateHat')": [
                        110
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'newXSampleData(double)')": [
                        133
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'solveUpperTriangular(RealMatrix,RealVector)')": [
                        214
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        26
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'calculateHat')": [
                        110
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'newXSampleData(double)')": [
                        133
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegression', 'solveUpperTriangular(RealMatrix,RealVector)')": [
                        214
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/CholeskySolverTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolveDimensionErrors')": [
                        73
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolve')": [
                        107,
                        111,
                        120,
                        121
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolveDimensionErrors')": [
                        73
                    ],
                    "('org.apache.commons.math.linear#CholeskySolverTest', 'testSolve')": [
                        107,
                        111,
                        120,
                        121
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/EigenSolverTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.linear#EigenSolverTest', 'testSolveDimensionErrors')": [
                        100
                    ],
                    "('org.apache.commons.math.linear#EigenSolverTest', 'testSolve')": [
                        143,
                        147,
                        156,
                        157
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.linear#EigenSolverTest', 'testSolveDimensionErrors')": [
                        100
                    ],
                    "('org.apache.commons.math.linear#EigenSolverTest', 'testSolve')": [
                        143,
                        147,
                        156,
                        157
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/FieldLUDecompositionImplTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testDimensions')": [
                        74
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testNonSquare')": [
                        88
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testPAEqualLU')": [
                        102,
                        109,
                        116,
                        126,
                        133
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testLLowerTriangular')": [
                        144
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testUUpperTriangular')": [
                        156
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testPPermutation')": [
                        167,
                        172
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testSingular')": [
                        223,
                        225,
                        227
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testMatricesValues1')": [
                        234,
                        235,
                        240,
                        245
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testMatricesValues2')": [
                        274,
                        275,
                        280,
                        285
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testDimensions')": [
                        74
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testNonSquare')": [
                        88
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testPAEqualLU')": [
                        102,
                        109,
                        116,
                        126,
                        133
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testLLowerTriangular')": [
                        144
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testUUpperTriangular')": [
                        156
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testPPermutation')": [
                        167,
                        172
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testSingular')": [
                        223,
                        225,
                        227
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testMatricesValues1')": [
                        234,
                        235,
                        240,
                        245
                    ],
                    "('org.apache.commons.math.linear#FieldLUDecompositionImplTest', 'testMatricesValues2')": [
                        274,
                        275,
                        280,
                        285
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/FieldMatrixImplTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'suite')": [
                        101
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testDimensions')": [
                        107,
                        108
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testCopyFunctions')": [
                        119,
                        120,
                        122,
                        123
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testAdd')": [
                        129,
                        130
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testAddFail')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testPlusMinus')": [
                        154,
                        155,
                        158
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testMultiply')": [
                        167,
                        168,
                        169,
                        170,
                        177
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', None)": [
                        184
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testMultiply2')": [
                        191,
                        192,
                        193
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testTrace')": [
                        199,
                        201
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testScalarAdd')": [
                        212,
                        213
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testOperate')": [
                        218,
                        220,
                        221
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testMath209')": [
                        232
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testTranspose')": [
                        244,
                        248,
                        249
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testPremultiplyVector')": [
                        255,
                        257,
                        259
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testPremultiply')": [
                        269,
                        270,
                        271,
                        274,
                        275,
                        276,
                        282
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetVectors')": [
                        290
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetEntry')": [
                        308
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testExamples')": [
                        325,
                        332,
                        348
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetSubMatrix')": [
                        365
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        388
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,boolean)')": [
                        404
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testCopySubMatrix')": [
                        416
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        443
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,boolean)')": [
                        462
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetRowMatrix')": [
                        474,
                        475,
                        476
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetRowMatrix')": [
                        496,
                        497
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetColumnMatrix')": [
                        516,
                        517,
                        518
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetColumnMatrix')": [
                        538,
                        539
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetRowVector')": [
                        558,
                        559,
                        560
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetRowVector')": [
                        578,
                        579,
                        590
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetColumnVector')": [
                        598
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetColumnVector')": [
                        618,
                        630
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'columnToVector(Fraction)')": [
                        642
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetRow')": [
                        646
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetRow')": [
                        664
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetColumn')": [
                        683
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetColumn')": [
                        703
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testEqualsAndHashCode')": [
                        738,
                        739,
                        740,
                        747
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testToString')": [
                        751,
                        752,
                        753,
                        754
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetSubMatrix')": [
                        758,
                        760,
                        769,
                        778,
                        814
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testWalk')": [
                        851,
                        857,
                        871,
                        877,
                        891,
                        897,
                        911,
                        917
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSerial')": [
                        934
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'permuteRows(FieldMatrix,int)')": [
                        1008
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'suite')": [
                        101
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testDimensions')": [
                        107,
                        108
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testCopyFunctions')": [
                        119,
                        120,
                        122,
                        123
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testAdd')": [
                        129,
                        130
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testAddFail')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testPlusMinus')": [
                        154,
                        155,
                        158
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testMultiply')": [
                        167,
                        168,
                        169,
                        170,
                        177
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', None)": [
                        184
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testMultiply2')": [
                        191,
                        192,
                        193
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testTrace')": [
                        199,
                        201
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testScalarAdd')": [
                        212,
                        213
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testOperate')": [
                        218,
                        220,
                        221
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testMath209')": [
                        232
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testTranspose')": [
                        244,
                        248,
                        249
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testPremultiplyVector')": [
                        255,
                        257,
                        259
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testPremultiply')": [
                        269,
                        270,
                        271,
                        274,
                        275,
                        276,
                        282
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetVectors')": [
                        290
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetEntry')": [
                        308
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testExamples')": [
                        325,
                        332,
                        348
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetSubMatrix')": [
                        365
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        388
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,boolean)')": [
                        404
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testCopySubMatrix')": [
                        416
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        443
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'checkCopy(FieldMatrix,Fraction,int,int,boolean)')": [
                        462
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetRowMatrix')": [
                        474,
                        475,
                        476
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetRowMatrix')": [
                        496,
                        497
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetColumnMatrix')": [
                        516,
                        517,
                        518
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetColumnMatrix')": [
                        538,
                        539
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetRowVector')": [
                        558,
                        559,
                        560
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetRowVector')": [
                        578,
                        579,
                        590
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetColumnVector')": [
                        598
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetColumnVector')": [
                        618,
                        630
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'columnToVector(Fraction)')": [
                        642
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetRow')": [
                        646
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetRow')": [
                        664
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testGetColumn')": [
                        683
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetColumn')": [
                        703
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testEqualsAndHashCode')": [
                        738,
                        739,
                        740,
                        747
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testToString')": [
                        751,
                        752,
                        753,
                        754
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSetSubMatrix')": [
                        758,
                        760,
                        769,
                        778,
                        814
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testWalk')": [
                        851,
                        857,
                        871,
                        877,
                        891,
                        897,
                        911,
                        917
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'testSerial')": [
                        934
                    ],
                    "('org.apache.commons.math.linear#FieldMatrixImplTest', 'permuteRows(FieldMatrix,int)')": [
                        1008
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/LUSolverTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.linear#LUSolverTest', 'testSolveDimensionErrors')": [
                        109
                    ],
                    "('org.apache.commons.math.linear#LUSolverTest', 'testSolveSingularityErrors')": [
                        148
                    ],
                    "('org.apache.commons.math.linear#LUSolverTest', 'testSolve')": [
                        174,
                        178,
                        187,
                        188
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.linear#LUSolverTest', 'testSolveDimensionErrors')": [
                        109
                    ],
                    "('org.apache.commons.math.linear#LUSolverTest', 'testSolveSingularityErrors')": [
                        148
                    ],
                    "('org.apache.commons.math.linear#LUSolverTest', 'testSolve')": [
                        174,
                        178,
                        187,
                        188
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/MatrixUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testcreateFieldMatrix')": [
                        100,
                        102
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateRowFieldMatrix')": [
                        175,
                        177
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateColumnFieldMatrix')": [
                        233,
                        235
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testBigFractionConverter')": [
                        332,
                        334
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testFractionConverter')": [
                        344,
                        346
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testcreateFieldMatrix')": [
                        100,
                        102
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateRowFieldMatrix')": [
                        175,
                        177
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateColumnFieldMatrix')": [
                        233,
                        235
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testBigFractionConverter')": [
                        332,
                        334
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testFractionConverter')": [
                        344,
                        346
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/QRSolverTest.java": {
                "old": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.linear#QRSolverTest', 'testSolve')": [
                        171,
                        175,
                        184,
                        185
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.math.linear#QRSolverTest', 'testSolve')": [
                        171,
                        175,
                        184,
                        185
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/RealMatrixImplTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testOperate')": [
                        245
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testPremultiplyVector')": [
                        283
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testGetRowVector')": [
                        572,
                        573
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testSetRowVector')": [
                        592,
                        603
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testSetColumnVector')": [
                        643
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'columnToVector(double)')": [
                        655
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testOperate')": [
                        245
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testPremultiplyVector')": [
                        283
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testGetRowVector')": [
                        572,
                        573
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testSetRowVector')": [
                        592,
                        603
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'testSetColumnVector')": [
                        643
                    ],
                    "('org.apache.commons.math.linear#RealMatrixImplTest', 'columnToVector(double)')": [
                        655
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/RealVectorFormatAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testSimpleNoDecimals')": [
                        47
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testSimpleWithDecimals')": [
                        54
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testSimpleWithDecimalsTrunc')": [
                        65
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNegativeX')": [
                        76
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNegativeY')": [
                        87
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNegativeZ')": [
                        98
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNonDefaultSetting')": [
                        109
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testStaticFormatRealVectorImpl')": [
                        119
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNan')": [
                        132
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testPositiveInfinity')": [
                        139
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'tesNegativeInfinity')": [
                        148
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseSimpleNoDecimals')": [
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseIgnoredWhitespace')": [
                        168
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseSimpleWithDecimals')": [
                        185,
                        186,
                        187
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseSimpleWithDecimalsTrunc')": [
                        200,
                        201,
                        202
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeX')": [
                        215,
                        216,
                        217
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeY')": [
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeZ')": [
                        245,
                        246,
                        247
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeAll')": [
                        260,
                        261,
                        262
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseZeroX')": [
                        275,
                        276,
                        277
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNonDefaultSetting')": [
                        290,
                        291,
                        292
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNan')": [
                        302,
                        303
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParsePositiveInfinity')": [
                        312,
                        313
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeInfinity')": [
                        324,
                        325
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseManyComponents')": [
                        344,
                        345
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testSimpleNoDecimals')": [
                        47
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testSimpleWithDecimals')": [
                        54
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testSimpleWithDecimalsTrunc')": [
                        65
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNegativeX')": [
                        76
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNegativeY')": [
                        87
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNegativeZ')": [
                        98
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNonDefaultSetting')": [
                        109
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testStaticFormatRealVectorImpl')": [
                        119
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testNan')": [
                        132
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testPositiveInfinity')": [
                        139
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'tesNegativeInfinity')": [
                        148
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseSimpleNoDecimals')": [
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseIgnoredWhitespace')": [
                        168
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseSimpleWithDecimals')": [
                        185,
                        186,
                        187
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseSimpleWithDecimalsTrunc')": [
                        200,
                        201,
                        202
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeX')": [
                        215,
                        216,
                        217
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeY')": [
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeZ')": [
                        245,
                        246,
                        247
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeAll')": [
                        260,
                        261,
                        262
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseZeroX')": [
                        275,
                        276,
                        277
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNonDefaultSetting')": [
                        290,
                        291,
                        292
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNan')": [
                        302,
                        303
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParsePositiveInfinity')": [
                        312,
                        313
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseNegativeInfinity')": [
                        324,
                        325
                    ],
                    "('org.apache.commons.math.linear#RealVectorFormatAbstractTest', 'testParseManyComponents')": [
                        344,
                        345
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/SingularValueSolverTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.linear#SingularValueSolverTest', 'testSolveDimensionErrors')": [
                        72
                    ],
                    "('org.apache.commons.math.linear#SingularValueSolverTest', 'testSolveSingularityErrors')": [
                        115
                    ],
                    "('org.apache.commons.math.linear#SingularValueSolverTest', 'testSolve')": [
                        142,
                        146,
                        155,
                        156
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.linear#SingularValueSolverTest', 'testSolveDimensionErrors')": [
                        72
                    ],
                    "('org.apache.commons.math.linear#SingularValueSolverTest', 'testSolveSingularityErrors')": [
                        115
                    ],
                    "('org.apache.commons.math.linear#SingularValueSolverTest', 'testSolve')": [
                        142,
                        146,
                        155,
                        156
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testMultiply')": [
                        210
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', None)": [
                        228
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testOperate')": [
                        267
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testPremultiplyVector')": [
                        306
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testGetRowVector')": [
                        509,
                        510
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'columnToVector(Fraction)')": [
                        552
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testMultiply')": [
                        210
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', None)": [
                        228
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testOperate')": [
                        267
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testPremultiplyVector')": [
                        306
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'testGetRowVector')": [
                        509,
                        510
                    ],
                    "('org.apache.commons.math.linear#SparseFieldMatrixTest', 'columnToVector(Fraction)')": [
                        552
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', None)": [
                        216
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testOperate')": [
                        255
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testPremultiplyVector')": [
                        294
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testGetRowVector')": [
                        497,
                        498
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'columnToVector(double)')": [
                        540
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', None)": [
                        216
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testOperate')": [
                        255
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testPremultiplyVector')": [
                        294
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testGetRowVector')": [
                        497,
                        498
                    ],
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'columnToVector(double)')": [
                        540
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'equationFromString(int,String)')": [
                        342
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.optimization.linear#SimplexSolverTest', 'equationFromString(int,String)')": [
                        342
                    ]
                }
            },
            "src/test/org/apache/commons/math/stat/correlation/CovarianceTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.correlation#CovarianceTest', 'testInsufficientData')": [
                        173
                    ],
                    "('org.apache.commons.math.stat.correlation#CovarianceTest', 'testConsistency')": [
                        202
                    ],
                    "('org.apache.commons.math.stat.correlation#CovarianceTest', 'createRealMatrix(double,int,int)')": [
                        234
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.correlation#CovarianceTest', 'testInsufficientData')": [
                        173
                    ],
                    "('org.apache.commons.math.stat.correlation#CovarianceTest', 'testConsistency')": [
                        202
                    ],
                    "('org.apache.commons.math.stat.correlation#CovarianceTest', 'createRealMatrix(double,int,int)')": [
                        234
                    ]
                }
            },
            "src/test/org/apache/commons/math/stat/regression/OLSMultipleLinearRegressionTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testPerfectFit')": [
                        94,
                        96
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.stat.regression#OLSMultipleLinearRegressionTest', 'testPerfectFit')": [
                        94,
                        96
                    ]
                }
            }
        }
    },
    "6fb3ae713e36030e418bf611094f1e307472e184": {
        "authored_data": "2009 Jun 11 08:06",
        "commit.message": "switch the matrix type built by factory methods depending on the dimension\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783680 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "37ee8dbfe6a441131d8308b77f606df23c2ce966",
        "changes": {
            "src/java/org/apache/commons/math/linear/MatrixUtils.java": {
                "old": {
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(int,int)')": [
                        56
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(Field,int,int)')": [
                        73
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', None)": [
                        78,
                        84,
                        94,
                        95,
                        96,
                        102
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(double)')": [
                        88
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(T)')": [
                        107
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#MatrixUtils', None)": [
                        49,
                        50,
                        51,
                        52,
                        53,
                        67,
                        68,
                        69,
                        70,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        101,
                        102,
                        113,
                        114,
                        115,
                        116,
                        117,
                        123,
                        124
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(int,int)')": [
                        61,
                        62
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(Field,int,int)')": [
                        83,
                        84
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createRealMatrix(double)')": [
                        106,
                        107
                    ],
                    "('org.apache.commons.math.linear#MatrixUtils', 'createFieldMatrix(T)')": [
                        129,
                        130
                    ]
                }
            }
        }
    },
    "37ee8dbfe6a441131d8308b77f606df23c2ce966": {
        "authored_data": "2009 Jun 11 08:05",
        "commit.message": "renamed Dense{Real/Field}Matrix into Block{Real/Field}Matrix\nas suggested by Phil in http://markmail.org/message/iibgiz4bsv6hjjvh\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783678 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "9d4fb6760b0db28343231064fa43f92ce6dbba6f",
        "changes": {
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        424
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        424
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java": {
                "old": {
                    "('org.apache.commons.math.linear#OpenMapRealMatrix', 'multiply(RealMatrix)')": [
                        167
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#OpenMapRealMatrix', 'multiply(RealMatrix)')": [
                        167
                    ]
                }
            },
            "src/java/org/apache/commons/math/linear/QRDecompositionImpl.java": {
                "old": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        372,
                        374,
                        438
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#QRDecompositionImpl', None)": [
                        372,
                        374,
                        438
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        112
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', 'doOptimize')": [
                        112
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/correlation/Covariance.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', None)": [
                        81
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', 'computeCovarianceMatrix(RealMatrix,boolean)')": [
                        162
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', 'computeCovarianceMatrix(double,boolean)')": [
                        193
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', None)": [
                        81
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', 'computeCovarianceMatrix(RealMatrix,boolean)')": [
                        162
                    ],
                    "('org.apache.commons.math.stat.correlation#Covariance', 'computeCovarianceMatrix(double,boolean)')": [
                        193
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', None)": [
                        68
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationStandardErrors')": [
                        144
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationPValues')": [
                        175
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'computeCorrelationMatrix(RealMatrix)')": [
                        188
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'computeCorrelationMatrix(double)')": [
                        209
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'covarianceToCorrelation(RealMatrix)')": [
                        252
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', None)": [
                        68
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationStandardErrors')": [
                        144
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'getCorrelationPValues')": [
                        175
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'computeCorrelationMatrix(RealMatrix)')": [
                        188
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'computeCorrelationMatrix(double)')": [
                        209
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelation', 'covarianceToCorrelation(RealMatrix)')": [
                        252
                    ]
                }
            },
            "src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.correlation#SpearmansCorrelation', 'computeCorrelationMatrix(double)')": [
                        131
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.stat.correlation#SpearmansCorrelation', 'computeCorrelationMatrix(double)')": [
                        131
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/DenseFieldMatrixTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'suite')": [
                        161
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testDimensions')": [
                        167,
                        168
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testCopyFunctions')": [
                        180,
                        181,
                        183,
                        184
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testAdd')": [
                        190,
                        191
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testAddFail')": [
                        203,
                        204
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testPlusMinus')": [
                        215,
                        216,
                        219
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testMultiply')": [
                        228,
                        229,
                        230,
                        231,
                        238
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSeveralBlocks')": [
                        248
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', None)": [
                        330
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testMultiply2')": [
                        345,
                        346,
                        347
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testTrace')": [
                        353,
                        355
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testScalarAdd')": [
                        366,
                        367
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testOperate')": [
                        373,
                        376
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testOperateLarge')": [
                        386,
                        387,
                        388
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testOperatePremultiplyLarge')": [
                        399,
                        400,
                        401
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testMath209')": [
                        413
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testTranspose')": [
                        427,
                        431,
                        432
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testPremultiplyVector')": [
                        438,
                        442
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testPremultiply')": [
                        452,
                        453,
                        454,
                        457,
                        458,
                        459,
                        465
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetVectors')": [
                        473
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetEntry')": [
                        491
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testExamples')": [
                        508,
                        515,
                        531
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSubMatrix')": [
                        551
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        574
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,boolean)')": [
                        590
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetMatrixLarge')": [
                        602,
                        604,
                        606
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testCopySubMatrix')": [
                        623
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        650
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,boolean)')": [
                        669
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetRowMatrix')": [
                        681,
                        682,
                        683
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetRowMatrix')": [
                        701,
                        702
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetRowMatrixLarge')": [
                        721,
                        723,
                        725
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetColumnMatrix')": [
                        742,
                        743,
                        744
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetColumnMatrix')": [
                        762,
                        763
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetColumnMatrixLarge')": [
                        782,
                        784,
                        786
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetRowVector')": [
                        803
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetRowVector')": [
                        823
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetRowVectorLarge')": [
                        843,
                        844
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetColumnVector')": [
                        862
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetColumnVector')": [
                        882
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetColumnVectorLarge')": [
                        902,
                        903
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetRow')": [
                        929
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetRow')": [
                        947
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetRowLarge')": [
                        966,
                        967
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetColumn')": [
                        986
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetColumn')": [
                        1006
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetColumnLarge')": [
                        1026,
                        1027
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testEqualsAndHashCode')": [
                        1061,
                        1062,
                        1063,
                        1070
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testToString')": [
                        1074,
                        1075
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetSubMatrix')": [
                        1079,
                        1081,
                        1086,
                        1091,
                        1096,
                        1097,
                        1107
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testWalk')": [
                        1165,
                        1171,
                        1185,
                        1191,
                        1205,
                        1211,
                        1225,
                        1231
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSerial')": [
                        1248
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'createRandomMatrix(Random,int,int)')": [
                        1278,
                        1279,
                        1280
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'suite')": [
                        161
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testDimensions')": [
                        167,
                        168
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testCopyFunctions')": [
                        180,
                        181,
                        183,
                        184
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testAdd')": [
                        190,
                        191
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testAddFail')": [
                        203,
                        204
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testPlusMinus')": [
                        215,
                        216,
                        219
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testMultiply')": [
                        228,
                        229,
                        230,
                        231,
                        238
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSeveralBlocks')": [
                        248
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', None)": [
                        330
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testMultiply2')": [
                        345,
                        346,
                        347
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testTrace')": [
                        353,
                        355
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testScalarAdd')": [
                        366,
                        367
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testOperate')": [
                        373,
                        376
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testOperateLarge')": [
                        386,
                        387,
                        388
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testOperatePremultiplyLarge')": [
                        399,
                        400,
                        401
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testMath209')": [
                        413
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testTranspose')": [
                        427,
                        431,
                        432
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testPremultiplyVector')": [
                        438,
                        442
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testPremultiply')": [
                        452,
                        453,
                        454,
                        457,
                        458,
                        459,
                        465
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetVectors')": [
                        473
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetEntry')": [
                        491
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testExamples')": [
                        508,
                        515,
                        531
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSubMatrix')": [
                        551
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        574
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkGetSubMatrix(FieldMatrix,Fraction,int,int,boolean)')": [
                        590
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetMatrixLarge')": [
                        602,
                        604,
                        606
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testCopySubMatrix')": [
                        623
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,int,int,boolean)')": [
                        650
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'checkCopy(FieldMatrix,Fraction,int,int,boolean)')": [
                        669
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetRowMatrix')": [
                        681,
                        682,
                        683
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetRowMatrix')": [
                        701,
                        702
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetRowMatrixLarge')": [
                        721,
                        723,
                        725
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetColumnMatrix')": [
                        742,
                        743,
                        744
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetColumnMatrix')": [
                        762,
                        763
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetColumnMatrixLarge')": [
                        782,
                        784,
                        786
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetRowVector')": [
                        803
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetRowVector')": [
                        823
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetRowVectorLarge')": [
                        843,
                        844
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetColumnVector')": [
                        862
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetColumnVector')": [
                        882
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetColumnVectorLarge')": [
                        902,
                        903
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetRow')": [
                        929
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetRow')": [
                        947
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetRowLarge')": [
                        966,
                        967
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetColumn')": [
                        986
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetColumn')": [
                        1006
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testGetSetColumnLarge')": [
                        1026,
                        1027
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testEqualsAndHashCode')": [
                        1061,
                        1062,
                        1063,
                        1070
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testToString')": [
                        1074,
                        1075
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSetSubMatrix')": [
                        1079,
                        1081,
                        1086,
                        1091,
                        1096,
                        1097,
                        1107
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testWalk')": [
                        1165,
                        1171,
                        1185,
                        1191,
                        1205,
                        1211,
                        1225,
                        1231
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'testSerial')": [
                        1248
                    ],
                    "('org.apache.commons.math.linear#DenseFieldMatrixTest', 'createRandomMatrix(Random,int,int)')": [
                        1278,
                        1279,
                        1280
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/DenseRealMatrixTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'suite')": [
                        102
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testDimensions')": [
                        108,
                        109
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testCopyFunctions')": [
                        121,
                        122,
                        124,
                        125
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testAdd')": [
                        131,
                        132
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testAddFail')": [
                        146,
                        147
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testNorm')": [
                        158,
                        159
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testFrobeniusNorm')": [
                        166,
                        167
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testPlusMinus')": [
                        174,
                        175,
                        178
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testMultiply')": [
                        187,
                        188,
                        189,
                        190,
                        197
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSeveralBlocks')": [
                        206
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testMultiply2')": [
                        295,
                        296,
                        297
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testTrace')": [
                        303,
                        305
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testScalarAdd')": [
                        316,
                        317
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testOperate')": [
                        322,
                        325
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testOperateLarge')": [
                        335,
                        336,
                        337
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testOperatePremultiplyLarge')": [
                        348,
                        349,
                        350
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testMath209')": [
                        362
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testTranspose')": [
                        374,
                        378,
                        379
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testPremultiplyVector')": [
                        385,
                        389
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testPremultiply')": [
                        399,
                        400,
                        401,
                        404,
                        405,
                        406,
                        412
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetVectors')": [
                        420
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetEntry')": [
                        438
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testExamples')": [
                        452,
                        455,
                        467
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSubMatrix')": [
                        478
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,int,int,boolean)')": [
                        501
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,boolean)')": [
                        517
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetMatrixLarge')": [
                        529,
                        530,
                        531
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testCopySubMatrix')": [
                        548
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,int,int,boolean)')": [
                        575
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,boolean)')": [
                        594
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetRowMatrix')": [
                        606,
                        607,
                        608
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetRowMatrix')": [
                        626,
                        627
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetRowMatrixLarge')": [
                        646,
                        647,
                        648
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetColumnMatrix')": [
                        665,
                        666,
                        667
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetColumnMatrix')": [
                        685,
                        686
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetColumnMatrixLarge')": [
                        705,
                        706,
                        707
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetRowVector')": [
                        724
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetRowVector')": [
                        744
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetRowVectorLarge')": [
                        764,
                        765
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetColumnVector')": [
                        783
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetColumnVector')": [
                        803
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetColumnVectorLarge')": [
                        823,
                        824
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetRow')": [
                        850
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetRow')": [
                        868
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetRowLarge')": [
                        887,
                        888
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetColumn')": [
                        907
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetColumn')": [
                        927
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetColumnLarge')": [
                        947,
                        948
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testEqualsAndHashCode')": [
                        982,
                        983,
                        984,
                        991
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testToString')": [
                        995,
                        996
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetSubMatrix')": [
                        1001,
                        1003,
                        1008,
                        1013,
                        1018,
                        1021
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testWalk')": [
                        1076,
                        1082,
                        1096,
                        1102,
                        1116,
                        1122,
                        1136,
                        1142
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSerial')": [
                        1159
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'createRandomMatrix(Random,int,int)')": [
                        1199,
                        1200
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'suite')": [
                        102
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testDimensions')": [
                        108,
                        109
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testCopyFunctions')": [
                        121,
                        122,
                        124,
                        125
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testAdd')": [
                        131,
                        132
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testAddFail')": [
                        146,
                        147
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testNorm')": [
                        158,
                        159
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testFrobeniusNorm')": [
                        166,
                        167
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testPlusMinus')": [
                        174,
                        175,
                        178
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testMultiply')": [
                        187,
                        188,
                        189,
                        190,
                        197
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSeveralBlocks')": [
                        206
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testMultiply2')": [
                        295,
                        296,
                        297
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testTrace')": [
                        303,
                        305
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testScalarAdd')": [
                        316,
                        317
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testOperate')": [
                        322,
                        325
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testOperateLarge')": [
                        335,
                        336,
                        337
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testOperatePremultiplyLarge')": [
                        348,
                        349,
                        350
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testMath209')": [
                        362
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testTranspose')": [
                        374,
                        378,
                        379
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testPremultiplyVector')": [
                        385,
                        389
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testPremultiply')": [
                        399,
                        400,
                        401,
                        404,
                        405,
                        406,
                        412
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetVectors')": [
                        420
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetEntry')": [
                        438
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testExamples')": [
                        452,
                        455,
                        467
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSubMatrix')": [
                        478
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,int,int,boolean)')": [
                        501
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkGetSubMatrix(RealMatrix,double,int,int,boolean)')": [
                        517
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetMatrixLarge')": [
                        529,
                        530,
                        531
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testCopySubMatrix')": [
                        548
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,int,int,boolean)')": [
                        575
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'checkCopy(RealMatrix,double,int,int,boolean)')": [
                        594
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetRowMatrix')": [
                        606,
                        607,
                        608
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetRowMatrix')": [
                        626,
                        627
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetRowMatrixLarge')": [
                        646,
                        647,
                        648
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetColumnMatrix')": [
                        665,
                        666,
                        667
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetColumnMatrix')": [
                        685,
                        686
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetColumnMatrixLarge')": [
                        705,
                        706,
                        707
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetRowVector')": [
                        724
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetRowVector')": [
                        744
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetRowVectorLarge')": [
                        764,
                        765
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetColumnVector')": [
                        783
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetColumnVector')": [
                        803
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetColumnVectorLarge')": [
                        823,
                        824
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetRow')": [
                        850
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetRow')": [
                        868
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetRowLarge')": [
                        887,
                        888
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetColumn')": [
                        907
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetColumn')": [
                        927
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testGetSetColumnLarge')": [
                        947,
                        948
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testEqualsAndHashCode')": [
                        982,
                        983,
                        984,
                        991
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testToString')": [
                        995,
                        996
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSetSubMatrix')": [
                        1001,
                        1003,
                        1008,
                        1013,
                        1018,
                        1021
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testWalk')": [
                        1076,
                        1082,
                        1096,
                        1102,
                        1116,
                        1122,
                        1136,
                        1142
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'testSerial')": [
                        1159
                    ],
                    "('org.apache.commons.math.linear#DenseRealMatrixTest', 'createRandomMatrix(Random,int,int)')": [
                        1199,
                        1200
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/MatrixUtilsTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateRealMatrix')": [
                        77
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateRowRealMatrix')": [
                        158
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateColumnRealMatrix')": [
                        216
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateRealMatrix')": [
                        77
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateRowRealMatrix')": [
                        158
                    ],
                    "('org.apache.commons.math.linear#MatrixUtilsTest', 'testCreateColumnRealMatrix')": [
                        216
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/QRDecompositionImplTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testDimensions')": [
                        80,
                        81
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testAEqualQR')": [
                        108,
                        109
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testQOrthogonal')": [
                        133,
                        134
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testRUpperTriangular')": [
                        163,
                        164
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testHTrapezoidal')": [
                        199,
                        200
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testDimensions')": [
                        80,
                        81
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testAEqualQR')": [
                        108,
                        109
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testQOrthogonal')": [
                        133,
                        134
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testRUpperTriangular')": [
                        163,
                        164
                    ],
                    "('org.apache.commons.math.linear#QRDecompositionImplTest', 'testHTrapezoidal')": [
                        199,
                        200
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/QRSolverTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.linear#QRSolverTest', 'testOverdetermined')": [
                        195,
                        196,
                        198
                    ],
                    "('org.apache.commons.math.linear#QRSolverTest', 'testUnderdetermined')": [
                        218,
                        219,
                        221
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.linear#QRSolverTest', 'testOverdetermined')": [
                        195,
                        196,
                        198
                    ],
                    "('org.apache.commons.math.linear#QRSolverTest', 'testUnderdetermined')": [
                        218,
                        219,
                        221
                    ]
                }
            },
            "src/test/org/apache/commons/math/linear/SparseRealMatrixTest.java": {
                "old": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testMultiply')": [
                        198
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#SparseRealMatrixTest', 'testMultiply')": [
                        198
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', None)": [
                        488
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', None)": [
                        488
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        528
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', None)": [
                        528
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', None)": [
                        372
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.math.optimization.general#NonLinearConjugateGradientOptimizerTest', None)": [
                        372
                    ]
                }
            },
            "src/test/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'testInsufficientData')": [
                        187
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'createRealMatrix(double,int,int)')": [
                        262
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'createLowerTriangularRealMatrix(double,int)')": [
                        267
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'testInsufficientData')": [
                        187
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'createRealMatrix(double,int,int)')": [
                        262
                    ],
                    "('org.apache.commons.math.stat.correlation#PearsonsCorrelationTest', 'createLowerTriangularRealMatrix(double,int)')": [
                        267
                    ]
                }
            },
            "src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.stat.correlation#SpearmansRankCorrelationTest', 'testInsufficientData')": [
                        102
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.stat.correlation#SpearmansRankCorrelationTest', 'testInsufficientData')": [
                        102
                    ]
                }
            }
        }
    },
    "9d4fb6760b0db28343231064fa43f92ce6dbba6f": {
        "authored_data": "2009 Jun 10 21:44",
        "commit.message": "prevent too small (sometimes exactly 0) steps to occur\nwhen an event is within convergence tolerance to the step end\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783529 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "b63d261b5442856d96112bbadf060de5b7e3d228",
        "changes": {
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        312,
                        313
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        271,
                        272
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        834,
                        835
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        834,
                        835,
                        836,
                        837,
                        838,
                        839
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        161
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168
                    ]
                }
            }
        }
    },
    "b63d261b5442856d96112bbadf060de5b7e3d228": {
        "authored_data": "2009 Jun 10 20:58",
        "commit.message": "fixed a forgotten field in copy constructor\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783516 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "ed2301fb818cf41b8f9cf2a7c08acd6c23ec4ff6",
        "changes": {
            "src/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', None)": [
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.sampling#NordsieckStepInterpolator', None)": [
                        80,
                        81
                    ]
                }
            }
        }
    },
    "ed2301fb818cf41b8f9cf2a7c08acd6c23ec4ff6": {
        "authored_data": "2009 Jun 09 19:43",
        "commit.message": "fixed checkstyle errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783114 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "a70c0de4a24a48ded4230016d05e51baf0afc09f",
        "changes": {
            "src/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "new": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        160
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/MultistepIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        117
                    ]
                }
            }
        }
    },
    "a70c0de4a24a48ded4230016d05e51baf0afc09f": {
        "authored_data": "2009 Jun 09 19:33",
        "commit.message": "added support for max number of evaluations to ODE integrators\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783103 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "23055a70ce701936214557550e456748913ced4c",
        "changes": {
            "src/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        73,
                        74,
                        136,
                        137,
                        138,
                        141,
                        142,
                        143,
                        146,
                        147,
                        148,
                        151,
                        152,
                        153,
                        154,
                        157,
                        158,
                        159,
                        160,
                        161,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'setMaxEvaluations(int)')": [
                        139,
                        140
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'getMaxEvaluations')": [
                        144,
                        145
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'getEvaluations')": [
                        149,
                        150
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'resetEvaluations')": [
                        155,
                        156
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'setEquations(FirstOrderDifferentialEquations)')": [
                        162,
                        163
                    ],
                    "('org.apache.commons.math.ode#AbstractIntegrator', 'computeDerivatives(double,double,double)')": [
                        173,
                        174,
                        175,
                        176,
                        177,
                        178
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/MultistepIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode#MultistepIntegrator', 'start(int,double,CombinedEventsManager,FirstOrderDifferentialEquations,double,double)')": [
                        129
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode#MultistepIntegrator', 'start(int,double,CombinedEventsManager,double,double)')": [
                        158,
                        159
                    ],
                    "('org.apache.commons.math.ode#MultistepIntegrator', None)": [
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369
                    ],
                    "(None, None)": [
                        370,
                        371,
                        372
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/ODEIntegrator.java": {
                "new": {
                    "(None, None)": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        232,
                        233,
                        267,
                        287,
                        288
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        212,
                        213,
                        234,
                        268,
                        288
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        249,
                        250,
                        282,
                        296,
                        341,
                        342
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        226,
                        227,
                        251,
                        283,
                        297,
                        342
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'initializeStep(FirstOrderDifferentialEquations,boolean,int,double,double,double,double,double,double)')": [
                        218
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdaptiveStepsizeIntegrator', 'initializeStep(FirstOrderDifferentialEquations,boolean,int,double,double,double,double,double,double)')": [
                        218
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54StepInterpolator', 'reinitialize(FirstOrderDifferentialEquations,double,double,boolean)')": [
                        93,
                        95
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54StepInterpolator', 'reinitialize(AbstractIntegrator,double,double,boolean)')": [
                        93,
                        95
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolator', 'reinitialize(FirstOrderDifferentialEquations,double,double,boolean)')": [
                        104,
                        107
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolator', 'doFinalize')": [
                        227,
                        237,
                        247
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolator', 'reinitialize(AbstractIntegrator,double,double,boolean)')": [
                        104,
                        107
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853StepInterpolator', 'doFinalize')": [
                        227,
                        237,
                        247
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        191,
                        218,
                        249,
                        307
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EmbeddedRungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        174,
                        175,
                        193,
                        220,
                        251,
                        309
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', None)": [
                        398
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'tryStep(FirstOrderDifferentialEquations,double,double,double,int,double,double,double,double,double)')": [
                        414,
                        415,
                        431,
                        448
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        602,
                        638,
                        776
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'tryStep(double,double,double,int,double,double,double,double,double)')": [
                        413,
                        429,
                        446
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        509,
                        510,
                        602,
                        638,
                        776
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        106,
                        130,
                        143,
                        182
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaIntegrator', 'integrate(FirstOrderDifferentialEquations,double,double,double,double)')": [
                        89,
                        90,
                        108,
                        132,
                        145,
                        184
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaStepInterpolator', None)": [
                        52,
                        53,
                        93,
                        111,
                        180,
                        181
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaStepInterpolator', 'reinitialize(FirstOrderDifferentialEquations,double,double,boolean)')": [
                        118,
                        122
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaStepInterpolator', 'readExternal(ObjectInput)')": [
                        166
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaStepInterpolator', None)": [
                        52,
                        53,
                        93,
                        111,
                        180,
                        181
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaStepInterpolator', 'reinitialize(AbstractIntegrator,double,double,boolean)')": [
                        118,
                        122
                    ],
                    "('org.apache.commons.math.ode.nonstiff#RungeKuttaStepInterpolator', 'readExternal(ObjectInput)')": [
                        166
                    ]
                }
            },
            "src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.math.ode.sampling#AbstractStepInterpolator', None)": [
                        340
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'serialization')": [
                        175,
                        176
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'smallStep')": [
                        102,
                        103
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', None)": [
                        104,
                        105,
                        106,
                        107
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'exceedMaxEvaluations')": [
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121
                    ],
                    "('org.apache.commons.math.ode.nonstiff#AdamsBashforthIntegratorTest', 'serialization')": [
                        195,
                        196
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'serialization')": [
                        179,
                        180
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#AdamsMoultonIntegratorTest', 'serialization')": [
                        179,
                        180
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/DormandPrince54IntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', 'testIncreasingTolerance')": [
                        192
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince54IntegratorTest', 'testKepler')": [
                        249
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testIncreasingTolerance')": [
                        120
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testKepler')": [
                        200
                    ],
                    "('org.apache.commons.math.ode.nonstiff#DormandPrince853IntegratorTest', 'testNoDenseOutput')": [
                        242,
                        249
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java": {
                "old": {
                    "(None, None)": [
                        31,
                        182
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'noReset')": [
                        45
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationAtBounds')": [
                        67
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationInside')": [
                        101
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', None)": [
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'noReset')": [
                        44
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationAtBounds')": [
                        66
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', 'interpolationInside')": [
                        100
                    ],
                    "('org.apache.commons.math.ode.nonstiff#EulerStepInterpolatorTest', None)": [
                        174,
                        175,
                        176,
                        177,
                        178,
                        179
                    ],
                    "(None, None)": [
                        180,
                        181
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testIncreasingTolerance')": [
                        144
                    ],
                    "('org.apache.commons.math.ode.nonstiff#GraggBulirschStoerIntegratorTest', 'testKepler')": [
                        240
                    ]
                }
            },
            "src/test/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java": {
                "new": {
                    "('org.apache.commons.math.ode.nonstiff#HighamHall54IntegratorTest', 'testIncreasingTolerance')": [
                        133
                    ]
                }
            }
        }
    }
}