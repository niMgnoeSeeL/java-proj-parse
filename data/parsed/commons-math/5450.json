{
    "39647f7f304a1e35999d28304f4bf485aee9bddd": {
        "authored_data": "2009 Mar 15 21:35",
        "commit.message": "fixed checkstyle and findbugs errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754765 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "77a6b785d20681a25b701bef174d5acb90c31724",
        "changes": {
            "src/java/org/apache/commons/math/optimization/ScalarDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        71
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/ScalarOptimizer.java": {
                "old": {
                    "(None, None)": [
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        71
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/ScalarPointValuePair.java": {
                "old": {
                    "('org.apache.commons.math.optimization#ScalarPointValuePair', None)": [
                        59
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#ScalarPointValuePair', None)": [
                        59
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        81
                    ]
                },
                "new": {
                    "(None, None)": [
                        81
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        316
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        316,
                        317
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(VectorialDifferentiableObjectiveFunction,double,double,double)')": [
                        306,
                        307
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(VectorialDifferentiableObjectiveFunction,double,double,double)')": [
                        306,
                        307
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        323,
                        324,
                        325,
                        326,
                        327
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizer', None)": [
                        58
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java": {
                "old": {
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGenerator', None)": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#CorrelatedRandomVectorGenerator', None)": [
                        63,
                        64,
                        65,
                        66
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/GaussianRandomGenerator.java": {
                "new": {
                    "('org.apache.commons.math.random#GaussianRandomGenerator', None)": [
                        30,
                        31,
                        32
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        29
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/RandomVectorGenerator.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        29
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java": {
                "new": {
                    "('org.apache.commons.math.random#UncorrelatedRandomVectorGenerator', None)": [
                        33,
                        34,
                        35
                    ]
                }
            },
            "src/java/org/apache/commons/math/random/UniformRandomGenerator.java": {
                "new": {
                    "('org.apache.commons.math.random#UniformRandomGenerator', None)": [
                        34,
                        35,
                        36
                    ]
                }
            },
            "src/java/org/apache/commons/math/util/MathUtils.java": {
                "old": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        552,
                        553
                    ]
                },
                "new": {
                    "('org.apache.commons.math.util#MathUtils', None)": [
                        552,
                        553
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java": {
                "new": {
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testTrivial')": [
                        115
                    ],
                    "('org.apache.commons.math.optimization.general#GaussNewtonOptimizerTest', 'testColumnsPermutation')": [
                        132,
                        133,
                        134
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testQRColumnsPermutation')": [
                        128
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testTrivial')": [
                        122
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testQRColumnsPermutation')": [
                        129,
                        137,
                        138,
                        139
                    ]
                }
            }
        }
    },
    "8f6fd887f540da97944a6a97e8fab46449999fb4": {
        "authored_data": "2009 Mar 15 21:03",
        "commit.message": "removed a spurious print statement\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754750 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "94f9b580a5d516bd74f5d525bef108ca14c0362e",
        "changes": {
            "src/test/org/apache/commons/math/ode/nonstiff/StepInterpolatorAbstractTest.java": {
                "old": {
                    "('org.apache.commons.math.ode.nonstiff#StepInterpolatorAbstractTest', 'checkDerivativesConsistency(FirstOrderIntegrator,TestProblemAbstract,double)')": [
                        80,
                        81,
                        82
                    ]
                }
            }
        }
    },
    "c37f06ed3ad2de8d49a80ac46aae3ab7748598a4": {
        "authored_data": "2009 Mar 15 19:11",
        "commit.message": "adapted old Levenberg-Marquardt estimator to new top level optimizers API\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "3a0df1ba4839d20d4ace6c0060c8e989b8c8f985",
        "changes": {
            "src/java/org/apache/commons/math/optimization/VectorialDifferentiableOptimizer.java": {
                "old": {
                    "(None, None)": [
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "(None, None)": [
                        33,
                        34
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        64,
                        65,
                        189,
                        218,
                        258,
                        260
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        178
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getRMS')": [
                        198
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getChiSquare')": [
                        211
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getCovariances')": [
                        234,
                        236,
                        239
                    ]
                },
                "new": {
                    "(None, None)": [
                        33,
                        34
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        64,
                        65,
                        89,
                        90,
                        91,
                        118,
                        119,
                        120,
                        198,
                        227,
                        265,
                        267
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getJacobianEvaluations')": [
                        121,
                        122
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        186,
                        187
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getRMS')": [
                        207
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getChiSquare')": [
                        220
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getCovariances')": [
                        246
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'optimize(VectorialDifferentiableObjectiveFunction,double,double,double)')": [
                        309
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        89,
                        90,
                        519,
                        520,
                        521,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        574,
                        575,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600,
                        601,
                        602,
                        603,
                        604,
                        605,
                        606,
                        607,
                        608,
                        609,
                        610,
                        611,
                        612,
                        613,
                        614,
                        615,
                        616,
                        617,
                        618,
                        619,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        633,
                        634,
                        635,
                        636,
                        637,
                        638,
                        639,
                        640,
                        641,
                        642,
                        651,
                        652,
                        653,
                        654,
                        655,
                        667,
                        670,
                        675,
                        688,
                        689,
                        690,
                        691,
                        702,
                        706,
                        720,
                        725,
                        744,
                        748,
                        762,
                        763,
                        764,
                        765,
                        766,
                        770,
                        771,
                        772,
                        782,
                        783,
                        784,
                        785,
                        786,
                        787,
                        788,
                        799,
                        800,
                        801,
                        802,
                        828,
                        829,
                        830,
                        831,
                        832,
                        833,
                        834,
                        835,
                        844,
                        845,
                        846,
                        847,
                        848,
                        868,
                        869,
                        870,
                        871,
                        872,
                        873,
                        880,
                        881,
                        882,
                        897,
                        898,
                        899,
                        900,
                        901,
                        902,
                        903,
                        916,
                        917,
                        918,
                        919,
                        944,
                        945,
                        952,
                        953,
                        954,
                        955,
                        956,
                        969,
                        970,
                        971,
                        972,
                        973,
                        998,
                        999,
                        1006,
                        1007,
                        1008,
                        1009,
                        1021,
                        1022,
                        1023,
                        1024,
                        1047,
                        1048,
                        1049,
                        1050,
                        1051,
                        1060,
                        1076,
                        1083,
                        1090,
                        1096,
                        1102,
                        1103,
                        1117,
                        1118,
                        1121,
                        1122,
                        1123,
                        1136,
                        1137,
                        1138,
                        1139,
                        1157,
                        1158,
                        1159,
                        1160,
                        1161,
                        1162,
                        1163,
                        1172,
                        1173,
                        1174,
                        1191,
                        1192,
                        1193,
                        1194,
                        1195,
                        1196,
                        1197,
                        1198,
                        1199,
                        1213,
                        1214,
                        1215,
                        1216,
                        1217,
                        1245,
                        1246,
                        1247,
                        1248,
                        1249,
                        1259,
                        1278,
                        1284,
                        1316,
                        1317,
                        1318,
                        1319,
                        1320,
                        1328,
                        1336,
                        1337,
                        1343,
                        1354,
                        1359,
                        1360,
                        1363,
                        1377,
                        1378,
                        1379,
                        1380,
                        1381,
                        1382,
                        1383,
                        1384,
                        1385,
                        1398,
                        1399,
                        1400,
                        1401,
                        1402,
                        1403,
                        1428,
                        1429,
                        1430,
                        1431,
                        1432,
                        1433,
                        1434,
                        1435,
                        1436,
                        1437,
                        1438,
                        1439,
                        1440,
                        1441,
                        1442,
                        1443,
                        1468,
                        1469,
                        1470,
                        1471,
                        1472,
                        1473,
                        1474,
                        1475,
                        1476,
                        1477,
                        1478,
                        1479
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24,
                        25
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        92,
                        525,
                        526,
                        527,
                        528,
                        529,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        597,
                        598,
                        599,
                        600,
                        601,
                        602,
                        607,
                        608,
                        613,
                        614,
                        615,
                        616,
                        617,
                        629,
                        632,
                        637,
                        646,
                        647,
                        652,
                        653,
                        654,
                        655,
                        666,
                        670,
                        681,
                        682,
                        690,
                        709,
                        713,
                        726,
                        727,
                        729,
                        730,
                        731,
                        732,
                        733,
                        737,
                        738,
                        739,
                        746,
                        747,
                        751,
                        752,
                        753,
                        754,
                        755,
                        756,
                        767,
                        768,
                        769,
                        770,
                        794,
                        795,
                        798,
                        799,
                        800,
                        801,
                        802,
                        803,
                        804,
                        805,
                        814,
                        815,
                        816,
                        817,
                        818,
                        834,
                        835,
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        852,
                        853,
                        854,
                        865,
                        866,
                        871,
                        872,
                        873,
                        874,
                        875,
                        876,
                        877,
                        890,
                        891,
                        892,
                        893,
                        914,
                        915,
                        920,
                        921,
                        928,
                        929,
                        930,
                        931,
                        932,
                        945,
                        946,
                        947,
                        948,
                        949,
                        970,
                        971,
                        976,
                        977,
                        984,
                        985,
                        986,
                        987,
                        999,
                        1000,
                        1001,
                        1002,
                        1021,
                        1022,
                        1027,
                        1028,
                        1029,
                        1030,
                        1031,
                        1040,
                        1056,
                        1063,
                        1070,
                        1076,
                        1082,
                        1083,
                        1095,
                        1096,
                        1099,
                        1100,
                        1103,
                        1104,
                        1105,
                        1118,
                        1119,
                        1120,
                        1121,
                        1134,
                        1135,
                        1141,
                        1142,
                        1143,
                        1144,
                        1145,
                        1146,
                        1147,
                        1156,
                        1157,
                        1158,
                        1170,
                        1171,
                        1177,
                        1178,
                        1179,
                        1180,
                        1181,
                        1182,
                        1183,
                        1184,
                        1185,
                        1199,
                        1200,
                        1201,
                        1202,
                        1203,
                        1217,
                        1218,
                        1233,
                        1234,
                        1235,
                        1236,
                        1237,
                        1247,
                        1266,
                        1272,
                        1300,
                        1301,
                        1306,
                        1307,
                        1308,
                        1309,
                        1310,
                        1318,
                        1326,
                        1332,
                        1343,
                        1348,
                        1349,
                        1352,
                        1361,
                        1362,
                        1368,
                        1369,
                        1370,
                        1371,
                        1372,
                        1373,
                        1374,
                        1375,
                        1376,
                        1389,
                        1390,
                        1391,
                        1392,
                        1393,
                        1394,
                        1415,
                        1416,
                        1421,
                        1422,
                        1423,
                        1424,
                        1425,
                        1426,
                        1427,
                        1428,
                        1429,
                        1430,
                        1431,
                        1432,
                        1433,
                        1434,
                        1435,
                        1436,
                        1461,
                        1462,
                        1463,
                        1464,
                        1465,
                        1466,
                        1467,
                        1468,
                        1469,
                        1470,
                        1471,
                        1472
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524
                    ]
                }
            }
        }
    },
    "27c1eb726abb6c48787f9d2cb6bcfb4abe4addee": {
        "authored_data": "2009 Mar 14 17:35",
        "commit.message": "updated optimization main interfaces to handle scalar and vectorial functions\nand to handle functions with or without explicit derivatives\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754499 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "4f206ca3ee00be1430dfccb3de1b90c51af31976",
        "changes": {
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        122,
                        128
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        74,
                        120,
                        121,
                        122,
                        126,
                        132
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24,
                        38,
                        48,
                        49
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        54,
                        57,
                        60,
                        75,
                        76,
                        111,
                        112,
                        144,
                        145
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        38,
                        48,
                        49
                    ],
                    "('org.apache.commons.math.optimization#LeastSquaresConverter', None)": [
                        54,
                        57,
                        60,
                        75,
                        76,
                        111,
                        112,
                        144,
                        145
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', None)": [
                        38,
                        44,
                        59,
                        69,
                        80,
                        82,
                        86,
                        96,
                        102
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'getOptima')": [
                        105,
                        109
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        128
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'getConvergenceChecker')": [
                        133
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'optimize(ObjectiveFunction,GoalType,double)')": [
                        138,
                        143,
                        164,
                        165
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', None)": [
                        38,
                        44,
                        59,
                        69,
                        80,
                        82,
                        86,
                        96,
                        102
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'getOptima')": [
                        105,
                        109
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'setConvergenceChecker(ScalarConvergenceChecker)')": [
                        128
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'getConvergenceChecker')": [
                        133
                    ],
                    "('org.apache.commons.math.optimization#MultiStartOptimizer', 'optimize(ScalarObjectiveFunction,GoalType,double)')": [
                        138,
                        143,
                        164,
                        165
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "(None, None)": [
                        24,
                        27,
                        29,
                        30,
                        31,
                        60,
                        67,
                        68,
                        78
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        84,
                        90,
                        93,
                        96,
                        110
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setConvergenceChecker(ConvergenceChecker)')": [
                        220
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getConvergenceChecker')": [
                        225
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ObjectiveFunction,GoalType,double)')": [
                        230,
                        243,
                        244,
                        257
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'iterateSimplex(Comparator)')": [
                        296
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        328,
                        329,
                        338
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex(Comparator)')": [
                        347,
                        352,
                        353,
                        355
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(PointValuePair,Comparator)')": [
                        368,
                        369,
                        373
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        27,
                        29,
                        30,
                        31,
                        60,
                        67,
                        68,
                        78
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        84,
                        90,
                        93,
                        96,
                        110,
                        111
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'setConvergenceChecker(ScalarConvergenceChecker)')": [
                        221
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'getConvergenceChecker')": [
                        226
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'optimize(ScalarObjectiveFunction,GoalType,double)')": [
                        231,
                        244,
                        245,
                        258
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'iterateSimplex(Comparator)')": [
                        297
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        329,
                        330,
                        339
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluateSimplex(Comparator)')": [
                        348,
                        353,
                        354,
                        356
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'replaceWorstPoint(ScalarPointValuePair,Comparator)')": [
                        369,
                        370,
                        374
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/MultiDirectional.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        62,
                        69,
                        70,
                        73,
                        77,
                        78,
                        89
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(PointValuePair,double,Comparator)')": [
                        111,
                        113,
                        116,
                        120,
                        123,
                        128
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'iterateSimplex(Comparator)')": [
                        62,
                        69,
                        70,
                        73,
                        77,
                        78,
                        89
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectional', 'evaluateNewSimplex(ScalarPointValuePair,double,Comparator)')": [
                        111,
                        113,
                        116,
                        120,
                        123,
                        128
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/NelderMead.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        75,
                        82,
                        83,
                        84,
                        85,
                        91,
                        106,
                        121,
                        140,
                        155,
                        166,
                        172
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMead', 'iterateSimplex(Comparator)')": [
                        75,
                        82,
                        83,
                        84,
                        85,
                        91,
                        106,
                        121,
                        140,
                        155,
                        166,
                        172
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java": {
                "old": {
                    "(None, None)": [
                        28,
                        29,
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testObjectiveExceptions')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        87,
                        97,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        137,
                        138,
                        150,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        168,
                        169,
                        183,
                        185
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29,
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testObjectiveExceptions')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testMinimizeMaximize')": [
                        87,
                        97,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testRosenbrock')": [
                        137,
                        138,
                        150,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#MultiDirectionalTest', 'testPowell')": [
                        168,
                        169,
                        183,
                        185
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "(None, None)": [
                        28,
                        29,
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testObjectiveExceptions')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        87,
                        97,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        137,
                        138,
                        150,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        168,
                        169,
                        183,
                        185
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29,
                        30
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testObjectiveExceptions')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMinimizeMaximize')": [
                        87,
                        97,
                        100
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testRosenbrock')": [
                        137,
                        138,
                        150,
                        155
                    ],
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testPowell')": [
                        168,
                        169,
                        183,
                        185
                    ]
                }
            }
        }
    }
}