{
    "90fee3729fac9fe80b6a64b86ee4cf69c1b0c6f4": {
        "authored_data": "2009 Jun 20 13:31",
        "commit.message": "fixed checkstyle errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786817 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "355857cbebfa68a8f5e47f1e3e21a61c9414d189",
        "changes": {
            "src/java/org/apache/commons/math/ode/AbstractIntegrator.java": {
                "new": {
                    "('org.apache.commons.math.ode#AbstractIntegrator', None)": [
                        81,
                        82
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java": {
                "new": {
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', None)": [
                        142
                    ]
                }
            }
        }
    },
    "355857cbebfa68a8f5e47f1e3e21a61c9414d189": {
        "authored_data": "2009 Jun 20 03:00",
        "commit.message": "Change Complex to use readResolve instead of introspection\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786751 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "William Barker",
        "pcid": "136d06b2b30933c9e63447deee16cae3f3661144",
        "changes": {
            "src/java/org/apache/commons/math/complex/Complex.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math.complex#Complex', None)": [
                        976,
                        977,
                        978,
                        979,
                        980,
                        999,
                        1000,
                        1001,
                        1002
                    ],
                    "('org.apache.commons.math.complex#Complex', 'readObject(ObjectInputStream)')": [
                        981,
                        982,
                        983,
                        984,
                        985,
                        986,
                        987,
                        988,
                        989,
                        990,
                        991,
                        992,
                        993,
                        994,
                        995,
                        996,
                        997,
                        998
                    ]
                },
                "new": {
                    "('org.apache.commons.math.complex#Complex', None)": [
                        974,
                        975,
                        976,
                        977,
                        978,
                        981,
                        982
                    ],
                    "('org.apache.commons.math.complex#Complex', 'readResolve')": [
                        979,
                        980
                    ]
                }
            }
        }
    },
    "6463532544ea30ce8605a0ad689fb53a30567493": {
        "authored_data": "2009 Jun 19 12:33",
        "commit.message": "added internal error generation for defensive programming\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786478 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "74a6186c3ee508affef451474245fb994f860cd5",
        "changes": {
            "src/java/org/apache/commons/math/MathRuntimeException.java": {
                "new": {
                    "('org.apache.commons.math#MathRuntimeException', None)": [
                        427,
                        428,
                        429,
                        430
                    ],
                    "('org.apache.commons.math#MathRuntimeException', 'createInternalError(Throwable)')": [
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444
                    ],
                    "(None, None)": [
                        445,
                        446,
                        447,
                        448,
                        449,
                        450
                    ]
                }
            },
            "src/java/org/apache/commons/math/MessagesResources_fr.java": {
                "old": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        231,
                        235,
                        278,
                        279,
                        280,
                        281,
                        809
                    ]
                },
                "new": {
                    "('org.apache.commons.math#MessagesResources_fr', None)": [
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        243,
                        286,
                        287,
                        288,
                        816,
                        817,
                        818,
                        819,
                        820
                    ]
                }
            }
        }
    },
    "e81ef196cd9dd3c7989b96f648f96ec138faa25b": {
        "authored_data": "2009 Jun 19 12:03",
        "commit.message": "added protection against infinite loops by setting a maximal number of evaluations\n(some classes were forgotten in the first pass to fix this problem)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786466 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "b09a8717be4e90aaea52a3e2f70ee7b8305b9916",
        "changes": {
            "src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java": {
                "new": {
                    "(None, None)": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java": {
                "new": {
                    "(None, None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', None)": [
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', None)": [
                        56,
                        57,
                        58,
                        92,
                        93,
                        148,
                        149,
                        150,
                        153,
                        154,
                        155
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'setMaxEvaluations(int)')": [
                        146,
                        147
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'getMaxEvaluations')": [
                        151,
                        152
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateRealOptimizer', 'optimize(DifferentiableMultivariateRealFunction,GoalType,double)')": [
                        191
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', None)": [
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', None)": [
                        55,
                        56,
                        57,
                        92,
                        93,
                        148,
                        149,
                        150,
                        153,
                        154,
                        155
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'setMaxEvaluations(int)')": [
                        146,
                        147
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'getMaxEvaluations')": [
                        151,
                        152
                    ],
                    "('org.apache.commons.math.optimization#MultiStartDifferentiableMultivariateVectorialOptimizer', 'optimize(DifferentiableMultivariateVectorialFunction,double,double,double)')": [
                        191
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', None)": [
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartMultivariateRealOptimizer', None)": [
                        89,
                        90
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', None)": [
                        74
                    ],
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double,double)')": [
                        187,
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', None)": [
                        50,
                        51,
                        52,
                        55,
                        56,
                        57,
                        84,
                        85,
                        116,
                        117,
                        118,
                        121,
                        122,
                        123,
                        151,
                        152,
                        153
                    ],
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', 'getMaxEvaluations')": [
                        114,
                        115
                    ],
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', 'getEvaluations')": [
                        119,
                        120
                    ],
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', 'setMaxEvaluations(int)')": [
                        154,
                        155
                    ],
                    "('org.apache.commons.math.optimization#MultiStartUnivariateRealOptimizer', 'optimize(UnivariateRealFunction,GoalType,double,double,double)')": [
                        209,
                        210,
                        211,
                        218,
                        228
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java": {
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        104,
                        105,
                        106,
                        339,
                        341
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluate(double)')": [
                        344,
                        346
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        363
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', None)": [
                        102,
                        103,
                        104,
                        339,
                        340
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'evaluate(double)')": [
                        344,
                        346,
                        347
                    ],
                    "('org.apache.commons.math.optimization.direct#DirectSearchOptimizer', 'buildSimplex(double)')": [
                        364
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'incrementIterationsCounter')": [
                        152,
                        153
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        154,
                        182
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        187
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', None)": [
                        54,
                        55,
                        56,
                        112,
                        128,
                        129,
                        130,
                        133,
                        134,
                        135,
                        195,
                        196
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'setMaxEvaluations(int)')": [
                        131,
                        132
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'getMaxEvaluations')": [
                        136,
                        137
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'incrementIterationsCounter')": [
                        167
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractLeastSquaresOptimizer', 'updateResidualsAndCost')": [
                        201,
                        202,
                        203,
                        204
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        39,
                        124,
                        145
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'incrementIterationsCounter')": [
                        122,
                        123
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'computeObjectiveValue(double)')": [
                        149
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', None)": [
                        40,
                        50,
                        51,
                        52,
                        82,
                        98,
                        99,
                        100,
                        103,
                        104,
                        105,
                        158,
                        159
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'setMaxEvaluations(int)')": [
                        101,
                        102
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'getMaxEvaluations')": [
                        106,
                        107
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'incrementIterationsCounter')": [
                        137
                    ],
                    "('org.apache.commons.math.optimization.general#AbstractScalarDifferentiableOptimizer', 'computeObjectiveValue(double)')": [
                        163,
                        164,
                        165,
                        166
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/linear/AbstractLinearOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'incrementIterationsCounter')": [
                        87,
                        88
                    ],
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', None)": [
                        89
                    ],
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'optimize(LinearObjectiveFunction,Collection,GoalType,boolean)')": [
                        105
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'incrementIterationsCounter')": [
                        87
                    ],
                    "('org.apache.commons.math.optimization.linear#AbstractLinearOptimizer', 'optimize(LinearObjectiveFunction,Collection,GoalType,boolean)')": [
                        103
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', None)": [
                        48
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23,
                        24,
                        155,
                        156
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', None)": [
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        57,
                        67,
                        125,
                        128,
                        129,
                        130,
                        133,
                        134,
                        135,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'setMaxEvaluations(int)')": [
                        126,
                        127
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getMaxEvaluations')": [
                        131,
                        132
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'getEvaluations')": [
                        136,
                        137
                    ],
                    "('org.apache.commons.math.optimization.univariate#AbstractUnivariateRealOptimizer', 'computeObjectiveValue(UnivariateRealFunction,double)')": [
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154
                    ]
                }
            },
            "src/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'localMin(UnivariateRealFunction,GoalType,double,double,double,double)')": [
                        95,
                        148
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.univariate#BrentOptimizer', 'localMin(UnivariateRealFunction,GoalType,double,double,double,double)')": [
                        95,
                        148
                    ]
                }
            },
            "src/test/org/apache/commons/math/optimization/direct/NelderMeadTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMaxEvaluations')": [
                        199,
                        200,
                        201,
                        203
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.direct#NelderMeadTest', 'testMaxEvaluations')": [
                        199,
                        200,
                        201,
                        203
                    ]
                }
            }
        }
    },
    "b09a8717be4e90aaea52a3e2f70ee7b8305b9916": {
        "authored_data": "2009 Jun 19 03:26",
        "commit.message": "Change the Complex isNaN and isInfinite fields to be transient\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@786359 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "William Barker",
        "pcid": "b353f0daa60ff9a14f9584f5a5dcfb0ba2c55284",
        "changes": {
            "src/java/org/apache/commons/math/complex/Complex.java": {
                "old": {
                    "('org.apache.commons.math.complex#Complex', None)": [
                        47,
                        48,
                        49,
                        81,
                        86
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('org.apache.commons.math.complex#Complex', None)": [
                        49,
                        81,
                        86,
                        975,
                        976,
                        977,
                        978,
                        979,
                        980,
                        999,
                        1000,
                        1001,
                        1002
                    ],
                    "('org.apache.commons.math.complex#Complex', 'readObject(ObjectInputStream)')": [
                        981,
                        982,
                        983,
                        984,
                        985,
                        986,
                        987,
                        988,
                        989,
                        990,
                        991,
                        992,
                        993,
                        994,
                        995,
                        996,
                        997,
                        998
                    ]
                }
            },
            "src/test/org/apache/commons/math/complex/ComplexTest.java": {
                "new": {
                    "('org.apache.commons.math.complex#ComplexTest', None)": [
                        905
                    ],
                    "('org.apache.commons.math.complex#ComplexTest', 'testSerial')": [
                        906,
                        907,
                        908,
                        909,
                        910,
                        911,
                        912,
                        913,
                        914
                    ],
                    "(None, None)": [
                        915
                    ]
                }
            }
        }
    },
    "b353f0daa60ff9a14f9584f5a5dcfb0ba2c55284": {
        "authored_data": "2009 Jun 17 11:00",
        "commit.message": "Optimized isNaN, isInfinite.  Jira: MATH-2276.  Contributed by Mark Anderson.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@785552 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "913ff1facc13b4ea0bb6d99e99924c3479a7ec95",
        "changes": {
            "src/java/org/apache/commons/math/complex/Complex.java": {
                "old": {
                    "('org.apache.commons.math.complex#Complex', 'isNaN')": [
                        321
                    ],
                    "('org.apache.commons.math.complex#Complex', 'isInfinite')": [
                        334,
                        335
                    ]
                },
                "new": {
                    "('org.apache.commons.math.complex#Complex', None)": [
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        98,
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.math.complex#Complex', 'isNaN')": [
                        335
                    ],
                    "('org.apache.commons.math.complex#Complex', 'isInfinite')": [
                        348
                    ]
                }
            }
        }
    }
}