{
    "e5b07cf0ef4744da6fcb8ce497df7a20a3f02a77": {
        "authored_data": "2010 May 31 14:06",
        "commit.message": "Fixed javadoc typos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949750 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "c98ff85082ca15c7474934d10924f8436373a3a3",
        "changes": {
            "src/main/java/org/apache/commons/math/random/RandomGenerator.java": {
                "old": {
                    "(None, None)": [
                        30,
                        40,
                        50
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        40,
                        50
                    ]
                }
            }
        }
    },
    "c98ff85082ca15c7474934d10924f8436373a3a3": {
        "authored_data": "2010 May 30 22:07",
        "commit.message": "Changed Poisson consistency test to use a fixed seed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949613 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "aa0d77a1778fb9a4e2a6bd519ad05d0adde6daa0",
        "changes": {
            "src/test/java/org/apache/commons/math/random/RandomDataTest.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        199,
                        263
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        267,
                        268,
                        270
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        199,
                        263
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'checkNextPoissonConsistency(double)')": [
                        267,
                        268,
                        270,
                        271
                    ]
                }
            }
        }
    },
    "aa0d77a1778fb9a4e2a6bd519ad05d0adde6daa0": {
        "authored_data": "2010 May 30 19:03",
        "commit.message": "Fixed javadoc typo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949557 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "2e75b28336f3ae4d219ebdad44cc1dfadb8a3fd2",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java": {
                "old": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', None)": [
                        234
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.solvers#UnivariateRealSolverImpl', None)": [
                        234
                    ]
                }
            }
        }
    },
    "2e75b28336f3ae4d219ebdad44cc1dfadb8a3fd2": {
        "authored_data": "2010 May 30 18:34",
        "commit.message": "Eliminated trailing spaces.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949555 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "b8de0c4db9d22fc2c6ad33137a74e612717a0718",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#BicubicSplineFunction', 'computePartialDerivatives')": [
                        490,
                        503,
                        513,
                        526,
                        536
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.interpolation#BicubicSplineFunction', 'computePartialDerivatives')": [
                        490,
                        503,
                        513,
                        526,
                        536
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolatingFunction', None)": [
                        276
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolatingFunction', None)": [
                        276
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java": {
                "old": {
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolator', 'interpolate(double,double,double,double)')": [
                        69,
                        157
                    ]
                },
                "new": {
                    "('org.apache.commons.math.analysis.interpolation#TricubicSplineInterpolator', 'interpolate(double,double,double,double)')": [
                        69,
                        157
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java": {
                "old": {
                    "('org.apache.commons.math.linear#OpenMapRealVector', None)": [
                        824
                    ]
                },
                "new": {
                    "('org.apache.commons.math.linear#OpenMapRealVector', None)": [
                        824
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        420
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        420
                    ]
                }
            }
        }
    },
    "b8de0c4db9d22fc2c6ad33137a74e612717a0718": {
        "authored_data": "2010 May 30 18:30",
        "commit.message": "Added random data generation methods to RandomDataImpl for the remaining\ndistributions in the distributions package.  Added a generic nextInversionDeviate method that takes a discrete or continuous distribution as argument and generates\na random deviate from the distribution.\nJIRA: MATH-310\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949553 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "392b44b0a8d084c693207f39ce81efe7e49a6c8c",
        "changes": {
            "src/main/java/org/apache/commons/math/random/RandomDataImpl.java": {
                "old": {
                    "(None, None)": [
                        65
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        79
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', None)": [
                        524,
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531,
                        532,
                        535,
                        536,
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        563,
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600,
                        601,
                        604,
                        605,
                        606,
                        607,
                        608,
                        609,
                        610,
                        611,
                        612,
                        613,
                        614,
                        615,
                        616,
                        619,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        633,
                        634,
                        635,
                        636,
                        637,
                        638,
                        639,
                        640,
                        641,
                        642,
                        643,
                        646,
                        647,
                        648,
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        657,
                        660,
                        661,
                        662,
                        663,
                        664,
                        665,
                        666,
                        667,
                        668,
                        669,
                        670,
                        671,
                        674,
                        675,
                        676,
                        873,
                        874,
                        875,
                        876,
                        877,
                        878,
                        879,
                        880,
                        881,
                        882,
                        885,
                        886,
                        887,
                        888,
                        889,
                        890,
                        891,
                        892,
                        893,
                        894,
                        895,
                        903
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextBeta(double,double)')": [
                        533,
                        534
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextBinomial(int,double)')": [
                        547,
                        548
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextCauchy(double,double)')": [
                        561,
                        562
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextChiSquare(double)')": [
                        574,
                        575
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextF(double,double)')": [
                        588,
                        589
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextGamma(double,double)')": [
                        602,
                        603
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextHypergeometric(int,int,int)')": [
                        617,
                        618
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextPascal(int,double)')": [
                        631,
                        632
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextT(double)')": [
                        644,
                        645
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextWeibull(double,double)')": [
                        658,
                        659
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextZipf(int,double)')": [
                        672,
                        673
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextInversionDeviate(ContinuousDistribution)')": [
                        883,
                        884
                    ],
                    "('org.apache.commons.math.random#RandomDataImpl', 'nextInversionDeviate(IntegerDistribution)')": [
                        896,
                        897,
                        898,
                        899,
                        900,
                        901,
                        902
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/random/RandomDataTest.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        48,
                        49,
                        50,
                        51,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        42,
                        43,
                        44,
                        45,
                        1047,
                        1048
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        65,
                        66,
                        67,
                        68,
                        71,
                        794,
                        813,
                        814,
                        815,
                        825,
                        826,
                        836,
                        837,
                        847,
                        848,
                        858,
                        859,
                        869,
                        870,
                        880,
                        881,
                        891,
                        892,
                        893,
                        894,
                        895,
                        896,
                        903,
                        904,
                        905,
                        906,
                        907,
                        908,
                        918,
                        919,
                        920,
                        944,
                        945,
                        969,
                        970,
                        993,
                        994,
                        1017,
                        1018,
                        1019,
                        1020,
                        1021,
                        1022,
                        1023,
                        1024
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextInversionDeviate')": [
                        795,
                        796,
                        797,
                        798,
                        799,
                        800,
                        801,
                        802,
                        803,
                        804,
                        805,
                        806,
                        807,
                        808,
                        809,
                        810,
                        811,
                        812
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextBeta')": [
                        816,
                        817,
                        818,
                        819,
                        820,
                        821,
                        822,
                        823,
                        824
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextCauchy')": [
                        827,
                        828,
                        829,
                        830,
                        831,
                        832,
                        833,
                        834,
                        835
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextChiSquare')": [
                        838,
                        839,
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        846
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextF')": [
                        849,
                        850,
                        851,
                        852,
                        853,
                        854,
                        855,
                        856,
                        857
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextGamma')": [
                        860,
                        861,
                        862,
                        863,
                        864,
                        865,
                        866,
                        867,
                        868
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextT')": [
                        871,
                        872,
                        873,
                        874,
                        875,
                        876,
                        877,
                        878,
                        879
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextWeibull')": [
                        882,
                        883,
                        884,
                        885,
                        886,
                        887,
                        888,
                        889,
                        890
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'getDistributionQuartiles(ContinuousDistribution)')": [
                        897,
                        898,
                        899,
                        900,
                        901,
                        902
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'updateCounts(double,long,double)')": [
                        909,
                        910,
                        911,
                        912,
                        913,
                        914,
                        915,
                        916,
                        917
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextBinomial')": [
                        921,
                        922,
                        923,
                        924,
                        925,
                        926,
                        927,
                        928,
                        929,
                        930,
                        931,
                        932,
                        933,
                        934,
                        935,
                        936,
                        937,
                        938,
                        939,
                        940,
                        941,
                        942,
                        943
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextHypergeometric')": [
                        946,
                        947,
                        948,
                        949,
                        950,
                        951,
                        952,
                        953,
                        954,
                        955,
                        956,
                        957,
                        958,
                        959,
                        960,
                        961,
                        962,
                        963,
                        964,
                        965,
                        966,
                        967,
                        968
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextPascal')": [
                        971,
                        972,
                        973,
                        974,
                        975,
                        976,
                        977,
                        978,
                        979,
                        980,
                        981,
                        982,
                        983,
                        984,
                        985,
                        986,
                        987,
                        988,
                        989,
                        990,
                        991,
                        992
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'testNextZipf')": [
                        995,
                        996,
                        997,
                        998,
                        999,
                        1000,
                        1001,
                        1002,
                        1003,
                        1004,
                        1005,
                        1006,
                        1007,
                        1008,
                        1009,
                        1010,
                        1011,
                        1012,
                        1013,
                        1014,
                        1015,
                        1016
                    ],
                    "('org.apache.commons.math.random#RandomDataTest', 'eliminateZeroMassPoints(int,double)')": [
                        1025,
                        1026,
                        1027,
                        1028,
                        1029,
                        1030,
                        1031,
                        1032,
                        1033,
                        1034,
                        1035,
                        1036,
                        1037,
                        1038,
                        1039,
                        1040,
                        1041,
                        1042,
                        1043,
                        1044,
                        1045,
                        1046
                    ]
                }
            }
        }
    },
    "392b44b0a8d084c693207f39ce81efe7e49a6c8c": {
        "authored_data": "2010 May 30 17:03",
        "commit.message": "Added chisquare test assertion.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949536 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "edd22d7ad556db8cdce46ff9f3a7374c052b044e",
        "changes": {
            "src/test/java/org/apache/commons/math/TestUtils.java": {
                "new": {
                    "(None, None)": [
                        25,
                        34,
                        35,
                        439
                    ],
                    "('org.apache.commons.math#TestUtils', None)": [
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432
                    ],
                    "('org.apache.commons.math#TestUtils', 'assertChiSquareAccept(String,double,long,double)')": [
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403
                    ],
                    "('org.apache.commons.math#TestUtils', 'assertChiSquareAccept(int,double,long,double)')": [
                        416,
                        417,
                        418,
                        419,
                        420,
                        421
                    ],
                    "('org.apache.commons.math#TestUtils', 'assertChiSquareAccept(double,double,long,double)')": [
                        433,
                        434,
                        435,
                        436,
                        437,
                        438
                    ]
                }
            }
        }
    },
    "edd22d7ad556db8cdce46ff9f3a7374c052b044e": {
        "authored_data": "2010 May 30 17:00",
        "commit.message": "Fixed javadoc typo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949535 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "24218a5278ca3d99c209efc990d16048e29c8536",
        "changes": {
            "src/main/java/org/apache/commons/math/distribution/IntegerDistribution.java": {
                "old": {
                    "(None, None)": [
                        66,
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        66,
                        67
                    ]
                }
            }
        }
    },
    "24218a5278ca3d99c209efc990d16048e29c8536": {
        "authored_data": "2010 May 29 18:15",
        "commit.message": "Fixed Levenberg-Marquardt optimizer that did not use the vectorial convergence checker.\nNow this optimizer can use either the general vectorial convergence checker or its own specialized convergence settings.\nMinor changes had to be introduced in the test data, they have been validated\nJIRA: MATH-362\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949433 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "24e05bf7e94edc4eca020a685010246b8b7788d1",
        "changes": {
            "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java": {
                "old": {
                    "(None, None)": [
                        37,
                        38
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        182,
                        191,
                        201
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        294,
                        404,
                        405,
                        406,
                        408
                    ]
                },
                "new": {
                    "(None, None)": [
                        37,
                        38,
                        39
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', None)": [
                        147,
                        155,
                        156,
                        157,
                        158,
                        166,
                        189,
                        190,
                        199,
                        200,
                        210,
                        211
                    ],
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizer', 'doOptimize')": [
                        248,
                        254,
                        306,
                        348,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        428,
                        429
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        488
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#LevenbergMarquardtOptimizerTest', 'testCircleFittingBadInit')": [
                        488
                    ]
                }
            },
            "src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java": {
                "old": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackFreudensteinRoth')": [
                        155,
                        156,
                        161,
                        162
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackJennrichSampson')": [
                        328
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        502,
                        503
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        564,
                        566,
                        567,
                        568,
                        569,
                        575,
                        576,
                        577,
                        580
                    ]
                },
                "new": {
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackFreudensteinRoth')": [
                        155,
                        156,
                        161,
                        162
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'testMinpackJennrichSampson')": [
                        328
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', 'minpackTest(MinpackFunction,boolean)')": [
                        502,
                        503
                    ],
                    "('org.apache.commons.math.optimization.general#MinpackTest', None)": [
                        564,
                        566,
                        567,
                        568,
                        569,
                        575
                    ]
                }
            }
        }
    },
    "24e05bf7e94edc4eca020a685010246b8b7788d1": {
        "authored_data": "2010 May 29 16:11",
        "commit.message": "removed unnecessary imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@949410 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Luc Maisonobe",
        "pcid": "055114a7964e394a5d01cbdd43dee7ddf13ceb01",
        "changes": {
            "src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24
                    ]
                }
            },
            "src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24
                    ]
                }
            }
        }
    },
    "055114a7964e394a5d01cbdd43dee7ddf13ceb01": {
        "authored_data": "2010 May 23 14:21",
        "commit.message": "Fixed javadoc typo.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@947418 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Phil Steitz",
        "pcid": "bb005b56ca0739c4c212804ba7a483c8164e78f1",
        "changes": {
            "src/test/java/org/apache/commons/math/random/RandomDataTest.java": {
                "old": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        371,
                        426
                    ]
                },
                "new": {
                    "('org.apache.commons.math.random#RandomDataTest', None)": [
                        371,
                        426
                    ]
                }
            }
        }
    }
}