{
    "d42b9286eb7a534f1b2b6243858ff7ef6fcac14c": {
        "authored_data": "2021 Sep 03 18:18",
        "commit.message": "[IO-727] FilenameUtils directoryContains() should handle files with the\nsame prefix #217.\n\nApply a modified PR #217 from trungPa to resolve conflicts.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "a873e46f90891bc7963133be8eac94107e5cfbb6",
        "changes": {
            "src/main/java/org/apache/commons/io/FilenameUtils.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'directoryContains(String,String)')": [
                        542,
                        543,
                        544,
                        552
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'isExtension(String,String)')": [
                        1238
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FilenameUtils', 'directoryContains(String,String)')": [
                        541,
                        549,
                        550,
                        551,
                        552
                    ],
                    "('org.apache.commons.io#FilenameUtils', None)": [
                        553,
                        554
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'isEmpty(String)')": [
                        555,
                        556
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'isExtension(String,String)')": [
                        1242
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FileUtilsDirectoryContainsTestCase.java": {
                "new": {
                    "('org.apache.commons.io#FileUtilsDirectoryContainsTestCase', 'testFileHavingSamePrefixBug')": [
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152
                    ],
                    "('org.apache.commons.io#FileUtilsDirectoryContainsTestCase', None)": [
                        153,
                        154,
                        155
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java": {
                "new": {
                    "('org.apache.commons.io#FilenameUtilsTestCase', None)": [
                        1187,
                        1188,
                        1189
                    ],
                    "('org.apache.commons.io#FilenameUtilsTestCase', 'testDirectoryContains')": [
                        1190,
                        1191,
                        1192,
                        1193,
                        1194,
                        1195,
                        1196,
                        1197,
                        1198,
                        1199,
                        1200,
                        1201,
                        1202
                    ],
                    "(None, None)": [
                        1203
                    ]
                }
            }
        }
    },
    "a873e46f90891bc7963133be8eac94107e5cfbb6": {
        "authored_data": "2021 Sep 03 18:06",
        "commit.message": "Minor cleanup.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "3418d095f20a856f9d4de5bb1c976a8104acde45",
        "changes": {
            "src/main/java/org/apache/commons/io/FileSystem.java": {
                "old": {
                    "(None, None)": [
                        137,
                        140
                    ]
                },
                "new": {
                    "(None, None)": [
                        137,
                        140
                    ]
                }
            }
        }
    },
    "3418d095f20a856f9d4de5bb1c976a8104acde45": {
        "authored_data": "2021 Sep 03 16:43",
        "commit.message": "Javadoc.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "a8184d6407bd49cb8f86680f4d906b1e4884c47b",
        "changes": {
            "src/main/java/org/apache/commons/io/FilenameUtils.java": {
                "old": {
                    "('org.apache.commons.io#FilenameUtils', None)": [
                        472,
                        478,
                        480,
                        482
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FilenameUtils', None)": [
                        456,
                        461,
                        466,
                        470,
                        476,
                        482,
                        484,
                        485,
                        487,
                        488,
                        489,
                        492
                    ]
                }
            }
        }
    },
    "a1fd31d3350350b54dcf4b6e35bcd19c0b2527d7": {
        "authored_data": "2021 Sep 03 16:04",
        "commit.message": "fix wrong usage of assertNotNull (#269)\n\nSignature of assertNoNull() is taking \"actual\" as first parameter:\r\n\r\n    public static void assertNotNull(Object actual, String message) {\r\n        AssertNotNull.assertNotNull(actual, message);\r\n    }\r\n\r\nSigned-off-by: Davide Angelocola <davide.angelocola@gmail.com>",
        "commit.author.name": "Davide Angelocola",
        "pcid": "1e01f7eb64a57cfd56dd9183ddca63a34b6925af",
        "changes": {
            "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.io#FileSystemUtilsTestCase', 'testGetFreeSpace_String')": [
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileSystemUtilsTestCase', 'testGetFreeSpace_String')": [
                        66
                    ]
                }
            }
        }
    },
    "1e01f7eb64a57cfd56dd9183ddca63a34b6925af": {
        "authored_data": "2021 Sep 03 14:17",
        "commit.message": "Use final and remove trailing whitespace.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "072fa707f7cd41a70bcec644e1b393e3955dcc75",
        "changes": {
            "src/main/java/org/apache/commons/io/UncheckedIOExceptions.java": {
                "old": {
                    "('org.apache.commons.io#UncheckedIOExceptions', None)": [
                        36,
                        50
                    ],
                    "('org.apache.commons.io#UncheckedIOExceptions', 'create(Object)')": [
                        40
                    ],
                    "('org.apache.commons.io#UncheckedIOExceptions', 'create(Object,IOException)')": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.io#UncheckedIOExceptions', None)": [
                        36,
                        50
                    ],
                    "('org.apache.commons.io#UncheckedIOExceptions', 'create(Object)')": [
                        40
                    ],
                    "('org.apache.commons.io#UncheckedIOExceptions', 'create(Object,IOException)')": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/file/PathUtils.java": {
                "old": {
                    "('org.apache.commons.io.file#PathUtils', None)": [
                        816
                    ],
                    "('org.apache.commons.io.file#PathUtils', 'newOutputStream(Path,boolean)')": [
                        828
                    ]
                },
                "new": {
                    "('org.apache.commons.io.file#PathUtils', None)": [
                        816
                    ],
                    "('org.apache.commons.io.file#PathUtils', 'newOutputStream(Path,boolean)')": [
                        828
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/BrokenInputStream.java": {
                "old": {
                    "('org.apache.commons.io.input#BrokenInputStream', None)": [
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#BrokenInputStream', None)": [
                        40
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java": {
                "old": {
                    "('org.apache.commons.io.output#FileWriterWithEncoding', None)": [
                        243,
                        253,
                        263,
                        274,
                        287,
                        298,
                        309
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#FileWriterWithEncoding', None)": [
                        243,
                        253,
                        263,
                        274,
                        287,
                        298,
                        309
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/output/UncheckedFilterWriter.java": {
                "old": {
                    "('org.apache.commons.io.output#UncheckedFilterWriter', None)": [
                        52
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'append(char)')": [
                        60,
                        63
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'append(CharSequence)')": [
                        72,
                        75
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'append(CharSequence,int,int)')": [
                        84,
                        87
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'close')": [
                        99
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'flush')": [
                        111
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'uncheck(IOException)')": [
                        116
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(char)')": [
                        124,
                        127
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(char,int,int)')": [
                        136,
                        139
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(int)')": [
                        148,
                        151
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(String)')": [
                        160,
                        163
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(String,int,int)')": [
                        172,
                        175
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#UncheckedFilterWriter', None)": [
                        52
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'append(char)')": [
                        60,
                        63
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'append(CharSequence)')": [
                        72,
                        75
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'append(CharSequence,int,int)')": [
                        84,
                        87
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'close')": [
                        99
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'flush')": [
                        111
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'uncheck(IOException)')": [
                        116
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(char)')": [
                        124,
                        127
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(char,int,int)')": [
                        136,
                        139
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(int)')": [
                        148,
                        151
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(String)')": [
                        160,
                        163
                    ],
                    "('org.apache.commons.io.output#UncheckedFilterWriter', 'write(String,int,int)')": [
                        172,
                        175
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/UncheckedIOExceptionsTest.java": {
                "old": {
                    "('org.apache.commons.io#UncheckedIOExceptionsTest', 'testCreate')": [
                        34
                    ],
                    "('org.apache.commons.io#UncheckedIOExceptionsTest', 'testCreateWithException')": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.io#UncheckedIOExceptionsTest', 'testCreate')": [
                        34
                    ],
                    "('org.apache.commons.io#UncheckedIOExceptionsTest', 'testCreateWithException')": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java": {
                "old": {
                    "('org.apache.commons.io.output#FileWriterWithEncodingTest', None)": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#FileWriterWithEncodingTest', None)": [
                        62
                    ]
                }
            }
        }
    },
    "072fa707f7cd41a70bcec644e1b393e3955dcc75": {
        "authored_data": "2021 Sep 03 13:54",
        "commit.message": "@SuppressWarnings and Javadoc.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "d75f7ebb92df6348117e8dd99683dac1dad07bb5",
        "changes": {
            "src/main/java/org/apache/commons/io/FileUtils.java": {
                "old": {
                    "('org.apache.commons.io#FileUtils', None)": [
                        2050
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileUtils', None)": [
                        2050,
                        2057
                    ]
                }
            }
        }
    },
    "086e34b9516beaffe82aed5d93da074ad7a3b1e3": {
        "authored_data": "2021 Sep 03 13:44",
        "commit.message": "IO-746: dropping unnecessary casts and conversions (#267)\n\nSigned-off-by: Davide Angelocola <davide.angelocola@gmail.com>",
        "commit.author.name": "Davide Angelocola",
        "pcid": "70f3ce0b23de3180cb7e821e6792f086616e951a",
        "changes": {
            "src/main/java/org/apache/commons/io/IOUtils.java": {
                "old": {
                    "('org.apache.commons.io#IOUtils', 'closeQuietly(Closeable)')": [
                        466
                    ]
                },
                "new": {
                    "('org.apache.commons.io#IOUtils', 'closeQuietly(Closeable)')": [
                        466
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.io#FilenameUtilsTestCase', 'testIsExtensionCollection')": [
                        1154,
                        1161,
                        1167,
                        1173,
                        1179
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FilenameUtilsTestCase', 'testIsExtensionCollection')": [
                        1154,
                        1161,
                        1167,
                        1173,
                        1179
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/IOUtilsCopyTestCase.java": {
                "old": {
                    "('org.apache.commons.io#IOUtilsCopyTestCase', 'testCopy_readerToAppendable_nullIn')": [
                        278
                    ]
                },
                "new": {
                    "('org.apache.commons.io#IOUtilsCopyTestCase', 'testCopy_readerToAppendable_nullIn')": [
                        278
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/IOUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.io#IOUtilsTestCase', 'testCloseQuietly_CloseableIOException')": [
                        395
                    ],
                    "('org.apache.commons.io#IOUtilsTestCase', 'testContentEqualsIgnoreEOL')": [
                        601
                    ]
                },
                "new": {
                    "('org.apache.commons.io#IOUtilsTestCase', 'testCloseQuietly_CloseableIOException')": [
                        395
                    ],
                    "('org.apache.commons.io#IOUtilsTestCase', 'testContentEqualsIgnoreEOL')": [
                        601
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testAnd2')": [
                        315
                    ],
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testFilterListNullParameters')": [
                        793,
                        801
                    ],
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testFilterSetNullParameters')": [
                        873,
                        881
                    ],
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testOr')": [
                        1358
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testAnd2')": [
                        315
                    ],
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testFilterListNullParameters')": [
                        793,
                        801
                    ],
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testFilterSetNullParameters')": [
                        873,
                        881
                    ],
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', 'testOr')": [
                        1358
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java": {
                "old": {
                    "('org.apache.commons.io.input#CharacterSetFilterReaderTest', 'testInputSize0FilterSize0')": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#CharacterSetFilterReaderTest', 'testInputSize0FilterSize0')": [
                        39
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/input/TailerTest.java": {
                "old": {
                    "('org.apache.commons.io.input#TailerTest', None)": [
                        438
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#TailerTest', None)": [
                        438
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/input/TeeInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadNothing')": [
                        57
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadOneByte')": [
                        63
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadEverything')": [
                        72
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadToArray')": [
                        83
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadToArrayWithOffset')": [
                        94
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testSkip')": [
                        103
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testMarkReset')": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadNothing')": [
                        57
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadOneByte')": [
                        63
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadEverything')": [
                        72
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadToArray')": [
                        83
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testReadToArrayWithOffset')": [
                        94
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testSkip')": [
                        103
                    ],
                    "('org.apache.commons.io.input#TeeInputStreamTest', 'testMarkReset')": [
                        115
                    ]
                }
            }
        }
    }
}