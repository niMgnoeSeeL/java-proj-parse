{
    "1170279dc85c2bbdea594b053c56b379a72a2104": {
        "authored_data": "2012 Mar 20 01:35",
        "commit.message": "Remove noisy and unnecessary parens. Especially painful in return statements: \"return (foo + bar);\" vs. \"return foo + bar;\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1302748 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gary D. Gregory",
        "pcid": "8965e5ef5854c86d1b7fb88dc4667ff117ae476f",
        "changes": {
            "src/main/java/org/apache/commons/io/DirectoryWalker.java": {
                "old": {
                    "('org.apache.commons.io#DirectoryWalker', None)": [
                        304,
                        305
                    ],
                    "('org.apache.commons.io#DirectoryWalker', 'walk(File,int,Collection)')": [
                        357
                    ]
                },
                "new": {
                    "('org.apache.commons.io#DirectoryWalker', None)": [
                        304,
                        305
                    ],
                    "('org.apache.commons.io#DirectoryWalker', 'walk(File,int,Collection)')": [
                        357
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/FileCleaningTracker.java": {
                "old": {
                    "('org.apache.commons.io#FileCleaningTracker', None)": [
                        259
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileCleaningTracker', None)": [
                        259
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/FileSystemUtils.java": {
                "old": {
                    "('org.apache.commons.io#FileSystemUtils', 'freeSpaceOS(String,int,boolean,long)')": [
                        264
                    ],
                    "('org.apache.commons.io#FileSystemUtils', 'freeSpaceUnix(String,boolean,boolean,long)')": [
                        393
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileSystemUtils', 'freeSpaceOS(String,int,boolean,long)')": [
                        264
                    ],
                    "('org.apache.commons.io#FileSystemUtils', 'freeSpaceUnix(String,boolean,boolean,long)')": [
                        393
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/FileUtils.java": {
                "old": {
                    "('org.apache.commons.io#FileUtils', 'listFiles(File,String,boolean)')": [
                        622
                    ],
                    "('org.apache.commons.io#FileUtils', 'doCopyFile(File,File,boolean)')": [
                        1075
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileUtils', 'listFiles(File,String,boolean)')": [
                        622
                    ],
                    "('org.apache.commons.io#FileUtils', 'doCopyFile(File,File,boolean)')": [
                        1075
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/FilenameUtils.java": {
                "old": {
                    "('org.apache.commons.io#FilenameUtils', 'isSeparator(char)')": [
                        149
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'normalizeNoEndSeparator(String,boolean)')": [
                        335
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'doNormalize(String,char,boolean)')": [
                        364,
                        416,
                        423
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'getPrefixLength(String)')": [
                        638,
                        646,
                        647,
                        664,
                        667,
                        668,
                        671
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'indexOfExtension(String)')": [
                        716
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'equals(String,String,boolean,IOCase)')": [
                        1117
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'isExtension(String,String)')": [
                        1150,
                        1172
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'isExtension(String,Collection)')": [
                        1199
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'splitOnTokens(String)')": [
                        1387
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FilenameUtils', 'isSeparator(char)')": [
                        149
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'normalizeNoEndSeparator(String,boolean)')": [
                        335
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'doNormalize(String,char,boolean)')": [
                        364,
                        416,
                        423
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'getPrefixLength(String)')": [
                        638,
                        646,
                        647,
                        664,
                        667,
                        668,
                        671
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'indexOfExtension(String)')": [
                        716
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'equals(String,String,boolean,IOCase)')": [
                        1117
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'isExtension(String,String)')": [
                        1150,
                        1172
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'isExtension(String,Collection)')": [
                        1199
                    ],
                    "('org.apache.commons.io#FilenameUtils', 'splitOnTokens(String)')": [
                        1387
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/HexDump.java": {
                "old": {
                    "('org.apache.commons.io#HexDump', 'dump(byte,long,OutputStream,int)')": [
                        76,
                        103
                    ],
                    "('org.apache.commons.io#HexDump', 'dump(StringBuilder,long)')": [
                        142
                    ],
                    "('org.apache.commons.io#HexDump', 'dump(StringBuilder,byte)')": [
                        156
                    ]
                },
                "new": {
                    "('org.apache.commons.io#HexDump', 'dump(byte,long,OutputStream,int)')": [
                        76,
                        103
                    ],
                    "('org.apache.commons.io#HexDump', 'dump(StringBuilder,long)')": [
                        142
                    ],
                    "('org.apache.commons.io#HexDump', 'dump(StringBuilder,byte)')": [
                        156
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/IOUtils.java": {
                "old": {
                    "('org.apache.commons.io#IOUtils', 'toByteArray(InputStream,int)')": [
                        483
                    ],
                    "('org.apache.commons.io#IOUtils', 'contentEquals(InputStream,InputStream)')": [
                        1753
                    ],
                    "('org.apache.commons.io#IOUtils', 'contentEquals(Reader,Reader)')": [
                        1790
                    ],
                    "('org.apache.commons.io#IOUtils', 'contentEqualsIgnoreEOL(Reader,Reader)')": [
                        1828
                    ],
                    "('org.apache.commons.io#IOUtils', 'read(Reader,char,int,int)')": [
                        1981
                    ],
                    "('org.apache.commons.io#IOUtils', 'read(InputStream,byte,int,int)')": [
                        2026
                    ]
                },
                "new": {
                    "('org.apache.commons.io#IOUtils', 'toByteArray(InputStream,int)')": [
                        483
                    ],
                    "('org.apache.commons.io#IOUtils', 'contentEquals(InputStream,InputStream)')": [
                        1753
                    ],
                    "('org.apache.commons.io#IOUtils', 'contentEquals(Reader,Reader)')": [
                        1790
                    ],
                    "('org.apache.commons.io#IOUtils', 'contentEqualsIgnoreEOL(Reader,Reader)')": [
                        1828
                    ],
                    "('org.apache.commons.io#IOUtils', 'read(Reader,char,int,int)')": [
                        1981
                    ],
                    "('org.apache.commons.io#IOUtils', 'read(InputStream,byte,int,int)')": [
                        2026
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/comparator/DirectoryFileComparator.java": {
                "old": {
                    "('org.apache.commons.io.comparator#DirectoryFileComparator', 'compare(File,File)')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.io.comparator#DirectoryFileComparator', 'compare(File,File)')": [
                        63
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/filefilter/DelegateFileFilter.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#DelegateFileFilter', 'toString')": [
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#DelegateFileFilter', 'toString')": [
                        104
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#EmptyFileFilter', 'accept(File)')": [
                        79,
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#EmptyFileFilter', 'accept(File)')": [
                        79,
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#NameFileFilter', None)": [
                        73,
                        105,
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#NameFileFilter', None)": [
                        73,
                        105,
                        132
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#PrefixFileFilter', None)": [
                        76,
                        110,
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#PrefixFileFilter', None)": [
                        76,
                        110,
                        139
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#RegexFileFilter', 'accept(File,String)')": [
                        119
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#RegexFileFilter', 'accept(File,String)')": [
                        119
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#SuffixFileFilter', None)": [
                        77,
                        111,
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#SuffixFileFilter', None)": [
                        77,
                        111,
                        140
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#WildcardFileFilter', None)": [
                        80,
                        112,
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#WildcardFileFilter', None)": [
                        80,
                        112,
                        139
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/BOMInputStream.java": {
                "old": {
                    "('org.apache.commons.io.input#BOMInputStream', 'hasBOM')": [
                        140
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'hasBOM(ByteOrderMark)')": [
                        157
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'getBOMCharsetName')": [
                        202
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'readFirstBytes')": [
                        215
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'read')": [
                        263
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'read(byte,int,int)')": [
                        279,
                        288
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'mark(int)')": [
                        311
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'skip(long)')": [
                        338
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#BOMInputStream', 'hasBOM')": [
                        140
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'hasBOM(ByteOrderMark)')": [
                        157
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'getBOMCharsetName')": [
                        202
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'readFirstBytes')": [
                        215
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'read')": [
                        263
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'read(byte,int,int)')": [
                        279,
                        288
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'mark(int)')": [
                        311
                    ],
                    "('org.apache.commons.io.input#BOMInputStream', 'skip(long)')": [
                        338
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/CharSequenceReader.java": {
                "old": {
                    "('org.apache.commons.io.input#CharSequenceReader', None)": [
                        43
                    ],
                    "('org.apache.commons.io.input#CharSequenceReader', 'read(char,int,int)')": [
                        107
                    ],
                    "('org.apache.commons.io.input#CharSequenceReader', 'skip(long)')": [
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#CharSequenceReader', None)": [
                        43
                    ],
                    "('org.apache.commons.io.input#CharSequenceReader', 'read(char,int,int)')": [
                        107
                    ],
                    "('org.apache.commons.io.input#CharSequenceReader', 'skip(long)')": [
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/NullInputStream.java": {
                "old": {
                    "('org.apache.commons.io.input#NullInputStream', 'reset')": [
                        259
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#NullInputStream', 'reset')": [
                        259
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/NullReader.java": {
                "old": {
                    "('org.apache.commons.io.input#NullReader', 'reset')": [
                        242
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#NullReader', 'reset')": [
                        242
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java": {
                "old": {
                    "('org.apache.commons.io.input#ReversedLinesFileReader', None)": [
                        236
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#ReversedLinesFileReader', None)": [
                        236
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/SwappedDataInputStream.java": {
                "old": {
                    "('org.apache.commons.io.input#SwappedDataInputStream', 'readBoolean')": [
                        58
                    ],
                    "('org.apache.commons.io.input#SwappedDataInputStream', 'readFully(byte,int,int)')": [
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#SwappedDataInputStream', 'readBoolean')": [
                        58
                    ],
                    "('org.apache.commons.io.input#SwappedDataInputStream', 'readFully(byte,int,int)')": [
                        139
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/input/XmlStreamReader.java": {
                "old": {
                    "('org.apache.commons.io.input#XmlStreamReader', 'doLenientDetection(String,XmlStreamReaderException)')": [
                        480
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'calculateRawEncoding(String,String,String)')": [
                        500
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'calculateHttpEncoding(String,String,String,String,boolean)')": [
                        579
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'getContentTypeEncoding(String)')": [
                        641,
                        642
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'isAppXml(String)')": [
                        720
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'isTextXml(String)')": [
                        734
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#XmlStreamReader', 'doLenientDetection(String,XmlStreamReaderException)')": [
                        480
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'calculateRawEncoding(String,String,String)')": [
                        500
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'calculateHttpEncoding(String,String,String,String,boolean)')": [
                        579
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'getContentTypeEncoding(String)')": [
                        641,
                        642
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'isAppXml(String)')": [
                        720
                    ],
                    "('org.apache.commons.io.input#XmlStreamReader', 'isTextXml(String)')": [
                        734
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/monitor/FileAlterationObserver.java": {
                "old": {
                    "('org.apache.commons.io.monitor#FileAlterationObserver', 'listFiles(File)')": [
                        431
                    ]
                },
                "new": {
                    "('org.apache.commons.io.monitor#FileAlterationObserver', 'listFiles(File)')": [
                        431
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/monitor/FileEntry.java": {
                "old": {
                    "('org.apache.commons.io.monitor#FileEntry', 'refresh(File)')": [
                        104,
                        105,
                        106,
                        109,
                        112
                    ]
                },
                "new": {
                    "('org.apache.commons.io.monitor#FileEntry', 'refresh(File)')": [
                        104,
                        105,
                        106,
                        109,
                        112
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/output/StringBuilderWriter.java": {
                "old": {
                    "('org.apache.commons.io.output#StringBuilderWriter', None)": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#StringBuilderWriter', None)": [
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/io/output/ThresholdingOutputStream.java": {
                "old": {
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'isThresholdExceeded')": [
                        202
                    ],
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'checkThreshold(int)')": [
                        221
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'isThresholdExceeded')": [
                        202
                    ],
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'checkThreshold(int)')": [
                        221
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/DirectoryWalkerTestCase.java": {
                "old": {
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilter')": [
                        95
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterAndLimitD')": [
                        138
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterDirAndFile1')": [
                        149
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterDirAndFile2')": [
                        160
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterDirAndFile3')": [
                        172
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterString')": [
                        370
                    ]
                },
                "new": {
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilter')": [
                        95
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterAndLimitD')": [
                        138
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterDirAndFile1')": [
                        149
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterDirAndFile2')": [
                        160
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterDirAndFile3')": [
                        172
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCase', 'testFilterString')": [
                        370
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java": {
                "old": {
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilter')": [
                        97
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterAndLimitD')": [
                        140
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterDirAndFile1')": [
                        151
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterDirAndFile2')": [
                        162
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterDirAndFile3')": [
                        174
                    ]
                },
                "new": {
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilter')": [
                        97
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterAndLimitD')": [
                        140
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterDirAndFile1')": [
                        151
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterDirAndFile2')": [
                        162
                    ],
                    "('org.apache.commons.io#DirectoryWalkerTestCaseJava4', 'testFilterDirAndFile3')": [
                        174
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FileSystemUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.io#FileSystemUtilsTestCase', 'testGetFreeSpaceOS_String_Unix')": [
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileSystemUtilsTestCase', 'testGetFreeSpaceOS_String_Unix')": [
                        151
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FileUtilsCleanDirectoryTestCase.java": {
                "old": {
                    "('org.apache.commons.io#FileUtilsCleanDirectoryTestCase', 'chmod(File,int,boolean)')": [
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileUtilsCleanDirectoryTestCase', 'chmod(File,int,boolean)')": [
                        150
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FileUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.io#FileUtilsTestCase', 'testByteCountToDisplaySize')": [
                        322
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testCopyDirectoryToGrandChild')": [
                        1130,
                        1131
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testTouch')": [
                        1335,
                        1336
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testListFiles')": [
                        1368
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testIterateFiles')": [
                        1431
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileUtilsTestCase', 'testByteCountToDisplaySize')": [
                        322
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testCopyDirectoryToGrandChild')": [
                        1130,
                        1131
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testTouch')": [
                        1335,
                        1336
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testListFiles')": [
                        1368
                    ],
                    "('org.apache.commons.io#FileUtilsTestCase', 'testIterateFiles')": [
                        1431
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FilenameUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.io#FilenameUtilsTestCase', None)": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FilenameUtilsTestCase', None)": [
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/FilenameUtilsWildcardTestCase.java": {
                "old": {
                    "('org.apache.commons.io#FilenameUtilsWildcardTestCase', None)": [
                        26
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FilenameUtilsWildcardTestCase', None)": [
                        26
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/IOCaseTestCase.java": {
                "old": {
                    "('org.apache.commons.io#IOCaseTestCase', None)": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.io#IOCaseTestCase', None)": [
                        34
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/IOUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.io#IOUtilsTestCase', None)": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.io#IOUtilsTestCase', None)": [
                        56
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/LineIteratorTestCase.java": {
                "old": {
                    "('org.apache.commons.io#LineIteratorTestCase', 'testFiltering(List,Reader)')": [
                        405
                    ]
                },
                "new": {
                    "('org.apache.commons.io#LineIteratorTestCase', 'testFiltering(List,Reader)')": [
                        405
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java": {
                "old": {
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', None)": [
                        46
                    ]
                },
                "new": {
                    "('org.apache.commons.io.filefilter#FileFilterTestCase', None)": [
                        46
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/input/NullInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.io.input#NullInputStreamTest', 'testRead')": [
                        56
                    ],
                    "('org.apache.commons.io.input#NullInputStreamTest', 'testMarkAndReset')": [
                        169,
                        177
                    ],
                    "('org.apache.commons.io.input#NullInputStreamTest', None)": [
                        248
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#NullInputStreamTest', 'testRead')": [
                        56
                    ],
                    "('org.apache.commons.io.input#NullInputStreamTest', 'testMarkAndReset')": [
                        169,
                        177
                    ],
                    "('org.apache.commons.io.input#NullInputStreamTest', None)": [
                        248
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/input/NullReaderTest.java": {
                "old": {
                    "('org.apache.commons.io.input#NullReaderTest', 'testMarkAndReset')": [
                        166,
                        174
                    ],
                    "('org.apache.commons.io.input#NullReaderTest', None)": [
                        245
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#NullReaderTest', 'testMarkAndReset')": [
                        166,
                        174
                    ],
                    "('org.apache.commons.io.input#NullReaderTest', None)": [
                        245
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java": {
                "old": {
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testAlternateDefaultEncoding(String,String,String,String,String)')": [
                        246,
                        253
                    ],
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testHttpValid(String,String,String,String)')": [
                        265
                    ],
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testHttpInvalid(String,String,String,String)')": [
                        281
                    ],
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testHttpLenient(String,String,String,String,String)')": [
                        295
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testAlternateDefaultEncoding(String,String,String,String,String)')": [
                        246,
                        253
                    ],
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testHttpValid(String,String,String,String)')": [
                        265
                    ],
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testHttpInvalid(String,String,String,String)')": [
                        281
                    ],
                    "('org.apache.commons.io.input#XmlStreamReaderTest', '_testHttpLenient(String,String,String,String,String)')": [
                        295
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java": {
                "old": {
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', None)": [
                        308
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'doLenientDetection(String,XmlStreamReaderException)')": [
                        380
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'calculateRawEncoding(String,String,String,InputStream)')": [
                        445
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'calculateHttpEncoding(String,String,String,String,String,InputStream,boolean)')": [
                        501
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'getContentTypeMime(String)')": [
                        537
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'getContentTypeEncoding(String)')": [
                        555,
                        556
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'isAppXml(String)')": [
                        679,
                        680
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'isTextXml(String)')": [
                        687,
                        688
                    ]
                },
                "new": {
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', None)": [
                        308
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'doLenientDetection(String,XmlStreamReaderException)')": [
                        380
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'calculateRawEncoding(String,String,String,InputStream)')": [
                        445
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'calculateHttpEncoding(String,String,String,String,String,InputStream,boolean)')": [
                        501
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'getContentTypeMime(String)')": [
                        537
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'getContentTypeEncoding(String)')": [
                        555,
                        556
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'isAppXml(String)')": [
                        679,
                        680
                    ],
                    "('org.apache.commons.io.input.compatibility#XmlStreamReader', 'isTextXml(String)')": [
                        687,
                        688
                    ]
                }
            },
            "src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java": {
                "old": {
                    "('org.apache.commons.io.output#XmlStreamWriterTest', 'checkXmlWriter(String,String,String)')": [
                        72
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#XmlStreamWriterTest', 'checkXmlWriter(String,String,String)')": [
                        72
                    ]
                }
            }
        }
    },
    "8965e5ef5854c86d1b7fb88dc4667ff117ae476f": {
        "authored_data": "2012 Mar 20 01:32",
        "commit.message": "Tests that {@link ByteOrderMark#getCharsetName()} can be loaded as a {@link java.nio.charset.Charset} as advertised.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1302747 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gary D. Gregory",
        "pcid": "22d7a1573aab096fc9b1567b0763546922423da0",
        "changes": {
            "src/test/java/org/apache/commons/io/ByteOrderMarkTestCase.java": {
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('org.apache.commons.io#ByteOrderMarkTestCase', None)": [
                        45,
                        46,
                        47
                    ],
                    "('org.apache.commons.io#ByteOrderMarkTestCase', 'testConstantCharsetNames')": [
                        48,
                        49,
                        50,
                        51
                    ]
                }
            }
        }
    }
}