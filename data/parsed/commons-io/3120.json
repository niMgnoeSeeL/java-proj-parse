{
    "4d5c7d78b4b43639a9a215ffa48c9cbf03645dd5": {
        "authored_data": "2007 Jul 03 23:01",
        "commit.message": "Javadoc: Missing tag for return type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@553012 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Gary D. Gregory",
        "pcid": "186225b7d611ab2252024d4a38d8fb1091b7ebab",
        "changes": {
            "src/java/org/apache/commons/io/FileCleaner.java": {
                "new": {
                    "('org.apache.commons.io#FileCleaner', None)": [
                        148,
                        149
                    ]
                }
            }
        }
    },
    "186225b7d611ab2252024d4a38d8fb1091b7ebab": {
        "authored_data": "2007 Jul 02 20:47",
        "commit.message": "Merged in changes from 1.3 branch.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@552590 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Jochen Wiedmann",
        "pcid": "c6b82c0d77466f62370b6b31d58f7bb1eb6a5285",
        "changes": {
            "src/java/org/apache/commons/io/FileCleaningTracker.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        274
                    ],
                    "('org.apache.commons.io#FileCleaningTracker', None)": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        54,
                        58,
                        62,
                        66,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271
                    ],
                    "('org.apache.commons.io#FileCleaningTracker', 'readResolve')": [
                        272,
                        273
                    ]
                },
                "new": {
                    "('org.apache.commons.io#FileCleaningTracker', None)": [
                        43,
                        47,
                        51,
                        55,
                        59
                    ]
                }
            }
        }
    },
    "c6b82c0d77466f62370b6b31d58f7bb1eb6a5285": {
        "authored_data": "2007 May 22 19:39",
        "commit.message": "IO-121 - change the new method name from reset() to resetByteCount() to make it more obvious what its function is\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@540714 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Niall Pemberton",
        "pcid": "7461d3dba020ab4904aac0d4bbc03db8eb78d059",
        "changes": {
            "src/java/org/apache/commons/io/output/ThresholdingOutputStream.java": {
                "old": {
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'reset')": [
                        229
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'resetByteCount')": [
                        229
                    ]
                }
            }
        }
    },
    "7461d3dba020ab4904aac0d4bbc03db8eb78d059": {
        "authored_data": "2007 May 22 16:55",
        "commit.message": "IO-121 - Add a reset() method to ThresholdingOutputStream which sets the count of the bytes written back to zero - thanks to Tom Nichols for the patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@540644 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Niall Pemberton",
        "pcid": "4c9e36c05ceddbd2e0db62fc5d214738df4fd732",
        "changes": {
            "src/java/org/apache/commons/io/output/ThresholdingOutputStream.java": {
                "old": {
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'checkThreshold(int)')": [
                        221
                    ]
                },
                "new": {
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'checkThreshold(int)')": [
                        220
                    ],
                    "('org.apache.commons.io.output#ThresholdingOutputStream', None)": [
                        225,
                        226,
                        227,
                        228,
                        233
                    ],
                    "('org.apache.commons.io.output#ThresholdingOutputStream', 'reset')": [
                        229,
                        230,
                        231,
                        232
                    ]
                }
            }
        }
    },
    "6bc05de06fffc5a2f2a67e4e8526bc6d7d0939b4": {
        "authored_data": "2007 May 18 23:37",
        "commit.message": "Applying Hiroshi's test from IO-117 with my fix. Fixes negative number possibilities in EndianUtils.readSwappedUnsignedInteger()\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/io/trunk@539632 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Henri Yandell",
        "pcid": "663372845b665ea4895be4b09ccd896c2616cfdd",
        "changes": {
            "src/java/org/apache/commons/io/EndianUtils.java": {
                "old": {
                    "('org.apache.commons.io#EndianUtils', 'readSwappedUnsignedInteger(byte,int)')": [
                        185,
                        186,
                        187,
                        188
                    ],
                    "('org.apache.commons.io#EndianUtils', 'readSwappedUnsignedInteger(InputStream)')": [
                        371,
                        372,
                        373,
                        374
                    ]
                },
                "new": {
                    "('org.apache.commons.io#EndianUtils', 'readSwappedUnsignedInteger(byte,int)')": [
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191
                    ],
                    "('org.apache.commons.io#EndianUtils', 'readSwappedUnsignedInteger(InputStream)')": [
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380
                    ]
                }
            },
            "src/test/org/apache/commons/io/EndianUtilsTest.java": {
                "new": {
                    "('org.apache.commons.io#EndianUtilsTest', None)": [
                        266
                    ],
                    "('org.apache.commons.io#EndianUtilsTest', 'testUnsignedOverrun')": [
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276
                    ],
                    "(None, None)": [
                        277,
                        278
                    ]
                }
            }
        }
    }
}