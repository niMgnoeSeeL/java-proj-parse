{
    "ec97b35a84a8760004328a29295938e2b0cc6162": {
        "authored_data": "2022 May 31 15:30",
        "commit.message": "Remove noisy inline comments.",
        "commit.author.name": "Gary Gregory",
        "pcid": "01d64e408830c9b09280a5d24115f739fcf25199",
        "changes": {
            "src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngImageParser', 'getBufferedImage(ByteSource,PngImagingParameters)')": [
                        523,
                        524
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffImageParser', 'getImageInfo(ByteSource,TiffImagingParameters)')": [
                        181,
                        182,
                        231,
                        232,
                        243,
                        244
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderStrips', 'interpretStrip(ImageBuilder,byte,int,int)')": [
                        216
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffOutputDirectory.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.write#TiffOutputDirectory', 'getOutputItems(TiffOutputSummary)')": [
                        691,
                        692,
                        713,
                        714,
                        724,
                        725,
                        734,
                        735,
                        742,
                        743,
                        746,
                        747
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/xmp/XmpUpdateTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.xmp#XmpUpdateTest', 'test')": [
                        70,
                        71
                    ]
                }
            }
        }
    },
    "01d64e408830c9b09280a5d24115f739fcf25199": {
        "authored_data": "2022 May 21 20:13",
        "commit.message": "Remove unused private method",
        "commit.author.name": "Gary Gregory",
        "pcid": "8b87066d253ab38a3adad16a3169d8dcfae07f3f",
        "changes": {
            "src/main/java/org/apache/commons/imaging/color/ColorConversions.java": {
                "old": {
                    "('org.apache.commons.imaging.color#ColorConversions', 'cube(double)')": [
                        516,
                        517
                    ],
                    "('org.apache.commons.imaging.color#ColorConversions', None)": [
                        518,
                        519
                    ]
                }
            }
        }
    },
    "8b87066d253ab38a3adad16a3169d8dcfae07f3f": {
        "authored_data": "2022 May 21 20:09",
        "commit.message": "Use try-with-resources",
        "commit.author.name": "Gary Gregory",
        "pcid": "cd376285df41f18eafb6f96dc00aaa00d695923c",
        "changes": {
            "src/test/java/org/apache/commons/imaging/common/itu_t4/T4_T6_TablesTest.java": {
                "old": {
                    "('org.apache.commons.imaging.common.itu_t4#T4_T6_TablesTest', None)": [
                        25,
                        27
                    ],
                    "('org.apache.commons.imaging.common.itu_t4#T4_T6_TablesTest', 'testCreatesT4_T6_TablesTakingNoArgumentsAndCallsWriteBits')": [
                        28,
                        29,
                        30,
                        32,
                        33
                    ],
                    "(None, None)": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common.itu_t4#T4_T6_TablesTest', None)": [
                        25,
                        27
                    ],
                    "('org.apache.commons.imaging.common.itu_t4#T4_T6_TablesTest', 'testCreatesT4_T6_TablesTakingNoArgumentsAndCallsWriteBits')": [
                        28,
                        29,
                        30,
                        32,
                        33
                    ],
                    "(None, None)": [
                        34,
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/examples/tiff/SurveyTiffFile.java": {
                "old": {
                    "('org.apache.commons.imaging.examples.tiff#SurveyTiffFile', 'surveyFile(File,boolean)')": [
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.examples.tiff#SurveyTiffFile', 'surveyFile(File,boolean)')": [
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.imaging.examples.tiff#SurveyTiffFile', None)": [
                        161
                    ]
                }
            }
        }
    },
    "cd376285df41f18eafb6f96dc00aaa00d695923c": {
        "authored_data": "2022 May 21 20:06",
        "commit.message": "Removed unused exceptions from method signatures in tests.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "76521b669785ec4cc428587f4d30bacc7a42f13a",
        "changes": {
            "src/test/java/org/apache/commons/imaging/formats/bmp/BmpBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.bmp#BmpBaseTest', 'isBmp(File)')": [
                        31,
                        32
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.bmp#BmpBaseTest', 'isBmp(File)')": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/bmp/BmpReadTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.bmp#BmpReadTest', 'testNegativePaletteLength')": [
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.bmp#BmpReadTest', 'testNegativePaletteLength')": [
                        82
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/dcx/DcxBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.dcx#DcxBaseTest', 'isDcx(File)')": [
                        32,
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.dcx#DcxBaseTest', 'isDcx(File)')": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/gif/GifBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.gif#GifBaseTest', 'isGif(File)')": [
                        36,
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.gif#GifBaseTest', 'isGif(File)')": [
                        36
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/icns/IcnsBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.icns#IcnsBaseTest', 'isIcns(File)')": [
                        32,
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.icns#IcnsBaseTest', 'isIcns(File)')": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/jpeg/JpegBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegBaseTest', 'isJpeg(File)')": [
                        32,
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegBaseTest', 'isJpeg(File)')": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/pam/PamBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.pam#PamBaseTest', 'isPam(File)')": [
                        32,
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.pam#PamBaseTest', 'isPam(File)')": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/png/PngBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngBaseTest', 'isPng(File)')": [
                        32,
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.png#PngBaseTest', 'isPng(File)')": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/psd/PsdBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.psd#PsdBaseTest', 'isPsd(File)')": [
                        30,
                        31
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.psd#PsdBaseTest', 'isPsd(File)')": [
                        30
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/rgbe/RgbeBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.rgbe#RgbeBaseTest', 'isRgbe(File)')": [
                        30,
                        31
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.rgbe#RgbeBaseTest', None)": [
                        30
                    ],
                    "('org.apache.commons.imaging.formats.rgbe#RgbeBaseTest', 'isRgbe(File)')": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffBaseTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffBaseTest', 'isTiff(File)')": [
                        32,
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffBaseTest', 'isTiff(File)')": [
                        32
                    ]
                }
            }
        }
    },
    "76521b669785ec4cc428587f4d30bacc7a42f13a": {
        "authored_data": "2022 May 21 20:02",
        "commit.message": "Remove redundant type casts.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "6978d609ae3c2f74058f3049ff4354629c98063f",
        "changes": {
            "src/main/java/org/apache/commons/imaging/common/RationalNumber.java": {
                "old": {
                    "('org.apache.commons.imaging.common#RationalNumber', 'valueOf(double)')": [
                        289,
                        290,
                        291,
                        292
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common#RationalNumber', 'valueOf(double)')": [
                        289,
                        290
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffRasterDataInt.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getData')": [
                        283
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getData')": [
                        283
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderStrips', 'readRasterDataFloat(Rectangle)')": [
                        405
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderStrips', 'readRasterDataFloat(Rectangle)')": [
                        405
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/internal/Util.java": {
                "old": {
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(Predicate,Supplier)')": [
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(Predicate,Supplier)')": [
                        49
                    ]
                }
            }
        }
    },
    "6978d609ae3c2f74058f3049ff4354629c98063f": {
        "authored_data": "2022 May 21 19:57",
        "commit.message": "Remove unused exception and simpler flow.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "714418e859300c84b4066eccd9e9a411bff2eee9",
        "changes": {
            "src/main/java/org/apache/commons/imaging/formats/pcx/PcxWriter.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.imaging.formats.pcx#PcxWriter', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.pcx#PcxWriter', None)": [
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffImageParser', 'checkForSubImage(TiffImagingParameters)')": [
                        505,
                        506,
                        518,
                        519
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImageParser', None)": [
                        520
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffImageParser', 'checkForSubImage(TiffImagingParameters)')": [
                        505,
                        517,
                        518
                    ]
                }
            }
        }
    },
    "714418e859300c84b4066eccd9e9a411bff2eee9": {
        "authored_data": "2022 May 21 19:52",
        "commit.message": "Clean ups.\n\n- Use the compact array declaration notation\n- Use final where possible (this was done already but not everywhere)\n- Remove unused imports\n- Remove some useless parentheses\n- Refactor some duplicate code",
        "commit.author.name": "Gary Gregory",
        "pcid": "9e562545757ee49102935482dfbcdb0849c4d4ab",
        "changes": {
            "src/main/java/org/apache/commons/imaging/ImageFormats.java": {
                "old": {
                    "(None, None)": [
                        48
                    ]
                },
                "new": {
                    "(None, None)": [
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/ImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging#ImageParser', 'writeImage(BufferedImage,OutputStream,T)')": [
                        575
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging#ImageParser', 'writeImage(BufferedImage,OutputStream,T)')": [
                        575
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/Imaging.java": {
                "old": {
                    "('org.apache.commons.imaging#Imaging', 'guessFormat(ByteSource)')": [
                        291
                    ],
                    "('org.apache.commons.imaging#Imaging', 'getBufferedImage(InputStream,String)')": [
                        796
                    ],
                    "('org.apache.commons.imaging#Imaging', 'writeImage(BufferedImage,OutputStream,ImageFormat)')": [
                        915
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging#Imaging', 'guessFormat(ByteSource)')": [
                        291
                    ],
                    "('org.apache.commons.imaging#Imaging', 'getBufferedImage(InputStream,String)')": [
                        796
                    ],
                    "('org.apache.commons.imaging#Imaging', 'writeImage(BufferedImage,OutputStream,ImageFormat)')": [
                        915
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/ImagingConstants.java": {
                "old": {
                    "('org.apache.commons.imaging#ImagingConstants', None)": [
                        31
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging#ImagingConstants', None)": [
                        31
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/ImagingParameters.java": {
                "old": {
                    "('org.apache.commons.imaging#ImagingParameters', 'setStrict(boolean)')": [
                        61
                    ],
                    "('org.apache.commons.imaging#ImagingParameters', 'setFileName(String)')": [
                        69
                    ],
                    "('org.apache.commons.imaging#ImagingParameters', 'setBufferedImageFactory(BufferedImageFactory)')": [
                        77
                    ],
                    "('org.apache.commons.imaging#ImagingParameters', 'setPixelDensity(PixelDensity)')": [
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging#ImagingParameters', 'setStrict(boolean)')": [
                        61
                    ],
                    "('org.apache.commons.imaging#ImagingParameters', 'setFileName(String)')": [
                        69
                    ],
                    "('org.apache.commons.imaging#ImagingParameters', 'setBufferedImageFactory(BufferedImageFactory)')": [
                        77
                    ],
                    "('org.apache.commons.imaging#ImagingParameters', 'setPixelDensity(PixelDensity)')": [
                        85
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/common/ByteConversions.java": {
                "old": {
                    "('org.apache.commons.imaging.common#ByteConversions', 'toRationals(byte,ByteOrder,boolean)')": [
                        395
                    ],
                    "('org.apache.commons.imaging.common#ByteConversions', 'toRationals(byte,int,int,ByteOrder,boolean)')": [
                        404
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common#ByteConversions', 'toRationals(byte,ByteOrder,boolean)')": [
                        395
                    ],
                    "('org.apache.commons.imaging.common#ByteConversions', 'toRationals(byte,int,int,ByteOrder,boolean)')": [
                        404
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/common/RationalNumber.java": {
                "old": {
                    "('org.apache.commons.imaging.common#RationalNumber', None)": [
                        84
                    ],
                    "('org.apache.commons.imaging.common#RationalNumber', 'negate')": [
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common#RationalNumber', None)": [
                        84
                    ],
                    "('org.apache.commons.imaging.common#RationalNumber', 'negate')": [
                        152
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/common/XmpImagingParameters.java": {
                "old": {
                    "('org.apache.commons.imaging.common#XmpImagingParameters', 'setXmpXml(String)')": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common#XmpImagingParameters', 'setXmpXml(String)')": [
                        34
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/common/mylzw/MyLzwDecompressor.java": {
                "old": {
                    "('org.apache.commons.imaging.common.mylzw#MyLzwDecompressor', 'decompress(InputStream,int)')": [
                        167,
                        168,
                        175,
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common.mylzw#MyLzwDecompressor', 'decompress(InputStream,int)')": [
                        180
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/bmp/BmpImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.bmp#BmpImageParser', 'writeImage(BufferedImage,OutputStream,BmpImagingParameters)')": [
                        657
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.bmp#BmpImageParser', 'writeImage(BufferedImage,OutputStream,BmpImagingParameters)')": [
                        657
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/gif/GifImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.gif#GifImageParser', 'writeImage(BufferedImage,OutputStream,GifImagingParameters)')": [
                        855
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.gif#GifImageParser', 'writeImage(BufferedImage,OutputStream,GifImagingParameters)')": [
                        855
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'getImageInfo(ByteSource,IcnsImagingParameters)')": [
                        84
                    ],
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'getImageSize(ByteSource,IcnsImagingParameters)')": [
                        101
                    ],
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'writeImage(BufferedImage,OutputStream,IcnsImagingParameters)')": [
                        250
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'getImageInfo(ByteSource,IcnsImagingParameters)')": [
                        84
                    ],
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'getImageSize(ByteSource,IcnsImagingParameters)')": [
                        101
                    ],
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'writeImage(BufferedImage,OutputStream,IcnsImagingParameters)')": [
                        250
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg.decoder#JpegDecoder', 'visitSOS(int,byte,byte)')": [
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg.decoder#JpegDecoder', 'visitSOS(int,byte,byte)')": [
                        118
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParser', 'writeIPTCBlock(List)')": [
                        434
                    ],
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParser', 'findCharset(byte)')": [
                        488,
                        489,
                        494,
                        497,
                        499,
                        500,
                        501
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParser', 'writeIPTCBlock(List)')": [
                        434
                    ],
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParser', 'findCharset(byte)')": [
                        488,
                        489,
                        494,
                        497,
                        499,
                        500,
                        501
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/pcx/PcxImagingParameters.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.pcx#PcxImagingParameters', 'setPlanes(int)')": [
                        34
                    ],
                    "('org.apache.commons.imaging.formats.pcx#PcxImagingParameters', 'setBitDepth(int)')": [
                        42
                    ],
                    "('org.apache.commons.imaging.formats.pcx#PcxImagingParameters', 'setCompression(int)')": [
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.pcx#PcxImagingParameters', 'setPlanes(int)')": [
                        34
                    ],
                    "('org.apache.commons.imaging.formats.pcx#PcxImagingParameters', 'setBitDepth(int)')": [
                        42
                    ],
                    "('org.apache.commons.imaging.formats.pcx#PcxImagingParameters', 'setCompression(int)')": [
                        50
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/png/PngImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngImageParser', 'getBufferedImage(ByteSource,PngImagingParameters)')": [
                        489,
                        581
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.png#PngImageParser', 'getBufferedImage(ByteSource,PngImagingParameters)')": [
                        489,
                        581
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/png/PngImagingParameters.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setBitDepth(byte)')": [
                        62
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setForceIndexedColor(boolean)')": [
                        70
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setForceTrueColor(boolean)')": [
                        78
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setPhysicalScale(PhysicalScale)')": [
                        86
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setTextChunks(List)')": [
                        94
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setPredictorEnabled(boolean)')": [
                        117
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setBitDepth(byte)')": [
                        62
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setForceIndexedColor(boolean)')": [
                        70
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setForceTrueColor(boolean)')": [
                        78
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setPhysicalScale(PhysicalScale)')": [
                        86
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setTextChunks(List)')": [
                        94
                    ],
                    "('org.apache.commons.imaging.formats.png#PngImagingParameters', 'setPredictorEnabled(boolean)')": [
                        117
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/png/PngWriter.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngWriter', 'getBitDepth(PngColorType,PngImagingParameters)')": [
                        296
                    ],
                    "('org.apache.commons.imaging.formats.png#PngWriter', 'writeImage(BufferedImage,OutputStream,PngImagingParameters)')": [
                        334,
                        470
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.png#PngWriter', 'getBitDepth(PngColorType,PngImagingParameters)')": [
                        296
                    ],
                    "('org.apache.commons.imaging.formats.png#PngWriter', 'writeImage(BufferedImage,OutputStream,PngImagingParameters)')": [
                        334,
                        470
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/pnm/PamFileInfo.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.pnm#PamFileInfo', None)": [
                        119
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.pnm#PamFileInfo', None)": [
                        119
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/pnm/PnmImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.pnm#PnmImageParser', 'writeImage(BufferedImage,OutputStream,PnmImagingParameters)')": [
                        320
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.pnm#PnmImageParser', 'writeImage(BufferedImage,OutputStream,PnmImagingParameters)')": [
                        320
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/pnm/PnmImagingParameters.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.pnm#PnmImagingParameters', 'setRawBits(boolean)')": [
                        38
                    ],
                    "('org.apache.commons.imaging.formats.pnm#PnmImagingParameters', 'setSubtype(ImageFormats)')": [
                        46
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.pnm#PnmImagingParameters', 'setRawBits(boolean)')": [
                        38
                    ],
                    "('org.apache.commons.imaging.formats.pnm#PnmImagingParameters', 'setSubtype(ImageFormats)')": [
                        46
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/psd/ImageResourceType.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.psd#ImageResourceType', None)": [
                        26
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.psd#ImageResourceType', None)": [
                        26
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/rgbe/RgbeInfo.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.rgbe#RgbeInfo', None)": [
                        35,
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.rgbe#RgbeInfo', None)": [
                        35,
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffImageMetadata.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffImageMetadata', 'findField(TagInfo,boolean)')": [
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffImageMetadata', 'findField(TagInfo,boolean)')": [
                        245,
                        246,
                        247
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffImagingParameters.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setReadThumbnails(boolean)')": [
                        106
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setOutputSet(TiffOutputSet)')": [
                        125
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setSubImage(int,int,int,int)')": [
                        146
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setCustomPhotometricInterpreter(PhotometricInterpreter)')": [
                        225
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setCompression(Integer)')": [
                        233
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setLzwCompressionBlockSize(Integer)')": [
                        241
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setT4Options(Integer)')": [
                        249
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setT6Options(Integer)')": [
                        257
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setReadThumbnails(boolean)')": [
                        106
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setOutputSet(TiffOutputSet)')": [
                        125
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setSubImage(int,int,int,int)')": [
                        146
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setCustomPhotometricInterpreter(PhotometricInterpreter)')": [
                        225
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setCompression(Integer)')": [
                        233
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setLzwCompressionBlockSize(Integer)')": [
                        241
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setT4Options(Integer)')": [
                        249
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffImagingParameters', 'setT6Options(Integer)')": [
                        257
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffRasterData.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterData', None)": [
                        58
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterData', 'checkCoordinatesAndComputeIndex(int,int,int)')": [
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterData', None)": [
                        58
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterData', 'checkCoordinatesAndComputeIndex(int,int,int)')": [
                        74
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffRasterDataFloat.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', None)": [
                        66,
                        96
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setValue(int,int,float)')": [
                        126
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setValue(int,int,int,float)')": [
                        141,
                        142
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getValue(int,int)')": [
                        156
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getValue(int,int,int)')": [
                        171,
                        172
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setIntValue(int,int,int)')": [
                        185
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setIntValue(int,int,int,int)')": [
                        199,
                        200
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getIntValue(int,int)')": [
                        213
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getIntValue(int,int,int)')": [
                        227,
                        228
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', None)": [
                        66,
                        96
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setValue(int,int,float)')": [
                        126
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setValue(int,int,int,float)')": [
                        141,
                        142
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getValue(int,int)')": [
                        156
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getValue(int,int,int)')": [
                        171,
                        172
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setIntValue(int,int,int)')": [
                        185
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'setIntValue(int,int,int,int)')": [
                        199,
                        200
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getIntValue(int,int)')": [
                        213
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataFloat', 'getIntValue(int,int,int)')": [
                        227,
                        228
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffRasterDataInt.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', None)": [
                        64,
                        94
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setValue(int,int,float)')": [
                        124
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setValue(int,int,int,float)')": [
                        139,
                        140
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getValue(int,int)')": [
                        154
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getValue(int,int,int)')": [
                        169,
                        170
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setIntValue(int,int,int)')": [
                        183
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setIntValue(int,int,int,int)')": [
                        197,
                        198
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getIntValue(int,int)')": [
                        211
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getIntValue(int,int,int)')": [
                        225,
                        226
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', None)": [
                        64,
                        94
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setValue(int,int,float)')": [
                        124
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setValue(int,int,int,float)')": [
                        139,
                        140
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getValue(int,int)')": [
                        154
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getValue(int,int,int)')": [
                        169,
                        170
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setIntValue(int,int,int)')": [
                        183
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'setIntValue(int,int,int,int)')": [
                        197,
                        198
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getIntValue(int,int)')": [
                        211
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataInt', 'getIntValue(int,int,int)')": [
                        225,
                        226
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/TiffTags.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffTags', 'makeMergedTagList')": [
                        57,
                        58
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffTags', 'makeTagMap(List)')": [
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffTags', 'makeMergedTagList')": [
                        57
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffTags', 'makeTagMap(List)')": [
                        86
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/constants/GpsTagConstants.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.constants#GpsTagConstants', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.constants#GpsTagConstants', None)": [
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderStrips.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderStrips', 'readRasterDataFloat(Rectangle)')": [
                        376
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderStrips', 'readRasterDataInt(Rectangle)')": [
                        429
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderStrips', 'readRasterDataFloat(Rectangle)')": [
                        376
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderStrips', 'readRasterDataInt(Rectangle)')": [
                        429
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/DataReaderTiled.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderTiled', 'interpretTile(ImageBuilder,byte,int,int,int,int)')": [
                        110
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderTiled', 'readRasterDataFloat(Rectangle)')": [
                        316
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderTiled', 'readRasterDataInt(Rectangle)')": [
                        368
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderTiled', 'interpretTile(ImageBuilder,byte,int,int,int,int)')": [
                        110
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderTiled', 'readRasterDataFloat(Rectangle)')": [
                        316
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#DataReaderTiled', 'readRasterDataInt(Rectangle)')": [
                        368
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/datareaders/ImageDataReader.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#ImageDataReader', 'unpackFloatingPointSamples(int,int,int,byte,int,ByteOrder)')": [
                        469,
                        470
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#ImageDataReader', 'unpackIntSamples(int,int,int,byte,int,int,ByteOrder)')": [
                        634,
                        638
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#ImageDataReader', 'transferBlockToRaster(int,int,int,int,int,int,int,int,int,int,float)')": [
                        699,
                        772,
                        787,
                        788
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.datareaders#ImageDataReader', 'unpackFloatingPointSamples(int,int,int,byte,int,ByteOrder)')": [
                        469,
                        470
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#ImageDataReader', 'unpackIntSamples(int,int,int,byte,int,int,ByteOrder)')": [
                        634,
                        638
                    ],
                    "('org.apache.commons.imaging.formats.tiff.datareaders#ImageDataReader', 'transferBlockToRaster(int,int,int,int,int,int,int,int,int,int,float)')": [
                        699,
                        772,
                        787,
                        788
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/fieldtypes/FieldTypeRational.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.fieldtypes#FieldTypeRational', 'getValue(TiffField)')": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.fieldtypes#FieldTypeRational', 'getValue(TiffField)')": [
                        34
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterBase.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.write#TiffImageWriterBase', 'writeImage(BufferedImage,OutputStream,TiffImagingParameters)')": [
                        303,
                        305,
                        306,
                        307,
                        342
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.write#TiffImageWriterBase', 'writeImage(BufferedImage,OutputStream,TiffImagingParameters)')": [
                        303,
                        305,
                        306,
                        307,
                        342
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/tiff/write/TiffImageWriterLossless.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.write#TiffImageWriterLossless', 'analyzeOldTiff(Map)')": [
                        113,
                        118,
                        119,
                        120,
                        121
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.write#TiffImageWriterLossless', 'analyzeOldTiff(Map)')": [
                        117,
                        118
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/wbmp/WbmpImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.wbmp#WbmpImageParser', 'writeImage(BufferedImage,OutputStream,WbmpImagingParameters)')": [
                        221
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.wbmp#WbmpImageParser', 'writeImage(BufferedImage,OutputStream,WbmpImagingParameters)')": [
                        221
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/xbm/XbmImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.xbm#XbmImageParser', 'writeImage(BufferedImage,OutputStream,XbmImagingParameters)')": [
                        345
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.xbm#XbmImageParser', 'writeImage(BufferedImage,OutputStream,XbmImagingParameters)')": [
                        345
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/formats/xpm/XpmImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.xpm#XpmImageParser', 'populatePaletteEntry(PaletteEntry,String,String)')": [
                        382,
                        383,
                        384,
                        385
                    ],
                    "('org.apache.commons.imaging.formats.xpm#XpmImageParser', 'writeImage(BufferedImage,OutputStream,XpmImagingParameters)')": [
                        650
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.xpm#XpmImageParser', 'populatePaletteEntry(PaletteEntry,String,String)')": [
                        382
                    ],
                    "('org.apache.commons.imaging.formats.xpm#XpmImageParser', 'writeImage(BufferedImage,OutputStream,XpmImagingParameters)')": [
                        647
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/internal/Util.java": {
                "old": {
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(ImageFormat)')": [
                        38,
                        39
                    ],
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(String)')": [
                        42,
                        43
                    ],
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(Predicate,Supplier)')": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(ImageFormat)')": [
                        38,
                        39
                    ],
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(String)')": [
                        42,
                        43
                    ],
                    "('org.apache.commons.imaging.internal#Util', 'getImageParser(Predicate,Supplier)')": [
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/imaging/palette/PaletteFactory.java": {
                "old": {
                    "('org.apache.commons.imaging.palette#PaletteFactory', 'divideSubset2(int,ColorSpaceSubset,int)')": [
                        223,
                        224,
                        225,
                        241,
                        242,
                        243,
                        244
                    ],
                    "('org.apache.commons.imaging.palette#PaletteFactory', 'divide(List,int,int,int)')": [
                        280,
                        281,
                        282,
                        283
                    ],
                    "('org.apache.commons.imaging.palette#PaletteFactory', 'makeQuantizedRgbPalette(BufferedImage,int)')": [
                        331
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.palette#PaletteFactory', 'divideSubset2(int,ColorSpaceSubset,int)')": [
                        223,
                        224,
                        240
                    ],
                    "('org.apache.commons.imaging.palette#PaletteFactory', 'divide(List,int,int,int)')": [
                        276
                    ],
                    "('org.apache.commons.imaging.palette#PaletteFactory', 'makeQuantizedRgbPalette(BufferedImage,int)')": [
                        324
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/common/RationalNumberTest.java": {
                "old": {
                    "('org.apache.commons.imaging.common#RationalNumberTest', 'testSpecialRationalNumber')": [
                        129
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common#RationalNumberTest', 'testSpecialRationalNumber')": [
                        129
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/common/bytesource/ByteSourceImageTest.java": {
                "old": {
                    "('org.apache.commons.imaging.common.bytesource#ByteSourceImageTest', 'checkGetImageInfo(File,byte)')": [
                        175
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.common.bytesource#ByteSourceImageTest', 'checkGetImageInfo(File,byte)')": [
                        175
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/examples/tiff/ExampleReadFloatingPointData.java": {
                "old": {
                    "(None, None)": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/examples/tiff/ReadTagsAndImages.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'main(String)')": [
                        75
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', None)": [
                        159,
                        165,
                        181,
                        212,
                        215,
                        217,
                        218,
                        219,
                        220,
                        221,
                        459,
                        461,
                        462,
                        470,
                        471
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'summarizeGeoTiffTags(PrintStream,TiffDirectory)')": [
                        234,
                        238,
                        241,
                        242,
                        254,
                        263,
                        265,
                        278,
                        287,
                        289,
                        291,
                        301,
                        310,
                        322,
                        323,
                        324,
                        325,
                        369,
                        371,
                        379,
                        380,
                        385,
                        391,
                        406,
                        410
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'interpretElements(GeoKey,int,int,int,double,String)')": [
                        498,
                        499,
                        568,
                        598
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'extractAscii(String,int,int)')": [
                        616
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'extractDouble(double,int,int)')": [
                        635,
                        637
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'main(String)')": [
                        74
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', None)": [
                        158,
                        164,
                        180,
                        211,
                        214,
                        216,
                        217,
                        218,
                        219,
                        220,
                        458,
                        460,
                        461,
                        469,
                        470
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'summarizeGeoTiffTags(PrintStream,TiffDirectory)')": [
                        233,
                        237,
                        240,
                        241,
                        253,
                        262,
                        264,
                        277,
                        286,
                        288,
                        290,
                        300,
                        309,
                        321,
                        322,
                        323,
                        324,
                        368,
                        370,
                        378,
                        379,
                        384,
                        390,
                        405,
                        409
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'interpretElements(GeoKey,int,int,int,double,String)')": [
                        497,
                        498,
                        567,
                        597
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'extractAscii(String,int,int)')": [
                        615
                    ],
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', 'extractDouble(double,int,int)')": [
                        634,
                        636
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/jpeg/JpegReadTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegReadTest', 'test(File)')": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegReadTest', 'test(File)')": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg.decoder#JpegInputStreamTest', 'testNextBitThrowsImageReadExceptionTwo')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg.decoder#JpegInputStreamTest', 'testNextBitThrowsImageReadExceptionTwo')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/jpeg/exif/ExifRewriteTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/jpeg/exif/MicrosoftTagTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.imaging.formats.jpeg.exif#MicrosoftTagTest', 'testWrite')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg.exif#MicrosoftTagTest', 'testWrite')": [
                        62
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParserTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParserTest', 'testSkipBlockTypes')": [
                        74,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParserTest', 'testEncodingSupport')": [
                        96,
                        97,
                        98,
                        99,
                        102,
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParserTest', 'testSkipBlockTypes')": [
                        74
                    ],
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParserTest', 'testEncodingSupport')": [
                        93,
                        94,
                        95,
                        96,
                        98,
                        100,
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/png/PngWithInvalidPngChunkSizeTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngWithInvalidPngChunkSizeTest', 'testPngWithInvalidPngChunkSize')": [
                        42
                    ],
                    "('org.apache.commons.imaging.formats.png#PngWithInvalidPngChunkSizeTest', 'testPngWithInvalidNegativePngChunkSize')": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.png#PngWithInvalidPngChunkSizeTest', 'testPngWithInvalidPngChunkSize')": [
                        42
                    ],
                    "('org.apache.commons.imaging.formats.png#PngWithInvalidPngChunkSizeTest', 'testPngWithInvalidNegativePngChunkSize')": [
                        56
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/png/PngWritePredictorTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngWritePredictorTest', 'populateARGB')": [
                        58,
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.imaging.formats.png#PngWritePredictorTest', 'testWriteWithPredictor')": [
                        80,
                        90,
                        93,
                        95,
                        104,
                        108,
                        125,
                        129
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.png#PngWritePredictorTest', 'populateARGB')": [
                        58,
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.imaging.formats.png#PngWritePredictorTest', 'testWriteWithPredictor')": [
                        80,
                        90,
                        93,
                        95,
                        104,
                        108,
                        125,
                        129
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/png/PngWriteReadTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.png#PngWriteReadTest', 'writeAndReadMultipleEXt(int)')": [
                        208
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.png#PngWriteReadTest', 'writeAndReadMultipleEXt(int)')": [
                        208
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffAlphaRoundTripTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffAlphaRoundTripTest', 'testExtraSamples')": [
                        149,
                        152,
                        177,
                        187,
                        200,
                        201,
                        203,
                        205,
                        215,
                        216
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffAlphaRoundTripTest', 'testExtraSamples')": [
                        149,
                        152,
                        177,
                        187,
                        200,
                        201,
                        203,
                        205,
                        215,
                        216
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffCcittTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffFloatingPointMultivariableTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', None)": [
                        65,
                        68
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'test')": [
                        82,
                        99,
                        112,
                        115,
                        116,
                        117
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'writeFile(ByteOrder,boolean,boolean,TiffPlanarConfiguration)')": [
                        129,
                        178,
                        179
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'getBytesForOutput32(int,int,ByteOrder,boolean,TiffPlanarConfiguration)')": [
                        242,
                        243,
                        287
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'applyTilePredictor(int,int,byte)')": [
                        317,
                        326,
                        327,
                        330,
                        332,
                        333,
                        334,
                        335
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', None)": [
                        65,
                        68
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'test')": [
                        82,
                        99,
                        112,
                        115,
                        116,
                        117
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'writeFile(ByteOrder,boolean,boolean,TiffPlanarConfiguration)')": [
                        129,
                        178,
                        179
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'getBytesForOutput32(int,int,ByteOrder,boolean,TiffPlanarConfiguration)')": [
                        242,
                        243,
                        287
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffFloatingPointMultivariableTest', 'applyTilePredictor(int,int,byte)')": [
                        317,
                        326,
                        327,
                        330,
                        332,
                        333,
                        334,
                        335
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffRasterDataIntTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataIntTest', 'testGetValue2')": [
                        112,
                        114
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataIntTest', 'testGetDataType')": [
                        186
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataIntTest', 'testGetValue2')": [
                        112,
                        114
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataIntTest', 'testGetDataType')": [
                        186
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffRasterDataTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataTest', 'testGetData')": [
                        168
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataTest', 'testGetDataType')": [
                        193
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataTest', 'testGetData')": [
                        168
                    ],
                    "('org.apache.commons.imaging.formats.tiff#TiffRasterDataTest', 'testGetDataType')": [
                        193
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffReadWriteTagsTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffReadWriteTagsTest', 'testReadWriteTags')": [
                        52,
                        53,
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffReadWriteTagsTest', 'testReadWriteTags')": [
                        52,
                        53,
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffRoundTripInt32Test.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRoundTripInt32Test', 'test')": [
                        85,
                        86,
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRoundTripInt32Test', 'test')": [
                        85,
                        86,
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRoundtripTest', 'test')": [
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffRoundtripTest', 'test')": [
                        52
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/TiffShortIntRoundTripTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff#TiffShortIntRoundTripTest', 'test')": [
                        85,
                        86,
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff#TiffShortIntRoundTripTest', 'test')": [
                        85,
                        86,
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/photometricinterpreters/PhotometricInterpreterLogLuvTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters#PhotometricInterpreterLogLuvTest', None)": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters#PhotometricInterpreterLogLuvTest', None)": [
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/photometricinterpreters/PhotometricInterpreterRgbTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters#PhotometricInterpreterRgbTest', None)": [
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters#PhotometricInterpreterRgbTest', None)": [
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/tiff/photometricinterpreters/floatingpoint/PhotometricInterpreterFloatTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint#PhotometricInterpreterFloatTest', 'testGetMaxXY')": [
                        164
                    ],
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint#PhotometricInterpreterFloatTest', 'testGetMinXY')": [
                        184
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint#PhotometricInterpreterFloatTest', 'testGetMaxXY')": [
                        164
                    ],
                    "('org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint#PhotometricInterpreterFloatTest', 'testGetMinXY')": [
                        184
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/formats/xmp/XmpUpdateTest.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.xmp#XmpUpdateTest', 'test')": [
                        72,
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.xmp#XmpUpdateTest', 'test')": [
                        72,
                        73
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/roundtrip/BitmapRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.imaging.roundtrip#BitmapRoundtripTest', None)": [
                        29
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.roundtrip#BitmapRoundtripTest', None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/roundtrip/FormatInfo.java": {
                "old": {
                    "('org.apache.commons.imaging.roundtrip#FormatInfo', None)": [
                        30,
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.roundtrip#FormatInfo', None)": [
                        30,
                        45
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/roundtrip/FullColorRoundtrip.java": {
                "old": {
                    "('org.apache.commons.imaging.roundtrip#FullColorRoundtrip', None)": [
                        29
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.roundtrip#FullColorRoundtrip', None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/roundtrip/GrayscaleRountripTest.java": {
                "old": {
                    "('org.apache.commons.imaging.roundtrip#GrayscaleRountripTest', None)": [
                        29
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.roundtrip#GrayscaleRountripTest', None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/roundtrip/LimitedColorRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.imaging.roundtrip#LimitedColorRoundtripTest', None)": [
                        29
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.roundtrip#LimitedColorRoundtripTest', None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/roundtrip/PixelDensityRoundtrip.java": {
                "old": {
                    "('org.apache.commons.imaging.roundtrip#PixelDensityRoundtrip', 'testPixelDensityRoundtrip(FormatInfo)')": [
                        51
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.roundtrip#PixelDensityRoundtrip', 'testPixelDensityRoundtrip(FormatInfo)')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/roundtrip/RoundtripBase.java": {
                "old": {
                    "('org.apache.commons.imaging.roundtrip#RoundtripBase', 'roundtrip(FormatInfo,BufferedImage,String,boolean)')": [
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.roundtrip#RoundtripBase', 'roundtrip(FormatInfo,BufferedImage,String,boolean)')": [
                        45
                    ]
                }
            }
        }
    },
    "9e562545757ee49102935482dfbcdb0849c4d4ab": {
        "authored_data": "2022 May 21 19:32",
        "commit.message": "[IMAGING-335] NullPointerException in App2Segment.getIccBytes when\nparsing a broken JPEG file",
        "commit.author.name": "Gary Gregory",
        "pcid": "12be4daa3eb7eb140add818ec79ff7726c00fc50",
        "changes": {
            "src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegImageParser', 'assembleSegments(List,boolean)')": [
                        257
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegImageParser', 'assembleSegments(List,boolean)')": [
                        257,
                        258,
                        259
                    ]
                }
            }
        }
    },
    "12be4daa3eb7eb140add818ec79ff7726c00fc50": {
        "authored_data": "2022 May 21 19:30",
        "commit.message": "[IMAGING-335] NullPointerException in App2Segment.getIccBytes when\nparsing a broken JPEG file",
        "commit.author.name": "Gary Gregory",
        "pcid": "797becc6c8708c07f64e453f294fc4361ba53d43",
        "changes": {
            "src/main/java/org/apache/commons/imaging/formats/jpeg/segments/App2Segment.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg.segments#App2Segment', 'getIccBytes')": [
                        90
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg.segments#App2Segment', 'getIccBytes')": [
                        90
                    ]
                }
            }
        }
    },
    "797becc6c8708c07f64e453f294fc4361ba53d43": {
        "authored_data": "2022 May 21 19:21",
        "commit.message": "Javadoc: Don't use FQCN in throws clause.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "f73671e6aee96901d495281b2acea62faae4fac5",
        "changes": {
            "src/test/java/org/apache/commons/imaging/examples/tiff/ExampleReadFloatingPointData.java": {
                "old": {
                    "('org.apache.commons.imaging.examples.tiff#ExampleReadFloatingPointData', None)": [
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.examples.tiff#ExampleReadFloatingPointData', None)": [
                        68
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/examples/tiff/ReadAndRenderFloatingPoint.java": {
                "old": {
                    "('org.apache.commons.imaging.examples.tiff#ReadAndRenderFloatingPoint', None)": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.examples.tiff#ReadAndRenderFloatingPoint', None)": [
                        60
                    ]
                }
            },
            "src/test/java/org/apache/commons/imaging/examples/tiff/ReadTagsAndImages.java": {
                "old": {
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', None)": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.examples.tiff#ReadTagsAndImages', None)": [
                        60
                    ]
                }
            }
        }
    }
}