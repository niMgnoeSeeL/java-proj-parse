{
    "3fedc1074013b05751530b8bfbc4e14e17dabaa3": {
        "authored_data": "2018 Apr 20 15:15",
        "commit.message": "add size guard against corrupted icns files\n\n(cherry picked from commit 6ee36f1c6d72522537ac7f77fa0cb957bed05be7)\n",
        "commit.author.name": "Gregory.Shrago",
        "pcid": "0644f1c44ca3cb2ac64c45db750e8fb72dfb8199",
        "changes": {
            "src/main/java/org/apache/commons/imaging/formats/icns/IcnsImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'readIcnsElement(InputStream)')": [
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201
                    ],
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'readImage(ByteSource)')": [
                        226
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'readIcnsElement(InputStream,int)')": [
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196
                    ],
                    "('org.apache.commons.imaging.formats.icns#IcnsImageParser', 'readImage(ByteSource)')": [
                        221
                    ]
                }
            }
        }
    },
    "7524bed7a5232212b3c4a68d45c783293dbc4dfe": {
        "authored_data": "2020 Jan 11 21:16",
        "commit.message": "[IMAGING-246]: Correct logic in JpegImageParser to prevent a null photoshop metadata.\n\nThe old code had a bug in the logic where if we had a first App13 segment with data, followed by a second App13 segment with null data, then the photoshop metadata would be set to null.\n",
        "commit.author.name": "Bruno P. Kinoshita",
        "pcid": "946a080e2c84ef37044caacaf8b9092da7868906",
        "changes": {
            "src/main/java/org/apache/commons/imaging/formats/jpeg/JpegImageParser.java": {
                "old": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegImageParser', 'getPhotoshopMetadata(ByteSource,Map)')": [
                        601,
                        602,
                        603,
                        604,
                        605,
                        606
                    ]
                },
                "new": {
                    "('org.apache.commons.imaging.formats.jpeg#JpegImageParser', 'getPhotoshopMetadata(ByteSource,Map)')": [
                        601,
                        602,
                        603,
                        604,
                        605,
                        606
                    ]
                }
            }
        }
    },
    "946a080e2c84ef37044caacaf8b9092da7868906": {
        "authored_data": "2020 Jan 11 21:07",
        "commit.message": "[IMAGING-246]: Skip platform-specific Photoshop JPEG metadata (as per specification: 1084, 1085, 1086, 1087)\n",
        "commit.author.name": "Bruno P. Kinoshita",
        "pcid": "9565ae4a198b9938801fde6c88921ee5f8bfaa05",
        "changes": {
            "src/main/java/org/apache/commons/imaging/formats/jpeg/iptc/IptcParser.java": {
                "new": {
                    "(None, None)": [
                        34,
                        46
                    ],
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParser', None)": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66
                    ],
                    "('org.apache.commons.imaging.formats.jpeg.iptc#IptcParser', 'parseAllBlocks(byte,boolean)')": [
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306
                    ]
                }
            }
        }
    },
    "9565ae4a198b9938801fde6c88921ee5f8bfaa05": {
        "authored_data": "2020 Jan 11 21:06",
        "commit.message": "[IMAGING-246] Add functions to search for quads\n",
        "commit.author.name": "Bruno P. Kinoshita",
        "pcid": "7c5ba7472786dafc78f039228113c23a52f4b3ce",
        "changes": {
            "src/main/java/org/apache/commons/imaging/common/BinaryFunctions.java": {
                "new": {
                    "('org.apache.commons.imaging.common#BinaryFunctions', None)": [
                        273,
                        274,
                        275,
                        276,
                        277,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        313,
                        314
                    ],
                    "('org.apache.commons.imaging.common#BinaryFunctions', 'quadsToByteArray(int)')": [
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284
                    ],
                    "('org.apache.commons.imaging.common#BinaryFunctions', 'searchQuad(int,InputStream)')": [
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312
                    ]
                }
            }
        }
    }
}