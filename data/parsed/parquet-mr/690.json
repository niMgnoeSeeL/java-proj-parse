{
    "36a02dc549f32433d7329444455dbb1be2e67f20": {
        "authored_data": "2015 Mar 04 20:35",
        "commit.message": "PARQUET-188: Change column ordering to match the field order.\n\nThis was the behavior before the V2 pages were added.\n\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #129 from rdblue/PARQUET-188-fix-column-metadata-order and squashes the following commits:\n\n3c9fa5d [Ryan Blue] PARQUET-188: Change column ordering to match the field order.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "c82f703768eb8a122546de23e412a037aa1770b2",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/ColumnChunkPageWriteStore.java": {
                "old": {
                    "('parquet.hadoop#ColumnChunkPageWriteStore', 'flushToFileWriter(ParquetFileWriter)')": [
                        219
                    ]
                },
                "new": {
                    "(None, None)": [
                        39
                    ],
                    "('parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        207,
                        210
                    ],
                    "('parquet.hadoop#ColumnChunkPageWriteStore', 'flushToFileWriter(ParquetFileWriter)')": [
                        222,
                        223
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/TestColumnChunkPageWriteStore.java": {
                "old": {
                    "('parquet.hadoop#TestColumnChunkPageWriteStore', 'test')": [
                        54,
                        62,
                        63,
                        64,
                        67,
                        78,
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25,
                        26,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        45,
                        48,
                        49,
                        50,
                        51,
                        66,
                        67,
                        68,
                        184
                    ],
                    "('parquet.hadoop#TestColumnChunkPageWriteStore', None)": [
                        72,
                        73,
                        74,
                        75,
                        76,
                        79,
                        80,
                        149,
                        179,
                        180,
                        181
                    ],
                    "('parquet.hadoop#TestColumnChunkPageWriteStore', 'initConfiguration')": [
                        77,
                        78
                    ],
                    "('parquet.hadoop#TestColumnChunkPageWriteStore', 'test')": [
                        92,
                        109
                    ],
                    "('parquet.hadoop#TestColumnChunkPageWriteStore', 'testColumnOrderV1')": [
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178
                    ],
                    "('parquet.hadoop#TestColumnChunkPageWriteStore', 'compressor(CompressionCodecName)')": [
                        182,
                        183
                    ]
                }
            }
        }
    },
    "c82f703768eb8a122546de23e412a037aa1770b2": {
        "authored_data": "2015 Mar 04 20:26",
        "commit.message": "PARQUET-192: Fix map null encoding\n\nThis depends on PARQUET-191 for the correct schema representation.\n\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #127 from rdblue/PARQUET-192-fix-map-null-encoding and squashes the following commits:\n\nfffde82 [Ryan Blue] PARQUET-192: Fix parquet-avro maps with null values.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "f1b54876ab8893a5d9c0e3d7c1a9c884e683dc8a",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroWriteSupport.java": {
                "old": {
                    "(None, None)": [
                        26,
                        30,
                        31
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeMap(GroupType,Schema,Map)')": [
                        135,
                        140,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156
                    ]
                },
                "new": {
                    "('parquet.avro#AvroWriteSupport', None)": [
                        46
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeMap(GroupType,Schema,Map)')": [
                        133,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestReadWrite.java": {
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.avro#TestReadWrite', None)": [
                        104,
                        105,
                        106,
                        135,
                        136,
                        137
                    ],
                    "('parquet.avro#TestReadWrite', 'testMapWithNulls')": [
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134
                    ],
                    "('parquet.avro#TestReadWrite', 'testMapRequiredValueWithNull')": [
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ]
                }
            }
        }
    },
    "f1b54876ab8893a5d9c0e3d7c1a9c884e683dc8a": {
        "authored_data": "2015 Mar 04 20:11",
        "commit.message": "PARQUET-191: Fix map Type to Avro Schema conversion.\n\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #126 from rdblue/PARQUET-191-fix-map-value-conversion and squashes the following commits:\n\n33f6bbc [Ryan Blue] PARQUET-191: Fix map Type to Avro Schema conversion.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "4f87e0f483ed76a885c228c6ab75249f25041081",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        566,
                        567
                    ]
                },
                "new": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        566,
                        567
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroSchemaConverter.java": {
                "old": {
                    "('parquet.avro#AvroSchemaConverter', 'convertFields(String,List)')": [
                        192,
                        193,
                        194,
                        195,
                        196
                    ],
                    "('parquet.avro#AvroSchemaConverter', 'convertField(Type)')": [
                        284
                    ]
                },
                "new": {
                    "('parquet.avro#AvroSchemaConverter', 'convertFields(String,List)')": [
                        192
                    ],
                    "('parquet.avro#AvroSchemaConverter', 'convertField(Type)')": [
                        280,
                        281,
                        282,
                        283,
                        284
                    ],
                    "('parquet.avro#AvroSchemaConverter', None)": [
                        300
                    ],
                    "('parquet.avro#AvroSchemaConverter', 'optional(Schema)')": [
                        301,
                        302,
                        303,
                        304,
                        305
                    ],
                    "(None, None)": [
                        306
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestAvroSchemaConverter.java": {
                "old": {
                    "('parquet.avro#TestAvroSchemaConverter', 'testOptionalFields')": [
                        176
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testUnionOfTwoTypes')": [
                        193
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'optional(Schema)')": [
                        230,
                        231
                    ]
                },
                "new": {
                    "('parquet.avro#TestAvroSchemaConverter', 'testAllTypesParquetToAvro')": [
                        151
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testOptionalFields')": [
                        177,
                        181
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', None)": [
                        182,
                        183,
                        184
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testOptionalMapValue')": [
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testUnionOfTwoTypes')": [
                        213,
                        214
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testArrayOfOptionalRecords')": [
                        240
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'optional(Schema)')": [
                        252,
                        253,
                        254
                    ]
                }
            }
        }
    },
    "4f87e0f483ed76a885c228c6ab75249f25041081": {
        "authored_data": "2015 Feb 26 21:40",
        "commit.message": "PARQUET-190: fix an inconsistent Javadoc comment of ReadSupport.prepareForRead\n\nReadSupport.prepareForRead does not return RecordConsumer but RecordMaterializer\n\nAuthor: choplin <choplin.choplin@gmail.com>\n\nCloses #125 from choplin/fix-javadoc-comment and squashes the following commits:\n\nc3574f3 [choplin] fix an inconsistent Javadoc comment of ReadSupport.prepareForRead\n",
        "commit.author.name": "choplin",
        "pcid": "f48bca0510703b0673709b10a806a9d54894a999",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/api/ReadSupport.java": {
                "old": {
                    "('parquet.hadoop.api#ReadSupport', None)": [
                        92,
                        98
                    ]
                },
                "new": {
                    "('parquet.hadoop.api#ReadSupport', None)": [
                        92,
                        98
                    ]
                }
            }
        }
    },
    "f48bca0510703b0673709b10a806a9d54894a999": {
        "authored_data": "2015 Feb 10 07:07",
        "commit.message": "PARQUET-164: Add warning when scaling row group sizes.\n\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #119 from rdblue/PARQUET-164-add-memory-manager-warning and squashes the following commits:\n\n241144f [Ryan Blue] PARQUET-164: Add warning when scaling row group sizes.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "807915b4cacede6a8de49630469b673b7c248a6f",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/MemoryManager.java": {
                "new": {
                    "('parquet.hadoop#MemoryManager', 'updateAllocation')": [
                        111,
                        112,
                        113,
                        114
                    ]
                }
            }
        }
    },
    "807915b4cacede6a8de49630469b673b7c248a6f": {
        "authored_data": "2015 Feb 10 01:51",
        "commit.message": "PARQUET-116: Pass a filter object to user defined predicate in filter2 api\n\nCurrently for creating a user defined predicate using the new filter api, no value can be passed to create a dynamic filter at runtime. This reduces the usefulness of the user defined predicate, and meaningful predicates cannot be created. We can add a generic Object value that is passed through the api, which can internally be used in the keep function of the user defined predicate for creating many different types of filters.\nFor example, in spark sql, we can pass in a list of filter values for a where IN clause query and filter the row values based on that list.\n\nAuthor: Yash Datta <Yash.Datta@guavus.com>\nAuthor: Alex Levenson <alexlevenson@twitter.com>\nAuthor: Yash Datta <saucam@gmail.com>\n\nCloses #73 from saucam/master and squashes the following commits:\n\n7231a3b [Yash Datta] Merge pull request #3 from isnotinvain/alexlevenson/fix-binary-compat\ndcc276b [Alex Levenson] Ignore binary incompatibility in private filter2 class\n7bfa5ad [Yash Datta] Merge pull request #2 from isnotinvain/alexlevenson/simplify-udp-state\n0187376 [Alex Levenson] Resolve merge conflicts\n25aa716 [Alex Levenson] Simplify user defined predicates with state\n51952f8 [Yash Datta] PARQUET-116: Fix whitespace\nd7b7159 [Yash Datta] PARQUET-116: Make UserDefined abstract, add two subclasses, one accepting udp class, other accepting serializable udp instance\n40d394a [Yash Datta] PARQUET-116: Fix whitespace\n9a63611 [Yash Datta] PARQUET-116: Fix whitespace\n7caa4dc [Yash Datta] PARQUET-116: Add ConfiguredUserDefined that takes a serialiazble udp directly\n0eaabf4 [Yash Datta] PARQUET-116: Move the config object from keep method to a configure method in udp predicate\nf51a431 [Yash Datta] PARQUET-116: Adding type safety for the filter object to be passed to user defined predicate\nd5a2b9e [Yash Datta] PARQUET-116: Enforce that the filter object to be passed must be Serializable\ndfd0478 [Yash Datta] PARQUET-116: Add a test case for passing a filter object to user defined predicate\n4ab46ec [Yash Datta] PARQUET-116: Pass a filter object to user defined predicate in filter2 api\n",
        "commit.author.name": "Yash Datta",
        "pcid": "ce65dfb394623c34dd7919aba5c0687f1bcf39f2",
        "changes": {
            "parquet-column/src/main/java/parquet/filter2/predicate/FilterApi.java": {
                "old": {
                    "('parquet.filter2.predicate#FilterApi', 'userDefined(Column,Class)')": [
                        168
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        43,
                        44
                    ],
                    "('parquet.filter2.predicate#FilterApi', None)": [
                        169,
                        170,
                        171,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182
                    ],
                    "('parquet.filter2.predicate#FilterApi', 'userDefined(Column,Class)')": [
                        175
                    ],
                    "('parquet.filter2.predicate#FilterApi', 'userDefined(Column,U)')": [
                        183,
                        184,
                        185
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/filter2/predicate/Operators.java": {
                "old": {
                    "('parquet.filter2.predicate#Operators', None)": [
                        361,
                        362,
                        368,
                        369,
                        378,
                        379,
                        380,
                        381,
                        397,
                        398,
                        399,
                        400,
                        401,
                        411
                    ]
                },
                "new": {
                    "('parquet.filter2.predicate#Operators', None)": [
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        386,
                        387,
                        400,
                        421,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/filter2/predicate/TestFilterApiMethods.java": {
                "old": {
                    "('parquet.filter2.predicate#TestFilterApiMethods', 'testUdp')": [
                        103,
                        104
                    ],
                    "('parquet.filter2.predicate#TestFilterApiMethods', 'testSerializable')": [
                        109,
                        111
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        36,
                        40,
                        51,
                        170,
                        171
                    ],
                    "('parquet.filter2.predicate#TestFilterApiMethods', None)": [
                        61,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169
                    ],
                    "('parquet.filter2.predicate#TestFilterApiMethods', 'testUdp')": [
                        108,
                        109
                    ],
                    "('parquet.filter2.predicate#TestFilterApiMethods', 'testSerializable')": [
                        114,
                        116
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/filter2/recordlevel/TestRecordLevelFilters.java": {
                "new": {
                    "(None, None)": [
                        23,
                        28,
                        29,
                        39,
                        51
                    ],
                    "('parquet.filter2.recordlevel#TestRecordLevelFilters', None)": [
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        227,
                        228,
                        229,
                        230,
                        231
                    ],
                    "('parquet.filter2.recordlevel#TestRecordLevelFilters', 'testUserDefinedByInstance')": [
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247
                    ]
                }
            }
        }
    }
}