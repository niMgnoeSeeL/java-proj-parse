{
    "603c0dc927c2b1aa46dba6675b24a375cfb3fc1c": {
        "authored_data": "2014 Feb 25 19:21",
        "commit.message": "Fix avro schema conv for arrays of optional type for #312.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "b07b16013482fe8af9333727814f9e6ff1d3ca7a",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroSchemaConverter.java": {
                "old": {
                    "('parquet.avro#AvroSchemaConverter', 'convertUnion(String,Schema,Type)')": [
                        130,
                        142
                    ]
                },
                "new": {
                    "('parquet.avro#AvroSchemaConverter', 'convertUnion(String,Schema,Type)')": [
                        130,
                        131,
                        132,
                        144
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestAvroSchemaConverter.java": {
                "old": {
                    "('parquet.avro#TestAvroSchemaConverter', 'testOptionalFields')": [
                        168,
                        169,
                        170
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        229
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testOptionalFields')": [
                        169
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', None)": [
                        200,
                        201,
                        224,
                        225
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testArrayOfOptionalRecords')": [
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'optional(Schema)')": [
                        226,
                        227,
                        228
                    ]
                }
            }
        }
    },
    "a5d2de14fda5215cece2b25ab2dd1e73396ec25e": {
        "authored_data": "2014 Feb 24 19:37",
        "commit.message": "Add avro constructors with Configuration for #295.\n\nTo avoid doubling the number of constructors in ParquetWriter, this\ncreates more defaults that subclasses can use. The new AvroParquetWriter\nconstructors call the most specific constructor directly and use the\ndefault constants from ParquetWriter to match the default behavior of\nits constructors.\n\nAlso fixed a few doc mistakes.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "b07b16013482fe8af9333727814f9e6ff1d3ca7a",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroParquetWriter.java": {
                "old": {
                    "('parquet.avro#AvroParquetWriter', None)": [
                        43,
                        52,
                        60,
                        61,
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        102
                    ],
                    "('parquet.avro#AvroParquetWriter', None)": [
                        44,
                        53,
                        61,
                        62,
                        63,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98
                    ],
                    "('parquet.avro#AvroParquetWriter', 'writeSupport(Schema)')": [
                        99,
                        100,
                        101
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetWriter.java": {
                "old": {
                    "('parquet.hadoop#ParquetWriter', None)": [
                        53,
                        103,
                        195
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetWriter', None)": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        59,
                        60,
                        110,
                        111,
                        112,
                        204
                    ]
                }
            }
        }
    },
    "af2380fbcf5d440315d0a5335975197586ebf929": {
        "authored_data": "2014 Feb 14 21:16",
        "commit.message": "Add NanoTime to example.\n\nThis adds NanoTime to the example objects, stored as an int96, for\ntesting.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "2403257ff4c412465e4bfc4af5f0e745b5d96565",
        "changes": {
            "parquet-column/src/main/java/parquet/example/data/Group.java": {
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data#Group', 'add(String,NanoTime)')": [
                        47,
                        48
                    ],
                    "('parquet.example.data#Group', None)": [
                        49,
                        50,
                        75,
                        115,
                        116
                    ],
                    "('parquet.example.data#Group', 'add(int,NanoTime)')": [
                        76
                    ],
                    "('parquet.example.data#Group', 'append(String,NanoTime)')": [
                        112,
                        113,
                        114
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/SimpleGroup.java": {
                "new": {
                    "('parquet.example.data.simple#SimpleGroup', 'getTimeNanos(int,int)')": [
                        139,
                        140
                    ],
                    "('parquet.example.data.simple#SimpleGroup', None)": [
                        141,
                        142,
                        161,
                        162,
                        163
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,NanoTime)')": [
                        164,
                        165
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testOneOfEach')": [
                        344,
                        345
                    ]
                },
                "new": {
                    "(None, None)": [
                        50
                    ],
                    "('parquet.io#TestColumnIO', 'testOneOfEach')": [
                        345
                    ]
                }
            }
        }
    },
    "2403257ff4c412465e4bfc4af5f0e745b5d96565": {
        "authored_data": "2014 Feb 14 17:51",
        "commit.message": "Use toStringUsingUTF8 to fix tests.\n\nBinary values will not necessarily decode with UTF8, but the\nExpectationValidatingRecordConsumer can decode because its inputs are\ncontrolled for testing.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "3fc099fd7b315a2daecf2f832071f8b91006ecf8",
        "changes": {
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingRecordConsumer.java": {
                "old": {
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addBinary(Binary)')": [
                        88
                    ]
                },
                "new": {
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addBinary(Binary)')": [
                        88
                    ]
                }
            }
        }
    },
    "3fc099fd7b315a2daecf2f832071f8b91006ecf8": {
        "authored_data": "2014 Feb 14 17:10",
        "commit.message": "Factoring out common Binary impl in dictionary writer.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "d7c7395b44144d05ff4dcb464bdcc4e90056c3c6",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesWriter.java": {
                "old": {
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        68,
                        230,
                        290,
                        291,
                        292,
                        308,
                        309,
                        310,
                        311,
                        318,
                        319,
                        321,
                        327,
                        329,
                        330,
                        345,
                        346,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380
                    ]
                },
                "new": {
                    "(None, None)": [
                        46
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        69,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        243,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        311,
                        327,
                        328,
                        335,
                        336,
                        343,
                        345,
                        346,
                        361,
                        362
                    ]
                }
            }
        }
    },
    "d7c7395b44144d05ff4dcb464bdcc4e90056c3c6": {
        "authored_data": "2014 Feb 14 17:08",
        "commit.message": "Merge Fixed dictionary with Binary dictionary.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "6b2eef9d99600f4fc48a9ba40e15fea3e5e748ad",
        "changes": {
            "parquet-column/src/main/java/parquet/column/Encoding.java": {
                "old": {
                    "(None, None)": [
                        35,
                        133
                    ]
                },
                "new": {
                    "(None, None)": [
                        132
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/dictionary/PlainValuesDictionary.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.column.values.dictionary#PlainValuesDictionary', None)": [
                        58,
                        65,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.column.values.dictionary#PlainValuesDictionary', None)": [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108
                    ]
                }
            }
        }
    },
    "6b2eef9d99600f4fc48a9ba40e15fea3e5e748ad": {
        "authored_data": "2014 Feb 14 17:07",
        "commit.message": "Delegate fixed and int96 types to convertBINARY.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "56387e33db7df5f50b5754b756d1551af2735fe3",
        "changes": {
            "parquet-column/src/main/java/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        263,
                        268
                    ]
                }
            }
        }
    },
    "56387e33db7df5f50b5754b756d1551af2735fe3": {
        "authored_data": "2014 Feb 11 22:03",
        "commit.message": "Remove int96 references from RecordConsumer and Converters.\n\nThis commit removes int96-specific code from the RecordConsumer and\nthe Converters. Implementations are responsible for checking the Type of\ncolumns.\n\nBecause Binary is used for int96 values, it is no longer assumed that\na Binary is printable as a UTF8 string in methods like Binary#toString.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "34b90d7b86c600804038048e905f0f3587aba687",
        "changes": {
            "parquet-column/src/main/java/parquet/example/data/simple/Int96Value.java": {
                "old": {
                    "('parquet.example.data.simple#Int96Value', 'writeValue(RecordConsumer)')": [
                        21
                    ]
                },
                "new": {
                    "('parquet.example.data.simple#Int96Value', 'writeValue(RecordConsumer)')": [
                        21
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/SimplePrimitiveConverter.java": {
                "old": {
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', 'addBinary(Binary)')": [
                        37
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', None)": [
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', 'addInt96(Binary)')": [
                        45
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordConsumerLoggingWrapper.java": {
                "old": {
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addBinary(Binary)')": [
                        112
                    ],
                    "('parquet.io#RecordConsumerLoggingWrapper', None)": [
                        114,
                        115,
                        116,
                        117,
                        118,
                        119
                    ],
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addInt96(Binary)')": [
                        120,
                        121,
                        122
                    ]
                },
                "new": {
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addBinary(Binary)')": [
                        112
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/ValidatingRecordConsumer.java": {
                "old": {
                    "('parquet.io#ValidatingRecordConsumer', 'addBinary(Binary)')": [
                        175
                    ],
                    "('parquet.io#ValidatingRecordConsumer', None)": [
                        177,
                        178,
                        179,
                        180,
                        181,
                        182
                    ],
                    "('parquet.io#ValidatingRecordConsumer', 'addInt96(Binary)')": [
                        183,
                        184,
                        185
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.io#ValidatingRecordConsumer', 'validate(PrimitiveTypeName,PrimitiveTypeName)')": [
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169
                    ],
                    "('parquet.io#ValidatingRecordConsumer', None)": [
                        170,
                        171,
                        172
                    ],
                    "('parquet.io#ValidatingRecordConsumer', 'addBinary(Binary)')": [
                        201,
                        202
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/Binary.java": {
                "old": {
                    "('parquet.io.api#Binary', 'toString')": [
                        286
                    ]
                },
                "new": {
                    "('parquet.io.api#Binary', 'toString')": [
                        286
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/PrimitiveConverter.java": {
                "old": {
                    "('parquet.io.api#PrimitiveConverter', 'addInt96(Binary)')": [
                        76,
                        77
                    ],
                    "('parquet.io.api#PrimitiveConverter', None)": [
                        78,
                        79,
                        80,
                        81,
                        82
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/RecordConsumer.java": {
                "old": {
                    "('parquet.io.api#RecordConsumer', None)": [
                        114,
                        115,
                        117,
                        118
                    ],
                    "('parquet.io.api#RecordConsumer', 'addInt96(Binary)')": [
                        116
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/PrimitiveType.java": {
                "old": {
                    "('parquet.schema#PrimitiveType', None)": [
                        209,
                        210,
                        211,
                        212,
                        213,
                        214
                    ]
                },
                "new": {
                    "('parquet.schema#PrimitiveType', None)": [
                        209,
                        210,
                        211,
                        212,
                        213,
                        214
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ConverterConsumer.java": {
                "old": {
                    "('parquet.io#ConverterConsumer', 'addInt96(Binary)')": [
                        105,
                        106
                    ],
                    "('parquet.io#ConverterConsumer', None)": [
                        107,
                        108,
                        109
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingConverter.java": {
                "old": {
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        67,
                        68,
                        69,
                        70,
                        71
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingRecordConsumer.java": {
                "old": {
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addBinary(Binary)')": [
                        88
                    ],
                    "('parquet.io#ExpectationValidatingRecordConsumer', None)": [
                        89,
                        90,
                        91
                    ],
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addInt96(Binary)')": [
                        92,
                        93
                    ]
                },
                "new": {
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addBinary(Binary)')": [
                        88
                    ]
                }
            }
        }
    },
    "34b90d7b86c600804038048e905f0f3587aba687": {
        "authored_data": "2014 Feb 11 00:41",
        "commit.message": "Removing Int96 class, using Binary instead.\n\nThis removes all references to the Int96 class and uses Binary instead.\nInt96 calls are still used at the RecordConsumer and Converter level,\nspecifically used by PrimitiveType.PrimitiveTypeName.INT96.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "77a355af4b7828daeffcdf312108ad9f1fa738d7",
        "changes": {
            "parquet-column/src/main/java/parquet/column/ColumnReader.java": {
                "old": {
                    "(None, None)": [
                        19,
                        101,
                        102,
                        103,
                        104,
                        105
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/ColumnWriter.java": {
                "old": {
                    "(None, None)": [
                        19,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/Dictionary.java": {
                "old": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.column#Dictionary', 'decodeToInt96(int)')": [
                        45,
                        46
                    ],
                    "('parquet.column#Dictionary', None)": [
                        47,
                        48
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/Encoding.java": {
                "old": {
                    "(None, None)": [
                        35,
                        43,
                        76,
                        134
                    ]
                },
                "new": {
                    "(None, None)": [
                        35,
                        75,
                        133
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/ParquetProperties.java": {
                "old": {
                    "(None, None)": [
                        9
                    ],
                    "('parquet.column#ParquetProperties', 'getValuesWriter(ColumnDescriptor,int)')": [
                        105,
                        107
                    ]
                },
                "new": {
                    "(None, None)": [
                        13
                    ],
                    "('parquet.column#ParquetProperties', 'getValuesWriter(ColumnDescriptor,int)')": [
                        105,
                        107
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "(None, None)": [
                        35
                    ],
                    "('parquet.column.impl#ColumnReaderImpl', None)": [
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449
                    ],
                    "('parquet.column.impl#ColumnReaderImpl', 'bindToDictionary(Dictionary)')": [
                        180,
                        181,
                        182
                    ],
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        275,
                        276,
                        277,
                        284,
                        285,
                        286,
                        287,
                        288
                    ],
                    "('parquet.column.impl#ColumnReaderImpl', 'getInt96')": [
                        450,
                        451,
                        452
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        264,
                        265,
                        266,
                        273,
                        274,
                        275,
                        276,
                        277
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnWriterImpl.java": {
                "old": {
                    "(None, None)": [
                        43
                    ],
                    "('parquet.column.impl#ColumnWriterImpl', 'write(Int96,int,int)')": [
                        171,
                        172,
                        173,
                        174,
                        175,
                        176
                    ],
                    "('parquet.column.impl#ColumnWriterImpl', None)": [
                        177,
                        178,
                        179
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/ValuesReader.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('parquet.column.values#ValuesReader', None)": [
                        92,
                        93,
                        96,
                        97,
                        98
                    ],
                    "('parquet.column.values#ValuesReader', 'readInt96')": [
                        94,
                        95
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/ValuesWriter.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('parquet.column.values#ValuesWriter', 'writeInt96(Int96)')": [
                        100,
                        101
                    ],
                    "('parquet.column.values#ValuesWriter', None)": [
                        102,
                        103,
                        104,
                        105,
                        106
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'readBytes')": [
                        75,
                        76
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        77,
                        78,
                        79,
                        80
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'readInt96')": [
                        81,
                        82,
                        83
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesWriter.java": {
                "old": {
                    "(None, None)": [
                        50
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        309,
                        312,
                        318,
                        320,
                        321,
                        322,
                        323,
                        324,
                        326,
                        328,
                        329,
                        330,
                        331,
                        336,
                        337,
                        338,
                        346,
                        349,
                        350,
                        359,
                        364,
                        370,
                        371,
                        379
                    ]
                },
                "new": {
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        308,
                        311,
                        312,
                        318,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        327,
                        329,
                        330,
                        331,
                        336,
                        337,
                        338,
                        346,
                        349,
                        350,
                        359,
                        364,
                        370,
                        371,
                        379
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/dictionary/PlainValuesDictionary.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('parquet.column.values.dictionary#PlainValuesDictionary', None)": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        116,
                        117,
                        118,
                        119,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141
                    ]
                },
                "new": {
                    "('parquet.column.values.dictionary#PlainValuesDictionary', None)": [
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        117,
                        118,
                        119,
                        120,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/FixedLenByteArrayPlainValuesReader.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        21,
                        22
                    ],
                    "('parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', 'readByteBuffer')": [
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    "('parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', None)": [
                        61,
                        62,
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/PlainValuesWriter.java": {
                "old": {
                    "(None, None)": [
                        19,
                        30
                    ],
                    "('parquet.column.values.plain#PlainValuesWriter', None)": [
                        58,
                        59,
                        60,
                        61
                    ],
                    "('parquet.column.values.plain#PlainValuesWriter', 'writeInt96(Int96)')": [
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/DummyRecordConverter.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.example#DummyRecordConverter', None)": [
                        51,
                        52,
                        53,
                        54
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/Group.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.example.data#Group', 'add(String,Int96)')": [
                        55,
                        56
                    ],
                    "('parquet.example.data#Group', None)": [
                        57,
                        58,
                        77,
                        130,
                        131
                    ],
                    "('parquet.example.data#Group', 'add(int,Int96)')": [
                        78
                    ],
                    "('parquet.example.data#Group', 'append(String,Int96)')": [
                        127,
                        128,
                        129
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/GroupValueSource.java": {
                "old": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data#GroupValueSource', 'getInt96(int,int)')": [
                        60
                    ]
                },
                "new": {
                    "('parquet.example.data#GroupValueSource', 'getInt96(String,int)')": [
                        47,
                        48
                    ],
                    "('parquet.example.data#GroupValueSource', None)": [
                        49,
                        50
                    ],
                    "('parquet.example.data#GroupValueSource', 'getInt96(int,int)')": [
                        63
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/Primitive.java": {
                "old": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data.simple#Primitive', 'getInt96')": [
                        44
                    ]
                },
                "new": {
                    "('parquet.example.data.simple#Primitive', 'getInt96')": [
                        43
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/SimpleGroup.java": {
                "old": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'getInt96(int,int)')": [
                        142
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,Binary)')": [
                        168
                    ],
                    "('parquet.example.data.simple#SimpleGroup', None)": [
                        169,
                        170,
                        171
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,Int96)')": [
                        172,
                        173
                    ]
                },
                "new": {
                    "('parquet.example.data.simple#SimpleGroup', 'getInt96(int,int)')": [
                        140
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,Binary)')": [
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175
                    ],
                    "('parquet.example.data.simple#SimpleGroup', None)": [
                        176
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/SimplePrimitiveConverter.java": {
                "old": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', None)": [
                        34,
                        43
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', 'addInt96(Int96)')": [
                        46
                    ]
                },
                "new": {
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', None)": [
                        33,
                        42
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', 'addInt96(Binary)')": [
                        45
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('parquet.io#MessageColumnIO', None)": [
                        294,
                        295
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        293,
                        294
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordConsumerLoggingWrapper.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addInt96(Int96)')": [
                        120,
                        121
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addInt96(Binary)')": [
                        120,
                        121
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/ValidatingRecordConsumer.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.io#ValidatingRecordConsumer', 'addInt96(Int96)')": [
                        183
                    ]
                },
                "new": {
                    "('parquet.io#ValidatingRecordConsumer', None)": [
                        182
                    ],
                    "('parquet.io#ValidatingRecordConsumer', 'addInt96(Binary)')": [
                        183
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/PrimitiveConverter.java": {
                "old": {
                    "('parquet.io.api#PrimitiveConverter', 'addInt96(Int96)')": [
                        76
                    ]
                },
                "new": {
                    "('parquet.io.api#PrimitiveConverter', 'addInt96(Binary)')": [
                        76
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/RecordConsumer.java": {
                "old": {
                    "('parquet.io.api#RecordConsumer', 'addInt96(Int96)')": [
                        116
                    ]
                },
                "new": {
                    "('parquet.io.api#RecordConsumer', 'addInt96(Binary)')": [
                        116
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/PrimitiveType.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('parquet.schema#PrimitiveType', None)": [
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215
                    ]
                },
                "new": {
                    "('parquet.schema#PrimitiveType', None)": [
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ConverterConsumer.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.io#ConverterConsumer', 'addInt96(Int96)')": [
                        106
                    ]
                },
                "new": {
                    "('parquet.io#ConverterConsumer', 'addInt96(Binary)')": [
                        105
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingConverter.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        71,
                        72
                    ]
                },
                "new": {
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        70,
                        71
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingRecordConsumer.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addInt96(Int96)')": [
                        92,
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addInt96(Binary)')": [
                        92,
                        93
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "(None, None)": [
                        31,
                        44,
                        55
                    ],
                    "('parquet.io#TestColumnIO', 'testOneOfEach')": [
                        347,
                        348
                    ],
                    "('parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        589,
                        590,
                        591,
                        592,
                        593
                    ]
                },
                "new": {
                    "('parquet.io#TestColumnIO', 'testOneOfEach')": [
                        344,
                        345
                    ]
                }
            }
        }
    },
    "77a355af4b7828daeffcdf312108ad9f1fa738d7": {
        "authored_data": "2014 Feb 04 02:17",
        "commit.message": "Extending example and group classes for int96.\n\nThis commit gets TestColumnIO#testOneOfEach passing with an int96\ncolumn.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "7043a64617eb25608498f502feb6c76c58b15242",
        "changes": {
            "parquet-column/src/main/java/parquet/example/DummyRecordConverter.java": {
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.example#DummyRecordConverter', None)": [
                        51,
                        52,
                        53,
                        54
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/Group.java": {
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.example.data#Group', 'add(String,Int96)')": [
                        55,
                        56
                    ],
                    "('parquet.example.data#Group', None)": [
                        57,
                        58,
                        77,
                        130,
                        131
                    ],
                    "('parquet.example.data#Group', 'add(int,Int96)')": [
                        78
                    ],
                    "('parquet.example.data#Group', 'append(String,Int96)')": [
                        127,
                        128,
                        129
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/GroupValueSource.java": {
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data#GroupValueSource', 'getInt96(int,int)')": [
                        60
                    ],
                    "('parquet.example.data#GroupValueSource', None)": [
                        61
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/Primitive.java": {
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data.simple#Primitive', 'getInt96')": [
                        44,
                        45
                    ],
                    "('parquet.example.data.simple#Primitive', None)": [
                        46,
                        47
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/SimpleGroup.java": {
                "new": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'getInt96(int,int)')": [
                        142,
                        143
                    ],
                    "('parquet.example.data.simple#SimpleGroup', None)": [
                        144,
                        145,
                        146,
                        174,
                        175,
                        176
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,Int96)')": [
                        172,
                        173
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/SimplePrimitiveConverter.java": {
                "old": {
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', None)": [
                        39
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', None)": [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        48,
                        49
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', 'addInt96(Int96)')": [
                        46,
                        47
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/Int96.java": {
                "new": {
                    "(None, None)": [
                        4
                    ],
                    "('parquet.io.api#Int96', None)": [
                        14
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testOneOfEach')": [
                        344
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('parquet.io#TestColumnIO', None)": [
                        77
                    ],
                    "('parquet.io#TestColumnIO', 'testOneOfEach')": [
                        346,
                        347,
                        348
                    ]
                }
            }
        }
    }
}