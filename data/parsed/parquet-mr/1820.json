{
    "94afb195dfae10fc40699f3c0efc31bb8f23f51a": {
        "authored_data": "2013 Jul 02 22:53",
        "commit.message": "fix dictionary decoding bug when more than one encoding is used\n",
        "commit.author.name": "julien",
        "pcid": "c98f4670b8467d6e15c9ecdff4dad88331302775",
        "changes": {
            "parquet-column/src/main/java/parquet/column/Encoding.java": {
                "new": {
                    "(None, None)": [
                        112,
                        113,
                        114,
                        115,
                        116,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnReaderImpl', 'checkRead')": [
                        417,
                        419,
                        420
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnReaderImpl', 'checkRead')": [
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423
                    ]
                }
            }
        }
    },
    "7b470794cde3f488f863b276721c930ab50a3c58": {
        "authored_data": "2013 Jul 01 21:17",
        "commit.message": "Should not write data if the RL/DL is all zeroes\n",
        "commit.author.name": "Aniket Mokashi",
        "pcid": "2519b95f9e1f458bd3b47f75b4f83eb6a4c55930",
        "changes": {
            "parquet-column/src/main/java/parquet/column/Encoding.java": {
                "new": {
                    "(None, None)": [
                        25,
                        67,
                        68,
                        69
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnWriterImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnWriterImpl', None)": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('parquet.column.impl#ColumnWriterImpl', None)": [
                        66,
                        67,
                        68,
                        83,
                        84,
                        85
                    ],
                    "('parquet.column.impl#ColumnWriterImpl', 'getColumnDescriptorValuesWriter(int)')": [
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ]
                }
            }
        }
    },
    "08b7aebb91af31cea3f143b4c464e853d97ad82e": {
        "authored_data": "2013 Jul 01 17:27",
        "commit.message": "support for schema compatibility\n",
        "commit.author.name": "julien",
        "pcid": "2519b95f9e1f458bd3b47f75b4f83eb6a4c55930",
        "changes": {
            "parquet-column/src/main/java/parquet/io/ColumnIOFactory.java": {
                "old": {
                    "('parquet.io#ColumnIOFactory', None)": [
                        43,
                        49,
                        50,
                        51,
                        52,
                        53,
                        56,
                        59,
                        63,
                        69,
                        70,
                        71,
                        72,
                        73,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('parquet.io#ColumnIOFactory', 'getColumnIO(MessageType)')": [
                        111,
                        112,
                        113
                    ]
                },
                "new": {
                    "(None, None)": [
                        17,
                        18
                    ],
                    "('parquet.io#ColumnIOFactory', None)": [
                        44,
                        45,
                        46,
                        48,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        63,
                        64,
                        66,
                        68,
                        71,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        102,
                        103,
                        130,
                        131,
                        132,
                        133,
                        138,
                        139,
                        140
                    ],
                    "('parquet.io#ColumnIOFactory', 'getColumnIO(MessageType,MessageType)')": [
                        134,
                        135,
                        136,
                        137
                    ],
                    "('parquet.io#ColumnIOFactory', 'getColumnIO(MessageType)')": [
                        145
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/Type.java": {
                "old": {
                    "('parquet.schema#Type', None)": [
                        31,
                        32,
                        33
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('parquet.schema#Type', None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        31
                    ],
                    "('parquet.io#TestColumnIO', 'testSchemaCompatibility')": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194
                    ],
                    "('parquet.io#TestColumnIO', None)": [
                        195,
                        196,
                        197,
                        209,
                        210,
                        211,
                        212,
                        213,
                        223,
                        224,
                        234,
                        235,
                        236,
                        237
                    ],
                    "('parquet.io#TestColumnIO', 'validateGroups(List,Object)')": [
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208
                    ],
                    "('parquet.io#TestColumnIO', 'readGroups(MemPageStore,MessageType,MessageType,int)')": [
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222
                    ],
                    "('parquet.io#TestColumnIO', 'writeGroups(MessageType,MemPageStore,Group)')": [
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetInputFormat.java": {
                "new": {
                    "('parquet.hadoop#ParquetInputFormat', 'generateSplits(List,BlockLocation,FileStatus,FileMetaData,Class,String,Map)')": [
                        210
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetInputSplit.java": {
                "old": {
                    "('parquet.hadoop#ParquetInputSplit', None)": [
                        73
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetInputSplit', None)": [
                        54,
                        74,
                        75,
                        87,
                        97,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('parquet.hadoop#ParquetInputSplit', 'getFileSchema')": [
                        160,
                        161
                    ],
                    "('parquet.hadoop#ParquetInputSplit', 'readFields(DataInput)')": [
                        195
                    ],
                    "('parquet.hadoop#ParquetInputSplit', 'toString')": [
                        225
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetReader.java": {
                "new": {
                    "('parquet.hadoop#ParquetReader', None)": [
                        62
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetRecordReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetRecordReader', 'checkRead')": [
                        108
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetRecordReader', None)": [
                        60
                    ],
                    "('parquet.hadoop#ParquetRecordReader', 'checkRead')": [
                        109
                    ],
                    "('parquet.hadoop#ParquetRecordReader', 'initialize(InputSplit,Configuration)')": [
                        163
                    ]
                }
            }
        }
    },
    "1d7a5c33c935710ac8e5fa722d77e23fe55d5c5e": {
        "authored_data": "2013 Jul 01 00:06",
        "commit.message": "Fixing after code reviews\n",
        "commit.author.name": "Jacob",
        "pcid": "be8e4e953b98400426b801793da9c66f95f68881",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroIndexedRecordConverter', 'newConverter(Schema,Type,ParentValueContainer)')": [
                        93,
                        95
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', 'start')": [
                        117,
                        118
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        263,
                        270
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        44,
                        57,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        289,
                        296,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', 'newConverter(Schema,Type,ParentValueContainer)')": [
                        96,
                        98,
                        101,
                        102
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', 'start')": [
                        122,
                        123,
                        124
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroParquetInputFormat.java": {
                "old": {
                    "(None, None)": [
                        18
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroParquetOutputFormat.java": {
                "old": {
                    "(None, None)": [
                        19
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroParquetWriter.java": {
                "old": {
                    "('parquet.avro#AvroParquetWriter', None)": [
                        43,
                        44,
                        45,
                        50,
                        51,
                        52,
                        53,
                        54,
                        61,
                        62,
                        68,
                        69,
                        74
                    ]
                },
                "new": {
                    "('parquet.avro#AvroParquetWriter', None)": [
                        43,
                        44,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        61,
                        62,
                        68,
                        69,
                        74
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroReadSupport.java": {
                "old": {
                    "(None, None)": [
                        20,
                        28,
                        29
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroRecordMaterializer.java": {
                "old": {
                    "(None, None)": [
                        19
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroSchemaConverter.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19
                    ],
                    "('parquet.avro#AvroSchemaConverter', 'convertField(String,Schema,Type)')": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19
                    ],
                    "('parquet.avro#AvroSchemaConverter', 'convertField(String,Schema,Type)')": [
                        117
                    ],
                    "('parquet.avro#AvroSchemaConverter', None)": [
                        120,
                        121,
                        147
                    ],
                    "('parquet.avro#AvroSchemaConverter', 'convertUnion(String,Schema,Type)')": [
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroWriteSupport.java": {
                "old": {
                    "(None, None)": [
                        25,
                        37,
                        38
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeArray(GroupType,Schema,GenericArray)')": [
                        113
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeValue(Type,Schema,Object)')": [
                        166,
                        170
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        27,
                        28,
                        39,
                        40
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeArray(GroupType,Schema,Iterable)')": [
                        115
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeMap(GroupType,Schema,Map)')": [
                        146
                    ],
                    "('parquet.avro#AvroWriteSupport', None)": [
                        147,
                        148
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeUnion(GroupType,Schema,Object)')": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeValue(Type,Schema,Object)')": [
                        193,
                        197,
                        200,
                        201
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestAvroSchemaConverter.java": {
                "old": {
                    "('parquet.avro#TestAvroSchemaConverter', None)": [
                        91,
                        92
                    ],
                    "('parquet.avro#TestAvroSchemaConverter', 'testNonNullUnion')": [
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ],
                    "(None, None)": [
                        101
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestSpecificReadWrite.java": {
                "old": {
                    "(None, None)": [
                        16
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testReadWriteSpecific')": [
                        24,
                        26,
                        27,
                        28,
                        29
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterMatchesMultiple')": [
                        37,
                        40,
                        41,
                        42
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'writeCarsToParquetFile(int,boolean,CompressionCodecName,boolean)')": [
                        48,
                        49,
                        55,
                        56,
                        57,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPolo')": [
                        81
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPassat')": [
                        91
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getBmwMini')": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        3,
                        17,
                        21,
                        22,
                        23,
                        24
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testReadWriteSpecific')": [
                        29,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36
                    ],
                    "('parquet.avro#TestSpecificReadWrite', None)": [
                        37,
                        38,
                        39,
                        64,
                        73,
                        74,
                        75,
                        92,
                        93
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testReadWriteSpecificWithDictionary')": [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterMatchesMultiple')": [
                        54,
                        57,
                        58,
                        59
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterWithDictionary')": [
                        65,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterOnSubAttribute')": [
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'writeCarsToParquetFile(int,CompressionCodecName,boolean)')": [
                        94,
                        100,
                        101,
                        102,
                        104,
                        105,
                        106
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPolo')": [
                        118,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPassat')": [
                        136,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getBmwMini')": [
                        153,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnReaderImpl', None)": [
                        407
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnReaderImpl', None)": [
                        407
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/filter/ColumnRecordFilter.java": {
                "old": {
                    "(None, None)": [
                        3,
                        4,
                        5,
                        7,
                        8,
                        10,
                        11,
                        93,
                        94,
                        95
                    ],
                    "('parquet.filter#ColumnRecordFilter', None)": [
                        20,
                        50,
                        71,
                        72,
                        73,
                        74,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87
                    ],
                    "('parquet.filter#ColumnRecordFilter', 'column(String,Predicate)')": [
                        30,
                        34,
                        37
                    ],
                    "('parquet.filter#ColumnRecordFilter', 'equalTo(String)')": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('parquet.filter#ColumnRecordFilter', 'equalTo(long)')": [
                        88,
                        89,
                        90,
                        91,
                        92
                    ]
                },
                "new": {
                    "('parquet.filter#ColumnRecordFilter', None)": [
                        13,
                        44
                    ],
                    "('parquet.filter#ColumnRecordFilter', 'column(String,ColumnPredicates)')": [
                        23,
                        24,
                        28,
                        31
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/filter/PagedRecordFilter.java": {
                "old": {
                    "('parquet.filter#PagedRecordFilter', None)": [
                        37,
                        38
                    ]
                },
                "new": {
                    "('parquet.filter#PagedRecordFilter', None)": [
                        37
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/filter/RecordFilter.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/filter/UnboundRecordFilter.java": {
                "old": {
                    "(None, None)": [
                        3
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer)')": [
                        63,
                        64
                    ],
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer,UnboundRecordFilter)')": [
                        68,
                        69,
                        74
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer)')": [
                        63
                    ],
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer,UnboundRecordFilter)')": [
                        67,
                        68,
                        69,
                        70,
                        71,
                        76
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordReaderImplementation.java": {
                "old": {
                    "(None, None)": [
                        26,
                        37,
                        38
                    ],
                    "('parquet.io#RecordReaderImplementation', None)": [
                        232,
                        241,
                        243,
                        244,
                        248,
                        364,
                        365,
                        366,
                        367,
                        424,
                        425,
                        426,
                        427,
                        450,
                        451
                    ],
                    "('parquet.io#RecordReaderImplementation', 'read')": [
                        387,
                        388,
                        389,
                        390,
                        391,
                        392
                    ],
                    "('parquet.io#RecordReaderImplementation', 'skipToMatch')": [
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449
                    ]
                },
                "new": {
                    "('parquet.io#RecordReaderImplementation', None)": [
                        225,
                        226,
                        227,
                        228,
                        235,
                        243,
                        247
                    ],
                    "('parquet.io#RecordReaderImplementation', 'read')": [
                        407
                    ],
                    "('parquet.io#RecordReaderImplementation', 'getColumnReaders')": [
                        451,
                        452,
                        453
                    ],
                    "(None, None)": [
                        454
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestFiltered.java": {
                "old": {
                    "(None, None)": [
                        3,
                        5,
                        20
                    ],
                    "('parquet.io#TestFiltered', None)": [
                        24,
                        25
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnInteger')": [
                        48
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnString')": [
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnInteger')": [
                        44
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnString')": [
                        62
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetReader', None)": [
                        45,
                        62
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetReader', None)": [
                        45,
                        62
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetRecordReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetRecordReader', None)": [
                        85
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetRecordReader', None)": [
                        85
                    ]
                }
            }
        }
    }
}