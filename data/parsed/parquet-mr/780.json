{
    "b0e26ee6f20a00a0d0769408575744c51a016018": {
        "authored_data": "2014 Jul 30 20:49",
        "commit.message": "Only call put() when needed in SchemaCompatibilityValidator#validateColumn()\n\nThis is some minor cleanup suggested by @tsdeng\n\nAuthor: Alex Levenson <alexlevenson@twitter.com>\n\nCloses #24 from isnotinvain/alexlevenson/columnTypesEncountered and squashes the following commits:\n\n7f05d90 [Alex Levenson] Only call put() when needed in SchemaCompatibilityValidator#validateColumn()\n",
        "commit.author.name": "Alex Levenson",
        "pcid": "ad32bf0fd111ab473ad1080cde11de39e3c5a67f",
        "changes": {
            "parquet-column/src/main/java/parquet/filter2/predicate/SchemaCompatibilityValidator.java": {
                "old": {
                    "('parquet.filter2.predicate#SchemaCompatibilityValidator', 'validateColumn(Column)')": [
                        155
                    ]
                },
                "new": {
                    "('parquet.filter2.predicate#SchemaCompatibilityValidator', 'validateColumn(Column)')": [
                        155,
                        156,
                        157,
                        158
                    ]
                }
            }
        }
    },
    "ad32bf0fd111ab473ad1080cde11de39e3c5a67f": {
        "authored_data": "2014 Jul 29 21:38",
        "commit.message": "Add a unified and optionally more constrained API for expressing filters on columns\n\nThis is a re-opened version of:\nhttps://github.com/Parquet/parquet-mr/pull/412\n\nThe idea behind this pull request is to add a way to express filters on columns using DSL that allows parquet visibility into what is being filtered and how. This visibility will allow us to make optimizations at read time, the biggest one being filtering entire row groups or pages of records without even reading them based on the statistics / metadata that is stored along with each row group or page.\n\nIncluded in this api are interfaces for user defined predicates, which must operate at the value level by may opt in to operating at the row group / page level as well. This should make this new API a superset of the `parquet.filter` package. This new api will need to be reconciled with the column filters currently in the `parquet.filter` package, but I wanted to get feedback on this first.\n\nA limitation in both this api and the old one is that you can't do cross-column filters, eg: columX > columnY.\n\nAuthor: Alex Levenson <alexlevenson@twitter.com>\n\nCloses #4 from isnotinvain/alexlevenson/filter-api and squashes the following commits:\n\nc1ab7e3 [Alex Levenson] Address feedback\nc1bd610 [Alex Levenson] cleanup dotString in ColumnPath\n418bfc1 [Alex Levenson] Update version, add temporary hacks for semantic enforcer\n6643bd3 [Alex Levenson] Fix some more non backward incompatible changes\n39f977f [Alex Levenson] Put a bunch of backwards compatible stuff back in, add @Deprecated\n13a02c6 [Alex Levenson] Fix compile errors, add back in overloaded getRecordReader\nf82edb7 [Alex Levenson] Merge branch 'master' into alexlevenson/filter-api\n9bd014f [Alex Levenson] clean up TODOs and reference jiras\n4cc7e87 [Alex Levenson] Add some comments\n30e3d61 [Alex Levenson] Create a common interface for both kinds of filters\nac153a6 [Alex Levenson] Create a Statistics class for use in UDPs\nfbbf601 [Alex Levenson] refactor IncrementallyUpdatedFilterPredicateGenerator to only generate the parts that require generation\n5df47cd [Alex Levenson] Static imports of checkNotNull\nc1d1823 [Alex Levenson] address some of the minor feedback items\n67a3ba0 [Alex Levenson] update binary's toString\n3d7372b [Alex Levenson] minor fixes\nfed9531 [Alex Levenson] Add skipCurrentRecord method to clear events in thrift converter\n2e632d5 [Alex Levenson] Make Binary Serializable\n09c024f [Alex Levenson] update comments\n3169849 [Alex Levenson] fix compilation error\n0185030 [Alex Levenson] Add integration test for value level filters\n4fde18c [Alex Levenson] move to right package\nae36b37 [Alex Levenson] Handle merge issues\naf69486 [Alex Levenson] Merge branch 'master' into alexlevenson/filter-api\n0665271 [Alex Levenson] Add tests for value inspector\nc5e3b07 [Alex Levenson] Add tests for resetter and evaluator\n29f677a [Alex Levenson] Fix scala DSL\n8897a28 [Alex Levenson] Fix some tests\nb448bee [Alex Levenson] Fix mistake in MessageColumnIO\nc8133f8 [Alex Levenson] Fix some tests\n4cf686d [Alex Levenson] more null checks\n69e683b [Alex Levenson] check all the nulls\n220a682 [Alex Levenson] more cleanup\naad5af3 [Alex Levenson] rm generated src file from git\n5075243 [Alex Levenson] more minor cleanup\n9966713 [Alex Levenson] Hook generation into maven build\n8282725 [Alex Levenson] minor cleanup\nfea3ea9 [Alex Levenson] minor cleanup\n9e35406 [Alex Levenson] move statistics filter\nc52750c [Alex Levenson] finish moving things around\n97a6bfd [Alex Levenson] Move things around pt2\n843b9fe [Alex Levenson] Move some files around pt 1\n5eedcc0 [Alex Levenson] turn off dictionary support for AtomicConverter\n541319e [Alex Levenson] various cleanup and fixes\n08e9638 [Alex Levenson] rm ColumnPathUtil\nbfe6795 [Alex Levenson] Add type bounds to FilterApi\n6c831ab [Alex Levenson] don't double log exception in SerializationUtil\na7a58d1 [Alex Levenson] use ColumnPath instead of String\n8f11a6b [Alex Levenson] Move ColumnPath and Canonicalizer to parquet-common\n9164359 [Alex Levenson] stash\nabc2be2 [Alex Levenson] Add null handling to record filters -- this impl is still broken though\n90ba8f7 [Alex Levenson] Update Serialization Util\n0a261f1 [Alex Levenson] Add compression in SerializationUtil\nf1278be [Alex Levenson] Add comment, fix tests\ncbd1a85 [Alex Levenson] Replace some specialization with generic views\ne496cbf [Alex Levenson] Fix short circuiting in StatisticsFilter\ndb6b32d [Alex Levenson] Address some comments, fix constructor in ParquetReader\nfd6f44d [Alex Levenson] Fix semver backward compat\n2fdd304 [Alex Levenson] Some more cleanup\nd34fb89 [Alex Levenson] Cleanup some TODOs\n544499c [Alex Levenson] stash\n7b32016 [Alex Levenson] Merge branch 'master' into alexlevenson/filter-api\n0e31251 [Alex Levenson] First pass at values filter, needs reworking\n470e409 [Alex Levenson] fix java6/7 bug, minor cleanup\nee7b221 [Alex Levenson] more InputFormat tests\n5ef849e [Alex Levenson] Add guards for not specifying both kinds of filter\n0186b1f [Alex Levenson] Add logging to ParquetInputFormat and tests for configuration\na622648 [Alex Levenson] cleanup imports\n9b1ea88 [Alex Levenson] Add tests for statistics filter\nd517373 [Alex Levenson] tests for filter validator\nb25fc44 [Alex Levenson] small cleanup of filter validator\n32067a1 [Alex Levenson] add test for collapse logical nots\n1efc198 [Alex Levenson] Add tests for invert filter predicate\n046b106 [Alex Levenson] some more fixes\nd3c4d7a [Alex Levenson] fix some more types, add in test for SerializationUtil\ncc51274 [Alex Levenson] fix generics in FilterPredicateInverter\nea08349 [Alex Levenson] First pass at rowgroup filter, needs testing\n156d91b [Alex Levenson] Add runtime type checker\n4dfb4f2 [Alex Levenson] Add serialization util\n8f80b20 [Alex Levenson] update comment\n7c25121 [Alex Levenson] Add class to Column struct\n58f1190 [Alex Levenson] Remove filterByUniqueValues\n7f20de6 [Alex Levenson] rename user predicates\naf14b42 [Alex Levenson] Update dsl\n04409c5 [Alex Levenson] Add generic types into Visitor\nba42884 [Alex Levenson] rm getClassName\n65f8af9 [Alex Levenson] Add in support for user defined predicates on columns\n6926337 [Alex Levenson] Add explicit tokens for notEq, ltEq, gtEq\n667ec9f [Alex Levenson] remove test for collapsing double negation\ndb2f71a [Alex Levenson] rename FilterPredicatesTest\na0a0533 [Alex Levenson] Address first round of comments\nb2bca94 [Alex Levenson] Add scala DSL and tests\nbedda87 [Alex Levenson] Add tests for FilterPredicate building\n238cbbe [Alex Levenson] Add scala dsl\n39f7b24 [Alex Levenson] add scala mvn boilerplate\n2ec71a7 [Alex Levenson] Add predicate API\n",
        "commit.author.name": "Alex Levenson",
        "pcid": "fc2c29df71c8455346a00b43dd1c4f118c335d2c",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroParquetReader.java": {
                "old": {
                    "(None, None)": [
                        20,
                        22,
                        28
                    ],
                    "('parquet.avro#AvroParquetReader', None)": [
                        35,
                        36,
                        39,
                        40,
                        43,
                        44,
                        47,
                        48
                    ]
                },
                "new": {
                    "('parquet.avro#AvroParquetReader', 'builder(Path)')": [
                        32,
                        33
                    ],
                    "('parquet.avro#AvroParquetReader', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/statistics/BinaryStatistics.java": {
                "old": {
                    "('parquet.column.statistics#BinaryStatistics', None)": [
                        20
                    ]
                },
                "new": {
                    "('parquet.column.statistics#BinaryStatistics', None)": [
                        20,
                        80,
                        83,
                        84,
                        85,
                        88,
                        89
                    ],
                    "('parquet.column.statistics#BinaryStatistics', 'genericGetMin')": [
                        81,
                        82
                    ],
                    "('parquet.column.statistics#BinaryStatistics', 'genericGetMax')": [
                        86,
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/statistics/BooleanStatistics.java": {
                "old": {
                    "('parquet.column.statistics#BooleanStatistics', None)": [
                        20
                    ]
                },
                "new": {
                    "('parquet.column.statistics#BooleanStatistics', None)": [
                        20,
                        80,
                        83,
                        84,
                        85,
                        88,
                        89
                    ],
                    "('parquet.column.statistics#BooleanStatistics', 'genericGetMin')": [
                        81,
                        82
                    ],
                    "('parquet.column.statistics#BooleanStatistics', 'genericGetMax')": [
                        86,
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/statistics/DoubleStatistics.java": {
                "old": {
                    "('parquet.column.statistics#DoubleStatistics', None)": [
                        20
                    ]
                },
                "new": {
                    "('parquet.column.statistics#DoubleStatistics', None)": [
                        20,
                        80,
                        83,
                        84,
                        85,
                        88,
                        89
                    ],
                    "('parquet.column.statistics#DoubleStatistics', 'genericGetMin')": [
                        81,
                        82
                    ],
                    "('parquet.column.statistics#DoubleStatistics', 'genericGetMax')": [
                        86,
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/statistics/FloatStatistics.java": {
                "old": {
                    "('parquet.column.statistics#FloatStatistics', None)": [
                        20
                    ]
                },
                "new": {
                    "('parquet.column.statistics#FloatStatistics', None)": [
                        20,
                        80,
                        83,
                        84,
                        85,
                        88,
                        89
                    ],
                    "('parquet.column.statistics#FloatStatistics', 'genericGetMin')": [
                        81,
                        82
                    ],
                    "('parquet.column.statistics#FloatStatistics', 'genericGetMax')": [
                        86,
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/statistics/IntStatistics.java": {
                "old": {
                    "('parquet.column.statistics#IntStatistics', None)": [
                        20
                    ]
                },
                "new": {
                    "('parquet.column.statistics#IntStatistics', None)": [
                        20,
                        80,
                        83,
                        84,
                        85,
                        88,
                        89
                    ],
                    "('parquet.column.statistics#IntStatistics', 'genericGetMin')": [
                        81,
                        82
                    ],
                    "('parquet.column.statistics#IntStatistics', 'genericGetMax')": [
                        86,
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/statistics/LongStatistics.java": {
                "old": {
                    "('parquet.column.statistics#LongStatistics', None)": [
                        20
                    ]
                },
                "new": {
                    "('parquet.column.statistics#LongStatistics', None)": [
                        20,
                        80,
                        83,
                        84,
                        85,
                        88,
                        89
                    ],
                    "('parquet.column.statistics#LongStatistics', 'genericGetMin')": [
                        81,
                        82
                    ],
                    "('parquet.column.statistics#LongStatistics', 'genericGetMax')": [
                        86,
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/statistics/Statistics.java": {
                "old": {
                    "('parquet.column.statistics#Statistics', None)": [
                        29
                    ]
                },
                "new": {
                    "('parquet.column.statistics#Statistics', None)": [
                        29,
                        167
                    ],
                    "('parquet.column.statistics#Statistics', 'genericGetMin')": [
                        165
                    ],
                    "('parquet.column.statistics#Statistics', 'genericGetMax')": [
                        166
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/FilteredRecordReader.java": {
                "new": {
                    "('parquet.io#FilteredRecordReader', None)": [
                        65,
                        66,
                        67,
                        70
                    ],
                    "('parquet.io#FilteredRecordReader', 'shouldSkipCurrentRecord')": [
                        68,
                        69
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer)')": [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66
                    ],
                    "('parquet.io#MessageColumnIO', None)": [
                        69,
                        70,
                        83
                    ],
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer,UnboundRecordFilter)')": [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        43,
                        44
                    ],
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer)')": [
                        70,
                        71,
                        72
                    ],
                    "('parquet.io#MessageColumnIO', None)": [
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        83,
                        84,
                        136,
                        137
                    ],
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer,UnboundRecordFilter)')": [
                        79,
                        80,
                        81,
                        82
                    ],
                    "('parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer,Filter)')": [
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordReader.java": {
                "old": {
                    "('parquet.io#RecordReader', None)": [
                        28
                    ]
                },
                "new": {
                    "('parquet.io#RecordReader', None)": [
                        28,
                        33,
                        34,
                        35,
                        36
                    ],
                    "('parquet.io#RecordReader', 'shouldSkipCurrentRecord')": [
                        37,
                        38
                    ],
                    "(None, None)": [
                        39
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordReaderImplementation.java": {
                "old": {
                    "('parquet.io#RecordReaderImplementation', 'read')": [
                        414
                    ]
                },
                "new": {
                    "('parquet.io#RecordReaderImplementation', None)": [
                        236,
                        237,
                        422,
                        423,
                        424
                    ],
                    "('parquet.io#RecordReaderImplementation', 'read')": [
                        416,
                        417,
                        418,
                        419,
                        420,
                        421
                    ],
                    "('parquet.io#RecordReaderImplementation', 'shouldSkipCurrentRecord')": [
                        425,
                        426
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/Binary.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        350
                    ],
                    "('parquet.io.api#Binary', None)": [
                        30,
                        97,
                        98,
                        99,
                        157,
                        158,
                        247,
                        248,
                        316,
                        318,
                        320,
                        322,
                        324,
                        326,
                        328,
                        330,
                        332,
                        334,
                        335,
                        344,
                        345,
                        347
                    ],
                    "('parquet.io.api#Binary', 'fromByteArray(byte,int,int)')": [
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96
                    ],
                    "('parquet.io.api#Binary', 'fromByteArray(byte)')": [
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156
                    ],
                    "('parquet.io.api#Binary', 'fromByteBuffer(ByteBuffer)')": [
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246
                    ],
                    "('parquet.io.api#Binary', 'fromString(String)')": [
                        253
                    ],
                    "('parquet.io.api#Binary', 'toStringUsingUTF8')": [
                        317
                    ],
                    "('parquet.io.api#Binary', 'length')": [
                        319
                    ],
                    "('parquet.io.api#Binary', 'writeTo(OutputStream)')": [
                        321
                    ],
                    "('parquet.io.api#Binary', 'writeTo(DataOutput)')": [
                        323
                    ],
                    "('parquet.io.api#Binary', 'getBytes')": [
                        325
                    ],
                    "('parquet.io.api#Binary', 'equals(byte,int,int)')": [
                        327
                    ],
                    "('parquet.io.api#Binary', 'equals(Binary)')": [
                        329
                    ],
                    "('parquet.io.api#Binary', 'compareTo(Binary)')": [
                        331
                    ],
                    "('parquet.io.api#Binary', 'compareTo(byte,int,int)')": [
                        333
                    ],
                    "('parquet.io.api#Binary', 'equals(Object)')": [
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343
                    ],
                    "('parquet.io.api#Binary', 'toByteBuffer')": [
                        346
                    ],
                    "('parquet.io.api#Binary', 'toString')": [
                        348,
                        349
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22,
                        30,
                        31
                    ],
                    "('parquet.io.api#Binary', None)": [
                        32,
                        33,
                        34,
                        35,
                        40,
                        42,
                        44,
                        46,
                        48,
                        50,
                        52,
                        54,
                        56,
                        58,
                        59,
                        68,
                        69,
                        70,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339
                    ],
                    "('parquet.io.api#Binary', 'toStringUsingUTF8')": [
                        39
                    ],
                    "('parquet.io.api#Binary', 'length')": [
                        41
                    ],
                    "('parquet.io.api#Binary', 'writeTo(OutputStream)')": [
                        43
                    ],
                    "('parquet.io.api#Binary', 'writeTo(DataOutput)')": [
                        45
                    ],
                    "('parquet.io.api#Binary', 'getBytes')": [
                        47
                    ],
                    "('parquet.io.api#Binary', 'equals(byte,int,int)')": [
                        49
                    ],
                    "('parquet.io.api#Binary', 'equals(Binary)')": [
                        51
                    ],
                    "('parquet.io.api#Binary', 'compareTo(Binary)')": [
                        53
                    ],
                    "('parquet.io.api#Binary', 'compareTo(byte,int,int)')": [
                        55
                    ],
                    "('parquet.io.api#Binary', 'toByteBuffer')": [
                        57
                    ],
                    "('parquet.io.api#Binary', 'equals(Object)')": [
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67
                    ],
                    "('parquet.io.api#Binary', 'toString')": [
                        71,
                        72
                    ],
                    "('parquet.io.api#Binary', 'fromByteArray(byte,int,int)')": [
                        158,
                        159
                    ],
                    "('parquet.io.api#Binary', 'fromByteArray(byte)')": [
                        227
                    ],
                    "('parquet.io.api#Binary', 'fromByteBuffer(ByteBuffer)')": [
                        343
                    ],
                    "('parquet.io.api#Binary', 'fromString(String)')": [
                        348
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/RecordMaterializer.java": {
                "new": {
                    "('parquet.io.api#RecordMaterializer', None)": [
                        37,
                        38,
                        40,
                        41
                    ],
                    "('parquet.io.api#RecordMaterializer', 'skipCurrentRecord')": [
                        39
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestFiltered.java": {
                "old": {
                    "(None, None)": [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnInteger')": [
                        87,
                        88,
                        95
                    ],
                    "('parquet.io#TestFiltered', 'testApplyFunctionFilterOnLong')": [
                        110,
                        117
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnString')": [
                        131,
                        139,
                        147
                    ],
                    "('parquet.io#TestFiltered', 'testApplyFunctionFilterOnString')": [
                        162,
                        170,
                        178
                    ],
                    "('parquet.io#TestFiltered', 'testPaged')": [
                        192
                    ],
                    "('parquet.io#TestFiltered', 'testFilteredAndPaged')": [
                        209
                    ],
                    "('parquet.io#TestFiltered', 'testFilteredOrPaged')": [
                        227,
                        228
                    ],
                    "('parquet.io#TestFiltered', 'testFilteredNotPaged')": [
                        246
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnInteger')": [
                        88,
                        95
                    ],
                    "('parquet.io#TestFiltered', 'testApplyFunctionFilterOnLong')": [
                        110,
                        117
                    ],
                    "('parquet.io#TestFiltered', 'testFilterOnString')": [
                        131,
                        139,
                        147
                    ],
                    "('parquet.io#TestFiltered', 'testApplyFunctionFilterOnString')": [
                        162,
                        170,
                        178
                    ],
                    "('parquet.io#TestFiltered', 'testPaged')": [
                        192
                    ],
                    "('parquet.io#TestFiltered', 'testFilteredAndPaged')": [
                        209
                    ],
                    "('parquet.io#TestFiltered', 'testFilteredOrPaged')": [
                        227,
                        228
                    ],
                    "('parquet.io#TestFiltered', 'testFilteredNotPaged')": [
                        246
                    ]
                }
            },
            "parquet-generator/src/main/java/parquet/encoding/Generator.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/format/converter/ParquetMetadataConverter.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        37,
                        52,
                        56
                    ]
                },
                "new": {
                    "(None, None)": [
                        33,
                        34,
                        60,
                        61,
                        62,
                        63
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/InternalParquetRecordReader.java": {
                "old": {
                    "('parquet.hadoop#InternalParquetRecordReader', None)": [
                        60,
                        75,
                        82,
                        83,
                        84,
                        85
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'checkRead')": [
                        112
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'nextKeyValue')": [
                        172,
                        177,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        191,
                        192,
                        193
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        24,
                        29,
                        30,
                        44
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', None)": [
                        51,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        89,
                        95,
                        97,
                        98,
                        99
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'checkRead')": [
                        126
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'nextKeyValue')": [
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        205,
                        206,
                        208,
                        209,
                        210,
                        215,
                        216
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileReader.java": {
                "old": {
                    "(None, None)": [
                        17,
                        18,
                        19,
                        20,
                        21,
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        50,
                        61,
                        62,
                        63,
                        64,
                        65
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileWriter.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        40,
                        51,
                        52,
                        53
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetInputFormat.java": {
                "old": {
                    "('parquet.hadoop#ParquetInputFormat', 'setUnboundRecordFilter(Job,Class)')": [
                        102
                    ],
                    "('parquet.hadoop#ParquetInputFormat', None)": [
                        103,
                        104,
                        154,
                        155
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'createRecordReader(InputSplit,TaskAttemptContext)')": [
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getSplits(Configuration,List)')": [
                        394
                    ]
                },
                "new": {
                    "(None, None)": [
                        46,
                        47,
                        48,
                        49,
                        60,
                        64,
                        65
                    ],
                    "('parquet.hadoop#ParquetInputFormat', None)": [
                        98,
                        99,
                        100,
                        101,
                        102,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        145,
                        146,
                        147,
                        154,
                        155,
                        165,
                        166,
                        167,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'setUnboundRecordFilter(Job,Class)')": [
                        114,
                        115,
                        116,
                        117,
                        118
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getUnboundRecordFilterInstance(Configuration)')": [
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'setFilterPredicate(Configuration,FilterPredicate)')": [
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getFilterPredicate(Configuration)')": [
                        168,
                        169,
                        170,
                        171,
                        172
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getFilter(Configuration)')": [
                        180,
                        181
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'createRecordReader(InputSplit,TaskAttemptContext)')": [
                        205,
                        206,
                        207,
                        209,
                        210
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getSplits(Configuration,List)')": [
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        466,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetInputSplit.java": {
                "old": {
                    "(None, None)": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        43
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetReader.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.hadoop#ParquetReader', None)": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        51,
                        59,
                        69,
                        75,
                        78,
                        79,
                        86,
                        89,
                        91,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104
                    ],
                    "('parquet.hadoop#ParquetReader', 'initReader')": [
                        137
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        42,
                        43,
                        46,
                        197,
                        198
                    ],
                    "('parquet.hadoop#ParquetReader', None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        63,
                        65,
                        67,
                        75,
                        77,
                        79,
                        85,
                        87,
                        89,
                        90,
                        91,
                        98,
                        100,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        112,
                        167,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196
                    ],
                    "('parquet.hadoop#ParquetReader', 'initReader')": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        157
                    ],
                    "('parquet.hadoop#ParquetReader', 'builder(ReadSupport,Path)')": [
                        168,
                        169
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetRecordReader.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('parquet.hadoop#ParquetRecordReader', None)": [
                        44,
                        50,
                        55,
                        58
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        26,
                        29,
                        30,
                        32
                    ],
                    "('parquet.hadoop#ParquetRecordReader', None)": [
                        48,
                        54,
                        59,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        72
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetWriter.java": {
                "new": {
                    "('parquet.hadoop#ParquetWriter', None)": [
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/mapred/DeprecatedParquetInputFormat.java": {
                "old": {
                    "(None, None)": [
                        22,
                        24,
                        25,
                        26,
                        27,
                        32,
                        37
                    ],
                    "('parquet.hadoop.mapred#DeprecatedParquetInputFormat', None)": [
                        90
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        29
                    ],
                    "('parquet.hadoop.mapred#DeprecatedParquetInputFormat', None)": [
                        85,
                        86,
                        87
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/metadata/ColumnChunkMetaData.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/metadata/ColumnChunkProperties.java": {
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/metadata/EncodingList.java": {
                "new": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/TestInputFormat.java": {
                "old": {
                    "(None, None)": [
                        29,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        31,
                        34,
                        35,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        57,
                        58,
                        59,
                        60,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67
                    ],
                    "('parquet.hadoop#TestInputFormat', None)": [
                        114,
                        115,
                        116,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        320,
                        321,
                        322,
                        323
                    ],
                    "('parquet.hadoop#TestInputFormat', 'testGetFilter')": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132
                    ],
                    "('parquet.hadoop#TestInputFormat', 'testOnlyOneKindOfFilterSupported')": [
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319
                    ],
                    "('parquet.hadoop#TestInputFormat', 'makeBlockFromStats(IntStatistics,long)')": [
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/metadata/TestColumnChunkMetaData.java": {
                "old": {
                    "(None, None)": [
                        2,
                        3,
                        4,
                        5
                    ]
                },
                "new": {
                    "(None, None)": [
                        10,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-protobuf/src/main/java/parquet/proto/ProtoParquetReader.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        21,
                        23
                    ],
                    "('parquet.proto#ProtoParquetReader', None)": [
                        32,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    "('parquet.proto#ProtoParquetReader', 'builder(Path)')": [
                        33,
                        34
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftParquetReader.java": {
                "old": {
                    "(None, None)": [
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25,
                        27,
                        29,
                        30,
                        132,
                        133,
                        134
                    ],
                    "('parquet.thrift#ThriftParquetReader', None)": [
                        43,
                        45,
                        55,
                        57,
                        66,
                        68,
                        78,
                        80,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131
                    ],
                    "('parquet.thrift#ThriftParquetReader', 'build(Path)')": [
                        85,
                        86
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftRecordConverter.java": {
                "new": {
                    "('parquet.thrift#ThriftRecordConverter', None)": [
                        814,
                        817,
                        818
                    ],
                    "('parquet.thrift#ThriftRecordConverter', 'skipCurrentRecord')": [
                        815,
                        816
                    ]
                }
            },
            "parquet-tools/src/main/java/parquet/tools/command/DumpCommand.java": {
                "old": {
                    "('parquet.tools.command#DumpCommand', None)": [
                        317
                    ]
                }
            }
        }
    },
    "fc2c29df71c8455346a00b43dd1c4f118c335d2c": {
        "authored_data": "2014 Jul 29 17:15",
        "commit.message": "PARQUET-19: Fix NPE when an empty file is included in a Hive query that uses CombineHiveInputFormat\n\nMake sure the valueObj instance variable is always initialized.  This change is neeeded when running a Hive query that uses the CombineHiveInputFormat and the first file in the combined split is empty.  This can lead to a NullPointerException because the valueObj is null when the CombineHiveInputFormat calls the createValue method.\n\nAuthor: Matthieu Martin <ma.tt.b.ma.rt.in+parquet@gmail.com>\n\nCloses #19 from matt-martin/fix_for_empty_files_NPE_with_CombineHiveInputFormat and squashes the following commits:\n\n6c3a7f5 [Matthieu Martin] Make sure the valueObj instance variable is always initialized.  This change is neeeded when running a Hive query that uses the CombineHiveInputFormat and the first file in the combined split is empty.  This can lead to a NullPointerException because the valueObj is null when the CombineHiveInputFormat calls the createValue method.\n",
        "commit.author.name": "Matthieu Martin",
        "pcid": "17864dfc0711d52d5af330469a1c2bd76128d46e",
        "changes": {
            "parquet-hive/parquet-hive-storage-handler/src/main/java/org/apache/hadoop/hive/ql/io/parquet/read/ParquetRecordReaderWrapper.java": {
                "old": {
                    "('org.apache.hadoop.hive.ql.io.parquet.read#ParquetRecordReaderWrapper', None)": [
                        109,
                        110,
                        111
                    ]
                },
                "new": {
                    "('org.apache.hadoop.hive.ql.io.parquet.read#ParquetRecordReaderWrapper', None)": [
                        109,
                        110,
                        111
                    ]
                }
            }
        }
    },
    "17864dfc0711d52d5af330469a1c2bd76128d46e": {
        "authored_data": "2014 Jul 29 01:07",
        "commit.message": "Column index access support\n\nThis patch adds the ability to use column index based access to parquet files in pig, which allows for rename capability similar to other file formats.  This is achieved by using the parametrized loader with an alternate schema.\n\nExample:\n# File Schema: {c1:int, c2:float, c3:chararray}\np = LOAD '/data/parquet/' USING parquet.pig.ParquetLoader('n1:int, n2:float, n3:chararray', 'true');\n\nIn this example, the names from the requested schema will be translated to the column positions from the file and will produce tuples based on the index position.\n\nTwo test cases are included that exercise index based access for both full file reads and column projected reads.\n\nNote:  This patch also disables the enforcer plugin on the pig project per discussion at the parquet meetup.  The justification for this is that the enforcer is too strict for internal classes and results in dead code because duplicating methods is required to add parameters where there is only one usage of the constructor/method.  The interface for the pig loader is imposed by LoadFunc and StoreFunc by the pig project and the implementations internals should not be used directly.\n\nAuthor: Daniel Weeks <dweeks@netflix.com>\n\nCloses #12 from dcw-netflix/column-index-access and squashes the following commits:\n\n1b5c5cf [Daniel Weeks] Refactored based on rewview comments\n12b53c1 [Daniel Weeks] Fixed some formatting and the missing filter method sig\ne5553f1 [Daniel Weeks] Adding back default constructor to satisfy other project requirements\n69d21e0 [Daniel Weeks] Merge branch 'master' into column-index-access\nf725c6f [Daniel Weeks] Removed enforcer for pig support\nd182dc6 [Daniel Weeks] Introduces column index access\n1c3c0c7 [Daniel Weeks] Fixed test with strict checking off\nf3cb495 [Daniel Weeks] Added type persuasion for primitive types with a flag to control strict type checking for conflicting schemas, which is strict by default.\n",
        "commit.author.name": "Daniel Weeks",
        "pcid": "4a07b3f545aaf60f0b1d6bba91ee22d214dfaff8",
        "changes": {
            "parquet-pig/src/main/java/parquet/pig/ParquetLoader.java": {
                "old": {
                    "('parquet.pig#ParquetLoader', None)": [
                        94
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        26,
                        27
                    ],
                    "('parquet.pig#ParquetLoader', None)": [
                        77,
                        84,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        147
                    ],
                    "('parquet.pig#ParquetLoader', 'setLocation(String,Job)')": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146
                    ],
                    "('parquet.pig#ParquetLoader', 'initSchema(Job)')": [
                        243,
                        244
                    ],
                    "('parquet.pig#ParquetLoader', 'pushProjection(RequiredFieldList)')": [
                        326,
                        327,
                        330,
                        333,
                        334
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/PigSchemaConverter.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        23,
                        30
                    ],
                    "('parquet.pig#PigSchemaConverter', 'filter(MessageType,Schema)')": [
                        351
                    ],
                    "('parquet.pig#PigSchemaConverter', None)": [
                        357,
                        358,
                        371
                    ],
                    "('parquet.pig#PigSchemaConverter', 'filterTupleSchema(GroupType,Schema)')": [
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370
                    ],
                    "('parquet.pig#PigSchemaConverter', 'filterTuple(GroupType,FieldSchema)')": [
                        395
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        22,
                        23,
                        28,
                        29,
                        33,
                        34,
                        35
                    ],
                    "('parquet.pig#PigSchemaConverter', None)": [
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        156,
                        157,
                        158,
                        164,
                        165,
                        166,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        457
                    ],
                    "('parquet.pig#PigSchemaConverter', 'deserializeRequiredFieldList(String)')": [
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155
                    ],
                    "('parquet.pig#PigSchemaConverter', 'serializeRequiredFieldList(RequiredFieldList)')": [
                        159,
                        160,
                        161,
                        162,
                        163
                    ],
                    "('parquet.pig#PigSchemaConverter', 'filter(MessageType,Schema)')": [
                        438
                    ],
                    "('parquet.pig#PigSchemaConverter', 'filter(MessageType,Schema,RequiredFieldList)')": [
                        448,
                        451
                    ],
                    "('parquet.pig#PigSchemaConverter', 'filterTuple(GroupType,FieldSchema)')": [
                        481
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/TupleReadSupport.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('parquet.pig#TupleReadSupport', None)": [
                        52
                    ],
                    "('parquet.pig#TupleReadSupport', 'init(InitContext)')": [
                        134,
                        135,
                        139,
                        140,
                        141,
                        142
                    ],
                    "('parquet.pig#TupleReadSupport', 'prepareForRead(Configuration,Map,MessageType,ReadContext)')": [
                        162
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        27,
                        32
                    ],
                    "('parquet.pig#TupleReadSupport', None)": [
                        51,
                        52,
                        56,
                        66,
                        67,
                        68,
                        69,
                        81,
                        82,
                        83
                    ],
                    "('parquet.pig#TupleReadSupport', 'getRequiredFields(Configuration)')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('parquet.pig#TupleReadSupport', 'init(InitContext)')": [
                        156,
                        157,
                        158,
                        159,
                        160,
                        163,
                        165
                    ],
                    "('parquet.pig#TupleReadSupport', 'prepareForRead(Configuration,Map,MessageType,ReadContext)')": [
                        178,
                        183,
                        187
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/TupleWriteSupport.java": {
                "old": {
                    "('parquet.pig#TupleWriteSupport', None)": [
                        48
                    ]
                },
                "new": {
                    "('parquet.pig#TupleWriteSupport', None)": [
                        48
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/MapConverter.java": {
                "old": {
                    "('parquet.pig.convert#MapConverter', None)": [
                        56,
                        61,
                        132,
                        144,
                        152
                    ]
                },
                "new": {
                    "('parquet.pig.convert#MapConverter', None)": [
                        56,
                        61,
                        132,
                        144,
                        152
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/TupleConverter.java": {
                "old": {
                    "('parquet.pig.convert#TupleConverter', None)": [
                        65,
                        73,
                        74,
                        75,
                        76,
                        83,
                        528,
                        554
                    ],
                    "('parquet.pig.convert#TupleConverter', 'newConverter(FieldSchema,Type,ParentValueContainer,boolean)')": [
                        92,
                        96,
                        98,
                        100
                    ]
                },
                "new": {
                    "('parquet.pig.convert#TupleConverter', None)": [
                        65,
                        73,
                        74,
                        75,
                        76,
                        83,
                        84,
                        103,
                        104,
                        541,
                        567
                    ],
                    "('parquet.pig.convert#TupleConverter', 'getType(boolean,String,int)')": [
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102
                    ],
                    "('parquet.pig.convert#TupleConverter', 'newConverter(FieldSchema,Type,ParentValueContainer,boolean,boolean)')": [
                        105,
                        109,
                        111,
                        113
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/TupleRecordMaterializer.java": {
                "old": {
                    "('parquet.pig.convert#TupleRecordMaterializer', None)": [
                        30
                    ]
                },
                "new": {
                    "('parquet.pig.convert#TupleRecordMaterializer', None)": [
                        30,
                        31,
                        32,
                        33,
                        34
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/TestParquetLoader.java": {
                "new": {
                    "('parquet.pig#TestParquetLoader', 'testColumnIndexAccess')": [
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287
                    ],
                    "('parquet.pig#TestParquetLoader', None)": [
                        288,
                        289,
                        290,
                        291,
                        324,
                        325,
                        326,
                        327
                    ],
                    "('parquet.pig#TestParquetLoader', 'testColumnIndexAccessProjection')": [
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/TestPigSchemaConverter.java": {
                "old": {
                    "('parquet.pig#TestPigSchemaConverter', 'testConversion(String,String)')": [
                        78
                    ]
                },
                "new": {
                    "('parquet.pig#TestPigSchemaConverter', 'testConversion(String,String)')": [
                        78
                    ]
                }
            }
        }
    },
    "4a07b3f545aaf60f0b1d6bba91ee22d214dfaff8": {
        "authored_data": "2014 Jul 23 13:29",
        "commit.message": "PARQUET-25. Pushdown predicates only work with hardcoded arguments.\n\nPull request for Sandy Ryza's fix for PARQUET-25.\n\nAuthor: Sandy Ryza <sandy.ryza@cloudera.com>\n\nCloses #22 from tomwhite/PARQUET-25-unbound-record-filter-configurable and squashes the following commits:\n\na9d3fdc [Sandy Ryza] PARQUET-25. Pushdown predicates only work with hardcoded arguments.\n",
        "commit.author.name": "Sandy Ryza",
        "pcid": "f284238631cb1026b4977f6f0b7ef342260d35c5",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetInputFormat.java": {
                "old": {
                    "('parquet.hadoop#ParquetInputFormat', 'createRecordReader(InputSplit,TaskAttemptContext)')": [
                        137,
                        138,
                        143
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'createRecordReader(InputSplit,TaskAttemptContext)')": [
                        138,
                        139,
                        140,
                        145,
                        146,
                        147,
                        148,
                        149
                    ]
                }
            }
        }
    },
    "f284238631cb1026b4977f6f0b7ef342260d35c5": {
        "authored_data": "2014 Jul 19 01:35",
        "commit.message": "PARQUET-22: Backport of HIVE-6938 adding rename support for parquet\n\nThis patch was included in hive after the moving the Serde to hive (included in hive 0.14+).  Backport is required for use with previous versions.\n\nAuthor: Daniel Weeks <dweeks@netflix.com>\n\nCloses #13 from dcw-netflix/backport-hive-6938-rename and squashes the following commits:\n\n453367b [Daniel Weeks] Backport of HIVE-6938 adding rename support for parquet\n",
        "commit.author.name": "Daniel Weeks",
        "pcid": "fb0104896815d55183f61c24b78c277dbae3987e",
        "changes": {
            "parquet-hive/parquet-hive-storage-handler/src/main/java/org/apache/hadoop/hive/ql/io/parquet/read/DataWritableReadSupport.java": {
                "old": {
                    "('org.apache.hadoop.hive.ql.io.parquet.read#DataWritableReadSupport', 'init(Configuration,Map,MessageType)')": [
                        96
                    ],
                    "('org.apache.hadoop.hive.ql.io.parquet.read#DataWritableReadSupport', 'prepareForRead(Configuration,Map,MessageType,parquet)')": [
                        124,
                        125
                    ]
                },
                "new": {
                    "('org.apache.hadoop.hive.ql.io.parquet.read#DataWritableReadSupport', None)": [
                        48,
                        131,
                        132,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.hadoop.hive.ql.io.parquet.read#DataWritableReadSupport', 'init(Configuration,Map,MessageType)')": [
                        97,
                        98
                    ],
                    "('org.apache.hadoop.hive.ql.io.parquet.read#DataWritableReadSupport', 'prepareForRead(Configuration,Map,MessageType,parquet)')": [
                        126,
                        127,
                        128
                    ],
                    "('org.apache.hadoop.hive.ql.io.parquet.read#DataWritableReadSupport', 'resolveSchemaAccess(MessageType,MessageType,Configuration)')": [
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151
                    ],
                    "(None, None)": [
                        152
                    ]
                }
            }
        }
    },
    "fb0104896815d55183f61c24b78c277dbae3987e": {
        "authored_data": "2014 Jul 18 23:19",
        "commit.message": "PARQUET-18: Fix all-null value pages with dict encoding.\n\nTestDictionary#testZeroValues demonstrates the problem, where a page of\nall null values is decoded using the DicitonaryValuesReader. Because\nthere are no non-null values, the page values section is 0 byte, but the\nDictionaryValuesReader assumes there is at least one encoded value and\nattempts to read a bit width. The test passes a byte array to\ninitFromPage with the offset equal to the array's length.\n\nThe fix is to detect that there are no input bytes to read. To avoid\nadding validity checks to the read path, this sets the internal decoder\nto one that will throw an exception if any reads are attempted.\n\nAuthor: Ryan Blue <rblue@cloudera.com>\n\nCloses #18 from rdblue/PARQUET-18-fix-nulls-with-dictionary and squashes the following commits:\n\n0711766 [Ryan Blue] PARQUET-18: Fix all-null value pages with dict encoding.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "f6c02e2c95a5c031ea3735737515e7e76b173ab2",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(int,byte,int)')": [
                        54,
                        56,
                        57,
                        58
                    ]
                },
                "new": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(int,byte,int)')": [
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        65,
                        66,
                        67
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/values/dictionary/TestDictionary.java": {
                "new": {
                    "('parquet.column.values.dictionary#TestDictionary', None)": [
                        420,
                        432,
                        433
                    ],
                    "('parquet.column.values.dictionary#TestDictionary', 'testZeroValues')": [
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431
                    ]
                }
            }
        }
    },
    "5dffe3521588016cf3519792953b0879054c3bfd": {
        "authored_data": "2014 Jul 18 23:02",
        "commit.message": "PARQUET-4: Use LRU caching for footers in ParquetInputFormat.\n\nReopening https://github.com/Parquet/parquet-mr/pull/403 against the new Apache repository.\n\nAuthor: Matthieu Martin <ma.tt.b.ma.rt.in+parquet@gmail.com>\n\nCloses #2 from matt-martin/master and squashes the following commits:\n\n99bb5a3 [Matthieu Martin] Minor javadoc and whitespace changes. Also added the FileStatusWrapper class to ParquetInputFormat to make sure that the debugging log statements print out meaningful paths.\n250a398 [Matthieu Martin] Be less aggressive about checking whether the underlying file has been appended to/overwritten/deleted in order to minimize the number of namenode interactions.\nd946445 [Matthieu Martin] Add javadocs to parquet.hadoop.LruCache.  Rename cache \"entries\" as cache \"values\" to avoid confusion with java.util.Map.Entry (which contains key value pairs whereas our old \"entries\" really only refer to the values).\na363622 [Matthieu Martin] Use LRU caching for footers in ParquetInputFormat.\n",
        "commit.author.name": "Matthieu Martin",
        "pcid": "2d8ebdbe00786823658bcdd2817e6b5afee15b25",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetInputFormat.java": {
                "old": {
                    "('parquet.hadoop#ParquetInputFormat', None)": [
                        87
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getAllFileRecursively(List,Configuration)')": [
                        407,
                        408,
                        409
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getFooters(JobContext)')": [
                        447,
                        448,
                        449,
                        450
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getFooters(Configuration,List)')": [
                        462
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23,
                        24,
                        27,
                        601,
                        602,
                        603
                    ],
                    "('parquet.hadoop#ParquetInputFormat', None)": [
                        90,
                        91,
                        92,
                        93,
                        528,
                        529,
                        530,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getAllFileRecursively(List,Configuration)')": [
                        414
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getFooters(JobContext)')": [
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getFooters(Configuration,List)')": [
                        515
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/TestInputFormat.java": {
                "old": {
                    "(None, None)": [
                        25,
                        43,
                        44
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        21,
                        32,
                        38,
                        46,
                        47
                    ],
                    "('parquet.hadoop#TestInputFormat', None)": [
                        247,
                        248,
                        249,
                        257,
                        258,
                        259,
                        273,
                        274,
                        279,
                        280
                    ],
                    "('parquet.hadoop#TestInputFormat', 'testFooterCacheValueIsCurrent')": [
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256
                    ],
                    "('parquet.hadoop#TestInputFormat', 'testFooterCacheValueIsNewer')": [
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272
                    ],
                    "('parquet.hadoop#TestInputFormat', 'getTempFile')": [
                        275,
                        276,
                        277,
                        278
                    ],
                    "('parquet.hadoop#TestInputFormat', 'getDummyCacheValue(File,FileSystem)')": [
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289
                    ]
                }
            }
        }
    },
    "2d8ebdbe00786823658bcdd2817e6b5afee15b25": {
        "authored_data": "2014 Jul 16 13:50",
        "commit.message": "PARQUET-9: Filtering records across multiple blocks\n\nUpdate of the minimal fix discussed in https://github.com/apache/incubator-parquet-mr/pull/1, with the recursive call changed to to a loop.\n\nAuthor: Tom White <tom@cloudera.com>\nAuthor: Steven Willis <swillis@compete.com>\n\nCloses #9 from tomwhite/filtering-records-across-multiple-blocks and squashes the following commits:\n\nafb08a4 [Tom White] Minimal fix\n9e723ee [Steven Willis] Test for filtering records across multiple blocks\n",
        "commit.author.name": "Tom White",
        "pcid": "9c2fab441bb9f615e8d4c275016a54e9d2f03462",
        "changes": {
            "parquet-avro/src/test/java/parquet/avro/TestSpecificReadWrite.java": {
                "old": {
                    "('parquet.avro#TestSpecificReadWrite', 'writeCarsToParquetFile(int,CompressionCodecName,boolean)')": [
                        172
                    ]
                },
                "new": {
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterMatchesMultipleBlocks')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87
                    ],
                    "('parquet.avro#TestSpecificReadWrite', None)": [
                        88,
                        89,
                        90,
                        95,
                        96,
                        97,
                        123,
                        124,
                        125,
                        209,
                        210
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterMatchesNoBlocks')": [
                        91,
                        92,
                        93,
                        94
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterMatchesFinalBlockOnly')": [
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'writeCarsToParquetFile(int,CompressionCodecName,boolean)')": [
                        208
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'writeCarsToParquetFile(int,CompressionCodecName,boolean,int,int)')": [
                        211,
                        222
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/InternalParquetRecordReader.java": {
                "old": {
                    "('parquet.hadoop#InternalParquetRecordReader', None)": [
                        56
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'nextKeyValue')": [
                        177
                    ]
                },
                "new": {
                    "('parquet.hadoop#InternalParquetRecordReader', None)": [
                        56
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'nextKeyValue')": [
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186
                    ]
                }
            }
        }
    }
}