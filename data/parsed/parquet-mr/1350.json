{
    "c5f68c51cb72503e7f9c483e009d94ed66aac335": {
        "authored_data": "2013 Oct 10 13:48",
        "commit.message": "Extract primitive inspectors and instantiate them only once\n",
        "commit.author.name": "Remy Pecqueur",
        "pcid": "d9e5f0bc2d7482062db72bddcb3eeefda05b2143",
        "changes": {
            "parquet-hive/src/main/java/parquet/hive/serde/ArrayWritableObjectInspector.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        26,
                        28,
                        29,
                        30,
                        31,
                        38,
                        39,
                        40,
                        41,
                        42,
                        340,
                        341
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getObjectInspector(TypeInfo)')": [
                        91,
                        104,
                        106
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', None)": [
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getObjectInspector(TypeInfo)')": [
                        80,
                        93,
                        95
                    ]
                }
            }
        }
    },
    "d9e5f0bc2d7482062db72bddcb3eeefda05b2143": {
        "authored_data": "2013 Oct 02 16:32",
        "commit.message": "Implement correctly Settable inspectors\n\n- Array inspector implements correctly set and resize\n- Map inspector implements settable\n- Root (and struct) inspector implements settable\n- Inspectors will now inspect basic objects because Hive sometimes\ndoes that\n",
        "commit.author.name": "Remy Pecqueur",
        "pcid": "763dfde36cd67c9f539cbd0db54b4dcdf3d15b77",
        "changes": {
            "parquet-hive/src/main/java/parquet/hive/serde/ArrayWritableObjectInspector.java": {
                "old": {
                    "(None, None)": [
                        4,
                        5,
                        6,
                        10,
                        11,
                        12,
                        13,
                        14,
                        28,
                        49
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', None)": [
                        56,
                        190,
                        191,
                        208,
                        216,
                        218,
                        223,
                        224,
                        241,
                        249,
                        251
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getStructFieldData(Object,StructField)')": [
                        133,
                        137
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getStructFieldsDataAsList(Object)')": [
                        147,
                        148,
                        149,
                        152,
                        153,
                        154
                    ]
                },
                "new": {
                    "(None, None)": [
                        4,
                        5,
                        9,
                        10,
                        11,
                        24,
                        46
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', None)": [
                        53,
                        160,
                        161,
                        162,
                        169,
                        170,
                        171,
                        176,
                        177,
                        178,
                        191,
                        192,
                        193,
                        233,
                        234,
                        235,
                        252,
                        260,
                        262,
                        267,
                        268,
                        269,
                        286,
                        294,
                        296
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getStructFieldData(Object,StructField)')": [
                        130,
                        131,
                        132,
                        133,
                        134,
                        138,
                        139
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getStructFieldsDataAsList(Object)')": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'create')": [
                        163,
                        164,
                        165,
                        166,
                        167,
                        168
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'setStructFieldData(Object,StructField,Object)')": [
                        172,
                        173,
                        174,
                        175
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'equals(Object)')": [
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'hashCode')": [
                        194,
                        195,
                        196,
                        197
                    ]
                }
            },
            "parquet-hive/src/main/java/parquet/hive/serde/ParquetHiveArrayInspector.java": {
                "old": {
                    "(None, None)": [
                        4,
                        5,
                        6,
                        10,
                        11,
                        12,
                        13,
                        14
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'getListElement(Object,int)')": [
                        55,
                        57,
                        58,
                        61
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'getListLength(Object)')": [
                        67,
                        70,
                        72,
                        73,
                        76
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'getList(Object)')": [
                        85,
                        87,
                        88,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'set(Object,int,Object)')": [
                        112,
                        113,
                        114,
                        115
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'resize(Object,int)')": [
                        122
                    ]
                },
                "new": {
                    "(None, None)": [
                        4,
                        5,
                        9,
                        10,
                        11
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'getListElement(Object,int)')": [
                        52,
                        53,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        66
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'getListLength(Object)')": [
                        72,
                        75,
                        76,
                        78,
                        79,
                        80,
                        81,
                        82,
                        85
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'getList(Object)')": [
                        94,
                        95,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        111
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'set(Object,int,Object)')": [
                        125
                    ],
                    "('parquet.hive.serde#ParquetHiveArrayInspector', 'resize(Object,int)')": [
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ]
                }
            },
            "parquet-hive/src/main/java/parquet/hive/serde/ParquetHiveMapInspector.java": {
                "old": {
                    "(None, None)": [
                        4,
                        5,
                        6,
                        10,
                        11,
                        12,
                        13,
                        14,
                        21
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', None)": [
                        26
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'getMapValueElement(Object,Object)')": [
                        63,
                        64,
                        66,
                        67,
                        68,
                        69,
                        70,
                        74
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'getMap(Object)')": [
                        84,
                        85,
                        86,
                        88,
                        89,
                        90,
                        91,
                        94
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'getMapSize(Object)')": [
                        99,
                        100
                    ]
                },
                "new": {
                    "(None, None)": [
                        4,
                        5,
                        9,
                        10,
                        11,
                        19
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', None)": [
                        23,
                        126,
                        127,
                        128,
                        132,
                        133,
                        134,
                        139,
                        140,
                        141,
                        146,
                        147,
                        148
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'getMapValueElement(Object,Object)')": [
                        60,
                        61,
                        62,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        71,
                        72,
                        75,
                        76,
                        77,
                        78,
                        79
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'getMap(Object)')": [
                        89,
                        90,
                        91,
                        92,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        103,
                        104,
                        105,
                        106,
                        107
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'getMapSize(Object)')": [
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'create')": [
                        129,
                        130,
                        131
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'put(Object,Object,Object)')": [
                        135,
                        136,
                        137,
                        138
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'remove(Object,Object)')": [
                        142,
                        143,
                        144,
                        145
                    ],
                    "('parquet.hive.serde#ParquetHiveMapInspector', 'clear(Object)')": [
                        149,
                        150,
                        151,
                        152
                    ]
                }
            }
        }
    },
    "256a3a1eb328e6f02eebc82eb37d91ad69e475d5": {
        "authored_data": "2013 Oct 15 23:17",
        "commit.message": "Fix issue 193: RLE decoder reading past the end of the stream.\n\nIf literal groups are not padded to groups of 8, the decoder reads past the end.\n",
        "commit.author.name": "Nong Li",
        "pcid": "cf0ee72e21df7afa17edea77d6894d40b73da4de",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        41
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(long,byte,int)')": [
                        58
                    ]
                },
                "new": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        41
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(long,byte,int)')": [
                        58
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RunLengthBitPackingHybridDecoder.java": {
                "old": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', None)": [
                        43,
                        46,
                        51,
                        58
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', 'readInt')": [
                        62,
                        67
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', 'readNext')": [
                        82,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', None)": [
                        44,
                        51
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', 'readNext')": [
                        79,
                        80,
                        96,
                        97,
                        98
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RunLengthBitPackingHybridValuesReader.java": {
                "old": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(long,byte,int)')": [
                        55
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(long,byte,int)')": [
                        55
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/values/rle/RunLengthBitPackingHybridIntegrationTest.java": {
                "old": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridIntegrationTest', 'doIntegrationTest(int)')": [
                        70,
                        72
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridIntegrationTest', 'doIntegrationTest(int)')": [
                        70,
                        71,
                        73
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/values/rle/TestRunLengthBitPackingHybridEncoder.java": {
                "old": {
                    "('parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testGroupBoundary')": [
                        288
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testGroupBoundary')": [
                        288
                    ]
                }
            }
        }
    },
    "73c86295a70e6ce98ed22ab213aafb105365e475": {
        "authored_data": "2013 Oct 14 22:43",
        "commit.message": "Misunderstood previous comment. Fixed binary predicate.\n",
        "commit.author.name": "Frank Austin Nothaft",
        "pcid": "10f266aef9faf78fb8cd07f488674c67f3bbf3a3",
        "changes": {
            "parquet-column/src/main/java/parquet/filter/ColumnPredicates.java": {
                "old": {
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToBinary(PredicateFunction)')": [
                        178
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToBinary(PredicateFunction)')": [
                        179
                    ]
                }
            }
        }
    },
    "10f266aef9faf78fb8cd07f488674c67f3bbf3a3": {
        "authored_data": "2013 Oct 14 15:53",
        "commit.message": "Cleaning method signature for binary case.\n",
        "commit.author.name": "Frank Austin Nothaft",
        "pcid": "422dfe05d5583318cc5116a688fc7e5676cafd89",
        "changes": {
            "parquet-column/src/main/java/parquet/filter/ColumnPredicates.java": {
                "old": {
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToBinary(PredicateFunction)')": [
                        178,
                        182
                    ]
                },
                "new": {
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToBinary(PredicateFunction)')": [
                        178,
                        182
                    ]
                }
            }
        }
    },
    "422dfe05d5583318cc5116a688fc7e5676cafd89": {
        "authored_data": "2013 Oct 11 16:07",
        "commit.message": "Updated files to add applyFunctionToBinary, and add specific interfaces for primitive types.\n",
        "commit.author.name": "Frank Austin Nothaft",
        "pcid": "3edf60dcbd90968d3b94f7f2669b485da649ee0d",
        "changes": {
            "parquet-column/src/main/java/parquet/filter/ColumnPredicates.java": {
                "old": {
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToString(PredicateFunction)')": [
                        50
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToInteger(PredicateFunction)')": [
                        64,
                        68
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToLong(PredicateFunction)')": [
                        82,
                        86
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToFloat(PredicateFunction)')": [
                        100,
                        104
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToDouble(PredicateFunction)')": [
                        118,
                        122
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToBoolean(PredicateFunction)')": [
                        136,
                        140
                    ]
                },
                "new": {
                    "('parquet.filter#ColumnPredicates', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        177
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToString(PredicateFunction)')": [
                        72
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToInteger(IntegerPredicateFunction)')": [
                        86,
                        90
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToLong(LongPredicateFunction)')": [
                        104,
                        108
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToFloat(FloatPredicateFunction)')": [
                        122,
                        126
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToDouble(DoublePredicateFunction)')": [
                        140,
                        144
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToBoolean(BooleanPredicateFunction)')": [
                        158,
                        162
                    ],
                    "('parquet.filter#ColumnPredicates', 'equalTo(E)')": [
                        168
                    ],
                    "('parquet.filter#ColumnPredicates', 'applyFunctionToBinary(PredicateFunction)')": [
                        178,
                        179,
                        180,
                        181,
                        182
                    ],
                    "(None, None)": [
                        183,
                        184,
                        185
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestFiltered.java": {
                "old": {
                    "('parquet.io#TestFiltered', None)": [
                        49,
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        41
                    ],
                    "('parquet.io#TestFiltered', None)": [
                        50,
                        52
                    ]
                }
            }
        }
    }
}