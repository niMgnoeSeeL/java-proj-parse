{
    "3f0975142a81b681e61195b4df7aa372d8c16ee9": {
        "authored_data": "2013 Apr 26 21:21",
        "commit.message": "making empty fields illegal\n",
        "commit.author.name": "julien",
        "pcid": "1db1018e696a3be8ea4167b966b774ae87386578",
        "changes": {
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        130,
                        184
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        130,
                        182
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testEmptyField')": [
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378
                    ],
                    "('parquet.io#TestColumnIO', None)": [
                        379
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('parquet.io#TestColumnIO', 'testEmptyField')": [
                        366,
                        367,
                        368,
                        369,
                        370
                    ],
                    "('parquet.io#TestColumnIO', None)": [
                        371
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/GenerateTPCH.java": {
                "old": {
                    "('parquet.pig#GenerateTPCH', 'writeField(RecordConsumer,int,String,Object)')": [
                        97,
                        109
                    ]
                },
                "new": {
                    "('parquet.pig#GenerateTPCH', 'writeField(RecordConsumer,int,String,Object)')": [
                        98,
                        108
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ParquetProtocol.java": {
                "old": {
                    "('parquet.thrift#ParquetProtocol', None)": [
                        41,
                        49
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeMessageEnd')": [
                        61
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeStructBegin(TStruct)')": [
                        66
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeStructEnd')": [
                        71
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeFieldBegin(TField)')": [
                        76
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeFieldEnd')": [
                        81
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeFieldStop')": [
                        86
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeMapBegin(TMap)')": [
                        91
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeMapEnd')": [
                        96
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeListBegin(TList)')": [
                        101
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeListEnd')": [
                        106
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeSetBegin(TSet)')": [
                        111
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeSetEnd')": [
                        116
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeBool(boolean)')": [
                        121
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeByte(byte)')": [
                        126
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeI16(short)')": [
                        131
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeI32(int)')": [
                        136
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeI64(long)')": [
                        141
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeDouble(double)')": [
                        146
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeString(String)')": [
                        151
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeBinary(ByteBuffer)')": [
                        156
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMessageBegin')": [
                        163
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMessageEnd')": [
                        168
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readStructBegin')": [
                        173
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readStructEnd')": [
                        178
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readFieldBegin')": [
                        183
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readFieldEnd')": [
                        188
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMapBegin')": [
                        193
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMapEnd')": [
                        198
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readListBegin')": [
                        203
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readListEnd')": [
                        208
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readSetBegin')": [
                        213
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readSetEnd')": [
                        218
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readBool')": [
                        223
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readByte')": [
                        228
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readI16')": [
                        233
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readI32')": [
                        238
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readI64')": [
                        243
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readDouble')": [
                        248
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readString')": [
                        253
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readBinary')": [
                        258
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.thrift#ParquetProtocol', None)": [
                        42,
                        43,
                        44,
                        59,
                        60,
                        61
                    ],
                    "('parquet.thrift#ParquetProtocol', 'getClassInfo')": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51
                    ],
                    "('parquet.thrift#ParquetProtocol', 'exception')": [
                        62,
                        63
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeMessageEnd')": [
                        75
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeStructBegin(TStruct)')": [
                        80
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeStructEnd')": [
                        85
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeFieldBegin(TField)')": [
                        90
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeFieldEnd')": [
                        95
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeFieldStop')": [
                        100
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeMapBegin(TMap)')": [
                        105
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeMapEnd')": [
                        110
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeListBegin(TList)')": [
                        115
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeListEnd')": [
                        120
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeSetBegin(TSet)')": [
                        125
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeSetEnd')": [
                        130
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeBool(boolean)')": [
                        135
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeByte(byte)')": [
                        140
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeI16(short)')": [
                        145
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeI32(int)')": [
                        150
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeI64(long)')": [
                        155
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeDouble(double)')": [
                        160
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeString(String)')": [
                        165
                    ],
                    "('parquet.thrift#ParquetProtocol', 'writeBinary(ByteBuffer)')": [
                        170
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMessageBegin')": [
                        177
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMessageEnd')": [
                        182
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readStructBegin')": [
                        187
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readStructEnd')": [
                        192
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readFieldBegin')": [
                        197
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readFieldEnd')": [
                        202
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMapBegin')": [
                        207
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readMapEnd')": [
                        212
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readListBegin')": [
                        217
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readListEnd')": [
                        222
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readSetBegin')": [
                        227
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readSetEnd')": [
                        232
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readBool')": [
                        237
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readByte')": [
                        242
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readI16')": [
                        247
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readI32')": [
                        252
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readI64')": [
                        257
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readDouble')": [
                        262
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readString')": [
                        267
                    ],
                    "('parquet.thrift#ParquetProtocol', 'readBinary')": [
                        272
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/TBaseRecordConverter.java": {
                "old": {
                    "('parquet.thrift#TBaseRecordConverter', None)": [
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('parquet.thrift#TBaseRecordConverter', None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ]
                }
            },
            "parquet-thrift/src/test/java/parquet/hadoop/thrift/TestInputOutputFormat.java": {
                "old": {
                    "('parquet.hadoop.thrift#TestInputOutputFormat', None)": [
                        66
                    ]
                },
                "new": {
                    "('parquet.hadoop.thrift#TestInputOutputFormat', None)": [
                        66
                    ]
                }
            },
            "parquet-thrift/src/test/java/parquet/thrift/TestParquetReadProtocol.java": {
                "old": {
                    "('parquet.thrift#TestParquetReadProtocol', 'validate(T)')": [
                        144
                    ]
                },
                "new": {
                    "('parquet.thrift#TestParquetReadProtocol', 'validate(T)')": [
                        144
                    ]
                }
            }
        }
    },
    "1db1018e696a3be8ea4167b966b774ae87386578": {
        "authored_data": "2013 Apr 26 18:01",
        "commit.message": "turn on validation for generate TPCH\n",
        "commit.author.name": "julien",
        "pcid": "280cea3b157181f4cad8cef9ddb69618caa3f5a8",
        "changes": {
            "parquet-pig/src/test/java/parquet/pig/GenerateTPCH.java": {
                "old": {
                    "('parquet.pig#GenerateTPCH', 'main(String)')": [
                        66
                    ]
                },
                "new": {
                    "('parquet.pig#GenerateTPCH', 'main(String)')": [
                        66
                    ]
                }
            }
        }
    },
    "280cea3b157181f4cad8cef9ddb69618caa3f5a8": {
        "authored_data": "2013 Apr 26 17:57",
        "commit.message": "make the API treat empty fields the same as missing fields to avoid confusion\n",
        "commit.author.name": "julien",
        "pcid": "a5d72a44117e7263c0e39be8ffcf5992f4e45b89",
        "changes": {
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        206
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        66,
                        118,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        191,
                        192,
                        193,
                        194,
                        198,
                        199,
                        200,
                        201,
                        202,
                        208,
                        218,
                        228,
                        238,
                        248
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingConverter.java": {
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        46,
                        47,
                        48,
                        49
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testPushParser')": [
                        344,
                        345,
                        346,
                        347,
                        348,
                        349
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        28,
                        29
                    ],
                    "('parquet.io#TestColumnIO', 'testPushParser')": [
                        349,
                        350
                    ],
                    "('parquet.io#TestColumnIO', None)": [
                        351,
                        352,
                        353,
                        354
                    ],
                    "('parquet.io#TestColumnIO', 'testEmptyField')": [
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377
                    ]
                }
            }
        }
    },
    "4c11b6625d1098345f2180aaba0efaa9cec6c69d": {
        "authored_data": "2013 Apr 26 15:27",
        "commit.message": "typo\n",
        "commit.author.name": "julien",
        "pcid": "a3e8963cb4ea88523a74105491a7db59f30b034c",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesWriter.java": {
                "old": {
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'writeBytes(Binary)')": [
                        77
                    ]
                },
                "new": {
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'writeBytes(Binary)')": [
                        77
                    ]
                }
            }
        }
    },
    "7cb782c35ea463da541f94576634850c58a50f34": {
        "authored_data": "2013 Apr 25 23:33",
        "commit.message": "make a constant for constant value; remove outragous System.out.println()\n",
        "commit.author.name": "julien",
        "pcid": "b125deea4849d3001616f426e4fa770e7e8d020e",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBitPackingValuesReader.java": {
                "old": {
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', None)": [
                        30,
                        31
                    ],
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'readInteger')": [
                        45
                    ],
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'initFromPage(long,byte,int)')": [
                        65
                    ]
                },
                "new": {
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', None)": [
                        26,
                        27,
                        32,
                        33
                    ],
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'initFromPage(long,byte,int)')": [
                        66
                    ]
                }
            }
        }
    },
    "b125deea4849d3001616f426e4fa770e7e8d020e": {
        "authored_data": "2013 Apr 25 22:27",
        "commit.message": "make initial capacity a constant\n",
        "commit.author.name": "julien",
        "pcid": "999b214297a9ce4cb7558fe598de04b5a2e9bb16",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/bitpacking/BitPackingValuesWriter.java": {
                "old": {
                    "('parquet.column.values.bitpacking#BitPackingValuesWriter', None)": [
                        48
                    ]
                },
                "new": {
                    "('parquet.column.values.bitpacking#BitPackingValuesWriter', None)": [
                        39,
                        40,
                        50
                    ]
                }
            }
        }
    },
    "999b214297a9ce4cb7558fe598de04b5a2e9bb16": {
        "authored_data": "2013 Apr 25 22:23",
        "commit.message": "use BytesUtils.paddedByteCountFromBits everywhere\n",
        "commit.author.name": "julien",
        "pcid": "67a357741b65cd087836cc2230ded57c1f4850d7",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/bitpacking/BitPacking.java": {
                "old": {
                    "('parquet.column.values.bitpacking#BaseBitPackingReader', 'alignToBytes(int)')": [
                        160
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('parquet.column.values.bitpacking#BaseBitPackingReader', 'alignToBytes(int)')": [
                        161
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/BitPackingValuesReader.java": {
                "old": {
                    "('parquet.column.values.bitpacking#BitPackingValuesReader', 'initFromPage(long,byte,int)')": [
                        70
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('parquet.column.values.bitpacking#BitPackingValuesReader', 'initFromPage(long,byte,int)')": [
                        71
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBasedBitPackingEncoder.java": {
                "old": {
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'toBytes')": [
                        90
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'getBufferSize')": [
                        107
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'toBytes')": [
                        91
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'getBufferSize')": [
                        108
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBasedBitPackingGenerator.java": {
                "old": {
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingGenerator', 'generateUnpack(FileWriter,int,int)')": [
                        172
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingGenerator', 'generateUnpack(FileWriter,int,int)')": [
                        174
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBitPackingValuesReader.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBitPackingValuesWriter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RLEDecoder.java": {
                "old": {
                    "('parquet.column.values.rle#RLEDecoder', None)": [
                        46
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RLEDecoder', None)": [
                        46
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RLESimpleEncoder.java": {
                "old": {
                    "('parquet.column.values.rle#RLESimpleEncoder', 'toBytes')": [
                        47
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RLESimpleEncoder', 'toBytes')": [
                        47
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/TestLog.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/values/bitpacking/BitPackingPerfTest.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            }
        }
    },
    "67a357741b65cd087836cc2230ded57c1f4850d7": {
        "authored_data": "2013 Apr 25 22:07",
        "commit.message": "make field private; add braces for one line if statements\n",
        "commit.author.name": "julien",
        "pcid": "133d845b497c6b9cc662a06405128c7ccf06a110",
        "changes": {
            "parquet-column/src/main/java/parquet/bytes/BytesInput.java": {
                "old": {
                    "('parquet.bytes#BytesInput', None)": [
                        186
                    ]
                },
                "new": {
                    "('parquet.bytes#BytesInput', None)": [
                        186
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/bytes/BytesUtils.java": {
                "old": {
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndian(InputStream)')": [
                        67
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndianOnOneByte(InputStream)')": [
                        74
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndianOnTwoBytes(InputStream)')": [
                        82
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndianOnThreeBytes(InputStream)')": [
                        91
                    ]
                },
                "new": {
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndian(InputStream)')": [
                        67,
                        69
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndianOnOneByte(InputStream)')": [
                        75,
                        77
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndianOnTwoBytes(InputStream)')": [
                        84,
                        86
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndianOnThreeBytes(InputStream)')": [
                        94,
                        96
                    ]
                }
            }
        }
    }
}