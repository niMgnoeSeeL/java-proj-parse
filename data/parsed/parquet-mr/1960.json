{
    "c96e7949a85b5327b348c587dfc9906707e18d4b": {
        "authored_data": "2013 Apr 29 17:11",
        "commit.message": "+ needs space\n",
        "commit.author.name": "julien",
        "pcid": "3f0975142a81b681e61195b4df7aa372d8c16ee9",
        "changes": {
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        80,
                        83,
                        114,
                        127,
                        143,
                        146,
                        165,
                        197,
                        207,
                        217,
                        227,
                        237,
                        247
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        80,
                        83,
                        114,
                        127,
                        143,
                        146,
                        165,
                        197,
                        207,
                        217,
                        227,
                        237,
                        247
                    ]
                }
            }
        }
    },
    "8cb82ee8c8bc9f558fc16a0f8f41f1334e5c5dc0": {
        "authored_data": "2013 Apr 29 17:06",
        "commit.message": "javadoc\n",
        "commit.author.name": "julien",
        "pcid": "4a8913e0f28a9fdea6eb37b1990cbe851e3edfac",
        "changes": {
            "parquet-column/src/main/java/parquet/column/ColumnReader.java": {
                "new": {
                    "(None, None)": [
                        59
                    ]
                }
            }
        }
    },
    "249e88935a203cda47483f7c73696000abd615e8": {
        "authored_data": "2013 Apr 29 17:01",
        "commit.message": "Use a simpler serialization for cascading Fields to be compatible with older cascading versions\n",
        "commit.author.name": "Avi Bryant",
        "pcid": "2676de9bf340c2b97d1df6ac4208eba8e1cc28dd",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/TupleReadSupport.java": {
                "old": {
                    "('parquet.cascading#TupleReadSupport', 'getRequestedFields(Configuration)')": [
                        23,
                        24,
                        25,
                        26,
                        27
                    ],
                    "('parquet.cascading#TupleReadSupport', None)": [
                        28,
                        38
                    ],
                    "('parquet.cascading#TupleReadSupport', 'setRequestedFields(JobConf,Fields)')": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37
                    ]
                },
                "new": {
                    "(None, None)": [
                        8
                    ],
                    "('parquet.cascading#TupleReadSupport', 'getRequestedFields(Configuration)')": [
                        24,
                        25,
                        26,
                        27,
                        28,
                        29
                    ],
                    "('parquet.cascading#TupleReadSupport', 'setRequestedFields(JobConf,Fields)')": [
                        33,
                        34
                    ]
                }
            }
        }
    },
    "fc0c7cdd92c703784b9dfa4f891ee2be59f4d7b0": {
        "authored_data": "2013 Apr 29 15:23",
        "commit.message": "integrate RLE into dictionary encoding\n",
        "commit.author.name": "julien",
        "pcid": "43dcb039476577743c62a0cb8f1ba18b0fff225c",
        "changes": {
            "parquet-column/src/main/java/parquet/bytes/BytesInput.java": {
                "new": {
                    "(None, None)": [
                        18,
                        19
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBasedBitPackingEncoder.java": {
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        24
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', None)": [
                        34
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'toBytes')": [
                        95
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'readValueDictionaryId')": [
                        43
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'readBytes')": [
                        48,
                        49
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        50,
                        51
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'readIntOnTwoBytes')": [
                        52,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        61
                    ]
                },
                "new": {
                    "(None, None)": [
                        11,
                        14
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        31,
                        32,
                        54
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(long,byte,int)')": [
                        42,
                        43,
                        44
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'readValueDictionaryId')": [
                        50,
                        51,
                        52,
                        53
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'readBytes')": [
                        60,
                        62
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesWriter.java": {
                "old": {
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        64
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'writeBytes(Binary)')": [
                        90
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'writeBytesUsingDict(Binary)')": [
                        99,
                        107,
                        108,
                        109
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'getBufferedSize')": [
                        116
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'getAllocatedSize')": [
                        122
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'getBytes')": [
                        131
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'reset')": [
                        147
                    ]
                },
                "new": {
                    "(None, None)": [
                        13,
                        19,
                        21
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        67
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'writeBytesUsingDict(Binary)')": [
                        108
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'getBufferedSize')": [
                        115
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'getAllocatedSize')": [
                        121
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'getBytes')": [
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146
                    ],
                    "('parquet.column.values.dictionary#DictionaryValuesWriter', 'reset')": [
                        162
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RLEDecoder.java": {
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        24
                    ],
                    "('parquet.column.values.rle#RLEDecoder', None)": [
                        31,
                        47
                    ],
                    "('parquet.column.values.rle#RLEDecoder', 'readNext')": [
                        80,
                        101
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RLESimpleEncoder.java": {
                "old": {
                    "('parquet.column.values.rle#RLESimpleEncoder', 'toBytes')": [
                        47,
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        23
                    ],
                    "('parquet.column.values.rle#RLESimpleEncoder', None)": [
                        35,
                        40,
                        41,
                        43,
                        44
                    ],
                    "('parquet.column.values.rle#RLESimpleEncoder', 'toBytes')": [
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        61,
                        62,
                        63,
                        65,
                        68
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/GenerateIntTestFile.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        25,
                        33
                    ]
                }
            }
        }
    },
    "74157a052de90b429000a16809db73f1edaa82b1": {
        "authored_data": "2013 Apr 29 11:50",
        "commit.message": "Fixed potential Integer overflow.\n",
        "commit.author.name": "0xh3x",
        "pcid": "a5d72a44117e7263c0e39be8ffcf5992f4e45b89",
        "changes": {
            "parquet-column/src/main/java/parquet/column/impl/ColumnWriterImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnWriterImpl', None)": [
                        53,
                        56
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnWriterImpl', None)": [
                        53,
                        56
                    ]
                }
            }
        }
    },
    "a49a0e929d6404d2291bc8959682ac6f8eadefa4": {
        "authored_data": "2013 Apr 29 04:47",
        "commit.message": "don't create a TaskAttemptContext in ParquetReader\n",
        "commit.author.name": "Avi Bryant",
        "pcid": "20a4bf72e9e64e317c9167eea88303b4f4e16f31",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetReader', None)": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetReader', None)": [
                        55
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetRecordReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetRecordReader', 'initialize(InputSplit,Configuration)')": [
                        157
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetRecordReader', 'initialize(InputSplit,Configuration)')": [
                        157
                    ]
                }
            }
        }
    },
    "2676de9bf340c2b97d1df6ac4208eba8e1cc28dd": {
        "authored_data": "2013 Apr 29 04:35",
        "commit.message": "Treat Fields.UNKNOWN as Fields.ALL\n",
        "commit.author.name": "Avi Bryant",
        "pcid": "593a105cea2faa01849240e140a6f9fd03bd31f7",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/SchemaIntersection.java": {
                "new": {
                    "('parquet.cascading#SchemaIntersection', None)": [
                        17,
                        18,
                        19
                    ]
                }
            }
        }
    }
}