{
    "54dd652ef68572c3796efbbe636699bf00d3fc6c": {
        "authored_data": "2013 Mar 05 21:47",
        "commit.message": "integrate the thrift changes\n",
        "commit.author.name": "julien",
        "pcid": "ee8ec11a25ede3279df609ee1e402476d8b6d028",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/format/converter/ParquetMetadataConverter.java": {
                "old": {
                    "('parquet.format.converter#ParquetMetadataConverter', None)": [
                        188,
                        189,
                        190
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'getCodec(String)')": [
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'writePageHeader(PageHeader,OutputStream)')": [
                        330
                    ]
                },
                "new": {
                    "(None, None)": [
                        38,
                        40,
                        45,
                        395,
                        396
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'writeDataPageHeader(int,int,int,parquet,OutputStream)')": [
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', None)": [
                        326,
                        327
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'writePageHeader(PageHeader,OutputStream)')": [
                        328
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'newDataPageHeader(int,int,int,parquet)')": [
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ColumnChunkPageWriteStore.java": {
                "old": {
                    "(None, None)": [
                        32,
                        33,
                        34
                    ],
                    "('parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        67,
                        68,
                        69,
                        70
                    ]
                },
                "new": {
                    "('parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileWriter.java": {
                "old": {
                    "(None, None)": [
                        30,
                        40,
                        41,
                        42,
                        43
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'writeDataPage(int,int,BytesInput,parquet)')": [
                        193,
                        194,
                        195,
                        196
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetFileWriter', 'writeDataPage(int,int,BytesInput,parquet)')": [
                        188,
                        189,
                        190,
                        191,
                        192
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/metadata/ParquetMetadata.java": {
                "old": {
                    "('parquet.hadoop.metadata#ParquetMetadata', None)": [
                        42
                    ]
                },
                "new": {
                    "('parquet.hadoop.metadata#ParquetMetadata', None)": [
                        42
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/TestReadIntTestFile.java": {
                "old": {
                    "('parquet.hadoop#TestReadIntTestFile', 'convertToCSV(File)')": [
                        94
                    ]
                }
            }
        }
    },
    "ee8ec11a25ede3279df609ee1e402476d8b6d028": {
        "authored_data": "2013 Mar 05 19:41",
        "commit.message": "javadoc; turn off the compatibility test for now\n",
        "commit.author.name": "julien",
        "pcid": "07ea133db57bdfa32fdcc03b370f0ac89d35fd0d",
        "changes": {
            "parquet-hadoop/src/test/java/parquet/hadoop/TestReadIntTestFile.java": {
                "old": {
                    "('parquet.hadoop#TestReadIntTestFile', None)": [
                        46
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', 'readTest')": [
                        48,
                        50,
                        52,
                        58
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        21,
                        24,
                        25,
                        27
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', None)": [
                        53,
                        66,
                        67,
                        68,
                        113,
                        114
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', 'readTest')": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', 'convertToCSV(File)')": [
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        78,
                        80,
                        86,
                        111,
                        112
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', 'verify(File,File)')": [
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftRecordConverter.java": {
                "old": {
                    "(None, None)": [
                        30,
                        38,
                        45
                    ],
                    "('parquet.thrift#ThriftRecordConverter', None)": [
                        57,
                        126,
                        169,
                        206,
                        263,
                        325,
                        345,
                        348,
                        356,
                        404,
                        437,
                        557,
                        558,
                        559,
                        572,
                        648,
                        649,
                        650
                    ],
                    "('parquet.thrift#ThriftRecordConverter', 'getCurrentRecord')": [
                        646,
                        647
                    ],
                    "('parquet.thrift#ThriftRecordConverter', 'newConverter(List,Type,ThriftField)')": [
                        668,
                        669,
                        670
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53
                    ],
                    "('parquet.thrift#ThriftRecordConverter', None)": [
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        522,
                        523,
                        524,
                        525,
                        526,
                        559,
                        560,
                        561,
                        562,
                        563,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        712,
                        713,
                        714,
                        715,
                        716,
                        725,
                        726,
                        727,
                        728,
                        729,
                        730,
                        731,
                        732
                    ],
                    "('parquet.thrift#ThriftRecordConverter', 'getCurrentRecord')": [
                        724
                    ]
                }
            }
        }
    },
    "07ea133db57bdfa32fdcc03b370f0ac89d35fd0d": {
        "authored_data": "2013 Mar 05 18:16",
        "commit.message": "license headers\n",
        "commit.author.name": "julien",
        "pcid": "932695cbb394dcc005ccbff07ef9ab8c0f6cf5c4",
        "changes": {
            "parquet-column/src/main/java/parquet/io/Binary.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftRecordConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            }
        }
    },
    "d35c264e8f922667d9d04263df2e3b18ec9205cc": {
        "authored_data": "2013 Mar 05 18:15",
        "commit.message": "turn byte[] into Binary object in the api\n",
        "commit.author.name": "julien",
        "pcid": "e8f8429e11372c04afffdcd133199ff87872eebf",
        "changes": {
            "parquet-column/src/main/java/parquet/column/ColumnReader.java": {
                "old": {
                    "(None, None)": [
                        78
                    ]
                },
                "new": {
                    "(None, None)": [
                        17,
                        18,
                        80
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/ColumnWriter.java": {
                "old": {
                    "(None, None)": [
                        56
                    ]
                },
                "new": {
                    "(None, None)": [
                        17,
                        18,
                        58
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/MemColumnReadStore.java": {
                "old": {
                    "('parquet.column.mem#MemColumnReadStore', None)": [
                        108,
                        115
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.column.mem#MemColumnReadStore', None)": [
                        109,
                        116
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/MemColumnReader.java": {
                "old": {
                    "('parquet.column.mem#MemColumnReader', 'getBinary')": [
                        134
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('parquet.column.mem#MemColumnReader', 'getBinary')": [
                        135
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/MemColumnWriter.java": {
                "old": {
                    "('parquet.column.mem#MemColumnWriter', 'write(byte,int,int)')": [
                        113
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('parquet.column.mem#MemColumnWriter', 'write(Binary,int,int)')": [
                        114
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/DevNullColumnReader.java": {
                "old": {
                    "('parquet.column.primitive#DevNullColumnReader', None)": [
                        27
                    ],
                    "('parquet.column.primitive#DevNullColumnReader', 'setDefaultBytes(byte)')": [
                        53
                    ],
                    "('parquet.column.primitive#DevNullColumnReader', 'readBytes')": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('parquet.column.primitive#DevNullColumnReader', None)": [
                        29
                    ],
                    "('parquet.column.primitive#DevNullColumnReader', 'setDefaultBytes(Binary)')": [
                        55
                    ],
                    "('parquet.column.primitive#DevNullColumnReader', 'readBytes')": [
                        71
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/DevNullColumnWriter.java": {
                "old": {
                    "('parquet.column.primitive#DevNullColumnWriter', 'writeBytes(byte)')": [
                        48
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.column.primitive#DevNullColumnWriter', 'writeBytes(Binary)')": [
                        49
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/PlainColumnReader.java": {
                "old": {
                    "('parquet.column.primitive#PlainColumnReader', 'readBytes')": [
                        49,
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('parquet.column.primitive#PlainColumnReader', 'readBytes')": [
                        50,
                        54,
                        55
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/PlainColumnWriter.java": {
                "old": {
                    "('parquet.column.primitive#PlainColumnWriter', 'writeBytes(byte)')": [
                        49,
                        51,
                        52
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('parquet.column.primitive#PlainColumnWriter', 'writeBytes(Binary)')": [
                        50,
                        52,
                        53
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/PrimitiveColumnReader.java": {
                "old": {
                    "('parquet.column.primitive#PrimitiveColumnReader', 'readBytes')": [
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ],
                    "('parquet.column.primitive#PrimitiveColumnReader', 'readBytes')": [
                        76
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/PrimitiveColumnWriter.java": {
                "old": {
                    "('parquet.column.primitive#PrimitiveColumnWriter', 'writeBytes(byte)')": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.column.primitive#PrimitiveColumnWriter', 'writeBytes(Binary)')": [
                        70
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/Group.java": {
                "old": {
                    "('parquet.example.data#Group', 'add(String,byte)')": [
                        41
                    ],
                    "('parquet.example.data#Group', 'add(int,byte)')": [
                        62
                    ],
                    "('parquet.example.data#Group', 'append(String,String)')": [
                        87
                    ],
                    "('parquet.example.data#Group', 'append(String,byte)')": [
                        96
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data#Group', 'add(String,Binary)')": [
                        42
                    ],
                    "('parquet.example.data#Group', 'add(int,Binary)')": [
                        63
                    ],
                    "('parquet.example.data#Group', 'append(String,String)')": [
                        88
                    ],
                    "('parquet.example.data#Group', 'append(String,Binary)')": [
                        97
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/GroupRecordConsumer.java": {
                "old": {
                    "('parquet.example.data#GroupRecordConsumer', 'addBinary(byte)')": [
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.example.data#GroupRecordConsumer', 'addBinary(Binary)')": [
                        86
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/GroupValueSource.java": {
                "old": {
                    "('parquet.example.data#GroupValueSource', 'getBinary(String,int)')": [
                        42
                    ],
                    "('parquet.example.data#GroupValueSource', 'getBinary(int,int)')": [
                        56
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.example.data#GroupValueSource', 'getBinary(String,int)')": [
                        43
                    ],
                    "('parquet.example.data#GroupValueSource', 'getBinary(int,int)')": [
                        57
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/BinaryValue.java": {
                "old": {
                    "('parquet.example.data.simple#BinaryValue', None)": [
                        24,
                        26
                    ],
                    "('parquet.example.data.simple#BinaryValue', 'getBinary')": [
                        31
                    ],
                    "('parquet.example.data.simple#BinaryValue', 'getString')": [
                        37
                    ],
                    "('parquet.example.data.simple#BinaryValue', 'toString')": [
                        47
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data.simple#BinaryValue', None)": [
                        25,
                        27
                    ],
                    "('parquet.example.data.simple#BinaryValue', 'getBinary')": [
                        32
                    ],
                    "('parquet.example.data.simple#BinaryValue', 'getString')": [
                        38
                    ],
                    "('parquet.example.data.simple#BinaryValue', 'toString')": [
                        48
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/Primitive.java": {
                "old": {
                    "('parquet.example.data.simple#Primitive', 'getBinary')": [
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.example.data.simple#Primitive', 'getBinary')": [
                        39
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/SimpleGroup.java": {
                "old": {
                    "('parquet.example.data.simple#SimpleGroup', 'getBinary(int,int)')": [
                        134
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,String)')": [
                        150
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,byte)')": [
                        159
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'getBinary(int,int)')": [
                        135
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,String)')": [
                        151
                    ],
                    "('parquet.example.data.simple#SimpleGroup', 'add(int,Binary)')": [
                        160
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/SimplePrimitiveConverter.java": {
                "old": {
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', 'addBinary(byte)')": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.example.data.simple.convert#SimplePrimitiveConverter', 'addBinary(Binary)')": [
                        37
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/BaseRecordReader.java": {
                "old": {
                    "('parquet.io#BaseRecordReader', 'addPrimitiveBINARY(String,int,byte)')": [
                        100
                    ]
                },
                "new": {
                    "('parquet.io#BaseRecordReader', 'addPrimitiveBINARY(String,int,Binary)')": [
                        100
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/ConverterConsumer.java": {
                "old": {
                    "('parquet.io#ConverterConsumer', 'addBinary(byte)')": [
                        98
                    ]
                },
                "new": {
                    "('parquet.io#ConverterConsumer', 'addBinary(Binary)')": [
                        98
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        221,
                        222
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        221,
                        222
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordConsumer.java": {
                "old": {
                    "('parquet.io#RecordConsumer', 'addBinary(byte)')": [
                        110
                    ]
                },
                "new": {
                    "('parquet.io#RecordConsumer', 'addBinary(Binary)')": [
                        110
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordConsumerLoggingWrapper.java": {
                "old": {
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addBinary(byte)')": [
                        108,
                        109
                    ]
                },
                "new": {
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addBinary(Binary)')": [
                        108,
                        109
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/ValidatingRecordConsumer.java": {
                "old": {
                    "('parquet.io#ValidatingRecordConsumer', 'addBinary(byte)')": [
                        172
                    ]
                },
                "new": {
                    "('parquet.io#ValidatingRecordConsumer', 'addBinary(Binary)')": [
                        172
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/convert/PrimitiveConverter.java": {
                "old": {
                    "('parquet.io.convert#PrimitiveConverter', 'addBinary(byte)')": [
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addBinary(Binary)')": [
                        32
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/mem/TestMemColumn.java": {
                "old": {
                    "('parquet.column.mem#TestMemColumn', 'testMemColumnBinary')": [
                        71,
                        78
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('parquet.column.mem#TestMemColumn', 'testMemColumnBinary')": [
                        72,
                        79
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingConverter.java": {
                "old": {
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        58,
                        59
                    ]
                },
                "new": {
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        58,
                        59
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingRecordConsumer.java": {
                "old": {
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addBinary(byte)')": [
                        83,
                        84
                    ]
                },
                "new": {
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addBinary(Binary)')": [
                        83,
                        84
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        289,
                        290
                    ]
                },
                "new": {
                    "('parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        289,
                        290
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/TupleRecordConsumer.java": {
                "old": {
                    "('parquet.pig#TupleRecordConsumer', 'addBinary(byte)')": [
                        214,
                        215
                    ]
                },
                "new": {
                    "(None, None)": [
                        38
                    ],
                    "('parquet.pig#TupleRecordConsumer', 'addBinary(Binary)')": [
                        215,
                        216
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/TupleWriteSupport.java": {
                "old": {
                    "('parquet.pig#TupleWriteSupport', 'writeValue(Type,FieldSchema,Tuple,int)')": [
                        156
                    ]
                },
                "new": {
                    "(None, None)": [
                        40
                    ],
                    "('parquet.pig#TupleWriteSupport', 'writeValue(Type,FieldSchema,Tuple,int)')": [
                        157
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/MapConverter.java": {
                "old": {
                    "('parquet.pig.convert#MapConverter', None)": [
                        152,
                        153
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('parquet.pig.convert#MapConverter', None)": [
                        153,
                        154
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/TupleConverter.java": {
                "old": {
                    "('parquet.pig.convert#TupleConverter', None)": [
                        132,
                        133,
                        147,
                        148
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('parquet.pig.convert#TupleConverter', None)": [
                        133,
                        134,
                        148,
                        149
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/GenerateTPCH.java": {
                "old": {
                    "('parquet.pig#GenerateTPCH', 'writeField(RecordConsumer,int,String,Object)')": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('parquet.pig#GenerateTPCH', 'writeField(RecordConsumer,int,String,Object)')": [
                        102
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ParquetWriteProtocol.java": {
                "old": {
                    "('parquet.thrift#ParquetWriteProtocol', 'writeBinaryToRecordConsumer(ByteBuffer)')": [
                        609,
                        610
                    ],
                    "('parquet.thrift#ParquetWriteProtocol', 'writeStringToRecordConsumer(String)')": [
                        614
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('parquet.thrift#ParquetWriteProtocol', 'writeBinaryToRecordConsumer(ByteBuffer)')": [
                        610,
                        611
                    ],
                    "('parquet.thrift#ParquetWriteProtocol', 'writeStringToRecordConsumer(String)')": [
                        615
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftRecordConverter.java": {
                "old": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "('parquet.thrift#ThriftRecordConverter', None)": [
                        82,
                        215,
                        333,
                        337
                    ]
                },
                "new": {
                    "(None, None)": [
                        16
                    ],
                    "('parquet.thrift#ThriftRecordConverter', None)": [
                        68,
                        201,
                        319,
                        323
                    ]
                }
            }
        }
    },
    "e8f8429e11372c04afffdcd133199ff87872eebf": {
        "authored_data": "2013 Mar 05 00:15",
        "commit.message": "populate encodings in column metadata\n",
        "commit.author.name": "julien",
        "pcid": "ecf19dc3d917d124c33d463d662a1fb885bfb243",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/format/converter/ParquetMetadataConverter.java": {
                "old": {
                    "('parquet.format.converter#ParquetMetadataConverter', 'addRowGroup(ParquetMetadata,List,BlockMetaData)')": [
                        140
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'fromParquetMetadata(FileMetaData)')": [
                        247,
                        253
                    ]
                },
                "new": {
                    "('parquet.format.converter#ParquetMetadataConverter', 'addRowGroup(ParquetMetadata,List,BlockMetaData)')": [
                        140
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', None)": [
                        155,
                        156,
                        163,
                        164
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'toFormatEncodings(List)')": [
                        157,
                        158,
                        159,
                        160,
                        161,
                        162
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'fromFormatEncodings(List)')": [
                        165,
                        166,
                        167,
                        168,
                        169,
                        170
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'fromParquetMetadata(FileMetaData)')": [
                        263,
                        264,
                        265,
                        266,
                        267
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ColumnChunkPageWriteStore.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        58,
                        79
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        21,
                        24,
                        29
                    ],
                    "('parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        54,
                        55,
                        63,
                        75,
                        85,
                        87
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileWriter.java": {
                "old": {
                    "('parquet.hadoop#ParquetFileWriter', None)": [
                        59
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'startColumn(ColumnDescriptor,long,CompressionCodecName)')": [
                        171
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'writeDataPage(int,int,BytesInput)')": [
                        186,
                        192
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'writeDataPages(BytesInput,long,long)')": [
                        207
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        28
                    ],
                    "('parquet.hadoop#ParquetFileWriter', None)": [
                        75
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'startColumn(ColumnDescriptor,long,CompressionCodecName)')": [
                        173,
                        174
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'writeDataPage(int,int,BytesInput,parquet)')": [
                        189,
                        195,
                        201
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'writeDataPages(BytesInput,long,long,List)')": [
                        211,
                        223
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'endColumn')": [
                        235,
                        241
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/metadata/ColumnChunkMetaData.java": {
                "old": {
                    "('parquet.hadoop.metadata#ColumnChunkMetaData', None)": [
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        22
                    ],
                    "('parquet.hadoop.metadata#ColumnChunkMetaData', None)": [
                        37,
                        47,
                        52,
                        54,
                        58,
                        140,
                        141,
                        142,
                        143,
                        146,
                        147
                    ],
                    "('parquet.hadoop.metadata#ColumnChunkMetaData', 'getEncodings')": [
                        144,
                        145
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/TestInputFormat.java": {
                "old": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.hadoop#TestInputFormat', 'newBlock(long)')": [
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        32
                    ],
                    "('parquet.hadoop#TestInputFormat', 'newBlock(long)')": [
                        67
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/TestParquetFileWriter.java": {
                "old": {
                    "('parquet.hadoop#TestParquetFileWriter', 'test')": [
                        69,
                        70,
                        73,
                        74,
                        75,
                        80,
                        83
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('parquet.hadoop#TestParquetFileWriter', 'test')": [
                        70,
                        71,
                        74,
                        75,
                        76,
                        81,
                        84
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/GenerateIntTestFile.java": {
                "old": {
                    "('parquet.pig#GenerateIntTestFile', 'writeBlock(MessageType,MemPageStore,int,ParquetFileWriter)')": [
                        124
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        32
                    ],
                    "('parquet.pig#GenerateIntTestFile', 'writeBlock(MessageType,MemPageStore,int,ParquetFileWriter)')": [
                        127
                    ]
                }
            }
        }
    },
    "ecf19dc3d917d124c33d463d662a1fb885bfb243": {
        "authored_data": "2013 Mar 04 20:09",
        "commit.message": "add encoding information for the column reader; allow column writer to specify the encoding\n",
        "commit.author.name": "julien",
        "pcid": "9c79b0876401264707d3bfae37362afc72445df5",
        "changes": {
            "parquet-column/src/main/java/parquet/column/mem/MemColumnReader.java": {
                "old": {
                    "('parquet.column.mem#MemColumnReader', 'checkRead')": [
                        222
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.column.mem#MemColumnReader', 'checkRead')": [
                        221,
                        222,
                        223,
                        224,
                        225,
                        228
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/MemColumnWriter.java": {
                "old": {
                    "('parquet.column.mem#MemColumnWriter', None)": [
                        41
                    ],
                    "('parquet.column.mem#MemColumnWriter', 'writePage')": [
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('parquet.column.mem#MemColumnWriter', None)": [
                        42
                    ],
                    "('parquet.column.mem#MemColumnWriter', 'writePage')": [
                        76
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/MemPageWriter.java": {
                "old": {
                    "('parquet.column.mem#MemPageWriter', 'writePage(BytesInput,int)')": [
                        38,
                        43
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('parquet.column.mem#MemPageWriter', 'writePage(BytesInput,int,Encoding)')": [
                        39,
                        44
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/Page.java": {
                "old": {
                    "('parquet.column.mem#Page', None)": [
                        38
                    ],
                    "('parquet.column.mem#Page', 'toString')": [
                        72
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.column.mem#Page', None)": [
                        37,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        50,
                        79,
                        80,
                        81,
                        82,
                        85,
                        86
                    ],
                    "('parquet.column.mem#Page', 'getEncoding')": [
                        83,
                        84
                    ],
                    "('parquet.column.mem#Page', 'toString')": [
                        89
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/PageWriter.java": {
                "old": {
                    "(None, None)": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        37
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/BooleanPlainColumnWriter.java": {
                "old": {
                    "('parquet.column.primitive#BooleanPlainColumnWriter', None)": [
                        35
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        26,
                        87,
                        88
                    ],
                    "('parquet.column.primitive#BooleanPlainColumnWriter', None)": [
                        37,
                        84
                    ],
                    "('parquet.column.primitive#BooleanPlainColumnWriter', 'getEncoding')": [
                        85,
                        86
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/PlainColumnWriter.java": {
                "old": {
                    "('parquet.column.primitive#PlainColumnWriter', None)": [
                        34
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        132,
                        133
                    ],
                    "('parquet.column.primitive#PlainColumnWriter', None)": [
                        35,
                        129
                    ],
                    "('parquet.column.primitive#PlainColumnWriter', 'getEncoding')": [
                        130,
                        131
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/PrimitiveColumnWriter.java": {
                "new": {
                    "(None, None)": [
                        19
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/convert/GroupConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/convert/PrimitiveConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/TypeConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/mem/TestMemPageStore.java": {
                "old": {
                    "(None, None)": [
                        19,
                        25,
                        26,
                        27,
                        28
                    ],
                    "('parquet.column.mem#TestMemPageStore', 'test')": [
                        40,
                        41,
                        42,
                        43
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19
                    ],
                    "('parquet.column.mem#TestMemPageStore', 'test')": [
                        37,
                        38,
                        39,
                        40
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/format/converter/ParquetMetadataConverter.java": {
                "new": {
                    "('parquet.format.converter#ParquetMetadataConverter', None)": [
                        155,
                        156,
                        163,
                        164,
                        165,
                        172
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'getEncoding(Encoding)')": [
                        157,
                        158,
                        159,
                        160,
                        161,
                        162
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'getEncoding(parquet)')": [
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ],
                    "(None, None)": [
                        366
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ColumnChunkPageReadStore.java": {
                "old": {
                    "('parquet.hadoop#ColumnChunkPageReadStore', None)": [
                        67
                    ]
                },
                "new": {
                    "('parquet.hadoop#ColumnChunkPageReadStore', None)": [
                        67,
                        68
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ColumnChunkPageWriteStore.java": {
                "old": {
                    "('parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        58,
                        59,
                        65
                    ]
                },
                "new": {
                    "('parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        58,
                        64
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetFileReader', 'readColumns')": [
                        316
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetFileReader', 'readColumns')": [
                        316,
                        317
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/TupleRecordConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/TBaseRecordConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftReader.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftRecordConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-thrift/src/test/java/parquet/hadoop/thrift/TestParquetReadProtocol.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            }
        }
    },
    "9c79b0876401264707d3bfae37362afc72445df5": {
        "authored_data": "2013 Mar 04 19:37",
        "commit.message": "thrift input/output format support\n",
        "commit.author.name": "julien",
        "pcid": "25b755958b1906dd3d4f6767a2008d8566746062",
        "changes": {
            "parquet-thrift/src/main/java/parquet/hadoop/thrift/ThriftReadSupport.java": {
                "old": {
                    "('parquet.hadoop.thrift#ThriftReadSupport', 'initForRead(Configuration,Map,MessageType,MessageType)')": [
                        32,
                        34
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        27
                    ],
                    "('parquet.hadoop.thrift#ThriftReadSupport', 'initForRead(Configuration,Map,MessageType,MessageType)')": [
                        35,
                        37,
                        38,
                        39,
                        40,
                        41
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/hadoop/thrift/ThriftWriteSupport.java": {
                "old": {
                    "('parquet.hadoop.thrift#ThriftWriteSupport', 'init(Configuration)')": [
                        66
                    ]
                },
                "new": {
                    "('parquet.hadoop.thrift#ThriftWriteSupport', 'init(Configuration)')": [
                        66
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftMetaData.java": {
                "old": {
                    "('parquet.thrift#ThriftMetaData', None)": [
                        30
                    ],
                    "('parquet.thrift#ThriftMetaData', 'fromExtraMetaData(Map)')": [
                        41,
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24
                    ],
                    "('parquet.thrift#ThriftMetaData', None)": [
                        30,
                        32,
                        34,
                        36,
                        45,
                        46
                    ],
                    "('parquet.thrift#ThriftMetaData', 'getDescriptor')": [
                        43,
                        44
                    ],
                    "('parquet.thrift#ThriftMetaData', 'fromExtraMetaData(Map)')": [
                        50,
                        51,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69
                    ],
                    "('parquet.thrift#ThriftMetaData', 'toExtraMetaData')": [
                        75
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/struct/ThriftType.java": {
                "old": {
                    "('parquet.thrift.struct#ThriftType', None)": [
                        154,
                        175,
                        202,
                        223,
                        262,
                        282,
                        295,
                        308,
                        321,
                        334,
                        347,
                        360
                    ]
                }
            },
            "parquet-thrift/src/test/java/parquet/hadoop/thrift/TestInputOutputFormat.java": {
                "old": {
                    "('parquet.hadoop.thrift#TestInputOutputFormat', None)": [
                        53,
                        56
                    ],
                    "('parquet.hadoop.thrift#TestInputOutputFormat', 'testReadWrite')": [
                        70,
                        71,
                        106,
                        108,
                        111,
                        113,
                        114,
                        116,
                        118
                    ]
                },
                "new": {
                    "(None, None)": [
                        44,
                        46
                    ],
                    "('parquet.hadoop.thrift#TestInputOutputFormat', None)": [
                        50,
                        62,
                        68,
                        71
                    ],
                    "('parquet.hadoop.thrift#TestInputOutputFormat', 'nextAddressbook(int)')": [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61
                    ],
                    "('parquet.hadoop.thrift#TestInputOutputFormat', 'testReadWrite')": [
                        85,
                        86,
                        124,
                        125,
                        126,
                        127
                    ]
                }
            }
        }
    },
    "25b755958b1906dd3d4f6767a2008d8566746062": {
        "authored_data": "2013 Mar 04 19:02",
        "commit.message": "thrift read protocol; fix repetition level size in little endian\n",
        "commit.author.name": "julien",
        "pcid": "af20471a423684375533774320b874a49195d4f8",
        "changes": {
            "parquet-column/src/main/java/parquet/Log.java": {
                "old": {
                    "('parquet#Log', None)": [
                        46
                    ]
                },
                "new": {
                    "('parquet#Log', None)": [
                        46
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/bytes/BytesInput.java": {
                "old": {
                    "('parquet.bytes#BytesInput', None)": [
                        70,
                        206
                    ]
                },
                "new": {
                    "('parquet.bytes#BytesInput', None)": [
                        70,
                        206
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/bytes/BytesUtils.java": {
                "old": {
                    "('parquet.bytes#BytesUtils', None)": [
                        47,
                        70,
                        71
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntBigEndian(byte,int)')": [
                        53,
                        54,
                        55,
                        56,
                        57
                    ],
                    "('parquet.bytes#BytesUtils', 'writeIntBigEndian(OutputStream,int)')": [
                        72,
                        73,
                        74,
                        75,
                        76
                    ]
                },
                "new": {
                    "('parquet.bytes#BytesUtils', None)": [
                        47
                    ],
                    "('parquet.bytes#BytesUtils', 'readIntLittleEndian(byte,int)')": [
                        53,
                        54,
                        55,
                        56,
                        57
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/mem/MemColumnReader.java": {
                "new": {
                    "('parquet.column.mem#MemColumnReader', 'checkRead')": [
                        235,
                        237,
                        239
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/BitPackingColumnReader.java": {
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('parquet.column.primitive#BitPackingColumnReader', None)": [
                        35
                    ],
                    "('parquet.column.primitive#BitPackingColumnReader', 'initFromPage(long,byte,int)')": [
                        73
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/BoundedIntColumnReader.java": {
                "old": {
                    "('parquet.column.primitive#BoundedIntColumnReader', None)": [
                        39
                    ],
                    "('parquet.column.primitive#BoundedIntColumnReader', 'initFromPage(long,byte,int)')": [
                        67
                    ]
                },
                "new": {
                    "('parquet.column.primitive#BoundedIntColumnReader', None)": [
                        39
                    ],
                    "('parquet.column.primitive#BoundedIntColumnReader', 'initFromPage(long,byte,int)')": [
                        67,
                        68
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/GroupValueSource.java": {
                "new": {
                    "('parquet.example.data#GroupValueSource', 'getValueToString(int,int)')": [
                        58
                    ],
                    "('parquet.example.data#GroupValueSource', None)": [
                        59
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/BinaryValue.java": {
                "old": {
                    "('parquet.example.data.simple#BinaryValue', 'toString')": [
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ],
                    "('parquet.example.data.simple#BinaryValue', 'toString')": [
                        47
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/DoubleValue.java": {
                "new": {
                    "('parquet.example.data.simple#DoubleValue', None)": [
                        38
                    ],
                    "('parquet.example.data.simple#DoubleValue', 'toString')": [
                        39,
                        40
                    ],
                    "(None, None)": [
                        41
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/FloatValue.java": {
                "new": {
                    "('parquet.example.data.simple#FloatValue', None)": [
                        38
                    ],
                    "('parquet.example.data.simple#FloatValue', 'toString')": [
                        39,
                        40
                    ],
                    "(None, None)": [
                        41
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/SimpleGroup.java": {
                "new": {
                    "('parquet.example.data.simple#SimpleGroup', 'getValueToString(int,int)')": [
                        114,
                        115
                    ],
                    "('parquet.example.data.simple#SimpleGroup', None)": [
                        116,
                        117,
                        118
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/GroupRecordConverter.java": {
                "old": {
                    "('parquet.example.data.simple.convert#GroupRecordConverter', None)": [
                        28,
                        29,
                        30,
                        37
                    ],
                    "('parquet.example.data.simple.convert#GroupRecordConverter', 'getCurrentRecord')": [
                        48
                    ]
                },
                "new": {
                    "('parquet.example.data.simple.convert#GroupRecordConverter', None)": [
                        28,
                        35
                    ],
                    "('parquet.example.data.simple.convert#GroupRecordConverter', 'getCurrentRecord')": [
                        46
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/SimpleGroupConverter.java": {
                "old": {
                    "('parquet.example.data.simple.convert#SimpleGroupConverter', None)": [
                        27
                    ]
                },
                "new": {
                    "('parquet.example.data.simple.convert#SimpleGroupConverter', None)": [
                        27
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/GroupType.java": {
                "old": {
                    "('parquet.schema#GroupType', 'convert(List,TypeConverter)')": [
                        252,
                        253,
                        254
                    ]
                },
                "new": {
                    "('parquet.schema#GroupType', 'convert(List,TypeConverter)')": [
                        252,
                        253,
                        254
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/bytes/TestBytesUtil.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        27,
                        28,
                        54,
                        55
                    ],
                    "('parquet.bytes#TestBytesUtil', 'testInt')": [
                        33,
                        34,
                        35,
                        36,
                        37
                    ],
                    "('parquet.bytes#TestBytesUtil', None)": [
                        39,
                        40,
                        46,
                        47,
                        48
                    ],
                    "('parquet.bytes#TestBytesUtil', 'testReadInt')": [
                        41,
                        42,
                        43,
                        44,
                        45
                    ],
                    "('parquet.bytes#TestBytesUtil', 'testWriteInt')": [
                        49,
                        50,
                        51,
                        52,
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19
                    ],
                    "('parquet.bytes#TestBytesUtil', 'testWidth')": [
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingConverter.java": {
                "old": {
                    "('parquet.io#ExpectationValidatingConverter', 'path(List,Type)')": [
                        145,
                        146,
                        148
                    ]
                },
                "new": {
                    "('parquet.io#ExpectationValidatingConverter', 'path(List,Type)')": [
                        145,
                        146,
                        147,
                        148,
                        150
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', None)": [
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109
                    ]
                },
                "new": {
                    "('parquet.io#TestColumnIO', None)": [
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/format/converter/ParquetMetadataConverter.java": {
                "new": {
                    "('parquet.format.converter#ParquetMetadataConverter', 'fromParquetSchema(List)')": [
                        253
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileWriter.java": {
                "new": {
                    "('parquet.hadoop#ParquetFileWriter', None)": [
                        59
                    ]
                }
            },
            "parquet-hadoop/src/test/java/parquet/hadoop/TestReadIntTestFile.java": {
                "old": {
                    "('parquet.hadoop#TestReadIntTestFile', None)": [
                        40
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', 'readTest')": [
                        42,
                        52,
                        53,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        20,
                        22,
                        23,
                        40,
                        41
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', None)": [
                        46
                    ],
                    "('parquet.hadoop#TestReadIntTestFile', 'readTest')": [
                        48,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/thrift/ThriftRecordConverter.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('parquet.thrift#ThriftRecordConverter', None)": [
                        32,
                        33,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        52,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        118,
                        130,
                        141,
                        153,
                        165,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        186,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        211,
                        216,
                        217,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        234,
                        239,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        252,
                        253,
                        257,
                        258,
                        259,
                        261,
                        266,
                        268,
                        269,
                        282,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        352,
                        390,
                        403
                    ],
                    "('parquet.thrift#ThriftRecordConverter', 'newConverter(List,Type,ThriftField)')": [
                        422,
                        425,
                        427,
                        429,
                        431,
                        433,
                        438
                    ]
                },
                "new": {
                    "(None, None)": [
                        9,
                        11,
                        28,
                        29
                    ],
                    "('parquet.thrift#ThriftRecordConverter', None)": [
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        183,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        305,
                        306,
                        307,
                        308,
                        309,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        354,
                        355,
                        356,
                        357,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        488,
                        492,
                        493,
                        494,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        522,
                        528,
                        529,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        537,
                        538,
                        539,
                        540,
                        541,
                        566,
                        567,
                        568,
                        569,
                        570,
                        620
                    ],
                    "('parquet.thrift#ThriftRecordConverter', 'getCurrentRecord')": [
                        627
                    ],
                    "('parquet.thrift#ThriftRecordConverter', 'newConverter(List,Type,ThriftField)')": [
                        640,
                        643,
                        645,
                        647,
                        649,
                        651,
                        656
                    ]
                }
            },
            "parquet-thrift/src/test/java/parquet/hadoop/thrift/TestParquetReadProtocol.java": {
                "old": {
                    "('parquet.hadoop.thrift#TestParquetReadProtocol', 'validate(TBase)')": [
                        59,
                        61,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        82,
                        83,
                        84,
                        85,
                        86
                    ]
                },
                "new": {
                    "(None, None)": [
                        5,
                        7,
                        9,
                        24,
                        34,
                        35,
                        36,
                        37,
                        38
                    ],
                    "('parquet.hadoop.thrift#TestParquetReadProtocol', None)": [
                        68,
                        74,
                        75,
                        76,
                        82,
                        83
                    ],
                    "('parquet.hadoop.thrift#TestParquetReadProtocol', 'testMap')": [
                        69,
                        70,
                        71,
                        72,
                        73
                    ],
                    "('parquet.hadoop.thrift#TestParquetReadProtocol', 'testStructInMap')": [
                        77,
                        78,
                        79,
                        80,
                        81
                    ],
                    "('parquet.hadoop.thrift#TestParquetReadProtocol', 'validate(T)')": [
                        84,
                        86,
                        99,
                        100,
                        102
                    ]
                }
            }
        }
    },
    "af20471a423684375533774320b874a49195d4f8": {
        "authored_data": "2013 Mar 02 00:32",
        "commit.message": "javadoc; bug fixes; thrift support; refactoring\n",
        "commit.author.name": "julien",
        "pcid": "6bf2661e6548a0d048c62c34564062598df43bc4",
        "changes": {
            "parquet-column/src/main/java/parquet/Log.java": {
                "old": {
                    "('parquet#Log', None)": [
                        46
                    ]
                },
                "new": {
                    "('parquet#Log', None)": [
                        46
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/bytes/BytesUtils.java": {
                "old": {
                    "('parquet.bytes#BytesUtils', 'getWidthFromMaxInt(int)')": [
                        43
                    ]
                },
                "new": {
                    "('parquet.bytes#BytesUtils', 'getWidthFromMaxInt(int)')": [
                        43
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/primitive/PrimitiveColumnReader.java": {
                "old": {
                    "('parquet.column.primitive#PrimitiveColumnReader', None)": [
                        29,
                        31,
                        32,
                        33
                    ],
                    "('parquet.column.primitive#PrimitiveColumnReader', 'initFromPage(long,byte,int)')": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25
                    ],
                    "('parquet.column.primitive#PrimitiveColumnReader', None)": [
                        32,
                        33,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        50,
                        51,
                        52,
                        57,
                        58,
                        59,
                        64,
                        65,
                        66,
                        71,
                        72,
                        73,
                        78,
                        79,
                        80,
                        85,
                        86,
                        87,
                        92,
                        93,
                        94
                    ],
                    "('parquet.column.primitive#PrimitiveColumnReader', 'initFromPage(long,byte,int)')": [
                        48
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/DummyRecordConverter.java": {
                "old": {
                    "('parquet.example#DummyRecordConverter', None)": [
                        28,
                        29,
                        30,
                        59,
                        60,
                        61,
                        62,
                        65,
                        66
                    ],
                    "('parquet.example#DummyRecordConverter', 'getGroupConverter(int)')": [
                        36,
                        37
                    ],
                    "('parquet.example#DummyRecordConverter', 'getPrimitiveConverter(int)')": [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58
                    ],
                    "('parquet.example#DummyRecordConverter', 'start')": [
                        63,
                        64
                    ],
                    "('parquet.example#DummyRecordConverter', 'end')": [
                        67,
                        68
                    ],
                    "(None, None)": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        24,
                        25,
                        26,
                        27
                    ],
                    "('parquet.example#DummyRecordConverter', None)": [
                        35,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        99
                    ],
                    "('parquet.example#DummyRecordConverter', 'getRootConverter')": [
                        100,
                        101
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/GroupRecordConverter.java": {
                "old": {
                    "('parquet.example.data.simple.convert#GroupRecordConverter', None)": [
                        22,
                        29,
                        41,
                        42,
                        43
                    ],
                    "('parquet.example.data.simple.convert#GroupRecordConverter', 'start')": [
                        39,
                        40
                    ],
                    "('parquet.example.data.simple.convert#GroupRecordConverter', 'end')": [
                        44
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('parquet.example.data.simple.convert#GroupRecordConverter', None)": [
                        24,
                        30,
                        31,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43
                    ],
                    "('parquet.example.data.simple.convert#GroupRecordConverter', 'getRootConverter')": [
                        52,
                        53
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/example/data/simple/convert/SimpleGroupConverter.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21
                    ],
                    "('parquet.example.data.simple.convert#SimpleGroupConverter', None)": [
                        25,
                        29,
                        30,
                        36,
                        37,
                        39,
                        42,
                        44,
                        58,
                        59,
                        60,
                        69
                    ],
                    "('parquet.example.data.simple.convert#SimpleGroupConverter', 'getPrimitiveConverter(int)')": [
                        56,
                        57
                    ],
                    "('parquet.example.data.simple.convert#SimpleGroupConverter', 'getGroupConverter(int)')": [
                        61,
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.example.data.simple.convert#SimpleGroupConverter', None)": [
                        24,
                        28,
                        34,
                        36,
                        39,
                        41
                    ],
                    "('parquet.example.data.simple.convert#SimpleGroupConverter', 'getConverter(int)')": [
                        53,
                        54
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordReaderImplementation.java": {
                "old": {
                    "('parquet.io#RecordReaderImplementation', None)": [
                        241,
                        254,
                        256,
                        259
                    ],
                    "('parquet.io#RecordReaderImplementation', 'getRecordConsumer')": [
                        444
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('parquet.io#RecordReaderImplementation', None)": [
                        242,
                        255,
                        257,
                        260
                    ],
                    "('parquet.io#RecordReaderImplementation', 'getRecordConsumer')": [
                        445
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/convert/GroupConverter.java": {
                "old": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        19,
                        20
                    ],
                    "('parquet.io.convert#GroupConverter', None)": [
                        25,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        42
                    ],
                    "('parquet.io.convert#GroupConverter', 'getGroupConverter(int)')": [
                        33
                    ],
                    "('parquet.io.convert#GroupConverter', 'getPrimitiveConverter(int)')": [
                        41
                    ],
                    "('parquet.io.convert#GroupConverter', 'start')": [
                        47
                    ],
                    "('parquet.io.convert#GroupConverter', 'end')": [
                        52
                    ]
                },
                "new": {
                    "(None, None)": [
                        4,
                        38
                    ],
                    "('parquet.io.convert#GroupConverter', None)": [
                        9,
                        29,
                        30,
                        33,
                        34,
                        35
                    ],
                    "('parquet.io.convert#GroupConverter', 'getConverter(int)')": [
                        17
                    ],
                    "('parquet.io.convert#GroupConverter', 'start')": [
                        22
                    ],
                    "('parquet.io.convert#GroupConverter', 'end')": [
                        27
                    ],
                    "('parquet.io.convert#GroupConverter', 'isPrimitive')": [
                        31,
                        32
                    ],
                    "('parquet.io.convert#GroupConverter', 'asGroupConverter')": [
                        36,
                        37
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/convert/PrimitiveConverter.java": {
                "old": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ],
                    "('parquet.io.convert#PrimitiveConverter', None)": [
                        18
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addBinary(byte)')": [
                        25
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addBoolean(boolean)')": [
                        32
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addDouble(double)')": [
                        39
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addFloat(float)')": [
                        46
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addInt(int)')": [
                        53
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addLong(long)')": [
                        60
                    ]
                },
                "new": {
                    "(None, None)": [
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    "('parquet.io.convert#PrimitiveConverter', None)": [
                        9,
                        18,
                        26,
                        34,
                        42,
                        50,
                        57,
                        58,
                        59,
                        62,
                        63,
                        64
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addBinary(byte)')": [
                        16
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addBoolean(boolean)')": [
                        24
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addDouble(double)')": [
                        32
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addFloat(float)')": [
                        40
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addInt(int)')": [
                        48
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'addLong(long)')": [
                        56
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'isPrimitive')": [
                        60,
                        61
                    ],
                    "('parquet.io.convert#PrimitiveConverter', 'asPrimitiveConverter')": [
                        65,
                        66
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/convert/RecordConverter.java": {
                "old": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.io.convert#RecordConverter', None)": [
                        27,
                        30
                    ]
                },
                "new": {
                    "('parquet.io.convert#RecordConverter', None)": [
                        26,
                        33,
                        34,
                        35
                    ],
                    "('parquet.io.convert#RecordConverter', 'getRootConverter')": [
                        36
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/GroupType.java": {
                "new": {
                    "('parquet.schema#GroupType', None)": [
                        250,
                        256,
                        257
                    ],
                    "('parquet.schema#GroupType', 'convert(List,TypeConverter)')": [
                        251,
                        252,
                        253,
                        254,
                        255
                    ],
                    "('parquet.schema#GroupType', 'convertChildren(List,TypeConverter)')": [
                        258,
                        259,
                        260,
                        261,
                        262,
                        263
                    ],
                    "(None, None)": [
                        264
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/MessageType.java": {
                "new": {
                    "('parquet.schema#MessageType', None)": [
                        113
                    ],
                    "('parquet.schema#MessageType', 'convertWith(TypeConverter)')": [
                        114,
                        115,
                        116,
                        117
                    ],
                    "(None, None)": [
                        118
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/PrimitiveType.java": {
                "new": {
                    "('parquet.schema#PrimitiveType', None)": [
                        305,
                        306
                    ],
                    "('parquet.schema#PrimitiveType', 'convert(List,TypeConverter)')": [
                        307,
                        308
                    ],
                    "(None, None)": [
                        309
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/Type.java": {
                "new": {
                    "('parquet.schema#Type', None)": [
                        127,
                        128,
                        129,
                        130,
                        131,
                        132
                    ],
                    "('parquet.schema#Type', 'convert(List,TypeConverter)')": [
                        133
                    ],
                    "(None, None)": [
                        134
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingConverter.java": {
                "old": {
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        26,
                        28,
                        29,
                        37
                    ],
                    "('parquet.io#ExpectationValidatingConverter', 'start')": [
                        38,
                        39
                    ],
                    "('parquet.io#ExpectationValidatingConverter', 'end')": [
                        43,
                        44
                    ],
                    "(None, None)": [
                        48,
                        60,
                        61,
                        62,
                        63,
                        101,
                        102,
                        103,
                        104,
                        148,
                        149,
                        150
                    ],
                    "('parquet.io#Validator', None)": [
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('parquet.io#Validator', 'validate(String)')": [
                        57,
                        58,
                        59
                    ],
                    "('parquet.io#ExpectationValidatingGroupConverter', None)": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        76,
                        77,
                        78,
                        81,
                        82,
                        83,
                        86,
                        87,
                        88,
                        91,
                        92,
                        93,
                        96,
                        97,
                        98
                    ],
                    "('parquet.io#ExpectationValidatingGroupConverter', 'validate(String)')": [
                        74,
                        75
                    ],
                    "('parquet.io#ExpectationValidatingGroupConverter', 'getCurrentRecord')": [
                        79,
                        80
                    ],
                    "('parquet.io#ExpectationValidatingGroupConverter', 'getGroupConverter(int)')": [
                        84,
                        85
                    ],
                    "('parquet.io#ExpectationValidatingGroupConverter', 'getPrimitiveConverter(int)')": [
                        89,
                        90
                    ],
                    "('parquet.io#ExpectationValidatingGroupConverter', 'start')": [
                        94,
                        95
                    ],
                    "('parquet.io#ExpectationValidatingGroupConverter', 'end')": [
                        99,
                        100
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', None)": [
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        118,
                        119,
                        120,
                        123,
                        124,
                        125,
                        128,
                        129,
                        130,
                        133,
                        134,
                        135,
                        138,
                        139,
                        140,
                        143,
                        144,
                        145
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', 'validate(String)')": [
                        116,
                        117
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', 'addBinary(byte)')": [
                        121,
                        122
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', 'addBoolean(boolean)')": [
                        126,
                        127
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', 'addDouble(double)')": [
                        131,
                        132
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', 'addFloat(float)')": [
                        136,
                        137
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', 'addInt(int)')": [
                        141,
                        142
                    ],
                    "('parquet.io#ExpectationValidatingPrimitiveConverter', 'addLong(long)')": [
                        146,
                        147
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23,
                        27,
                        28,
                        29,
                        30,
                        31
                    ],
                    "('parquet.io#ExpectationValidatingConverter', None)": [
                        33,
                        35,
                        36,
                        37,
                        38,
                        39,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135
                    ],
                    "('parquet.io#ExpectationValidatingConverter', 'validate(String)')": [
                        40,
                        41,
                        42
                    ],
                    "('parquet.io#ExpectationValidatingConverter', 'path(List,Type)')": [
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149
                    ],
                    "('parquet.io#ExpectationValidatingConverter', 'getRootConverter')": [
                        153,
                        154
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/PerfTest.java": {
                "old": {
                    "('parquet.io#PerfTest', 'read(MemPageStore,MessageType,String)')": [
                        59
                    ]
                },
                "new": {
                    "('parquet.io#PerfTest', 'read(MemPageStore,MessageType,String)')": [
                        59
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testPushParser')": [
                        217
                    ]
                },
                "new": {
                    "('parquet.io#TestColumnIO', 'testPushParser')": [
                        217
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/TupleReadSupport.java": {
                "old": {
                    "('parquet.pig#TupleReadSupport', 'initForRead(Configuration,Map,MessageType,MessageType)')": [
                        58
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('parquet.pig#TupleReadSupport', 'initForRead(Configuration,Map,MessageType,MessageType)')": [
                        59
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/MapConverter.java": {
                "old": {
                    "('parquet.pig.convert#MapConverter', 'getGroupConverter(int)')": [
                        59,
                        61
                    ],
                    "('parquet.pig.convert#MapConverter', None)": [
                        64,
                        65,
                        66,
                        130,
                        131,
                        132,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142
                    ],
                    "('parquet.pig.convert#MapConverter', 'getPrimitiveConverter(int)')": [
                        67,
                        68
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('parquet.pig.convert#MapConverter', 'getConverter(int)')": [
                        60,
                        62
                    ],
                    "('parquet.pig.convert#MapConverter', None)": [
                        126,
                        127,
                        128,
                        129,
                        130,
                        132
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/TupleConverter.java": {
                "old": {
                    "(None, None)": [
                        23,
                        37
                    ],
                    "('parquet.pig.convert#TupleConverter', None)": [
                        42,
                        50,
                        51,
                        60,
                        61,
                        67,
                        70,
                        75,
                        84,
                        87,
                        90,
                        104,
                        105,
                        106,
                        137,
                        140,
                        141,
                        226,
                        233,
                        234,
                        235,
                        236,
                        237
                    ],
                    "('parquet.pig.convert#TupleConverter', 'getGroupConverter(int)')": [
                        99,
                        100,
                        101,
                        102,
                        103
                    ],
                    "('parquet.pig.convert#TupleConverter', 'getPrimitiveConverter(int)')": [
                        107,
                        108,
                        109,
                        110,
                        111
                    ],
                    "('parquet.pig.convert#TupleConverter', 'getCurrentRecord')": [
                        138,
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('parquet.pig.convert#TupleConverter', None)": [
                        41,
                        49,
                        58,
                        64,
                        67,
                        72,
                        81,
                        84,
                        87,
                        207
                    ],
                    "('parquet.pig.convert#TupleConverter', 'getConverter(int)')": [
                        96,
                        97
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/TestTupleRecordConsumer.java": {
                "old": {
                    "('parquet.pig#TestTupleRecordConsumer', 'testFromGroups(String,List)')": [
                        138
                    ],
                    "('parquet.pig#TestTupleRecordConsumer', 'newTupleWriter(MessageType,String,RecordConverter)')": [
                        169
                    ]
                },
                "new": {
                    "(None, None)": [
                        40
                    ],
                    "('parquet.pig#TestTupleRecordConsumer', 'testFromGroups(String,List)')": [
                        139
                    ],
                    "('parquet.pig#TestTupleRecordConsumer', 'newTupleWriter(MessageType,String,RecordConverter)')": [
                        170
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/hadoop/thrift/ParquetThriftOutputFormat.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('parquet.hadoop.thrift#ParquetThriftOutputFormat', None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        17,
                        26
                    ],
                    "('parquet.hadoop.thrift#ParquetThriftOutputFormat', None)": [
                        28,
                        29,
                        32,
                        33,
                        36
                    ],
                    "('parquet.hadoop.thrift#ParquetThriftOutputFormat', 'setThriftClass(Job,Class)')": [
                        30,
                        31
                    ],
                    "('parquet.hadoop.thrift#ParquetThriftOutputFormat', 'getThriftClass(Job)')": [
                        34,
                        35
                    ]
                }
            },
            "parquet-thrift/src/main/java/parquet/hadoop/thrift/ThriftWriteSupport.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('parquet.hadoop.thrift#ThriftWriteSupport', None)": [
                        33,
                        35,
                        36,
                        37,
                        39,
                        40
                    ],
                    "('parquet.hadoop.thrift#ThriftWriteSupport', 'init(Configuration)')": [
                        41,
                        49,
                        50,
                        51,
                        52
                    ]
                },
                "new": {
                    "(None, None)": [
                        29,
                        30,
                        31,
                        32
                    ],
                    "('parquet.hadoop.thrift#ThriftWriteSupport', None)": [
                        36,
                        40,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    "('parquet.hadoop.thrift#ThriftWriteSupport', 'setThriftClass(Configuration,Class)')": [
                        38,
                        39
                    ],
                    "('parquet.hadoop.thrift#ThriftWriteSupport', 'getThriftClass(Configuration)')": [
                        42,
                        50
                    ],
                    "('parquet.hadoop.thrift#ThriftWriteSupport', 'init(Configuration)')": [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66
                    ]
                }
            },
            "parquet-thrift/src/test/java/parquet/hadoop/thrift/TestThriftSchemaConverter.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        27
                    ]
                }
            }
        }
    }
}