{
    "4ad7303dc25c998fbb23dacb5bcf950f89ef6a6f": {
        "authored_data": "2014 Jul 10 23:08",
        "commit.message": "Minor fix\n\nSpell and comment issue.\n\nAuthor: WangTao <barneystinson@aliyun.com>\n\nCloses #10 from WangTaoTheTonic/minorFix and squashes the following commits:\n\n0727a8f [WangTao] Minor fix\n",
        "commit.author.name": "WangTao",
        "pcid": "9ad5485c3310a8c51510ea50e24834b6cf98c45c",
        "changes": {
            "parquet-column/src/main/java/parquet/schema/GroupType.java": {
                "old": {
                    "('parquet.schema#GroupType', None)": [
                        58,
                        68
                    ]
                },
                "new": {
                    "('parquet.schema#GroupType', None)": [
                        58,
                        68
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/Type.java": {
                "old": {
                    "('parquet.schema#Type', None)": [
                        88,
                        106,
                        156
                    ],
                    "('parquet.schema#Type', 'asPrimitiveType')": [
                        148
                    ]
                },
                "new": {
                    "('parquet.schema#Type', None)": [
                        88,
                        106,
                        156
                    ],
                    "('parquet.schema#Type', 'asPrimitiveType')": [
                        148
                    ]
                }
            }
        }
    },
    "9ad5485c3310a8c51510ea50e24834b6cf98c45c": {
        "authored_data": "2014 Jun 24 17:19",
        "commit.message": "PARQUET-2: Adding Type Persuasion for Primitive Types\n\nOriginal from the old repo: https://github.com/Parquet/parquet-mr/pull/410\nJIRA: https://issues.apache.org/jira/browse/PARQUET-2\n\nThese changes allow primitive types to be requested as different types than what is stored in the file format using a flag to turn off strict type checking (default is on). Types are cast to the requested type where possible and will suffer precision loss for casting where necessary (e.g. requesting a double as an int).\n\nNo performance penalty is imposed for using the type defined in the file type.  A flag exists to\n\nA 6x6 test case is provided to test conversion between the primitive types.\n\nAuthor: Daniel Weeks <dweeks@netflix.com>\n\nCloses #3 from dcw-netflix/type-persuasion and squashes the following commits:\n\n97f4e9a [Daniel Weeks] Added documentation as suggested by code review\n1c3c0c7 [Daniel Weeks] Fixed test with strict checking off\nf3cb495 [Daniel Weeks] Added type persuasion for primitive types with a flag to control strict type checking for conflicting schemas, which is strict by default.\n",
        "commit.author.name": "Daniel Weeks",
        "pcid": "859b6b4b9485186fdfd3dd0cd0439d2a48b56aa5",
        "changes": {
            "parquet-column/src/main/java/parquet/io/ColumnIOFactory.java": {
                "old": {
                    "('parquet.io#ColumnIOFactory', None)": [
                        89
                    ],
                    "('parquet.io#ColumnIOFactory', 'getColumnIO(MessageType,MessageType)')": [
                        130
                    ]
                },
                "new": {
                    "('parquet.io#ColumnIOFactory', None)": [
                        46,
                        49,
                        50,
                        51,
                        52,
                        55,
                        95,
                        96,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('parquet.io#ColumnIOFactory', 'getColumnIO(MessageType,MessageType)')": [
                        137
                    ],
                    "('parquet.io#ColumnIOFactory', 'getColumnIO(MessageType,MessageType,boolean)')": [
                        146,
                        147
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/GroupType.java": {
                "old": {
                    "('parquet.schema#GroupType', 'mergeFields(GroupType)')": [
                        317
                    ]
                },
                "new": {
                    "('parquet.schema#GroupType', 'union(Type)')": [
                        296
                    ],
                    "('parquet.schema#GroupType', None)": [
                        297,
                        298,
                        299,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321
                    ],
                    "('parquet.schema#GroupType', 'union(Type,boolean)')": [
                        300
                    ],
                    "('parquet.schema#GroupType', 'mergeFields(GroupType)')": [
                        313
                    ],
                    "('parquet.schema#GroupType', 'mergeFields(GroupType,boolean)')": [
                        322,
                        332
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/MessageType.java": {
                "old": {
                    "('parquet.schema#MessageType', 'union(MessageType)')": [
                        140
                    ]
                },
                "new": {
                    "('parquet.schema#MessageType', 'union(MessageType)')": [
                        140
                    ],
                    "('parquet.schema#MessageType', None)": [
                        141,
                        142
                    ],
                    "('parquet.schema#MessageType', 'union(MessageType,boolean)')": [
                        143,
                        144
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/PrimitiveType.java": {
                "old": {
                    "('parquet.schema#PrimitiveType', None)": [
                        279
                    ],
                    "('parquet.schema#PrimitiveType', 'union(Type)')": [
                        489
                    ]
                },
                "new": {
                    "('parquet.schema#PrimitiveType', None)": [
                        279,
                        490,
                        491,
                        492
                    ],
                    "('parquet.schema#PrimitiveType', 'union(Type)')": [
                        489
                    ],
                    "('parquet.schema#PrimitiveType', 'union(Type,boolean)')": [
                        493,
                        494
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/Type.java": {
                "new": {
                    "('parquet.schema#Type', None)": [
                        198,
                        199,
                        200,
                        201,
                        202,
                        203
                    ],
                    "('parquet.schema#Type', 'union(Type,boolean)')": [
                        204
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/InternalParquetRecordReader.java": {
                "old": {
                    "('parquet.hadoop#InternalParquetRecordReader', 'checkRead')": [
                        109
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'initialize(MessageType,MessageType,Map,Map,Path,List,Configuration)')": [
                        145
                    ]
                },
                "new": {
                    "(None, None)": [
                        40
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', None)": [
                        61
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'checkRead')": [
                        111
                    ],
                    "('parquet.hadoop#InternalParquetRecordReader', 'initialize(MessageType,MessageType,Map,Map,Path,List,Configuration)')": [
                        147
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileWriter.java": {
                "old": {
                    "('parquet.hadoop#ParquetFileWriter', None)": [
                        86
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'getGlobalMetaData(List)')": [
                        446
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'mergeInto(FileMetaData,GlobalMetaData)')": [
                        470
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'mergeInto(MessageType,MessageType)')": [
                        497
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetFileWriter', None)": [
                        86,
                        442,
                        445,
                        446,
                        466,
                        467,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'getGlobalMetaData(List)')": [
                        444
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'getGlobalMetaData(List,boolean)')": [
                        447,
                        451
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'mergeInto(FileMetaData,GlobalMetaData)')": [
                        465
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'mergeInto(FileMetaData,GlobalMetaData,boolean)')": [
                        468,
                        469,
                        470,
                        471,
                        482
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'mergeInto(MessageType,MessageType)')": [
                        506
                    ],
                    "('parquet.hadoop#ParquetFileWriter', 'mergeInto(MessageType,MessageType,boolean)')": [
                        516,
                        520,
                        521
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetInputFormat.java": {
                "old": {
                    "('parquet.hadoop#ParquetInputFormat', 'getSplits(Configuration,List)')": [
                        361
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetInputFormat', None)": [
                        80,
                        81,
                        82,
                        83,
                        84
                    ],
                    "('parquet.hadoop#ParquetInputFormat', 'getSplits(Configuration,List)')": [
                        366
                    ]
                }
            },
            "parquet-pig/src/main/java/parquet/pig/convert/TupleConverter.java": {
                "old": {
                    "('parquet.pig.convert#TupleConverter', 'newConverter(FieldSchema,Type,ParentValueContainer,boolean)')": [
                        108
                    ],
                    "('parquet.pig.convert#TupleConverter', None)": [
                        210,
                        211,
                        221
                    ]
                },
                "new": {
                    "('parquet.pig.convert#TupleConverter', 'newConverter(FieldSchema,Type,ParentValueContainer,boolean)')": [
                        108,
                        109,
                        110
                    ],
                    "('parquet.pig.convert#TupleConverter', None)": [
                        210,
                        213,
                        214,
                        215,
                        225,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513
                    ]
                }
            },
            "parquet-pig/src/test/java/parquet/pig/TestParquetLoader.java": {
                "old": {
                    "(None, None)": [
                        18,
                        19,
                        20,
                        23,
                        25,
                        31,
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        30,
                        34,
                        35,
                        36,
                        37,
                        38,
                        40
                    ],
                    "('parquet.pig#TestParquetLoader', 'testTypePersuasion')": [
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247
                    ],
                    "('parquet.pig#TestParquetLoader', None)": [
                        248,
                        249,
                        250,
                        251,
                        252,
                        253
                    ]
                }
            }
        }
    }
}