{
    "808de5d963b4186d69b2ae39c00ed5f5bb08b2cc": {
        "authored_data": "2014 Jan 22 11:36",
        "commit.message": "Support field renaming for Avro read schemas, by means of\nfield aliases.\n\nAvro 1.7.6 is required since it fixes https://issues.apache.org/jira/browse/AVRO-1433\nBut note that this is only to allow the test to run correctly.\n",
        "commit.author.name": "Tom White",
        "pcid": "6496bcc8e1ed9150614fdca9ad8ec46294336ed2",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        65,
                        66,
                        67,
                        68,
                        69
                    ]
                },
                "new": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        65,
                        75,
                        76
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', 'getAvroField(String)')": [
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestSpecificReadWrite.java": {
                "old": {
                    "('parquet.avro#TestSpecificReadWrite', 'testAvroReadSchema')": [
                        153
                    ]
                },
                "new": {
                    "('parquet.avro#TestSpecificReadWrite', 'testAvroReadSchema')": [
                        153
                    ]
                }
            }
        }
    },
    "cc59a4077dc880bb5de5555954906bda64369678": {
        "authored_data": "2014 Feb 12 12:07",
        "commit.message": "Don't deep copy immutable primitive types.\n",
        "commit.author.name": "Tom White",
        "pcid": "94d703c7cad93228ddee626622841953eae665b1",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroIndexedRecordConverter', 'fillInDefaults')": [
                        155
                    ]
                },
                "new": {
                    "('parquet.avro#AvroIndexedRecordConverter', 'fillInDefaults')": [
                        155,
                        156
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        158,
                        159,
                        160
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', 'deepCopy(Schema,Object)')": [
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170
                    ]
                }
            }
        }
    },
    "76bbf4a88645abc657ba6e4c2dc636712f03b944": {
        "authored_data": "2014 Jan 27 16:39",
        "commit.message": "[CASCADING] Provide the sink implementation\nin order to write some parquet files with ParquetTupleScheme\n",
        "commit.author.name": "Mickael Lacour",
        "pcid": "6496bcc8e1ed9150614fdca9ad8ec46294336ed2",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/ParquetTupleScheme.java": {
                "old": {
                    "(None, None)": [
                        23,
                        26,
                        28
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'sinkConfInit(FlowProcess,Tap,JobConf)')": [
                        133,
                        134,
                        135
                    ],
                    "('parquet.cascading#ParquetTupleScheme', None)": [
                        136,
                        141
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'isSink')": [
                        140
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'sink(FlowProcess,SinkCall)')": [
                        144,
                        145,
                        146
                    ]
                },
                "new": {
                    "(None, None)": [
                        40,
                        41,
                        42
                    ],
                    "('parquet.cascading#ParquetTupleScheme', None)": [
                        59,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        158
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'sinkConfInit(FlowProcess,Tap,JobConf)')": [
                        148,
                        149,
                        150,
                        151,
                        152
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'isSink')": [
                        156,
                        157
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'sink(FlowProcess,SinkCall)')": [
                        161,
                        162,
                        163,
                        164,
                        165
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetOutputFormat.java": {
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('parquet.hadoop#ParquetOutputFormat', None)": [
                        103,
                        104
                    ],
                    "('parquet.hadoop#ParquetOutputFormat', 'setWriteSupportClass(JobConf,Class)')": [
                        105,
                        106
                    ]
                }
            }
        }
    },
    "5dccd0cdf5d1384bcc46b738c27cf4c7f42a2d6c": {
        "authored_data": "2014 Feb 11 21:24",
        "commit.message": "format\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "0d111b1defc6cc5100470dd1162b6eece86fdbd8",
        "changes": {
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        535,
                        548
                    ]
                }
            },
            "parquet-thrift/src/test/java/parquet/hadoop/thrift/TestParquetToThriftReadWriteAndProjection.java": {
                "old": {
                    "('parquet.hadoop.thrift#TestParquetToThriftReadWriteAndProjection', None)": [
                        118
                    ]
                }
            }
        }
    },
    "0d111b1defc6cc5100470dd1162b6eece86fdbd8": {
        "authored_data": "2014 Feb 11 21:19",
        "commit.message": "remove fieldCount from marker\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "02f50f7ea0b417a8b963b8b2b081b16190ffc9ef",
        "changes": {
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        91,
                        97,
                        98,
                        103,
                        109,
                        110,
                        111,
                        112,
                        199
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        96,
                        192,
                        193
                    ]
                }
            }
        }
    },
    "94d703c7cad93228ddee626622841953eae665b1": {
        "authored_data": "2014 Jan 15 13:58",
        "commit.message": "Fill in default values for new fields in the read schema that\nwere not in the write schema.\n\nSome of the implementation was inspired by\nhttps://issues.apache.org/jira/browse/AVRO-1228.\n",
        "commit.author.name": "Tom White",
        "pcid": "137b1e292eacbccb06c9723e9b86d2259045b860",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        71
                    ]
                },
                "new": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        46,
                        47,
                        48,
                        61,
                        62,
                        76,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        149,
                        150,
                        151
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', 'end')": [
                        146
                    ],
                    "('parquet.avro#AvroIndexedRecordConverter', 'fillInDefaults')": [
                        152,
                        153,
                        154,
                        155,
                        156
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestSpecificReadWrite.java": {
                "new": {
                    "('parquet.avro#TestSpecificReadWrite', 'testAvroReadSchema')": [
                        157
                    ]
                }
            }
        }
    },
    "02f50f7ea0b417a8b963b8b2b081b16190ffc9ef": {
        "authored_data": "2014 Feb 11 06:52",
        "commit.message": "rename var\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "1be4d6c9ac35c133d5e257839c65aa83155a4455",
        "changes": {
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        102,
                        103,
                        104
                    ]
                },
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        102,
                        103,
                        104
                    ]
                }
            }
        }
    },
    "1be4d6c9ac35c133d5e257839c65aa83155a4455": {
        "authored_data": "2014 Feb 11 06:49",
        "commit.message": "bugfix: reorder fields in thrift struct caused writting nulls. fixed it by keeping track of which fields are being written in each level, and only write nulls when current level is finished in MessageColumnIO\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "137b1e292eacbccb06c9723e9b86d2259045b860",
        "changes": {
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('parquet.io#MessageColumnIO', None)": [
                        88,
                        100,
                        105,
                        125,
                        131,
                        140,
                        142,
                        157,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        200,
                        208,
                        209
                    ]
                },
                "new": {
                    "(None, None)": [
                        19
                    ],
                    "('parquet.io#MessageColumnIO', None)": [
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        133,
                        134,
                        135,
                        136,
                        137,
                        142,
                        162,
                        163,
                        169,
                        193,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        238,
                        239,
                        247
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "old": {
                    "('parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        535,
                        546,
                        555,
                        556
                    ]
                },
                "new": {
                    "('parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        535,
                        539,
                        545,
                        548,
                        556,
                        558,
                        559
                    ]
                }
            }
        }
    }
}