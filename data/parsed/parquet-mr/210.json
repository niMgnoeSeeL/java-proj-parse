{
    "d85a8f5dcfc1381655fcccaa81a2e83ba812f6a4": {
        "authored_data": "2020 Jan 10 12:55",
        "commit.message": "PARQUET-1729: Avoid AutoBoxing in EncodingStats (#717)\n\n* PARQUET-1729: Avoid AutoBoxing in EncodingStats\r\n\r\n* Updated unit tests to more properly check stats value\r\n",
        "commit.author.name": "belugabehr",
        "pcid": "616e35f9e164a24104da148f713b2e8258a4f54f",
        "changes": {
            "parquet-column/src/main/java/org/apache/parquet/column/EncodingStats.java": {
                "old": {
                    "('org.apache.parquet.column#EncodingStats', None)": [
                        39,
                        40,
                        43,
                        44,
                        106,
                        107,
                        127,
                        128,
                        144,
                        145
                    ],
                    "('org.apache.parquet.column#EncodingStats', 'getNumDictionaryPagesEncodedAs(Encoding)')": [
                        60,
                        61
                    ],
                    "('org.apache.parquet.column#EncodingStats', 'getNumDataPagesEncodedAs(Encoding)')": [
                        65,
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.parquet.column#EncodingStats', None)": [
                        40,
                        41,
                        44,
                        45,
                        107,
                        108,
                        128,
                        129,
                        145,
                        146
                    ],
                    "('org.apache.parquet.column#EncodingStats', 'getNumDictionaryPagesEncodedAs(Encoding)')": [
                        61,
                        62
                    ],
                    "('org.apache.parquet.column#EncodingStats', 'getNumDataPagesEncodedAs(Encoding)')": [
                        66,
                        67
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        26
                    ],
                    "('org.apache.parquet.column#TestEncodingStats', 'testReusedBuilder')": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63
                    ]
                },
                "new": {
                    "('org.apache.parquet.column#TestEncodingStats', 'testReusedBuilder')": [
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63
                    ]
                }
            }
        }
    },
    "616e35f9e164a24104da148f713b2e8258a4f54f": {
        "authored_data": "2020 Jan 10 12:52",
        "commit.message": "PARQUET-1593: Improve parquet-cli's example usage (#646)\n\nThe following description is a bit weird since there's no command\r\ncalled \"create\" actually. This PR replaces the subcommand with an\r\nactually existent one.\r\n\r\n```\r\n  Examples:\r\n\r\n    # print information for create\r\n    parquet help create\r\n```",
        "commit.author.name": "Kengo Seki",
        "pcid": "f0fc29fd3341046f7d46a4a02a7c9ec3d7cd3e46",
        "changes": {
            "parquet-cli/src/main/java/org/apache/parquet/cli/Help.java": {
                "old": {
                    "('org.apache.parquet.cli#Help', 'printGenericHelp')": [
                        114,
                        115,
                        116,
                        117
                    ]
                },
                "new": {
                    "('org.apache.parquet.cli#Help', 'printGenericHelp')": [
                        114,
                        115,
                        116,
                        117,
                        118,
                        119
                    ],
                    "('org.apache.parquet.cli#Help', None)": [
                        121
                    ]
                }
            }
        }
    },
    "f0fc29fd3341046f7d46a4a02a7c9ec3d7cd3e46": {
        "authored_data": "2020 Jan 10 06:08",
        "commit.message": "PARQUET-1744: Some filters throws ArrayIndexOutOfBoundsException (#732)\n\n",
        "commit.author.name": "Gabor Szadovszky",
        "pcid": "65eba5547a5a63a318eb8b5d3974e8980055b8c7",
        "changes": {
            "parquet-column/src/main/java/org/apache/parquet/internal/column/columnindex/BoundaryOrder.java": {
                "new": {
                    "(None, None)": [
                        87,
                        88,
                        89,
                        90,
                        107,
                        108,
                        109,
                        110,
                        127,
                        128,
                        129,
                        130,
                        147,
                        148,
                        149,
                        150,
                        226,
                        227,
                        228,
                        229,
                        246,
                        247,
                        248,
                        249,
                        266,
                        267,
                        268,
                        269,
                        286,
                        287,
                        288,
                        289
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/internal/column/columnindex/TestBoundaryOrder.java": {
                "new": {
                    "('org.apache.parquet.internal.column.columnindex#TestBoundaryOrder', None)": [
                        186,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243
                    ],
                    "('org.apache.parquet.internal.column.columnindex#TestBoundaryOrder', 'testEq')": [
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285
                    ],
                    "('org.apache.parquet.internal.column.columnindex#TestBoundaryOrder', 'testGt')": [
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331
                    ],
                    "('org.apache.parquet.internal.column.columnindex#TestBoundaryOrder', 'testGtEq')": [
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377
                    ],
                    "('org.apache.parquet.internal.column.columnindex#TestBoundaryOrder', 'testLt')": [
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423
                    ],
                    "('org.apache.parquet.internal.column.columnindex#TestBoundaryOrder', 'testLtEq')": [
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469
                    ],
                    "('org.apache.parquet.internal.column.columnindex#TestBoundaryOrder', 'testNotEq')": [
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/internal/filter2/columnindex/TestColumnIndexFilter.java": {
                "old": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.parquet.internal.filter2.columnindex#TestColumnIndexFilter', None)": [
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        172,
                        173,
                        175,
                        177,
                        179,
                        181,
                        183,
                        185,
                        187,
                        188,
                        190,
                        191,
                        193,
                        194,
                        195,
                        196,
                        197,
                        199,
                        200,
                        202,
                        203,
                        204,
                        206,
                        208,
                        210,
                        212,
                        234
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        42,
                        46,
                        499
                    ],
                    "('org.apache.parquet.internal.filter2.columnindex#TestColumnIndexFilter', None)": [
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        175,
                        176,
                        178,
                        180,
                        182,
                        184,
                        186,
                        188,
                        190,
                        191,
                        193,
                        194,
                        196,
                        197,
                        198,
                        199,
                        200,
                        202,
                        203,
                        205,
                        206,
                        207,
                        209,
                        211,
                        213,
                        215,
                        237,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        307,
                        308,
                        325,
                        326,
                        479
                    ],
                    "('org.apache.parquet.internal.filter2.columnindex#TestColumnIndexFilter', 'testFilteringWithAllNullPages')": [
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498
                    ]
                }
            }
        }
    },
    "65eba5547a5a63a318eb8b5d3974e8980055b8c7": {
        "authored_data": "2020 Jan 09 14:09",
        "commit.message": "PARQUET-1740: Make ParquetFileReader.getFilteredRecordCount public (#728)\n\n",
        "commit.author.name": "Yuming Wang",
        "pcid": "72738f59920cb8a875757d5fbb0a70bd7115fdcf",
        "changes": {
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java": {
                "old": [
                    "JavaSyntaxError",
                    "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java",
                    [
                        760
                    ]
                ],
                "new": [
                    "JavaSyntaxError",
                    "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java",
                    [
                        760
                    ]
                ]
            }
        }
    },
    "72738f59920cb8a875757d5fbb0a70bd7115fdcf": {
        "authored_data": "2020 Jan 09 08:31",
        "commit.message": "PARQUET-1735: Clean Up parquet-columns Module (#723)\n\n* PARQUET-1735: Clean Up parquet-columns Module\r\n\r\n* Remove superfluous parentheses\r\n",
        "commit.author.name": "belugabehr",
        "pcid": "ac7840ced22902e3880089fb4c5a533535aae256",
        "changes": {
            "parquet-column/src/main/java/org/apache/parquet/column/EncodingStats.java": {
                "old": {
                    "('org.apache.parquet.column#EncodingStats', 'hasNonDictionaryEncodedPages')": [
                        84
                    ],
                    "('org.apache.parquet.column#EncodingStats', None)": [
                        106,
                        107,
                        151,
                        152
                    ]
                },
                "new": {
                    "('org.apache.parquet.column#EncodingStats', 'hasNonDictionaryEncodedPages')": [
                        84
                    ],
                    "('org.apache.parquet.column#EncodingStats', None)": [
                        106,
                        107,
                        151,
                        152
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnReaderBase.java": {
                "new": {
                    "('org.apache.parquet.column.impl#ColumnReaderBase', 'bindToDictionary(Dictionary)')": [
                        168,
                        172,
                        180,
                        184,
                        188,
                        192,
                        196,
                        200,
                        204,
                        208
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderBase', 'bind(PrimitiveTypeName)')": [
                        221,
                        225,
                        235,
                        239,
                        249,
                        253,
                        263,
                        267,
                        277,
                        281,
                        295,
                        305,
                        309,
                        323,
                        342,
                        346,
                        360,
                        370,
                        374,
                        388
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnWriteStoreBase.java": {
                "old": {
                    "('org.apache.parquet.column.impl#ColumnWriteStoreBase', 'sizeCheck')": [
                        208
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.impl#ColumnWriteStoreBase', None)": [
                        110,
                        159
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriteStoreBase', 'sizeCheck')": [
                        210
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/bitpacking/ByteBitPackingValuesWriter.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/delta/DeltaBinaryPackingValuesWriter.java": {
                "old": {
                    "(None, None)": [
                        22,
                        27,
                        28
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/delta/DeltaBinaryPackingValuesWriterForLong.java": {
                "old": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayReader.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23,
                        25
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayReader', None)": [
                        90
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayWriter.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/dictionary/DictionaryValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        101,
                        238
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        101,
                        238
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/dictionary/IntList.java": {
                "old": {
                    "('org.apache.parquet.column.values.dictionary#IntList', None)": [
                        95
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.dictionary#IntList', None)": [
                        95
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/fallback/FallbackValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.fallback#FallbackValuesWriter', 'of(I,F)')": [
                        31
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.fallback#FallbackValuesWriter', 'of(I,F)')": [
                        31
                    ],
                    "('org.apache.parquet.column.values.fallback#FallbackValuesWriter', None)": [
                        106,
                        115,
                        161,
                        168,
                        176,
                        183,
                        190,
                        197
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/rle/ZeroIntegerValuesReader.java": {
                "new": {
                    "('org.apache.parquet.column.values.rle#ZeroIntegerValuesReader', None)": [
                        32
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/example/DummyRecordConverter.java": {
                "new": {
                    "('org.apache.parquet.example#DummyRecordConverter', None)": [
                        79,
                        84,
                        89
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/example/data/Group.java": {
                "new": {
                    "('org.apache.parquet.example.data#Group', None)": [
                        73,
                        98
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/example/data/simple/SimpleGroup.java": {
                "old": {
                    "('org.apache.parquet.example.data.simple#SimpleGroup', None)": [
                        41
                    ]
                },
                "new": {
                    "('org.apache.parquet.example.data.simple#SimpleGroup', None)": [
                        41
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/filter2/predicate/FilterApi.java": {
                "old": {
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'eq(C,T)')": [
                        107
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'notEq(C,T)')": [
                        132
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'lt(C,T)')": [
                        150
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'ltEq(C,T)')": [
                        168
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'gt(C,T)')": [
                        186
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'gtEq(C,T)')": [
                        204
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'userDefined(Column,Class)')": [
                        221
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'userDefined(Column,U)')": [
                        237
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'eq(C,T)')": [
                        107
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'notEq(C,T)')": [
                        132
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'lt(C,T)')": [
                        150
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'ltEq(C,T)')": [
                        168
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'gt(C,T)')": [
                        186
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'gtEq(C,T)')": [
                        204
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'userDefined(Column,Class)')": [
                        221
                    ],
                    "('org.apache.parquet.filter2.predicate#FilterApi', 'userDefined(Column,U)')": [
                        237
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/filter2/predicate/LogicalInverter.java": {
                "old": {
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(Eq)')": [
                        56
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(NotEq)')": [
                        61
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(Lt)')": [
                        66
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(LtEq)')": [
                        71
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(Gt)')": [
                        76
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(GtEq)')": [
                        81
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(UserDefined)')": [
                        101
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(Eq)')": [
                        56
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(NotEq)')": [
                        61
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(Lt)')": [
                        66
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(LtEq)')": [
                        71
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(Gt)')": [
                        76
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(GtEq)')": [
                        81
                    ],
                    "('org.apache.parquet.filter2.predicate#LogicalInverter', 'visit(UserDefined)')": [
                        101
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/filter2/predicate/PrimitiveToBoxedClass.java": {
                "old": {
                    "('org.apache.parquet.filter2.predicate#PrimitiveToBoxedClass', None)": [
                        31
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.predicate#PrimitiveToBoxedClass', None)": [
                        31
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/filter2/predicate/SchemaCompatibilityValidator.java": {
                "old": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.parquet.filter2.predicate#SchemaCompatibilityValidator', None)": [
                        69,
                        73
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.predicate#SchemaCompatibilityValidator', None)": [
                        68,
                        72
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/filter2/predicate/ValidTypeMap.java": {
                "old": {
                    "('org.apache.parquet.filter2.predicate#ValidTypeMap', None)": [
                        44,
                        45
                    ],
                    "('org.apache.parquet.filter2.predicate#ValidTypeMap', 'add(Class,PrimitiveTypeName)')": [
                        51,
                        58
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.predicate#ValidTypeMap', None)": [
                        44,
                        45
                    ],
                    "('org.apache.parquet.filter2.predicate#ValidTypeMap', 'add(Class,PrimitiveTypeName)')": [
                        51,
                        58
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/filter2/recordlevel/FilteringGroupConverter.java": {
                "old": {
                    "('org.apache.parquet.filter2.recordlevel#FilteringGroupConverter', 'getConverter(int)')": [
                        76
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.recordlevel#FilteringGroupConverter', 'getConverter(int)')": [
                        76
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/filter2/recordlevel/IncrementallyUpdatedFilterPredicateBuilderBase.java": {
                "old": {
                    "('org.apache.parquet.filter2.recordlevel#IncrementallyUpdatedFilterPredicateBuilderBase', None)": [
                        60
                    ],
                    "('org.apache.parquet.filter2.recordlevel#IncrementallyUpdatedFilterPredicateBuilderBase', 'addValueInspector(ColumnPath,ValueInspector)')": [
                        85
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.recordlevel#IncrementallyUpdatedFilterPredicateBuilderBase', None)": [
                        60
                    ],
                    "('org.apache.parquet.filter2.recordlevel#IncrementallyUpdatedFilterPredicateBuilderBase', 'addValueInspector(ColumnPath,ValueInspector)')": [
                        85
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/internal/column/columnindex/BinaryColumnIndexBuilder.java": {
                "old": {
                    "('org.apache.parquet.internal.column.columnindex#BinaryColumnIndexBuilder', None)": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.parquet.internal.column.columnindex#BinaryColumnIndexBuilder', None)": [
                        62
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/internal/column/columnindex/BooleanColumnIndexBuilder.java": {
                "old": {
                    "('org.apache.parquet.internal.column.columnindex#BooleanColumnIndexBuilder', None)": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.parquet.internal.column.columnindex#BooleanColumnIndexBuilder', None)": [
                        62
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/internal/column/columnindex/DoubleColumnIndexBuilder.java": {
                "old": {
                    "('org.apache.parquet.internal.column.columnindex#DoubleColumnIndexBuilder', None)": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.parquet.internal.column.columnindex#DoubleColumnIndexBuilder', None)": [
                        65
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/internal/column/columnindex/FloatColumnIndexBuilder.java": {
                "old": {
                    "('org.apache.parquet.internal.column.columnindex#FloatColumnIndexBuilder', None)": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.parquet.internal.column.columnindex#FloatColumnIndexBuilder', None)": [
                        65
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/internal/column/columnindex/IntColumnIndexBuilder.java": {
                "old": {
                    "('org.apache.parquet.internal.column.columnindex#IntColumnIndexBuilder', None)": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.parquet.internal.column.columnindex#IntColumnIndexBuilder', None)": [
                        65
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/internal/column/columnindex/LongColumnIndexBuilder.java": {
                "old": {
                    "('org.apache.parquet.internal.column.columnindex#LongColumnIndexBuilder', None)": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.parquet.internal.column.columnindex#LongColumnIndexBuilder', None)": [
                        65
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/io/ColumnIOFactory.java": {
                "old": {
                    "('org.apache.parquet.io#ColumnIOFactory', None)": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#ColumnIOFactory', None)": [
                        39
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/io/GroupColumnIO.java": {
                "old": {
                    "('org.apache.parquet.io#GroupColumnIO', None)": [
                        40,
                        41
                    ],
                    "('org.apache.parquet.io#GroupColumnIO', 'setLevels(int,int,String,int,List,List)')": [
                        64,
                        69
                    ],
                    "('org.apache.parquet.io#GroupColumnIO', 'getColumnNames')": [
                        87
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#GroupColumnIO', None)": [
                        40,
                        41,
                        94,
                        99
                    ],
                    "('org.apache.parquet.io#GroupColumnIO', 'setLevels(int,int,String,int,List,List)')": [
                        64,
                        69
                    ],
                    "('org.apache.parquet.io#GroupColumnIO', 'getColumnNames')": [
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/io/MessageColumnIO.java": {
                "old": {
                    "('org.apache.parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer,Filter)')": [
                        106,
                        122,
                        131,
                        143
                    ],
                    "('org.apache.parquet.io#MessageColumnIO', None)": [
                        220,
                        227,
                        242
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#MessageColumnIO', None)": [
                        74,
                        221,
                        228,
                        243
                    ],
                    "('org.apache.parquet.io#MessageColumnIO', 'getRecordReader(PageReadStore,RecordMaterializer,Filter)')": [
                        107,
                        123,
                        132,
                        144
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/io/RecordReaderImplementation.java": {
                "old": {
                    "('org.apache.parquet.io#RecordReaderImplementation', None)": [
                        110,
                        337,
                        338,
                        361,
                        362
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#RecordReaderImplementation', None)": [
                        110,
                        337,
                        338,
                        361,
                        362
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/io/ValidatingRecordConsumer.java": {
                "old": {
                    "('org.apache.parquet.io#ValidatingRecordConsumer', None)": [
                        45,
                        46,
                        47,
                        48
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#ValidatingRecordConsumer', None)": [
                        45,
                        46,
                        47,
                        48,
                        63,
                        72,
                        82,
                        105,
                        115,
                        125,
                        196,
                        205,
                        214,
                        223,
                        232,
                        241
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/io/api/Binary.java": {
                "new": {
                    "('org.apache.parquet.io.api#Binary', None)": [
                        76
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/schema/GroupType.java": {
                "old": {
                    "('org.apache.parquet.schema#GroupType', None)": [
                        111,
                        120
                    ],
                    "('org.apache.parquet.schema#GroupType', 'getPaths(int)')": [
                        325
                    ],
                    "('org.apache.parquet.schema#GroupType', 'convert(List,TypeConverter)')": [
                        355
                    ],
                    "('org.apache.parquet.schema#GroupType', 'convertChildren(List,TypeConverter)')": [
                        362
                    ],
                    "('org.apache.parquet.schema#GroupType', 'mergeFields(GroupType,boolean)')": [
                        398
                    ]
                },
                "new": {
                    "('org.apache.parquet.schema#GroupType', None)": [
                        111,
                        120
                    ],
                    "('org.apache.parquet.schema#GroupType', 'getPaths(int)')": [
                        325
                    ],
                    "('org.apache.parquet.schema#GroupType', 'convert(List,TypeConverter)')": [
                        355
                    ],
                    "('org.apache.parquet.schema#GroupType', 'convertChildren(List,TypeConverter)')": [
                        362
                    ],
                    "('org.apache.parquet.schema#GroupType', 'mergeFields(GroupType,boolean)')": [
                        398
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/schema/MessageType.java": {
                "old": {
                    "('org.apache.parquet.schema#MessageType', 'getColumns')": [
                        106
                    ],
                    "('org.apache.parquet.schema#MessageType', 'convertWith(TypeConverter)')": [
                        128
                    ]
                },
                "new": {
                    "('org.apache.parquet.schema#MessageType', 'getColumns')": [
                        106
                    ],
                    "('org.apache.parquet.schema#MessageType', 'convertWith(TypeConverter)')": [
                        128
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/schema/PrimitiveType.java": {
                "old": {
                    "(None, None)": [
                        38
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/schema/Type.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.schema#Type', None)": [
                        305
                    ]
                },
                "new": {
                    "('org.apache.parquet.schema#Type', None)": [
                        304
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/schema/Types.java": {
                "old": {
                    "('org.apache.parquet.schema#Types', None)": [
                        649,
                        654,
                        662,
                        676,
                        690,
                        704,
                        709,
                        720,
                        731,
                        742,
                        779,
                        783,
                        788,
                        793,
                        845,
                        858,
                        871,
                        884,
                        951,
                        964,
                        977,
                        990,
                        1101,
                        1110,
                        1115,
                        1127,
                        1139,
                        1151,
                        1333,
                        1345,
                        1357,
                        1369
                    ],
                    "('org.apache.parquet.schema#Types', 'primitive(PrimitiveTypeName,Type)')": [
                        1434
                    ],
                    "('org.apache.parquet.schema#Types', 'required(PrimitiveTypeName)')": [
                        1445
                    ],
                    "('org.apache.parquet.schema#Types', 'optional(PrimitiveTypeName)')": [
                        1456
                    ],
                    "('org.apache.parquet.schema#Types', 'repeated(PrimitiveTypeName)')": [
                        1467
                    ],
                    "('org.apache.parquet.schema#Types', 'buildGroup(Type)')": [
                        1473
                    ],
                    "('org.apache.parquet.schema#Types', 'requiredGroup')": [
                        1482
                    ],
                    "('org.apache.parquet.schema#Types', 'optionalGroup')": [
                        1492
                    ],
                    "('org.apache.parquet.schema#Types', 'repeatedGroup')": [
                        1502
                    ],
                    "('org.apache.parquet.schema#Types', 'map(Type)')": [
                        1508
                    ],
                    "('org.apache.parquet.schema#Types', 'list(Type)')": [
                        1520
                    ]
                },
                "new": {
                    "('org.apache.parquet.schema#Types', None)": [
                        649,
                        654,
                        662,
                        676,
                        690,
                        704,
                        709,
                        720,
                        731,
                        742,
                        779,
                        783,
                        788,
                        793,
                        845,
                        858,
                        871,
                        884,
                        922,
                        952,
                        965,
                        978,
                        991,
                        1024,
                        1045,
                        1066,
                        1105,
                        1114,
                        1119,
                        1131,
                        1143,
                        1155,
                        1241,
                        1262,
                        1339,
                        1351,
                        1363,
                        1375
                    ],
                    "('org.apache.parquet.schema#Types', 'primitive(PrimitiveTypeName,Type)')": [
                        1440
                    ],
                    "('org.apache.parquet.schema#Types', 'required(PrimitiveTypeName)')": [
                        1451
                    ],
                    "('org.apache.parquet.schema#Types', 'optional(PrimitiveTypeName)')": [
                        1462
                    ],
                    "('org.apache.parquet.schema#Types', 'repeated(PrimitiveTypeName)')": [
                        1473
                    ],
                    "('org.apache.parquet.schema#Types', 'buildGroup(Type)')": [
                        1479
                    ],
                    "('org.apache.parquet.schema#Types', 'requiredGroup')": [
                        1488
                    ],
                    "('org.apache.parquet.schema#Types', 'optionalGroup')": [
                        1498
                    ],
                    "('org.apache.parquet.schema#Types', 'repeatedGroup')": [
                        1508
                    ],
                    "('org.apache.parquet.schema#Types', 'map(Type)')": [
                        1514
                    ],
                    "('org.apache.parquet.schema#Types', 'list(Type)')": [
                        1526
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/TestEncodingStats.java": {
                "old": {
                    "('org.apache.parquet.column#TestEncodingStats', 'testReusedBuilder')": [
                        42,
                        44,
                        55,
                        56
                    ]
                },
                "new": {
                    "('org.apache.parquet.column#TestEncodingStats', 'testReusedBuilder')": [
                        42,
                        44,
                        55,
                        56
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/impl/TestColumnReaderImpl.java": {
                "old": {
                    "('org.apache.parquet.column.impl#TestColumnReaderImpl', 'test')": [
                        82
                    ],
                    "('org.apache.parquet.column.impl#TestColumnReaderImpl', 'testOptional')": [
                        120
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.impl#TestColumnReaderImpl', 'test')": [
                        82
                    ],
                    "('org.apache.parquet.column.impl#TestColumnReaderImpl', 'testOptional')": [
                        120
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/impl/TestCorruptDeltaByteArrays.java": {
                "old": {
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testColumnReaderImplWithCorruptPage')": [
                        208,
                        239
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testColumnReaderImplWithCorruptPage')": [
                        208,
                        239
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/mem/TestMemColumn.java": {
                "old": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.parquet.column.mem#TestMemColumn', 'testMemColumnSeveralPagesRepeated')": [
                        171
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.mem#TestMemColumn', 'testMemColumnSeveralPagesRepeated')": [
                        170
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/page/mem/MemPageStore.java": {
                "old": {
                    "('org.apache.parquet.column.page.mem#MemPageStore', None)": [
                        40
                    ],
                    "('org.apache.parquet.column.page.mem#MemPageStore', 'getPageReader(ColumnDescriptor)')": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.page.mem#MemPageStore', None)": [
                        40
                    ],
                    "('org.apache.parquet.column.page.mem#MemPageStore', 'getPageReader(ColumnDescriptor)')": [
                        65
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/page/mem/MemPageWriter.java": {
                "old": {
                    "('org.apache.parquet.column.page.mem#MemPageWriter', None)": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.page.mem#MemPageWriter', None)": [
                        42
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/statistics/TestStatistics.java": {
                "old": {
                    "('org.apache.parquet.column.statistics#TestStatistics', 'testBooleanMinMax')": [
                        397,
                        398
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.statistics#TestStatistics', 'testBooleanMinMax')": [
                        397,
                        398
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/TestValuesReaderImpl.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/Utils.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/bitpacking/TestBitPackingColumn.java": {
                "new": {
                    "('org.apache.parquet.column.values.bitpacking#TestBitPackingColumn', None)": [
                        207,
                        211,
                        218,
                        222
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/delta/benchmark/BenchMarkTest.java": {
                "old": {
                    "('org.apache.parquet.column.values.delta.benchmark#BenchMarkTest', 'runWriteTest(ValuesWriter)')": [
                        28,
                        37
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/deltalengthbytearray/benchmark/BenchmarkDeltaLengthByteArray.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        57
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        69
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        57
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        69
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/TestDeltaByteArray.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/benchmark/BenchmarkDeltaByteArray.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        64
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        76
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithPlainValuesWriter')": [
                        88
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithDeltaLengthByteArrayValuesWriter')": [
                        100
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        64
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        76
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithPlainValuesWriter')": [
                        88
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithDeltaLengthByteArrayValuesWriter')": [
                        100
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/rle/RunLengthBitPackingHybridIntegrationTest.java": {
                "old": {
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridIntegrationTest', 'doIntegrationTest(int)')": [
                        42,
                        43,
                        47,
                        48,
                        52,
                        53,
                        57,
                        58,
                        64,
                        65,
                        69,
                        70
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/rle/TestRunLengthBitPackingHybridEncoder.java": {
                "old": {
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'unpack(int,int,ByteArrayInputStream)')": [
                        312
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'unpack(int,int,ByteArrayInputStream)')": [
                        312
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/filter2/predicate/TestLogicalInverseRewriter.java": {
                "old": {
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverseRewriter', None)": [
                        61
                    ],
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverseRewriter', 'testBaseCases')": [
                        88
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverseRewriter', None)": [
                        61
                    ],
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverseRewriter', 'testBaseCases')": [
                        88
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/filter2/predicate/TestLogicalInverter.java": {
                "old": {
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverter', None)": [
                        62
                    ],
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverter', 'testBaseCases')": [
                        85,
                        87
                    ]
                },
                "new": {
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverter', None)": [
                        62
                    ],
                    "('org.apache.parquet.filter2.predicate#TestLogicalInverter', 'testBaseCases')": [
                        85,
                        87
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/ConverterConsumer.java": {
                "old": {
                    "('org.apache.parquet.io#ConverterConsumer', None)": [
                        36,
                        37
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#ConverterConsumer', None)": [
                        36,
                        37
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/ExpectationValidatingConverter.java": {
                "old": {
                    "('org.apache.parquet.io#ExpectationValidatingConverter', None)": [
                        52
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#ExpectationValidatingConverter', None)": [
                        52
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/TestColumnIO.java": {
                "old": {
                    "('org.apache.parquet.io#TestColumnIO', 'testReadUsingRequestedSchemaWithExtraFields')": [
                        187
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testReadUsingProjectedSchema')": [
                        251
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'readGroups(MemPageStore,MessageType,MessageType,int)')": [
                        281
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testColumnIO')": [
                        330,
                        345
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testOptionalRequiredInteraction')": [
                        405,
                        422,
                        443
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testGroupWriter')": [
                        559
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#TestColumnIO', 'testReadUsingRequestedSchemaWithExtraFields')": [
                        187
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testReadUsingProjectedSchema')": [
                        251
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'readGroups(MemPageStore,MessageType,MessageType,int)')": [
                        281
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testColumnIO')": [
                        330,
                        345
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testOptionalRequiredInteraction')": [
                        405,
                        422,
                        443
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testGroupWriter')": [
                        559
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/TestFiltered.java": {
                "old": {
                    "('org.apache.parquet.io#TestFiltered', None)": [
                        59,
                        67
                    ],
                    "('org.apache.parquet.io#TestFiltered', 'readAll(RecordReader)')": [
                        70
                    ]
                },
                "new": {
                    "('org.apache.parquet.io#TestFiltered', None)": [
                        59,
                        67
                    ],
                    "('org.apache.parquet.io#TestFiltered', 'readAll(RecordReader)')": [
                        70
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/schema/TestTypeBuilders.java": {
                "old": {
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredMap')": [
                        485
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalMap')": [
                        500
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredValue')": [
                        515
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalValue')": [
                        530
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalGroupValue')": [
                        545,
                        546,
                        547,
                        552
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredGroupValue')": [
                        573,
                        574,
                        575,
                        580
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalValue')": [
                        605,
                        606,
                        607
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredValue')": [
                        631,
                        632,
                        633
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalGroupValue')": [
                        657,
                        658,
                        659,
                        664
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredGroupValue')": [
                        687,
                        691
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithNestedGroupKeyAndNestedGroupValue')": [
                        714,
                        715,
                        716,
                        720,
                        725
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredListValue')": [
                        756
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalListValue')": [
                        781
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredMapValue')": [
                        806,
                        807,
                        808
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalMapValue')": [
                        834,
                        835,
                        836
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredListValue')": [
                        862
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalListValue')": [
                        891
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredMapValue')": [
                        920,
                        921,
                        922
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalMapValue')": [
                        953,
                        954,
                        955
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithNullValue')": [
                        986
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithDefaultKeyAndNullValue')": [
                        1004
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testListOfReqGroup')": [
                        1080
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testListOfOptionalGroup')": [
                        1096
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredNestedList')": [
                        1112
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalNestedList')": [
                        1133
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredListWithinGroup')": [
                        1154
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalListWithinGroup')": [
                        1169
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalListWithinGroupWithReqElement')": [
                        1184
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredMapWithinList')": [
                        1200,
                        1204
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalMapWithinList')": [
                        1226,
                        1230
                    ]
                },
                "new": {
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredMap')": [
                        485
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalMap')": [
                        500
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredValue')": [
                        515
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalValue')": [
                        530
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalGroupValue')": [
                        545,
                        546,
                        547,
                        552
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredGroupValue')": [
                        573,
                        574,
                        575,
                        580
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalValue')": [
                        605,
                        606,
                        607
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredValue')": [
                        631,
                        632,
                        633
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalGroupValue')": [
                        657,
                        658,
                        659,
                        664
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredGroupValue')": [
                        687,
                        691
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithNestedGroupKeyAndNestedGroupValue')": [
                        714,
                        715,
                        716,
                        720,
                        725
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredListValue')": [
                        756
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalListValue')": [
                        781
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithRequiredMapValue')": [
                        806,
                        807,
                        808
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithOptionalMapValue')": [
                        834,
                        835,
                        836
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredListValue')": [
                        862
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalListValue')": [
                        891
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndRequiredMapValue')": [
                        920,
                        921,
                        922
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithGroupKeyAndOptionalMapValue')": [
                        953,
                        954,
                        955
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithNullValue')": [
                        986
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testMapWithDefaultKeyAndNullValue')": [
                        1004
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testListOfReqGroup')": [
                        1080
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testListOfOptionalGroup')": [
                        1096
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredNestedList')": [
                        1112
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalNestedList')": [
                        1133
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredListWithinGroup')": [
                        1154
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalListWithinGroup')": [
                        1169
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalListWithinGroupWithReqElement')": [
                        1184
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testRequiredMapWithinList')": [
                        1200,
                        1204
                    ],
                    "('org.apache.parquet.schema#TestTypeBuilders', 'testOptionalMapWithinList')": [
                        1226,
                        1230
                    ]
                }
            }
        }
    },
    "ac7840ced22902e3880089fb4c5a533535aae256": {
        "authored_data": "2020 Jan 08 17:00",
        "commit.message": "PARQUET-1725: Replace Usage of Strings.join with JDK Functionality in\u2026 (#713)\n\n* PARQUET-1725: Replace Usage of Strings.join with JDK Functionality in ColumnPath Class\r\n\r\n* Applied refactoring to DictionaryPageReader as well\r\n\r\n* Remove Strings utility class join methods\r\n\r\n* Deprecate instead of remove join methods\r\n",
        "commit.author.name": "belugabehr",
        "pcid": "e430527cdab5d0f5019c2ef665bea6283b5787b4",
        "changes": {
            "parquet-common/src/main/java/org/apache/parquet/Strings.java": {
                "new": {
                    "('org.apache.parquet#Strings', None)": [
                        41,
                        43,
                        56,
                        58,
                        78,
                        80
                    ]
                }
            },
            "parquet-common/src/main/java/org/apache/parquet/hadoop/metadata/ColumnPath.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.parquet.hadoop.metadata#ColumnPath', 'toDotString')": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop.metadata#ColumnPath', 'toDotString')": [
                        69
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/DictionaryPageReader.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.parquet.hadoop#DictionaryPageReader', 'readDictionaryPage(ColumnDescriptor)')": [
                        95
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#DictionaryPageReader', 'readDictionaryPage(ColumnDescriptor)')": [
                        94
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java": {
                "old": {
                    "(None, None)": [
                        44
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'appendRowGroup(SeekableInputStream,BlockMetaData,boolean)')": [
                        766
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'appendRowGroup(SeekableInputStream,BlockMetaData,boolean)')": [
                        765
                    ]
                }
            },
            "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/example/TestInputOutputFormat.java": {
                "old": {
                    "(None, None)": [
                        51
                    ],
                    "('org.apache.parquet.hadoop.example#TestInputOutputFormat', 'testReadWriteFilter')": [
                        310
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop.example#TestInputOutputFormat', 'testReadWriteFilter')": [
                        309
                    ]
                }
            },
            "parquet-thrift/src/main/java/org/apache/parquet/thrift/struct/CompatibilityChecker.java": {
                "old": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.parquet.thrift.struct#CompatibilityReport', 'prettyMessages')": [
                        84,
                        85
                    ]
                },
                "new": {
                    "('org.apache.parquet.thrift.struct#CompatibilityReport', 'prettyMessages')": [
                        83
                    ]
                }
            },
            "parquet-thrift/src/test/java/org/apache/parquet/thrift/TestThriftRecordConverter.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.parquet.thrift#TestThriftRecordConverter', 'constructorDoesNotRequireStructOrUnionTypeMeta')": [
                        81,
                        84
                    ]
                },
                "new": {
                    "('org.apache.parquet.thrift#TestThriftRecordConverter', 'constructorDoesNotRequireStructOrUnionTypeMeta')": [
                        80,
                        83
                    ]
                }
            }
        }
    },
    "e430527cdab5d0f5019c2ef665bea6283b5787b4": {
        "authored_data": "2020 Jan 08 15:14",
        "commit.message": "PARQUET-1741: Restore APIs to keep backward compatibility (#729)\n\n* PARQUET-1741: Restore APIs to keep backward compatibility\r\n\r\n* deprecate unused method\r\n",
        "commit.author.name": "Chen, Junjie",
        "pcid": "ce55c9b2c3db49bdf0c7c4f4450a00ba51dfcc7b",
        "changes": {
            "parquet-column/src/main/java/org/apache/parquet/filter2/recordlevel/FilteringRecordMaterializer.java": {
                "new": {
                    "(None, None)": [
                        21,
                        116
                    ],
                    "('org.apache.parquet.filter2.recordlevel#FilteringRecordMaterializer', None)": [
                        102,
                        103,
                        104,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.parquet.filter2.recordlevel#FilteringRecordMaterializer', 'getIndexFieldPathList(PrimitiveColumnIO)')": [
                        105,
                        106
                    ],
                    "('org.apache.parquet.filter2.recordlevel#FilteringRecordMaterializer', 'intArrayToList(int)')": [
                        110,
                        111,
                        112,
                        113,
                        114,
                        115
                    ]
                }
            }
        }
    },
    "c697d80ec1f10b381d634a01b6dd9eda2ba125e2": {
        "authored_data": "2020 Jan 05 20:12",
        "commit.message": "PARQUET-1730: Use switch Statement in AvroIndexedRecordConverter for Enums (#718)\n\n",
        "commit.author.name": "belugabehr",
        "pcid": "a7447f698e5d8a1fff5b1542a70e42273b1b6373",
        "changes": {
            "parquet-avro/src/main/java/org/apache/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('org.apache.parquet.avro#AvroIndexedRecordConverter', 'newConverter(Schema,Type,GenericData,ParentValueContainer)')": [
                        153,
                        155,
                        157,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        177,
                        178,
                        179,
                        180,
                        181
                    ]
                },
                "new": {
                    "('org.apache.parquet.avro#AvroIndexedRecordConverter', 'newConverter(Schema,Type,GenericData,ParentValueContainer)')": [
                        153,
                        154,
                        155,
                        156,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        170,
                        172,
                        173,
                        174,
                        175,
                        176,
                        178,
                        180,
                        181,
                        182,
                        183
                    ],
                    "('org.apache.parquet.avro#AvroIndexedRecordConverter', None)": [
                        184
                    ]
                }
            }
        }
    }
}