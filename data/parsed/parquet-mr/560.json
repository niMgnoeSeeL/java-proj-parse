{
    "440882c659967572311402c7fe534cf13d501cf4": {
        "authored_data": "2015 Nov 17 23:09",
        "commit.message": "PARQUET-364: Fix compatibility for Avro lists of lists.\n\nThis fixes lists of lists that have been written with Avro's 2-level\nrepresentation. The conversion setup logic missed the case where the\ninner field is repeated and cannot be the element in a 3-level list.\n\nThis also fixes the schema conversion for cases where an unknown\nwriter used a 2-level list of lists.\n\nThis is based on @liancheng's #264 but fixes the problem in a slightly different way.\n\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #272 from rdblue/PARQUET-364-fix-avro-lists-of-lists and squashes the following commits:\n\n41a70e0 [Ryan Blue] PARQUET-364: Fix compatibility for Avro lists of lists.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "6b605a4ea05b66e1a6bf843353abcb4834a4ced8",
        "changes": {
            "parquet-avro/src/main/java/org/apache/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('org.apache.parquet.avro#AvroIndexedRecordConverter', 'getAvroField(String)')": [
                        128
                    ],
                    "('org.apache.parquet.avro#AvroIndexedRecordConverter', None)": [
                        316,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374
                    ]
                },
                "new": {
                    "('org.apache.parquet.avro#AvroIndexedRecordConverter', 'getAvroField(String)')": [
                        128,
                        129
                    ],
                    "('org.apache.parquet.avro#AvroIndexedRecordConverter', None)": [
                        317
                    ]
                }
            },
            "parquet-avro/src/main/java/org/apache/parquet/avro/AvroRecordConverter.java": {
                "old": {
                    "('org.apache.parquet.avro#AvroRecordConverter', 'isElementType(Type,Schema)')": [
                        747,
                        749,
                        751
                    ]
                },
                "new": {
                    "(None, None)": [
                        53
                    ],
                    "('org.apache.parquet.avro#AvroRecordConverter', 'isElementType(Type,Schema)')": [
                        748,
                        750,
                        751,
                        753
                    ]
                }
            },
            "parquet-avro/src/main/java/org/apache/parquet/avro/AvroSchemaConverter.java": {
                "old": {
                    "('org.apache.parquet.avro#AvroSchemaConverter', 'convertField(String,Schema,Type)')": [
                        138
                    ],
                    "('org.apache.parquet.avro#AvroSchemaConverter', 'convertFields(String,List)')": [
                        216
                    ],
                    "('org.apache.parquet.avro#AvroSchemaConverter', 'convertField(Type)')": [
                        285,
                        305
                    ]
                },
                "new": {
                    "(None, None)": [
                        39
                    ],
                    "('org.apache.parquet.avro#AvroSchemaConverter', 'convertField(String,Schema,Type)')": [
                        139
                    ],
                    "('org.apache.parquet.avro#AvroSchemaConverter', 'convertFields(String,List)')": [
                        217
                    ],
                    "('org.apache.parquet.avro#AvroSchemaConverter', 'convertField(Type)')": [
                        286,
                        306
                    ],
                    "('org.apache.parquet.avro#AvroSchemaConverter', 'isElementType(Type,String)')": [
                        352
                    ]
                }
            },
            "parquet-avro/src/test/java/org/apache/parquet/avro/TestArrayCompatibility.java": {
                "old": {
                    "('org.apache.parquet.avro#TestArrayCompatibility', 'testAvroCompatRequiredGroupInList')": [
                        570,
                        571,
                        572,
                        637
                    ],
                    "('org.apache.parquet.avro#TestArrayCompatibility', 'testAvroCompatRequiredGroupInListWithSchema')": [
                        652,
                        653,
                        654,
                        717
                    ]
                },
                "new": {
                    "('org.apache.parquet.avro#TestArrayCompatibility', 'testAvroCompatOptionalGroupInList')": [
                        570,
                        571,
                        572,
                        637
                    ],
                    "('org.apache.parquet.avro#TestArrayCompatibility', 'testAvroCompatOptionalGroupInListWithSchema')": [
                        652,
                        653,
                        654,
                        717
                    ],
                    "('org.apache.parquet.avro#TestArrayCompatibility', None)": [
                        738,
                        739,
                        740,
                        806,
                        807,
                        808
                    ],
                    "('org.apache.parquet.avro#TestArrayCompatibility', 'testAvroCompatListInList')": [
                        741,
                        742,
                        743,
                        744,
                        745,
                        746,
                        747,
                        748,
                        749,
                        750,
                        751,
                        752,
                        753,
                        754,
                        755,
                        756,
                        757,
                        758,
                        759,
                        760,
                        761,
                        762,
                        763,
                        764,
                        765,
                        766,
                        767,
                        768,
                        769,
                        770,
                        771,
                        772,
                        773,
                        774,
                        775,
                        776,
                        777,
                        778,
                        779,
                        780,
                        781,
                        782,
                        783,
                        784,
                        785,
                        786,
                        787,
                        788,
                        789,
                        790,
                        791,
                        792,
                        793,
                        794,
                        795,
                        796,
                        797,
                        798,
                        799,
                        800,
                        801,
                        802,
                        803,
                        804,
                        805
                    ],
                    "('org.apache.parquet.avro#TestArrayCompatibility', 'testThriftCompatListInList')": [
                        809,
                        810,
                        811,
                        812,
                        813,
                        814,
                        815,
                        816,
                        817,
                        818,
                        819,
                        820,
                        821,
                        822,
                        823,
                        824,
                        825,
                        826,
                        827,
                        828,
                        829,
                        830,
                        831,
                        832,
                        833,
                        834,
                        835,
                        836,
                        837,
                        838,
                        839,
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        846,
                        847,
                        848,
                        849,
                        850,
                        851,
                        852,
                        853,
                        854,
                        855,
                        856,
                        857,
                        858,
                        859,
                        860,
                        861,
                        862,
                        863,
                        864,
                        865,
                        866,
                        867,
                        868,
                        869,
                        870,
                        871,
                        872,
                        873
                    ]
                }
            },
            "parquet-avro/src/test/java/org/apache/parquet/avro/TestAvroSchemaConverter.java": {
                "new": {
                    "('org.apache.parquet.avro#TestAvroSchemaConverter', 'testOldAvroListOfLists')": [
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422
                    ],
                    "('org.apache.parquet.avro#TestAvroSchemaConverter', None)": [
                        423,
                        424,
                        425,
                        453,
                        454,
                        455,
                        486,
                        487,
                        488
                    ],
                    "('org.apache.parquet.avro#TestAvroSchemaConverter', 'testOldThriftListOfLists')": [
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452
                    ],
                    "('org.apache.parquet.avro#TestAvroSchemaConverter', 'testUnknownTwoLevelListOfLists')": [
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485
                    ]
                }
            }
        }
    },
    "6b605a4ea05b66e1a6bf843353abcb4834a4ced8": {
        "authored_data": "2015 Nov 04 17:13",
        "commit.message": "PARQUET-77: ByteBuffer use in read and write paths\n\nThis work is based on the GSOC project from the summer of 2014. We have expanded on it to fix bugs and change the write path to use ByteBuffers as well. This PR replaces the earlier PRs #6, #49 and #50\n\nAuthor: Jason Altekruse <altekrusejason@gmail.com>\nAuthor: sunyu <stormdsy@gmail.com>\nAuthor: adeneche <adeneche@gmail.com>\nAuthor: Jacques Nadeau <jacques@apache.org>\nAuthor: Parth Chandra <pchandra@maprtech.com>\nAuthor: stormdsy@gmail.com <stormdsy@gmail.com>\nAuthor: Jason Altekruse <altekrusejason@open-math.com>\nAuthor: dsy <stormdsy@gmail.com>\nAuthor: Steven Phillips <sphillips@maprtech.com>\nAuthor: Gera Shegalov <gera@twitter.com>\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #267 from jaltekruse/1.6.0rc3-drill-r0.3-merge and squashes the following commits:\n\n56316d0 [Jason Altekruse] An exception out of the read method doesn't necessarily mean something is very wrong, so it shouldn't get wrapped in a ShouldNeverHappenException. This invocationTargetException will wrap any kind of exception coming out of the method, including an IOException.\n58340d8 [Jason Altekruse] Fix CompatibilityUtil, primary issue was a small error in the package name for the class that was being used to detect if the Hadoop 2.x API was available.\n96e19a8 [Jason Altekruse] Properly set the byte buffer position when reading out of a filesystem that does not implement the byte buffer based read method in the Hadoop 2.x API.\n269daef [Jason Altekruse] Make CodecFactory public\nbd7aa97 [Jason Altekruse] Remove unused imports, one of which has been moved to package private and is no longer accessible in this class.\na44fdba [Jason Altekruse] Fix logging and restrict access to classes inside of CodecFactory.\n723701c [Jason Altekruse] Adding isDirect interface to ByteBufferAllocator to add a restriction on the allocators used by a DirectCodecFactory.\n10b5ba3 [Jason Altekruse] Remove unneeded TODO\n57491a2 [Jason Altekruse] Delete older version of test file, all of these tests look to be covered in the newer version.\nd6501b1 [Jason Altekruse] Thought I had fixed this double deallocation earlier, guess the change got lost somewhere.\na8d2dc1 [Jason Altekruse] Address review comments.\n40714a4 [Jason Altekruse] Move pageSize to the constructor of codecfactory rather than the method for getting a compressor.\ndf7fd9c [Jason Altekruse] Limit access to classes and methods used for reflection based access to Hadoop 2.0 compression APIs.\n192c717 [Jason Altekruse] Fix error message\n1a47767 [Jason Altekruse] Address review comments\n5869156 [Jason Altekruse] Move fallback classes from HeapCodecFactory to the DirectCodecFactory\n3945674 [Jason Altekruse] Switch to using the DirectCodecFactory everywhere, one test is failing form the command line that is passing in intellij.\ne7f7f7f [Jason Altekruse] WIP - removing unneeded generics form CodecFactories\n659230f [Jason Altekruse] Remove second version of the class ByteBufferBytesInput that was nested in DirectCodecFactory. Replace with the one that was declared in the BytesInput class.\nc305984 [Jason Altekruse] Adding back code generation for method to take a byte array as well as the new implementation that takes a Bytebuffer.\nb8f54c2 [Jason Altekruse] Add a unit test for ByteBufferBackedBinary.\nae58486 [Jason Altekruse] Changing argument lists that previously included both an allocator and a ParquetProperties object.\nb4266fb [Jason Altekruse] Add license header to new class\nf8e5988 [Jason Altekruse] Added javadocs, removed unused code in DirectCodecFactory\nd332ca7 [Jason Altekruse] Add test for UnsignedVarIntBytesInput\nb7a6457 [Jason Altekruse] fix license leader\n8ff878a [Jason Altekruse] Addressing review comments\n862eb13 [Jason Altekruse] Fix usage of old constructor in Thrift module that caused a compilation failure. I had been skipping this module entirely during my work as the tests will fail to compile without a binary version of thrift 0.7, which seems hard to come by or compile yourself on Mac OS X.\n0496350 [Jason Altekruse] Add unit test for direct codec factory.\nda1b52a [Jason Altekruse] Moving classes into parquet from Drill.\n2f1a6c7 [Jason Altekruse] Consolidate a little more code\n8f66e43 [Jason Altekruse] Create utility methods to transform checked exceptions to unchecked when using reflection.\nf217e6a [Jason Altekruse] Restore old interfaces\nd5536b6 [Jason Altekruse] Restore original name of CapacityByteArrayOutputStream to keep compatibility with 1.7\n4c3195e [Jason Altekruse] Turn back on SemVer\n2e95915 [Jason Altekruse] Addressing minor review comments, comments out code, star import, formatting\na793be8 [Jason Altekruse] Add closeQuietly method to convert checked  IOExceptions from classless into runtime exceptions. Remove a bunch of unused imports from when there were previously try catch blocks that did this wrapping themselves (many actually were refactored to remove any need for special exception handling in an earlier commit, only one is actually using the new method).\nfdb689c [Jason Altekruse] Remove unnecessary copy writing a Binary to an OutputStream if it is backed by a byte array.\nd4819b4 [Jason Altekruse] remove methods now unneccesary as same implementation has been moved to the base class.\nad58bbe [Jason Altekruse] Addressing small review comments, unused imports, doc cleanup, etc.\n9fb65dd [Jason Altekruse] Rename method to get a dictionary page to clarify that the dictionary will be closed and not available for further insertion.\ne79684e [Jason Altekruse] Review comments - fixing use of ParquetProperties and removing unused interfaces on PageWriter\nb1040a8 [Jason Altekruse] Remove code used to debug a test that was failing after the initial merge.\n9dccb94 [Jason Altekruse] Add new method to turn BytesInput into an InputStream.\nf0e31ec [Jason Altekruse] revert small formatting and renaming changes, TODO make sure these result in a net diff of no changes (or only intended functional changes)\n0098b1c [Jason Altekruse] Remove unused method\n8c6e4a9 [Jason Altekruse] Addressing review comments, moving code out of generated class into abstract base class.\n29cc747 [Jason Altekruse] Factor out common code\n6959db7 [Jason Altekruse] addressing review comments, avoiding unnecessary copies when creating ByteBuffers\nfec4242 [Jason Altekruse] Address review comments - factoring out code in tests\n104a1d1 [Jason Altekruse] Remove test requiring a hard-coded binary file. This was actually a bad file being produced by Drill because we were not flushing the RecordConsumer.\n86317b0 [Jason Altekruse] Address review comments, make field in immutable ParquetProperties object final, make an interface now expecting a ByteBuffer deprecated for the version that takes a byte[].\n1971fc5 [Jason Altekruse] Fixes made while debugging drill unit tests\nebae775 [Jason Altekruse] Fix issue reading page data into an off-heap ByteBuffer\n705b864 [Jason Altekruse] Rename CapacityByteArrayOutputStream to CapacityByteBufferOutputStream to reflect new implementation internals. Add close method to CapacityByteBufferOutputStream and a few other classes.\n35d8386 [Jason Altekruse] Move call to getBytes() on dictionaryPages to remove the need to cache a list of dictionaryEncoders to be closed later.\nd40706b [Jason Altekruse] Get rid of unnecessary calls to Bytebuffer.wrap(byte[]), as an interface that takes a byte array is still available.\nfddd4af [Jason Altekruse] WIP - removing copies from the ByteBufferBasedBinary equals, compareTo, hashCode methods. Current tests are passing, but I should add some new ones.\n829af6f [Jason Altekruse] WIP - getting rid of unnecessary copies in Binary.java\n23ad48e [Jason Altekruse] WIP - addressing review comments\n7e252f3 [Jason Altekruse] WIP - addressing review comments\n1f4f504 [Jason Altekruse] WIP - addressing review comments\nab54c4e [Jason Altekruse] Moving classes out of the old packages.\n45cadee [Jason Altekruse] Cleaning up code in Binary after merge.\n864b011 [Jason Altekruse] Simplifying how buffer allocators are passed when creating ValuesWriters.\n2b8328b [Jason Altekruse] I all of the tests are now passing after the merge.\n1bfa3a0 [Jason Altekruse] Merge branch 'master' into 1.6.0rc3-drill-r0.3-merge\n9bbc269 [Jacques Nadeau] Update to 1.6.0rc3-drill-r0.3\n9f22bd7 [Jacques Nadeau] Make CodecFactory pluggable\n4a9dd28 [Jacques Nadeau] update pom version\n173aa25 [Jacques Nadeau] Set max preferred slab size to 16mb\nc98ec2a [adeneche] bumped version to 1.6.0rc3-drill-r0.1\n51cf2f1 [Ryan Blue] cherry pick pull#188\ne1df3b9 [adeneche] disabled enforcer and changed version to -drill\n6943536 [adeneche] fixing bug related to testDictionaryError_419\n48cceef [Steven Phillips] Fix allocation in DictionaryValuesWriter\n98b99ea [Parth Chandra] Revert readFooter to not use ZeroCopy path.\na6389db [Steven Phillips] Make constructor for PrimitiveType that takes decimalMetadata public.\ne488924 [adeneche] after merge code cleanup\n35b10af [Parth Chandra] Use ByteBuffers in the Write path. Allow callers to pass in an allocator to allocate the ByteBuffer.\n2187697 [Jacques Nadeau] Update Binary to make a copy of data for initial statistics.\n8143174 [adeneche] update pig.version to build with Hadoop 2 jars\n2c2b183 [Parth Chandra] Remove Zero Copy read path while reading footers\n7bc2a4d [Parth Chandra] Make a copy of Min and Max values for BinaryStatistics so that direct memory can be released before stats are written.\n5bc8774 [Parth Chandra] Update Snappy Codec to implement DirectDecompressionCodec interface Add compatibility function to read directly into a byte buffer\n0d22908 [adeneche] merging with master\n8be638a [sunyu] Address tsdeng's comments\n861e541 [dsy] enable enforcer check.\n912cbaf [sunyu] fix a bug in equals in ByteBuffer Binary with offset and length\n016e89c [sunyu] remove some unncessary codes. add compatible method initFromPage in ValueReaders. add toByteBuffer method in ByteBufferInputStream. add V21FileAPI class to encapsulate v21 APIs and make it a singlton. add ByteBuffer based equal and compareto method in Binary.\n26dc879 [dsy] disable enforcer to pass build.\na7bcfbb [sunyu] Make BytePacker consume ByteBuffer directly.\n01c2ae5 [sunyu] Implement FSDISTransport in Compatible layer. Fix bugs in Binary.\n47b177d [sunyu] Move CompatibilityUtil to parquet.hadoop.util. Use reflect to call new API to keep compatible.\n970fc8b [stormdsy@gmail.com] Add a Hadoop compatible layer to abstract away the zero copy API and old API.\n4f399aa [stormdsy@gmail.com] Add original readIntLittleEndian function to keep compatible with previous verision.\n7ac1df5 [stormdsy@gmail.com] Using Writable Channel to replace write to OutputStream one by one.\n36aba13 [sunyu] Read from ByteBuffer instead of ByteArray to avoid unnecessary array copy through read path.\n53500d4 [sunyu] Add ByteBufferInputStream and modify Chunk to consume ByteBuffer instead of byte array.\ndf1ad93 [stormdsy@gmail.com] Reading chunk using zero-copy API\n2d32f49 [Gera Shegalov] Reading file metadata using zero-copy API\n686d598 [Gera Shegalov] Use ByteBuf-based api to read magic.\n",
        "commit.author.name": "Jason Altekruse",
        "pcid": "5a45ae3b1deb5117cb9e9a13141eeab1e9ad3d71",
        "changes": {
            "parquet-column/src/main/java/org/apache/parquet/column/ColumnWriteStore.java": {
                "new": {
                    "(None, None)": [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/ColumnWriter.java": {
                "new": {
                    "(None, None)": [
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/ParquetProperties.java": {
                "old": {
                    "('org.apache.parquet.column#ParquetProperties', None)": [
                        82,
                        83
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'getColumnDescriptorValuesWriter(int,int,int)')": [
                        84,
                        89
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'plainWriter(ColumnDescriptor,int,int)')": [
                        98,
                        100,
                        106
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'dictionaryWriter(ColumnDescriptor,int)')": [
                        131,
                        133,
                        135,
                        137,
                        139,
                        141,
                        143
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'writerToFallbackTo(ColumnDescriptor,int,int)')": [
                        156,
                        159,
                        161
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'newColumnWriteStore(MessageType,PageWriteStore,int)')": [
                        224,
                        231,
                        237
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23
                    ],
                    "('org.apache.parquet.column#ParquetProperties', None)": [
                        81,
                        84,
                        85,
                        86,
                        87,
                        91,
                        92,
                        93,
                        94,
                        101,
                        235,
                        236
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'getColumnDescriptorValuesWriter(int,int,int)')": [
                        95,
                        100
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'plainWriter(ColumnDescriptor,int,int)')": [
                        110,
                        112,
                        118
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'dictionaryWriter(ColumnDescriptor,int)')": [
                        143,
                        145,
                        147,
                        149,
                        151,
                        153,
                        155
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'writerToFallbackTo(ColumnDescriptor,int,int)')": [
                        168,
                        171,
                        173
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'getAllocator')": [
                        233,
                        234
                    ],
                    "('org.apache.parquet.column#ParquetProperties', 'newColumnWriteStore(MessageType,PageWriteStore,int,ByteBufferAllocator)')": [
                        240,
                        241,
                        248,
                        254
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'initDataReader(Encoding,byte,int,int)')": [
                        551
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'readPageV1(DataPageV1)')": [
                        591,
                        592
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'readPageV2(DataPageV2)')": [
                        611
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'newRLEIterator(int,BytesInput)')": [
                        625
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'initDataReader(Encoding,ByteBuffer,int,int)')": [
                        552
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'readPageV1(DataPageV1)')": [
                        592,
                        593
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'readPageV2(DataPageV2)')": [
                        612
                    ],
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', 'newRLEIterator(int,BytesInput)')": [
                        626
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnWriteStoreV1.java": {
                "old": {
                    "('org.apache.parquet.column.impl#ColumnWriteStoreV1', None)": [
                        44
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriteStoreV1', 'newMemColumn(ColumnDescriptor)')": [
                        68
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        142,
                        143,
                        144
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriteStoreV1', None)": [
                        44,
                        46,
                        53
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriteStoreV1', 'newMemColumn(ColumnDescriptor)')": [
                        71
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriteStoreV1', 'close')": [
                        138,
                        139,
                        140,
                        141
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnWriteStoreV2.java": {
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriteStoreV2', None)": [
                        54,
                        66,
                        138,
                        139,
                        140,
                        141
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriteStoreV2', 'close')": [
                        134,
                        135,
                        136,
                        137
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnWriterV1.java": {
                "old": {
                    "('org.apache.parquet.column.impl#ColumnWriterV1', None)": [
                        69,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV1', 'flush')": [
                        242
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV1', None)": [
                        70,
                        71,
                        79,
                        80,
                        81,
                        82,
                        256,
                        263,
                        264,
                        265
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV1', 'flush')": [
                        244
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV1', 'close')": [
                        257,
                        258,
                        259,
                        260,
                        261,
                        262
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnWriterV2.java": {
                "old": {
                    "('org.apache.parquet.column.impl#ColumnWriterV2', None)": [
                        72,
                        73,
                        255
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV2', 'finalizeColumnChunk')": [
                        211
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV2', None)": [
                        73,
                        74,
                        75,
                        76,
                        119,
                        125,
                        126,
                        127,
                        133,
                        134,
                        274
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV2', 'close')": [
                        120,
                        121,
                        122,
                        123,
                        124
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV2', 'getBufferedSizeInMemory')": [
                        128,
                        129,
                        130,
                        131,
                        132
                    ],
                    "('org.apache.parquet.column.impl#ColumnWriterV2', 'finalizeColumnChunk')": [
                        230
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/page/PageWriter.java": {
                "old": {
                    "(None, None)": [
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/ValuesReader.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.parquet.column.values#ValuesReader', 'initFromPage(int,byte,int)')": [
                        61
                    ],
                    "('org.apache.parquet.column.values#ValuesReader', None)": [
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        30
                    ],
                    "('org.apache.parquet.column.values#ValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        62
                    ],
                    "('org.apache.parquet.column.values#ValuesReader', None)": [
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        74,
                        75
                    ],
                    "('org.apache.parquet.column.values#ValuesReader', 'initFromPage(int,byte,int)')": [
                        72,
                        73
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/ValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values#ValuesWriter', 'createDictionaryPage')": [
                        61
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values#ValuesWriter', None)": [
                        59,
                        60,
                        61,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69
                    ],
                    "('org.apache.parquet.column.values#ValuesWriter', 'close')": [
                        62
                    ],
                    "('org.apache.parquet.column.values#ValuesWriter', 'toDictPageAndClose')": [
                        72
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/bitpacking/BitPackingValuesReader.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BitPackingValuesReader', None)": [
                        42,
                        69,
                        80
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BitPackingValuesReader', 'initFromPage(int,byte,int)')": [
                        72,
                        76
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        27
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BitPackingValuesReader', None)": [
                        43,
                        70,
                        81
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BitPackingValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        73,
                        77
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/bitpacking/BitPackingValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.bitpacking#BitPackingValuesWriter', None)": [
                        50,
                        52
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BitPackingValuesWriter', None)": [
                        51,
                        53,
                        107,
                        110,
                        111
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BitPackingValuesWriter', 'close')": [
                        108,
                        109
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/bitpacking/ByteBitPackingValuesReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.bitpacking#ByteBitPackingValuesReader', None)": [
                        37
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'readInteger')": [
                        50,
                        51
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'initFromPage(int,byte,int)')": [
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBitPackingValuesReader', None)": [
                        38
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'readInteger')": [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        68
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/bitpacking/ByteBitPackingValuesWriter.java": {
                "new": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/boundedint/BitReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.boundedint#BitReader', None)": [
                        28
                    ],
                    "('org.apache.parquet.column.values.boundedint#BitReader', 'prepare(byte,int,int)')": [
                        53
                    ],
                    "('org.apache.parquet.column.values.boundedint#BitReader', 'getNextByte')": [
                        90
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.parquet.column.values.boundedint#BitReader', None)": [
                        29
                    ],
                    "('org.apache.parquet.column.values.boundedint#BitReader', 'prepare(ByteBuffer,int,int)')": [
                        54
                    ],
                    "('org.apache.parquet.column.values.boundedint#BitReader', 'getNextByte')": [
                        91
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/boundedint/BitWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.boundedint#BitWriter', None)": [
                        44,
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        166
                    ],
                    "('org.apache.parquet.column.values.boundedint#BitWriter', None)": [
                        45,
                        46,
                        160
                    ],
                    "('org.apache.parquet.column.values.boundedint#BitWriter', 'close')": [
                        161,
                        162,
                        163,
                        164,
                        165
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/boundedint/BoundedIntValuesFactory.java": {
                "old": {
                    "('org.apache.parquet.column.values.boundedint#BoundedIntValuesFactory', 'getBoundedWriter(int,int,int)')": [
                        29,
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.parquet.column.values.boundedint#BoundedIntValuesFactory', 'getBoundedWriter(int,int,int,ByteBufferAllocator)')": [
                        30,
                        31
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/boundedint/BoundedIntValuesReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.boundedint#BoundedIntValuesReader', 'initFromPage(int,byte,int)')": [
                        73,
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.column.values.boundedint#BoundedIntValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        74,
                        75
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/boundedint/BoundedIntValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.boundedint#BoundedIntValuesWriter', None)": [
                        62,
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.parquet.column.values.boundedint#BoundedIntValuesWriter', None)": [
                        63,
                        67,
                        102,
                        103,
                        104
                    ],
                    "('org.apache.parquet.column.values.boundedint#BoundedIntValuesWriter', 'close')": [
                        105,
                        106
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/boundedint/ZeroIntegerValuesReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.boundedint#ZeroIntegerValuesReader', 'initFromPage(int,byte,int)')": [
                        39
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.parquet.column.values.boundedint#ZeroIntegerValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        40
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/delta/DeltaBinaryPackingValuesReader.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesReader', None)": [
                        43,
                        53
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesReader', 'initFromPage(int,byte,int)')": [
                        67,
                        68,
                        81
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesReader', 'unpack8Values(BytePacker)')": [
                        154
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        30
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesReader', None)": [
                        44,
                        54
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        68,
                        69,
                        82
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesReader', 'unpack8Values(BytePacker)')": [
                        155
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/delta/DeltaBinaryPackingValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriter', None)": [
                        114,
                        115,
                        116,
                        117,
                        118,
                        123
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriter', None)": [
                        115,
                        116,
                        117,
                        118,
                        119,
                        124,
                        267,
                        268,
                        269
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriter', 'close')": [
                        262,
                        263,
                        264,
                        265,
                        266
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/deltalengthbytearray/DeltaLengthByteArrayValuesReader.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesReader', None)": [
                        40
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesReader', 'initFromPage(int,byte,int)')": [
                        48,
                        50
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesReader', 'readBytes')": [
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        32
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesReader', None)": [
                        41
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        49,
                        51
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesReader', 'readBytes')": [
                        63
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/deltalengthbytearray/DeltaLengthByteArrayValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesWriter', None)": [
                        51,
                        52,
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        114
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesWriter', None)": [
                        52,
                        53,
                        58,
                        102,
                        103,
                        104
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#DeltaLengthByteArrayValuesWriter', 'close')": [
                        99,
                        100,
                        101
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayReader', 'initFromPage(int,byte,int)')": [
                        48
                    ],
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayReader', None)": [
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayReader', 'initFromPage(int,ByteBuffer,int)')": [
                        49
                    ],
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayReader', None)": [
                        55
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/deltastrings/DeltaByteArrayWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayWriter', None)": [
                        44,
                        45,
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayWriter', None)": [
                        45,
                        46,
                        47,
                        77,
                        78,
                        79
                    ],
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayWriter', 'close')": [
                        74,
                        75,
                        76
                    ],
                    "('org.apache.parquet.column.values.deltastrings#DeltaByteArrayWriter', 'writeBytes(Binary)')": [
                        95
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        43
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(int,byte,int)')": [
                        54,
                        56,
                        57,
                        59
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        26
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesReader', None)": [
                        44
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        55,
                        57,
                        58,
                        60
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/dictionary/DictionaryValuesWriter.java": {
                "old": {
                    "(None, None)": [
                        39,
                        41
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        98,
                        228,
                        229,
                        246,
                        249,
                        297,
                        299,
                        300,
                        316,
                        319,
                        342,
                        344,
                        345,
                        361,
                        364,
                        414,
                        416,
                        417,
                        433,
                        436,
                        486,
                        488,
                        489,
                        505,
                        508,
                        558,
                        560,
                        561,
                        577,
                        580
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', 'dictPage(ValuesWriter)')": [
                        104,
                        105
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', 'getBytes')": [
                        150,
                        155
                    ]
                },
                "new": {
                    "(None, None)": [
                        39,
                        41,
                        42,
                        43
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', None)": [
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        108,
                        109,
                        197,
                        198,
                        199,
                        251,
                        252,
                        269,
                        272,
                        321,
                        322,
                        338,
                        341,
                        365,
                        366,
                        382,
                        385,
                        436,
                        437,
                        453,
                        456,
                        507,
                        508,
                        524,
                        527,
                        578,
                        579,
                        595,
                        598
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', 'dictPage(ValuesWriter)')": [
                        115,
                        116,
                        117,
                        118
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', 'getBytes')": [
                        167,
                        168
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', 'reset')": [
                        195
                    ],
                    "('org.apache.parquet.column.values.dictionary#DictionaryValuesWriter', 'close')": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        205
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/dictionary/PlainValuesDictionary.java": {
                "old": {
                    "('org.apache.parquet.column.values.dictionary#PlainValuesDictionary', None)": [
                        89,
                        91,
                        99,
                        109,
                        151,
                        154,
                        194,
                        197,
                        237,
                        240,
                        280,
                        283
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.parquet.column.values.dictionary#PlainValuesDictionary', None)": [
                        90,
                        92,
                        93,
                        101,
                        111,
                        153,
                        156,
                        196,
                        199,
                        239,
                        242,
                        282,
                        285
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/fallback/FallbackValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.fallback#FallbackValuesWriter', 'createDictionaryPage')": [
                        100,
                        102,
                        104
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.values.fallback#FallbackValuesWriter', None)": [
                        100,
                        104,
                        105
                    ],
                    "('org.apache.parquet.column.values.fallback#FallbackValuesWriter', 'close')": [
                        101,
                        102,
                        103
                    ],
                    "('org.apache.parquet.column.values.fallback#FallbackValuesWriter', 'toDictPageAndClose')": [
                        106,
                        108,
                        110
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/plain/BinaryPlainValuesReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.plain#BinaryPlainValuesReader', None)": [
                        33
                    ],
                    "('org.apache.parquet.column.values.plain#BinaryPlainValuesReader', 'readBytes')": [
                        42
                    ],
                    "('org.apache.parquet.column.values.plain#BinaryPlainValuesReader', 'initFromPage(int,byte,int)')": [
                        63,
                        65
                    ],
                    "(None, None)": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.column.values.plain#BinaryPlainValuesReader', None)": [
                        34
                    ],
                    "('org.apache.parquet.column.values.plain#BinaryPlainValuesReader', 'readBytes')": [
                        43
                    ],
                    "('org.apache.parquet.column.values.plain#BinaryPlainValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        64,
                        66
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/plain/BooleanPlainValuesReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.plain#BooleanPlainValuesReader', 'initFromPage(int,byte,int)')": [
                        65,
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.parquet.column.values.plain#BooleanPlainValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        66,
                        67
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/plain/BooleanPlainValuesWriter.java": {
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.parquet.column.values.plain#BooleanPlainValuesWriter', 'close')": [
                        65,
                        66
                    ],
                    "('org.apache.parquet.column.values.plain#BooleanPlainValuesWriter', None)": [
                        67,
                        68,
                        69
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/plain/FixedLenByteArrayPlainValuesReader.java": {
                "old": {
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', None)": [
                        36
                    ],
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', 'readBytes')": [
                        49
                    ],
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', 'initFromPage(int,byte,int)')": [
                        61,
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', None)": [
                        37
                    ],
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', 'readBytes')": [
                        50
                    ],
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        62,
                        64
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/plain/FixedLenByteArrayPlainValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesWriter', None)": [
                        44,
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesWriter', None)": [
                        44,
                        45,
                        47,
                        49,
                        50,
                        91,
                        92,
                        93
                    ],
                    "('org.apache.parquet.column.values.plain#FixedLenByteArrayPlainValuesWriter', 'close')": [
                        89,
                        90
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/plain/PlainValuesReader.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.plain#PlainValuesReader', None)": [
                        44
                    ],
                    "('org.apache.parquet.column.values.plain#PlainValuesReader', 'initFromPage(int,byte,int)')": [
                        47,
                        48,
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        26
                    ],
                    "('org.apache.parquet.column.values.plain#PlainValuesReader', None)": [
                        45,
                        51,
                        52
                    ],
                    "('org.apache.parquet.column.values.plain#PlainValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        48,
                        49,
                        50
                    ],
                    "('org.apache.parquet.column.values.plain#PlainValuesReader', 'toInputStream(ByteBuffer,int)')": [
                        53,
                        54
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/plain/PlainValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.plain#PlainValuesWriter', None)": [
                        47,
                        48
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.column.values.plain#PlainValuesWriter', None)": [
                        48,
                        49,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.parquet.column.values.plain#PlainValuesWriter', 'close')": [
                        130,
                        131,
                        132
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/rle/RunLengthBitPackingHybridDecoder.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridDecoder', None)": [
                        46,
                        53
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        28
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridDecoder', None)": [
                        48,
                        55
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/rle/RunLengthBitPackingHybridEncoder.java": {
                "old": {
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridEncoder', None)": [
                        119,
                        128
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridEncoder', None)": [
                        120,
                        129,
                        288,
                        289
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridEncoder', 'close')": [
                        285,
                        286,
                        287
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/rle/RunLengthBitPackingHybridValuesReader.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(int,byte,int)')": [
                        44,
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(int,ByteBuffer,int)')": [
                        45,
                        46
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/column/values/rle/RunLengthBitPackingHybridValuesWriter.java": {
                "old": {
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridValuesWriter', None)": [
                        35,
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridValuesWriter', None)": [
                        36,
                        37,
                        88,
                        89,
                        90
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridValuesWriter', 'close')": [
                        86,
                        87
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/io/api/Binary.java": {
                "old": {
                    "('org.apache.parquet.io.api#Binary', None)": [
                        333,
                        334,
                        335,
                        336,
                        343,
                        348,
                        353,
                        354,
                        359,
                        360,
                        361,
                        362,
                        378,
                        382,
                        383,
                        384,
                        385,
                        386,
                        392,
                        393,
                        394,
                        395,
                        396,
                        402,
                        403,
                        404,
                        405,
                        406,
                        412,
                        413,
                        414,
                        415,
                        416,
                        422,
                        423,
                        424,
                        425,
                        426,
                        431
                    ],
                    "('org.apache.parquet.io.api#Binary', 'fromReusedByteBuffer(ByteBuffer)')": [
                        460
                    ],
                    "('org.apache.parquet.io.api#Binary', 'fromConstantByteBuffer(ByteBuffer)')": [
                        464
                    ]
                },
                "new": {
                    "('org.apache.parquet.io.api#Binary', 'equals(ByteBuffer,int,int)')": [
                        65
                    ],
                    "('org.apache.parquet.io.api#Binary', None)": [
                        66,
                        72,
                        181,
                        182,
                        183,
                        184,
                        185,
                        193,
                        194,
                        195,
                        196,
                        197,
                        309,
                        310,
                        311,
                        312,
                        313,
                        321,
                        322,
                        323,
                        324,
                        325,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        364,
                        365,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        386,
                        391,
                        392,
                        393,
                        394,
                        395,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        427,
                        428,
                        429,
                        430,
                        436,
                        437,
                        438,
                        439,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        459,
                        460,
                        461,
                        462,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        482,
                        483,
                        484,
                        485,
                        515,
                        516,
                        519,
                        520,
                        555,
                        556,
                        564,
                        565,
                        576,
                        577,
                        616,
                        617,
                        634,
                        635,
                        652,
                        653
                    ],
                    "('org.apache.parquet.io.api#Binary', 'compareTo(ByteBuffer,int,int)')": [
                        73
                    ],
                    "('org.apache.parquet.io.api#Binary', 'fromReusedByteBuffer(ByteBuffer,int,int)')": [
                        513,
                        514
                    ],
                    "('org.apache.parquet.io.api#Binary', 'fromConstantByteBuffer(ByteBuffer,int,int)')": [
                        517,
                        518
                    ],
                    "('org.apache.parquet.io.api#Binary', 'fromReusedByteBuffer(ByteBuffer)')": [
                        522
                    ],
                    "('org.apache.parquet.io.api#Binary', 'fromConstantByteBuffer(ByteBuffer)')": [
                        526
                    ],
                    "('org.apache.parquet.io.api#Binary', 'hashCode(ByteBuffer,int,int)')": [
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563
                    ],
                    "('org.apache.parquet.io.api#Binary', 'equals(ByteBuffer,int,int,ByteBuffer,int,int)')": [
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        574,
                        575
                    ],
                    "('org.apache.parquet.io.api#Binary', 'equals(byte,int,int,ByteBuffer,int,int)')": [
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587
                    ],
                    "('org.apache.parquet.io.api#Binary', 'compareByteBufferToByteArray(ByteBuffer,int,int,byte,int,int)')": [
                        613,
                        614,
                        615
                    ],
                    "('org.apache.parquet.io.api#Binary', 'compareByteArrayToByteBuffer(byte,int,int,ByteBuffer,int,int)')": [
                        618,
                        619,
                        620,
                        621,
                        622,
                        623,
                        624,
                        625,
                        626,
                        627,
                        628,
                        629,
                        630,
                        631,
                        632,
                        633
                    ],
                    "('org.apache.parquet.io.api#Binary', 'compareTwoByteBuffers(ByteBuffer,int,int,ByteBuffer,int,int)')": [
                        636,
                        637,
                        638,
                        639,
                        640,
                        641,
                        642,
                        643,
                        644,
                        645,
                        646,
                        647,
                        648,
                        649,
                        650,
                        651
                    ]
                }
            },
            "parquet-column/src/main/java/org/apache/parquet/schema/PrimitiveType.java": {
                "old": {
                    "('org.apache.parquet.schema#PrimitiveType', None)": [
                        336,
                        337,
                        338,
                        339
                    ]
                },
                "new": {
                    "('org.apache.parquet.schema#PrimitiveType', None)": [
                        336,
                        337,
                        338
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/impl/TestColumnReaderImpl.java": {
                "new": {
                    "(None, None)": [
                        28
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/impl/TestCorruptDeltaByteArrays.java": {
                "old": {
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testReassemblyWithCorruptPage')": [
                        79,
                        86,
                        94
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testReassemblyWithoutCorruption')": [
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testOldReassemblyWithoutCorruption')": [
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testColumnReaderImplWithCorruptPage')": [
                        189,
                        190,
                        196
                    ]
                },
                "new": {
                    "(None, None)": [
                        39,
                        42
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'getDeltaByteArrayWriter')": [
                        79,
                        80
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', None)": [
                        81,
                        82
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testReassemblyWithCorruptPage')": [
                        85,
                        92,
                        100
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testReassemblyWithoutCorruption')": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testOldReassemblyWithoutCorruption')": [
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ],
                    "('org.apache.parquet.column.impl#TestCorruptDeltaByteArrays', 'testColumnReaderImplWithCorruptPage')": [
                        194,
                        195,
                        197,
                        203
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/mem/TestMemColumn.java": {
                "old": {
                    "('org.apache.parquet.column.mem#TestMemColumn', 'newColumnWriteStoreImpl(MemPageStore)')": [
                        163
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.mem#TestMemColumn', 'newColumnWriteStoreImpl(MemPageStore)')": [
                        164
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/page/mem/MemPageWriter.java": {
                "old": {
                    "(None, None)": [
                        112
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/Utils.java": {
                "old": {
                    "('org.apache.parquet.column.values#Utils', 'readData(ValuesReader,byte,int,int)')": [
                        64
                    ],
                    "('org.apache.parquet.column.values#Utils', 'readInts(ValuesReader,byte,int,int)')": [
                        79
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.parquet.column.values#Utils', 'readData(ValuesReader,byte,int,int)')": [
                        65
                    ],
                    "('org.apache.parquet.column.values#Utils', 'readInts(ValuesReader,byte,int,int)')": [
                        80
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/bitpacking/BitPackingPerfTest.java": {
                "old": {
                    "('org.apache.parquet.column.values.bitpacking#BitPackingPerfTest', 'readNTimes(byte,int,ValuesReader)')": [
                        90
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BitPackingPerfTest', 'readNTimes(byte,int,ValuesReader)')": [
                        91
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/bitpacking/TestBitPackingColumn.java": {
                "old": {
                    "('org.apache.parquet.column.values.bitpacking#TestBitPackingColumn', 'validateEncodeDecode(int,int,String)')": [
                        175
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestBitPackingColumn', None)": [
                        191
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        30
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestBitPackingColumn', 'validateEncodeDecode(int,int,String)')": [
                        177
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestBitPackingColumn', None)": [
                        193
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/boundedint/TestBoundedColumns.java": {
                "old": {
                    "('org.apache.parquet.column.values.boundedint#TestBoundedColumns', 'compareOutput(int,int,String)')": [
                        57,
                        66
                    ],
                    "('org.apache.parquet.column.values.boundedint#TestBoundedColumns', 'testSerDe')": [
                        126,
                        158
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        31,
                        32
                    ],
                    "('org.apache.parquet.column.values.boundedint#TestBoundedColumns', 'compareOutput(int,int,String)')": [
                        60,
                        69
                    ],
                    "('org.apache.parquet.column.values.boundedint#TestBoundedColumns', 'testSerDe')": [
                        129,
                        161
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/delta/DeltaBinaryPackingValuesWriterTest.java": {
                "old": {
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'setUp')": [
                        45
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'miniBlockSizeShouldBeMultipleOf8')": [
                        51
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'shouldReturnCorrectOffsetAfterInitialization')": [
                        157
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'shouldSkip')": [
                        190
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'shouldReadAndWrite(int,int)')": [
                        246
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        31
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'setUp')": [
                        47
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'miniBlockSizeShouldBeMultipleOf8')": [
                        53
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'shouldReturnCorrectOffsetAfterInitialization')": [
                        159
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'shouldSkip')": [
                        192
                    ],
                    "('org.apache.parquet.column.values.delta#DeltaBinaryPackingValuesWriterTest', 'shouldReadAndWrite(int,int)')": [
                        248
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/delta/benchmark/BenchmarkIntegerOutputSize.java": {
                "old": {
                    "('org.apache.parquet.column.values.delta.benchmark#BenchmarkIntegerOutputSize', 'testRandomIntegers(IntFunc,int)')": [
                        80,
                        81
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#BenchmarkIntegerOutputSize', 'testRandomIntegers(IntFunc,int)')": [
                        81,
                        82
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/delta/benchmark/BenchmarkReadingRandomIntegers.java": {
                "old": {
                    "('org.apache.parquet.column.values.delta.benchmark#BenchmarkReadingRandomIntegers', 'prepare')": [
                        57,
                        58
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#BenchmarkReadingRandomIntegers', 'readData(ValuesReader,byte)')": [
                        89
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        37
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#BenchmarkReadingRandomIntegers', 'prepare')": [
                        59,
                        60
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#BenchmarkReadingRandomIntegers', 'readData(ValuesReader,byte)')": [
                        91
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/delta/benchmark/RandomWritingBenchmarkTest.java": {
                "old": {
                    "('org.apache.parquet.column.values.delta.benchmark#RandomWritingBenchmarkTest', 'writeDeltaPackingTest')": [
                        53
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#RandomWritingBenchmarkTest', 'writeRLETest')": [
                        60
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#RandomWritingBenchmarkTest', 'writeDeltaPackingTest2')": [
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#RandomWritingBenchmarkTest', 'writeDeltaPackingTest')": [
                        54
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#RandomWritingBenchmarkTest', 'writeRLETest')": [
                        61
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#RandomWritingBenchmarkTest', 'writeDeltaPackingTest2')": [
                        68
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/delta/benchmark/SmallRangeWritingBenchmarkTest.java": {
                "old": {
                    "('org.apache.parquet.column.values.delta.benchmark#SmallRangeWritingBenchmarkTest', 'writeRLEWithSmallBitWidthTest')": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.parquet.column.values.delta.benchmark#SmallRangeWritingBenchmarkTest', 'writeRLEWithSmallBitWidthTest')": [
                        46
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/deltalengthbytearray/TestDeltaLengthByteArray.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', 'testSerialization')": [
                        37,
                        39
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', 'testRandomStrings')": [
                        50
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', 'testLengths')": [
                        64
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', 'getDeltaLengthByteArrayValuesWriter')": [
                        36,
                        37
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', None)": [
                        38,
                        39
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', 'testSerialization')": [
                        42,
                        44
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', 'testRandomStrings')": [
                        55
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray#TestDeltaLengthByteArray', 'testLengths')": [
                        69
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/deltalengthbytearray/benchmark/BenchmarkDeltaLengthByteArray.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        50
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        51
                    ],
                    "('org.apache.parquet.column.values.deltalengthbytearray.benchmark#BenchmarkDeltaLengthByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        63
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/TestDeltaByteArray.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testSerialization')": [
                        38
                    ],
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testRandomStrings')": [
                        46
                    ],
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testLengths')": [
                        53
                    ],
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testWriterReset')": [
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testSerialization')": [
                        39
                    ],
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testRandomStrings')": [
                        47
                    ],
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testLengths')": [
                        54
                    ],
                    "('org.apache.parquet.column.values.deltastrings#TestDeltaByteArray', 'testWriterReset')": [
                        86
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/deltastrings/benchmark/BenchmarkDeltaByteArray.java": {
                "old": {
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        57
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        69
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithPlainValuesWriter')": [
                        81
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithDeltaLengthByteArrayValuesWriter')": [
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithPlainValuesWriter')": [
                        58
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkRandomStringsWithDeltaLengthByteArrayValuesWriter')": [
                        70
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithPlainValuesWriter')": [
                        82
                    ],
                    "('org.apache.parquet.column.values.deltastrings.benchmark#BenchmarkDeltaByteArray', 'benchmarkSortedStringsWithDeltaLengthByteArrayValuesWriter')": [
                        94
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/dictionary/TestDictionary.java": {
                "old": {
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'plainFallBack(I,int)')": [
                        57
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainBinaryDictionaryValuesWriter(int,int)')": [
                        61
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainLongDictionaryValuesWriter(int,int)')": [
                        65
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainIntegerDictionaryValuesWriter(int,int)')": [
                        69
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainDoubleDictionaryValuesWriter(int,int)')": [
                        73
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainFloatDictionaryValuesWriter(int,int)')": [
                        77
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testBinaryDictionaryFallBack')": [
                        119
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testLongDictionary')": [
                        205,
                        211
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripLong(FallbackValuesWriter,ValuesReader,int)')": [
                        229
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testDoubleDictionary')": [
                        275,
                        281
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripDouble(FallbackValuesWriter,ValuesReader,int)')": [
                        300
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testIntDictionary')": [
                        346,
                        352
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripInt(FallbackValuesWriter,ValuesReader,int)')": [
                        371
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testFloatDictionary')": [
                        417,
                        423
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripFloat(FallbackValuesWriter,ValuesReader,int)')": [
                        442
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testZeroValues')": [
                        476,
                        477
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'initDicReader(ValuesWriter,PrimitiveTypeName)')": [
                        483
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'checkDistinct(int,BytesInput,ValuesReader,String)')": [
                        491
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'checkRepeated(int,BytesInput,ValuesReader,String)')": [
                        498
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        36
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'plainFallBack(I,int)')": [
                        59
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainBinaryDictionaryValuesWriter(int,int)')": [
                        63
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainLongDictionaryValuesWriter(int,int)')": [
                        67
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainIntegerDictionaryValuesWriter(int,int)')": [
                        71
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainDoubleDictionaryValuesWriter(int,int)')": [
                        75
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'newPlainFloatDictionaryValuesWriter(int,int)')": [
                        79
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testBinaryDictionaryFallBack')": [
                        121
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testLongDictionary')": [
                        207,
                        213
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripLong(FallbackValuesWriter,ValuesReader,int)')": [
                        231
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testDoubleDictionary')": [
                        277,
                        283
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripDouble(FallbackValuesWriter,ValuesReader,int)')": [
                        302
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testIntDictionary')": [
                        348,
                        354
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripInt(FallbackValuesWriter,ValuesReader,int)')": [
                        373
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testFloatDictionary')": [
                        419,
                        425
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'roundTripFloat(FallbackValuesWriter,ValuesReader,int)')": [
                        444
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'testZeroValues')": [
                        478,
                        479
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'initDicReader(ValuesWriter,PrimitiveTypeName)')": [
                        485
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'checkDistinct(int,BytesInput,ValuesReader,String)')": [
                        493
                    ],
                    "('org.apache.parquet.column.values.dictionary#TestDictionary', 'checkRepeated(int,BytesInput,ValuesReader,String)')": [
                        500
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/rle/RunLengthBitPackingHybridIntegrationTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridIntegrationTest', 'doIntegrationTest(int)')": [
                        42,
                        72,
                        73
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23,
                        25
                    ],
                    "('org.apache.parquet.column.values.rle#RunLengthBitPackingHybridIntegrationTest', 'doIntegrationTest(int)')": [
                        44,
                        74,
                        75
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/column/values/rle/TestRunLengthBitPackingHybridEncoder.java": {
                "old": {
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testRLEOnly')": [
                        41
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testRepeatedZeros')": [
                        71
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testBitWidthZero')": [
                        89
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testBitPackingOnly')": [
                        105,
                        106
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testBitPackingOverflow')": [
                        128
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testTransitionFromBitPackingToRle')": [
                        160
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testPaddingZerosOnUnfinishedBitPackedRuns')": [
                        198
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testSwitchingModes')": [
                        217
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        31,
                        32
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'getRunLengthBitPackingHybridEncoder')": [
                        42,
                        43
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', None)": [
                        44,
                        45,
                        50,
                        51
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'getRunLengthBitPackingHybridEncoder(int,int,int)')": [
                        46,
                        47,
                        48,
                        49
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testRLEOnly')": [
                        54
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testRepeatedZeros')": [
                        84
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testBitWidthZero')": [
                        102
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testBitPackingOnly')": [
                        118
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testBitPackingOverflow')": [
                        140
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testTransitionFromBitPackingToRle')": [
                        172
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testPaddingZerosOnUnfinishedBitPackedRuns')": [
                        210
                    ],
                    "('org.apache.parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testSwitchingModes')": [
                        229
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/PerfTest.java": {
                "old": {
                    "('org.apache.parquet.io#PerfTest', 'write(MemPageStore)')": [
                        80
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.parquet.io#PerfTest', 'write(MemPageStore)')": [
                        81
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/TestColumnIO.java": {
                "old": {
                    "('org.apache.parquet.io#TestColumnIO', 'newColumnWriteStore(MemPageStore)')": [
                        529
                    ],
                    "('org.apache.parquet.io#ValidatingColumnWriteStore', 'getColumnWriter(ColumnDescriptor)')": [
                        648,
                        649
                    ]
                },
                "new": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'newColumnWriteStore(MemPageStore)')": [
                        530
                    ],
                    "('org.apache.parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        603,
                        604
                    ],
                    "('org.apache.parquet.io#ValidatingColumnWriteStore', None)": [
                        613,
                        614,
                        615,
                        617
                    ],
                    "('org.apache.parquet.io#ValidatingColumnWriteStore', 'close')": [
                        616
                    ],
                    "('org.apache.parquet.io#ValidatingColumnWriteStore', 'getColumnWriter(ColumnDescriptor)')": [
                        641,
                        642,
                        643,
                        644,
                        645,
                        661,
                        662,
                        663,
                        664,
                        665,
                        666,
                        667
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/TestFiltered.java": {
                "old": {
                    "('org.apache.parquet.io#TestFiltered', 'writeTestRecords(MessageColumnIO,int)')": [
                        261
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.io#TestFiltered', 'writeTestRecords(MessageColumnIO,int)')": [
                        262
                    ]
                }
            },
            "parquet-column/src/test/java/org/apache/parquet/io/api/TestBinary.java": {
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.parquet.io.api#TestBinary', 'testEqualityMethods')": [
                        148,
                        149,
                        150,
                        151
                    ],
                    "('org.apache.parquet.io.api#TestBinary', None)": [
                        152,
                        153,
                        154,
                        162,
                        163,
                        168,
                        169,
                        170
                    ],
                    "('org.apache.parquet.io.api#TestBinary', 'testWriteAllTo')": [
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161
                    ],
                    "('org.apache.parquet.io.api#TestBinary', 'testWriteAllToHelper(Binary,byte)')": [
                        164,
                        165,
                        166,
                        167
                    ]
                }
            },
            "parquet-common/src/main/java/org/apache/parquet/ParquetRuntimeException.java": {
                "old": {
                    "(None, None)": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22
                    ]
                }
            },
            "parquet-common/src/main/java/org/apache/parquet/bytes/BytesUtils.java": {
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.parquet.bytes#BytesUtils', None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        63,
                        64,
                        230,
                        231
                    ],
                    "('org.apache.parquet.bytes#BytesUtils', 'readIntLittleEndian(ByteBuffer,int)')": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62
                    ],
                    "('org.apache.parquet.bytes#BytesUtils', 'writeUnsignedVarInt(int,ByteBuffer)')": [
                        224,
                        225,
                        226,
                        227,
                        228,
                        229
                    ]
                }
            },
            "parquet-encoding/src/main/java/org/apache/parquet/bytes/BytesInput.java": {
                "old": {
                    "('org.apache.parquet.bytes#BytesInput', None)": [
                        124
                    ],
                    "(None, None)": [
                        364
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29,
                        30,
                        445,
                        446
                    ],
                    "('org.apache.parquet.bytes#BytesInput', None)": [
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        85,
                        136,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        291,
                        292,
                        293,
                        294,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        337,
                        338,
                        339,
                        340,
                        402,
                        403,
                        404,
                        405,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444
                    ],
                    "('org.apache.parquet.bytes#BytesInput', 'from(ByteBuffer,int,int)')": [
                        83,
                        84
                    ],
                    "('org.apache.parquet.bytes#BytesInput', 'toByteBuffer')": [
                        184,
                        185
                    ],
                    "('org.apache.parquet.bytes#BytesInput', 'toInputStream')": [
                        193,
                        194
                    ]
                }
            },
            "parquet-encoding/src/main/java/org/apache/parquet/bytes/CapacityByteArrayOutputStream.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', None)": [
                        57,
                        61,
                        62,
                        63,
                        104,
                        108,
                        114
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'withTargetNumSlabs(int,int,int)')": [
                        94,
                        98
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'addSlab(int)')": [
                        148
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'write(int)')": [
                        156,
                        159
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'write(byte,int,int)')": [
                        171,
                        172,
                        173,
                        176,
                        179,
                        181,
                        182
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'writeTo(OutputStream)')": [
                        194,
                        195,
                        196,
                        197
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'setByte(long,byte)')": [
                        252,
                        253,
                        255,
                        258
                    ]
                },
                "new": {
                    "(None, None)": [
                        29,
                        34,
                        333,
                        334
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', None)": [
                        58,
                        62,
                        63,
                        64,
                        68,
                        94,
                        95,
                        111,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        131,
                        132,
                        133,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        148,
                        214,
                        215,
                        216,
                        227,
                        323,
                        324
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'withTargetNumSlabs(int,int,int)')": [
                        91,
                        92,
                        93
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'withTargetNumSlabs(int,int,int,ByteBufferAllocator)')": [
                        101,
                        105
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'addSlab(int)')": [
                        176
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'write(int)')": [
                        184,
                        187,
                        189
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'write(byte,int,int)')": [
                        200,
                        201,
                        202,
                        203,
                        204,
                        207,
                        209,
                        211,
                        213
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'writeToOutput(OutputStream,ByteBuffer,int)')": [
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'writeTo(OutputStream)')": [
                        239,
                        240,
                        241
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'reset')": [
                        269,
                        270,
                        271
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'setByte(long,byte)')": [
                        299,
                        300,
                        302,
                        305
                    ],
                    "('org.apache.parquet.bytes#CapacityByteArrayOutputStream', 'close')": [
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332
                    ]
                }
            },
            "parquet-encoding/src/main/java/org/apache/parquet/bytes/LittleEndianDataOutputStream.java": {
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        218,
                        219
                    ],
                    "('org.apache.parquet.bytes#LittleEndianDataOutputStream', 'close')": [
                        216,
                        217
                    ]
                }
            },
            "parquet-encoding/src/main/java/org/apache/parquet/column/values/bitpacking/BytePacker.java": {
                "old": {
                    "('org.apache.parquet.column.values.bitpacking#BytePacker', 'unpack8Values(byte,int,int,int)')": [
                        74
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BytePacker', 'unpack32Values(byte,int,int,int)')": [
                        84
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        102
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BytePacker', 'unpack8Values(ByteBuffer,int,int,int)')": [
                        76
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BytePacker', None)": [
                        77,
                        78,
                        79,
                        80,
                        81,
                        84,
                        96,
                        97,
                        98,
                        99
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BytePacker', 'unpack8Values(byte,int,int,int)')": [
                        82,
                        83
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BytePacker', 'unpack32Values(ByteBuffer,int,int,int)')": [
                        94
                    ],
                    "('org.apache.parquet.column.values.bitpacking#BytePacker', 'unpack32Values(byte,int,int,int)')": [
                        100,
                        101
                    ]
                }
            },
            "parquet-encoding/src/test/java/org/apache/parquet/bytes/TestCapacityByteArrayOutputStream.java": {
                "old": {
                    "('org.apache.parquet.bytes#TestCapacityByteArrayOutputStream', 'newCapacityBAOS(int)')": [
                        66
                    ],
                    "('org.apache.parquet.bytes#TestCapacityByteArrayOutputStream', 'testWriteArrayManySlabs')": [
                        132,
                        137
                    ]
                },
                "new": {
                    "('org.apache.parquet.bytes#TestCapacityByteArrayOutputStream', 'newCapacityBAOS(int)')": [
                        66
                    ],
                    "('org.apache.parquet.bytes#TestCapacityByteArrayOutputStream', 'testWriteArrayManySlabs')": [
                        132,
                        137
                    ]
                }
            },
            "parquet-encoding/src/test/java/org/apache/parquet/column/values/bitpacking/TestByteBitPacking.java": {
                "old": {
                    "('org.apache.parquet.column.values.bitpacking#TestByteBitPacking', 'packUnpack(BytePacker,int,int)')": [
                        53
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestByteBitPacking', 'testPackUnPackAgainstLemire')": [
                        143
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestByteBitPacking', 'packUnpack(BytePacker,int,int)')": [
                        54
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestByteBitPacking', 'testPackUnPackAgainstLemire')": [
                        144
                    ]
                }
            },
            "parquet-encoding/src/test/java/org/apache/parquet/column/values/bitpacking/TestLemireBitPacking.java": {
                "old": {
                    "('org.apache.parquet.column.values.bitpacking#TestLemireBitPacking', 'packUnpack(BytePacker,int,int)')": [
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestLemireBitPacking', 'packUnpack(BytePacker,int,int)')": [
                        68
                    ]
                }
            },
            "parquet-generator/src/main/java/org/apache/parquet/encoding/bitpacking/ByteBasedBitPackingGenerator.java": {
                "old": {
                    "('org.apache.parquet.encoding.bitpacking#ByteBasedBitPackingGenerator', 'generateClass(FileWriter,int,boolean)')": [
                        100,
                        101
                    ],
                    "('org.apache.parquet.encoding.bitpacking#ByteBasedBitPackingGenerator', 'generateUnpack(FileWriter,int,int,boolean)')": [
                        206,
                        208,
                        231
                    ]
                },
                "new": {
                    "('org.apache.parquet.encoding.bitpacking#ByteBasedBitPackingGenerator', 'generateScheme(String,boolean,String)')": [
                        53
                    ],
                    "('org.apache.parquet.encoding.bitpacking#ByteBasedBitPackingGenerator', 'generateClass(FileWriter,int,boolean)')": [
                        101,
                        102,
                        103,
                        104
                    ],
                    "('org.apache.parquet.encoding.bitpacking#ByteBasedBitPackingGenerator', 'generateUnpack(FileWriter,int,int,boolean,boolean)')": [
                        209,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/format/converter/ParquetMetadataConverter.java": {
                "new": {
                    "(None, None)": [
                        39
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/CodecFactory.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        21,
                        27
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', None)": [
                        40,
                        41,
                        42,
                        47,
                        48,
                        60,
                        68,
                        81,
                        88,
                        90,
                        119,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        173,
                        174,
                        183,
                        184
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'getCodec(CompressionCodecName)')": [
                        145,
                        150,
                        157,
                        158
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'getCompressor(CompressionCodecName,int)')": [
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'getDecompressor(CompressionCodecName)')": [
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        24,
                        25,
                        37,
                        259
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', None)": [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        86,
                        87,
                        88,
                        93,
                        94,
                        102,
                        107,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        134,
                        141,
                        143,
                        153,
                        173,
                        174,
                        193,
                        194,
                        202,
                        203,
                        206,
                        207,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'createDirectCodecFactory(Configuration,ByteBufferAllocator,int)')": [
                        84,
                        85
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'getCompressor(CompressionCodecName)')": [
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'getDecompressor(CompressionCodecName)')": [
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'createCompressor(CompressionCodecName)')": [
                        204,
                        205
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'createDecompressor(CompressionCodecName)')": [
                        208,
                        209
                    ],
                    "('org.apache.parquet.hadoop#CodecFactory', 'getCodec(CompressionCodecName)')": [
                        218,
                        223,
                        230,
                        231
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ColumnChunkPageReadStore.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ColumnChunkPageWriteStore.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        68,
                        69,
                        87,
                        94,
                        154,
                        155,
                        156,
                        157,
                        166,
                        189,
                        190,
                        191,
                        192,
                        223,
                        226
                    ]
                },
                "new": {
                    "(None, None)": [
                        45
                    ],
                    "('org.apache.parquet.hadoop#ColumnChunkPageWriteStore', None)": [
                        69,
                        70,
                        71,
                        72,
                        73,
                        76,
                        92,
                        99,
                        159,
                        160,
                        161,
                        162,
                        171,
                        194,
                        195,
                        196,
                        197,
                        223,
                        229,
                        232
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/InternalParquetRecordWriter.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ],
                    "('org.apache.parquet.hadoop#InternalParquetRecordWriter', None)": [
                        89,
                        100
                    ],
                    "('org.apache.parquet.hadoop#InternalParquetRecordWriter', 'initStore')": [
                        105,
                        109
                    ],
                    "('org.apache.parquet.hadoop#InternalParquetRecordWriter', 'checkBlockSizeReached')": [
                        153
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        31
                    ],
                    "('org.apache.parquet.hadoop#InternalParquetRecordWriter', None)": [
                        90,
                        91,
                        102,
                        158
                    ],
                    "('org.apache.parquet.hadoop#InternalParquetRecordWriter', 'initStore')": [
                        107,
                        111,
                        112
                    ],
                    "('org.apache.parquet.hadoop#InternalParquetRecordWriter', 'checkBlockSizeReached')": [
                        156,
                        157
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        30
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readAllFootersInParallelUsingSummaryFiles(Configuration,Collection,boolean)')": [
                        188
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', None)": [
                        300,
                        483,
                        543,
                        553,
                        554,
                        556,
                        629,
                        650,
                        659,
                        660,
                        678,
                        682,
                        683,
                        689,
                        698,
                        706,
                        711,
                        787,
                        788,
                        795,
                        798
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readSummaryMetadata(Configuration,Path,boolean)')": [
                        345
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readFooter(Configuration,FileStatus,MetadataFilter)')": [
                        419,
                        425,
                        435
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        33,
                        55,
                        56,
                        57,
                        58,
                        59
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readAllFootersInParallelUsingSummaryFiles(Configuration,Collection,boolean)')": [
                        193,
                        194,
                        195
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', None)": [
                        307,
                        468,
                        499,
                        500,
                        501,
                        502,
                        562,
                        572,
                        573,
                        647,
                        648,
                        649,
                        670,
                        679,
                        680,
                        681,
                        699,
                        703,
                        704,
                        710,
                        719,
                        727,
                        732,
                        808,
                        809,
                        816,
                        819
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readSummaryMetadata(Configuration,Path,boolean)')": [
                        352,
                        353,
                        354
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readFooter(Configuration,FileStatus,MetadataFilter)')": [
                        428,
                        429,
                        430,
                        436,
                        437,
                        438,
                        448,
                        449,
                        450
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetFileWriter', None)": [
                        77
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#ParquetFileWriter', None)": [
                        76,
                        77
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetOutputFormat.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetOutputFormat', 'getRecordWriter(Configuration,Path,CompressionCodecName)')": [
                        344,
                        382
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#ParquetOutputFormat', 'getRecordWriter(Configuration,Path,CompressionCodecName)')": [
                        359,
                        360,
                        383
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetRecordWriter.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ],
                    "('org.apache.parquet.hadoop#ParquetRecordWriter', None)": [
                        73,
                        101,
                        102
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        23,
                        27
                    ],
                    "('org.apache.parquet.hadoop#ParquetRecordWriter', None)": [
                        75,
                        103,
                        104
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetWriter.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetWriter', None)": [
                        270,
                        271,
                        283
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.parquet.hadoop#ParquetWriter', None)": [
                        271,
                        272,
                        284,
                        285
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/codec/SnappyDecompressor.java": {
                "old": {
                    "(None, None)": [
                        150
                    ]
                },
                "new": {
                    "(None, None)": [
                        150,
                        151
                    ]
                }
            },
            "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestColumnChunkPageWriteStore.java": {
                "old": {
                    "('org.apache.parquet.hadoop#TestColumnChunkPageWriteStore', 'test')": [
                        104
                    ],
                    "('org.apache.parquet.hadoop#TestColumnChunkPageWriteStore', 'testColumnOrderV1')": [
                        162
                    ],
                    "('org.apache.parquet.hadoop#TestColumnChunkPageWriteStore', 'compressor(CompressionCodecName)')": [
                        179
                    ]
                },
                "new": {
                    "(None, None)": [
                        64
                    ],
                    "('org.apache.parquet.hadoop#TestColumnChunkPageWriteStore', 'test')": [
                        105
                    ],
                    "('org.apache.parquet.hadoop#TestColumnChunkPageWriteStore', 'testColumnOrderV1')": [
                        162,
                        163,
                        165
                    ],
                    "('org.apache.parquet.hadoop#TestColumnChunkPageWriteStore', 'compressor(CompressionCodecName)')": [
                        182
                    ]
                }
            },
            "parquet-pig/src/test/java/org/apache/parquet/pig/TupleConsumerPerfTest.java": {
                "old": {
                    "('org.apache.parquet.pig#TupleConsumerPerfTest', 'main(String)')": [
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.parquet.pig#TupleConsumerPerfTest', 'main(String)')": [
                        63
                    ]
                }
            },
            "parquet-thrift/src/test/java/org/apache/parquet/thrift/TestParquetReadProtocol.java": {
                "old": {
                    "('org.apache.parquet.thrift#TestParquetReadProtocol', 'validate(T)')": [
                        151
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.parquet.thrift#TestParquetReadProtocol', 'validate(T)')": [
                        152,
                        153
                    ]
                }
            }
        }
    },
    "5a45ae3b1deb5117cb9e9a13141eeab1e9ad3d71": {
        "authored_data": "2015 Oct 29 22:42",
        "commit.message": "PARQUET-241: Fix ParquetInputFormat.getFooters() order\n\nParquetInputFormat.getFooters() should return in the same order as what listStatus() returns\n\nAuthor: Mingyu Kim <mkim@palantir.com>\n\nCloses #164 from mingyukim/parquet-241 and squashes the following commits:\n\n86fe900 [Mingyu Kim] Address PR comments\nb0181e2 [Mingyu Kim] PARQUET-241: ParquetInputFormat.getFooters() should return in the same order as what listStatus() returns\n",
        "commit.author.name": "Mingyu Kim",
        "pcid": "5294c64b342818e021800b38413f36f426e35b3c",
        "changes": {
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetInputFormat.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetInputFormat', 'getFooters(JobContext)')": [
                        392,
                        410,
                        417,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        35
                    ],
                    "('org.apache.parquet.hadoop#ParquetInputFormat', 'getFooters(JobContext)')": [
                        394,
                        395,
                        396,
                        414,
                        416,
                        422,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449
                    ]
                }
            },
            "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestInputFormat.java": {
                "old": {
                    "(None, None)": [
                        56
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        54,
                        55,
                        56,
                        70,
                        78,
                        79
                    ],
                    "('org.apache.parquet.hadoop#TestInputFormat', None)": [
                        386,
                        387,
                        388,
                        411,
                        412,
                        413
                    ],
                    "('org.apache.parquet.hadoop#TestInputFormat', 'testGetFootersReturnsInPredictableOrder')": [
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410
                    ],
                    "('org.apache.parquet.hadoop#TestInputFormat', 'createParquetFile(File)')": [
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441
                    ]
                }
            }
        }
    },
    "5294c64b342818e021800b38413f36f426e35b3c": {
        "authored_data": "2015 Oct 19 22:51",
        "commit.message": "PARQUET-373: Fix flaky MemoryManager tests.\n\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #269 from rdblue/PARQUET-373-fix-flaky-mem-manager-tests and squashes the following commits:\n\n1b55889 [Ryan Blue] PARQUET-373: Fix flaky MemoryManager tests.\n",
        "commit.author.name": "Ryan Blue",
        "pcid": "b1ea059a66c7d6d6bb4cb53d2005a9b7bb599ada",
        "changes": {
            "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestMemoryManager.java": {
                "old": {
                    "(None, None)": [
                        21,
                        25
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', None)": [
                        47,
                        48,
                        50,
                        52,
                        64
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'setUp')": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'tearDown')": [
                        65,
                        66
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'testMemoryManager')": [
                        71,
                        73,
                        76,
                        79,
                        82,
                        85,
                        89,
                        90,
                        91,
                        94,
                        95,
                        96
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'createWriter(int)')": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'verifyRowGroupSize(int)')": [
                        124,
                        125,
                        126,
                        128,
                        129
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        28
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', None)": [
                        47,
                        67,
                        122,
                        124,
                        169,
                        170,
                        171
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'setUp')": [
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'testMemoryManagerUpperLimit')": [
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'testMemoryManager')": [
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        92,
                        93,
                        94,
                        95,
                        98,
                        99,
                        100,
                        101,
                        104,
                        105,
                        108,
                        109,
                        110,
                        111,
                        114,
                        115,
                        116,
                        117,
                        120,
                        121
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'testReallocationCallback')": [
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        164,
                        165,
                        166
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'createWriter(int)')": [
                        172,
                        173,
                        174,
                        175,
                        177,
                        178,
                        179
                    ],
                    "('org.apache.parquet.hadoop#TestMemoryManager', 'getTotalAllocation')": [
                        184,
                        185,
                        186,
                        187,
                        189,
                        191
                    ]
                }
            }
        }
    },
    "b1ea059a66c7d6d6bb4cb53d2005a9b7bb599ada": {
        "authored_data": "2015 Oct 13 22:54",
        "commit.message": "PARQUET-381: Add feature to merge metadata (summary) files, and control which files are generated\n\n1) Add helper to merge 2 summary files, useful for merging 2 directories of data into 1\n2) Add more control over whether _common_metadata, _metadata, or both is written\n\nAuthor: Alex Levenson <alexlevenson@twitter.com>\n\nCloses #277 from isnotinvain/alexlevenson/merge-summary-files and squashes the following commits:\n\n86232f5 [Alex Levenson] Address comments\n96b9495 [Alex Levenson] Fix null extraMetaData\n099c913 [Alex Levenson] Make deprecated method delegate to new method\n7a98957 [Alex Levenson] Merge branch 'master' into alexlevenson/merge-summary-files\nddaf4ff [Alex Levenson] Introduce job summary levels for controlling which metadata files are generated\n87a2ebc [Alex Levenson] Update comments\n9d2b8da [Alex Levenson] Add helper method for merging metadata files\n",
        "commit.author.name": "Alex Levenson",
        "pcid": "c3819688c48480ec75a9563c71f18ea755e34620",
        "changes": {
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readAllFootersInParallel(Configuration,FileStatus)')": [
                        262,
                        263
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', None)": [
                        264
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#ParquetFileReader', None)": [
                        255,
                        259,
                        260,
                        261,
                        262,
                        263,
                        272,
                        273
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readAllFootersInParallel(Configuration,FileStatus,boolean)')": [
                        256,
                        257,
                        258
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readAllFootersInParallel(Configuration,FileStatus)')": [
                        271
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileWriter.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'serializeFooter(ParquetMetadata,FSDataOutputStream)')": [
                        477
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', None)": [
                        486,
                        487
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'writeMetadataFile(Configuration,Path,List)')": [
                        492
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'writeMetadataFile(Path,ParquetMetadata,FileSystem,String)')": [
                        497,
                        499,
                        500
                    ]
                },
                "new": {
                    "(None, None)": [
                        42,
                        50
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'serializeFooter(ParquetMetadata,FSDataOutputStream)')": [
                        479
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', None)": [
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        520,
                        521,
                        522,
                        523,
                        526,
                        527,
                        528,
                        529,
                        530,
                        551,
                        552
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'mergeMetadataFiles(List,Configuration)')": [
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'writeMergedMetadataFile(List,Path,Configuration)')": [
                        510,
                        511,
                        512
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'writeMetadataFile(Configuration,Path,List)')": [
                        525
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'writeMetadataFile(Configuration,Path,List,JobSummaryLevel)')": [
                        531,
                        532,
                        533,
                        534,
                        538,
                        539,
                        540,
                        541,
                        542
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'writeMetadataFile(Path,ParquetMetadata,FileSystem,String)')": [
                        547,
                        549,
                        550
                    ],
                    "('org.apache.parquet.hadoop#ParquetFileWriter', 'writeMetadataFile(Path,ParquetMetadata,FileSystem)')": [
                        553,
                        554,
                        555
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetOutputCommitter.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetOutputCommitter', 'writeMetaDataFile(Configuration,Path)')": [
                        52,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        63,
                        64,
                        65,
                        66,
                        71,
                        72
                    ],
                    "(None, None)": [
                        76
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.parquet.hadoop#ParquetOutputCommitter', None)": [
                        52,
                        53
                    ],
                    "('org.apache.parquet.hadoop#ParquetOutputCommitter', 'writeMetaDataFile(Configuration,Path)')": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        93,
                        94,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        107,
                        108
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetOutputFormat.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetOutputFormat', None)": [
                        114
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#ParquetOutputFormat', None)": [
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        147,
                        169
                    ],
                    "('org.apache.parquet.hadoop#ParquetOutputFormat', 'getJobSummaryLevel(Configuration)')": [
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/example/ExampleParquetWriter.java": {
                "old": {
                    "('org.apache.parquet.hadoop.example#ExampleParquetWriter', None)": [
                        90
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        31,
                        100
                    ],
                    "('org.apache.parquet.hadoop.example#ExampleParquetWriter', None)": [
                        75,
                        86,
                        87,
                        88,
                        89,
                        90,
                        98
                    ]
                }
            },
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/example/GroupWriteSupport.java": {
                "old": {
                    "('org.apache.parquet.hadoop.example#GroupWriteSupport', None)": [
                        48
                    ],
                    "('org.apache.parquet.hadoop.example#GroupWriteSupport', 'init(Configuration)')": [
                        64
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.parquet.hadoop.example#GroupWriteSupport', None)": [
                        49,
                        51,
                        54,
                        58,
                        59,
                        60,
                        61,
                        63
                    ],
                    "('org.apache.parquet.hadoop.example#GroupWriteSupport', 'init(Configuration)')": [
                        72
                    ]
                }
            },
            "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetFileWriter.java": {
                "old": {
                    "('org.apache.parquet.hadoop#TestParquetFileWriter', 'testMetaDataFile')": [
                        553
                    ],
                    "('org.apache.parquet.hadoop#TestParquetFileWriter', 'testWriteMetadataFileWithRelativeOutputPath')": [
                        762
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.parquet.hadoop#TestParquetFileWriter', 'testMetaDataFile')": [
                        554
                    ],
                    "('org.apache.parquet.hadoop#TestParquetFileWriter', 'testWriteMetadataFileWithRelativeOutputPath')": [
                        763
                    ]
                }
            }
        }
    },
    "c3819688c48480ec75a9563c71f18ea755e34620": {
        "authored_data": "2015 Sep 18 22:08",
        "commit.message": "PARQUET-355: Add Statistics Test for Parquet Columns\n\nIn response to PARQUET-251 created an integration test that generates random values and compares the statistics against the values read from a parquet file.\n\nThere are two tools classes `DataGenerationContext` and `RandomValueGenerators` which are located in the same package as the unit test. I'm sure there is a better place to put these, but I leave that to your discretion.\n\nThanks\nReuben\n\nAuthor: Reuben Kuhnert <sircodesalot@gmail.com>\nAuthor: Ryan Blue <blue@apache.org>\n\nCloses #255 from sircodesalotOfTheRound/stats-validation and squashes the following commits:\n\n680e96a [Reuben Kuhnert] Merge pull request #1 from rdblue/PARQUET-355-stats-validation-tests\n9f0033f [Ryan Blue] PARQUET-355: Use ColumnReaderImpl.\n7d0b4fe [Reuben Kuhnert] PARQUET-355: Add Statistics Validation Test\n",
        "commit.author.name": "Reuben Kuhnert",
        "pcid": "0637e2fbcd401f47bb062d5c2d1cceddabf372b7",
        "changes": {
            "parquet-column/src/main/java/org/apache/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', None)": [
                        60,
                        152,
                        153
                    ]
                },
                "new": {
                    "('org.apache.parquet.column.impl#ColumnReaderImpl', None)": [
                        60,
                        152,
                        153
                    ]
                }
            }
        }
    },
    "0637e2fbcd401f47bb062d5c2d1cceddabf372b7": {
        "authored_data": "2015 Sep 17 18:46",
        "commit.message": "PARQUET-360: Handle all map key types with cat tool's json dump\n\nWhen dumping a parquet map with `parquet-cat --json` it throws a class cast exception as it doesn't properly handle all map key types.\n\n```\njava.lang.ClassCastException: [B cannot be cast to java.lang.String\n\tat org.apache.parquet.tools.read.SimpleMapRecord.toJsonObject(SimpleMapRecord.java:34)\n\tat org.apache.parquet.tools.read.SimpleRecord.toJsonValue(SimpleRecord.java:119)\n\tat org.apache.parquet.tools.read.SimpleRecord.toJsonObject(SimpleRecord.java:112)\n\tat org.apache.parquet.tools.read.SimpleRecord.prettyPrintJson(SimpleRecord.java:106)\n\tat org.apache.parquet.tools.command.CatCommand.execute(CatCommand.java:76)\n\tat org.apache.parquet.tools.Main.main(Main.java:222)\n[B cannot be cast to java.lang.String\n```\n\nAuthor: Nezih Yigitbasi <nyigitbasi@netflix.com>\n\nCloses #259 from nezihyigitbasi/parquet-cat-json and squashes the following commits:\n\nd047502 [Nezih Yigitbasi] Add unit test\ne4cd545 [Nezih Yigitbasi] Get rid of deprecated methods\nbdc8fdf [Nezih Yigitbasi] Handle all map key types with cat tool's json dump\n",
        "commit.author.name": "Nezih Yigitbasi",
        "pcid": "66e39fc7d5a6fb29a5ff04b23132468dc6adbde6",
        "changes": {
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/CatCommand.java": {
                "old": {
                    "('org.apache.parquet.tools.command#CatCommand', 'execute(CommandLine)')": [
                        73
                    ]
                },
                "new": {
                    "('org.apache.parquet.tools.command#CatCommand', 'execute(CommandLine)')": [
                        73
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/DumpCommand.java": {
                "old": {
                    "('org.apache.parquet.tools.command#DumpCommand', 'execute(CommandLine)')": [
                        118
                    ]
                },
                "new": {
                    "(None, None)": [
                        50,
                        66,
                        67
                    ],
                    "('org.apache.parquet.tools.command#DumpCommand', 'execute(CommandLine)')": [
                        121
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/HeadCommand.java": {
                "old": {
                    "('org.apache.parquet.tools.command#HeadCommand', 'execute(CommandLine)')": [
                        81
                    ]
                },
                "new": {
                    "('org.apache.parquet.tools.command#HeadCommand', 'execute(CommandLine)')": [
                        81
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/ShowSchemaCommand.java": {
                "old": {
                    "('org.apache.parquet.tools.command#ShowSchemaCommand', 'execute(CommandLine)')": [
                        91
                    ]
                },
                "new": {
                    "(None, None)": [
                        39,
                        40
                    ],
                    "('org.apache.parquet.tools.command#ShowSchemaCommand', 'execute(CommandLine)')": [
                        93
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/read/SimpleMapRecord.java": {
                "old": {
                    "('org.apache.parquet.tools.read#SimpleMapRecord', 'toJsonObject')": [
                        33,
                        34,
                        35,
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24,
                        84,
                        85
                    ],
                    "('org.apache.parquet.tools.read#SimpleMapRecord', 'toJsonObject')": [
                        35,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    "('org.apache.parquet.tools.read#SimpleMapRecord', None)": [
                        47
                    ],
                    "('org.apache.parquet.tools.read#SimpleMapRecord', 'keyToString(Object)')": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83
                    ]
                }
            }
        }
    }
}