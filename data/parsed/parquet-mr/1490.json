{
    "f8ac0f01deb15cf7b54ec9355dd57f6b96471b0d": {
        "authored_data": "2013 Sep 17 21:41",
        "commit.message": "Initial end-to-end write and read support for Avro FIXED fields without runtime exceptions, but still with data representation issues.\n",
        "commit.author.name": "David Z. Chen",
        "pcid": "4e82ab632d39b236d302ff4283cae0a94f7cdbc0",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroIndexedRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        286,
                        289
                    ]
                },
                "new": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        286
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/Encoding.java": {
                "old": {
                    "(None, None)": [
                        68,
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        71
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        282,
                        283
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        282
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/FixedLenByteArrayPlainValuesReader.java": {
                "old": {
                    "(None, None)": [
                        58
                    ]
                },
                "new": {
                    "('parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', None)": [
                        34,
                        35,
                        36,
                        37
                    ]
                }
            }
        }
    },
    "232d521dc0860e0e657970d5bbab241d7a58d283": {
        "authored_data": "2013 Sep 17 18:00",
        "commit.message": "use class.getName\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "8b84a9eca1ec63c6e187c770071f4090043877af",
        "changes": {
            "parquet-scrooge/src/test/java/parquet/scrooge/ParquetScroogeSchemeTest.java": {
                "old": {
                    "('parquet.scrooge#ParquetScroogeSchemeTest', 'verifyScroogeRead(TBase,Class,String)')": [
                        55
                    ]
                },
                "new": {
                    "('parquet.scrooge#ParquetScroogeSchemeTest', 'verifyScroogeRead(TBase,Class,String)')": [
                        55
                    ]
                }
            }
        }
    },
    "58051d0629121332a8f96e00d2e9603583cbd564": {
        "authored_data": "2013 Sep 17 17:17",
        "commit.message": "Added functionality to allow users to implement functions to be used as predicates.\n",
        "commit.author.name": "Frank Austin Nothaft",
        "pcid": "1f630137267fed0b81871bd8eb0b315a6f009a35",
        "changes": {
            "parquet-column/src/main/java/parquet/filter/ColumnPredicates.java": {
                "old": {
                    "('parquet.filter#ColumnPredicates', 'equalTo(E)')": [
                        88
                    ]
                },
                "new": [
                    "JavaSyntaxError",
                    "parquet-column/src/main/java/parquet/filter/ColumnPredicates.java",
                    [
                        20,
                        21,
                        22,
                        23,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144
                    ]
                ]
            }
        }
    },
    "4e82ab632d39b236d302ff4283cae0a94f7cdbc0": {
        "authored_data": "2013 Sep 17 10:59",
        "commit.message": "Add methods to write fixed Binary without prepending length.\n",
        "commit.author.name": "David Z. Chen",
        "pcid": "b11e2a005014ecd827855dde9ce4d50b1f58aa4b",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroWriteSupport.java": {
                "old": {
                    "('parquet.avro#AvroWriteSupport', 'writeValue(Type,Schema,Object)')": [
                        202
                    ]
                },
                "new": {
                    "('parquet.avro#AvroWriteSupport', 'writeValue(Type,Schema,Object)')": [
                        202
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/ColumnWriter.java": {
                "new": {
                    "(None, None)": [
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnWriterImpl.java": {
                "new": {
                    "('parquet.column.impl#ColumnWriterImpl', 'writeFixed(Binary,int,int)')": [
                        210,
                        211,
                        212,
                        213,
                        214,
                        215
                    ],
                    "('parquet.column.impl#ColumnWriterImpl', None)": [
                        216,
                        217,
                        218
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/MessageColumnIO.java": {
                "new": {
                    "('parquet.io#MessageColumnIO', None)": [
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/RecordConsumerLoggingWrapper.java": {
                "new": {
                    "('parquet.io#RecordConsumerLoggingWrapper', 'addFixedBinary(Binary)')": [
                        119,
                        120,
                        121
                    ],
                    "('parquet.io#RecordConsumerLoggingWrapper', None)": [
                        122,
                        123,
                        124,
                        125,
                        126,
                        127
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/ValidatingRecordConsumer.java": {
                "new": {
                    "('parquet.io#ValidatingRecordConsumer', None)": [
                        178,
                        179,
                        180,
                        181,
                        185
                    ],
                    "('parquet.io#ValidatingRecordConsumer', 'addFixedBinary(Binary)')": [
                        182,
                        183,
                        184
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/PrimitiveConverter.java": {
                "new": {
                    "('parquet.io.api#PrimitiveConverter', None)": [
                        72,
                        73,
                        74,
                        75,
                        78
                    ],
                    "('parquet.io.api#PrimitiveConverter', 'addFixedBinary(Binary)')": [
                        76,
                        77
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/api/RecordConsumer.java": {
                "new": {
                    "('parquet.io.api#RecordConsumer', None)": [
                        112,
                        113,
                        114,
                        115,
                        116
                    ],
                    "('parquet.io.api#RecordConsumer', 'addFixedBinary(Binary)')": [
                        117
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ConverterConsumer.java": {
                "new": {
                    "('parquet.io#ConverterConsumer', 'addFixedBinary(Binary)')": [
                        105,
                        106
                    ],
                    "('parquet.io#ConverterConsumer', None)": [
                        107,
                        108,
                        109
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/ExpectationValidatingRecordConsumer.java": {
                "new": {
                    "('parquet.io#ExpectationValidatingRecordConsumer', 'addFixedBinary(Binary)')": [
                        91,
                        92
                    ],
                    "('parquet.io#ExpectationValidatingRecordConsumer', None)": [
                        93,
                        94,
                        95
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/io/TestColumnIO.java": {
                "new": {
                    "('parquet.io#TestColumnIO', 'testWriteWithGroupWriter')": [
                        577,
                        578,
                        579,
                        580,
                        581
                    ]
                }
            }
        }
    },
    "b11e2a005014ecd827855dde9ce4d50b1f58aa4b": {
        "authored_data": "2013 Sep 17 02:02",
        "commit.message": "Plumb type_length for FIXED types through to reading pages.\n",
        "commit.author.name": "David Z. Chen",
        "pcid": "dcc0d81849c4064fee779844b2b39737c75fd230",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroParquetReader.java": {
                "old": {
                    "('parquet.avro#AvroParquetReader', None)": [
                        35
                    ]
                },
                "new": {
                    "('parquet.avro#AvroParquetReader', None)": [
                        35
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroReadSupport.java": {
                "new": {
                    "('parquet.avro#AvroReadSupport', 'init(Configuration,Map,MessageType)')": [
                        42
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroSchemaConverter.java": {
                "old": {
                    "('parquet.avro#AvroSchemaConverter', 'primitive(String,PrimitiveType,Type,int,OriginalType)')": [
                        161
                    ]
                },
                "new": {
                    "('parquet.avro#AvroSchemaConverter', 'primitive(String,PrimitiveType,Type,int,OriginalType)')": [
                        161
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestReadWrite.java": {
                "new": {
                    "('parquet.avro#TestReadWrite', 'test')": [
                        47,
                        48,
                        81,
                        82
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/ColumnDescriptor.java": {
                "old": {
                    "('parquet.column#ColumnDescriptor', None)": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ]
                },
                "new": {
                    "('parquet.column#ColumnDescriptor', None)": [
                        45
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/Encoding.java": {
                "new": {
                    "(None, None)": [
                        66,
                        67,
                        68,
                        69,
                        70,
                        71
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        268
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnReaderImpl', 'bind(PrimitiveTypeName)')": [
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/ValuesWriter.java": {
                "new": {
                    "('parquet.column.values#ValuesWriter', 'writeFixedBytes(Binary)')": [
                        92,
                        93
                    ],
                    "('parquet.column.values#ValuesWriter', None)": [
                        94,
                        95,
                        96,
                        97,
                        98
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/PlainValuesWriter.java": {
                "new": {
                    "('parquet.column.values.plain#PlainValuesWriter', None)": [
                        50,
                        56,
                        57,
                        58,
                        59
                    ],
                    "('parquet.column.values.plain#PlainValuesWriter', 'writeFixedBytes(Binary)')": [
                        51,
                        52,
                        53,
                        54,
                        55
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/io/PrimitiveColumnIO.java": {
                "old": {
                    "('parquet.io#PrimitiveColumnIO', 'setLevels(int,int,String,int,List,List)')": [
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('parquet.io#PrimitiveColumnIO', 'setLevels(int,int,String,int,List,List)')": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/MessageType.java": {
                "old": {
                    "('parquet.schema#MessageType', 'getColumnDescription(String)')": [
                        96,
                        97
                    ],
                    "('parquet.schema#MessageType', 'getColumns')": [
                        109
                    ]
                },
                "new": {
                    "('parquet.schema#MessageType', 'getColumnDescription(String)')": [
                        96,
                        97,
                        98
                    ],
                    "('parquet.schema#MessageType', 'getColumns')": [
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/schema/PrimitiveType.java": {
                "old": {
                    "('parquet.schema#PrimitiveType', None)": [
                        298,
                        299,
                        300,
                        302,
                        303,
                        306
                    ],
                    "('parquet.schema#PrimitiveType', 'getLength')": [
                        319
                    ]
                },
                "new": {
                    "('parquet.schema#PrimitiveType', None)": [
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        319,
                        322
                    ],
                    "('parquet.schema#PrimitiveType', 'getTypeLength')": [
                        335
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/format/converter/ParquetMetadataConverter.java": {
                "old": {
                    "('parquet.format.converter#ParquetMetadataConverter', 'addToList(List,parquet)')": [
                        100,
                        102,
                        103
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'convertChildren(Iterator,int)')": [
                        351,
                        352,
                        353,
                        354
                    ]
                },
                "new": {
                    "('parquet.format.converter#ParquetMetadataConverter', 'addToList(List,parquet)')": [
                        100,
                        102,
                        103
                    ],
                    "('parquet.format.converter#ParquetMetadataConverter', 'convertChildren(Iterator,int)')": [
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362
                    ]
                }
            }
        }
    },
    "5aa7a682910bd138511aac0191b13fed9716f1e0": {
        "authored_data": "2013 Sep 17 00:22",
        "commit.message": "accidentally deleted a space\n",
        "commit.author.name": "Colin Marc",
        "pcid": "bba977549ca72f92b89cb0a72d16d93fe46621cb",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetOutputFormat.java": {
                "old": {
                    "('parquet.hadoop#ParquetOutputFormat', None)": [
                        189
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetOutputFormat', None)": [
                        189
                    ]
                }
            }
        }
    }
}