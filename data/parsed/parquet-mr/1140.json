{
    "c1b616132a7625ffb0b7b3230e0738b06b49a1a3": {
        "authored_data": "2013 Dec 20 22:31",
        "commit.message": "add delta length byte arrays and delta byte arrays encodings\n",
        "commit.author.name": "Aniket Mokashi",
        "pcid": "74269e42bca92c8fd531d81b5f3eecf386883ff3",
        "changes": {
            "parquet-column/src/main/java/parquet/column/Encoding.java": {
                "old": {
                    "(None, None)": [
                        163,
                        169
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        31,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        206,
                        207,
                        208,
                        209,
                        210
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/impl/ColumnReaderImpl.java": {
                "old": {
                    "('parquet.column.impl#ColumnReaderImpl', None)": [
                        136
                    ],
                    "('parquet.column.impl#ColumnReaderImpl', 'readPage')": [
                        540,
                        542
                    ]
                },
                "new": {
                    "('parquet.column.impl#ColumnReaderImpl', None)": [
                        136
                    ],
                    "('parquet.column.impl#ColumnReaderImpl', 'readPage')": [
                        540,
                        541,
                        543,
                        544
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/ValuesReader.java": {
                "old": {
                    "('parquet.column.values#ValuesReader', None)": [
                        54
                    ],
                    "('parquet.column.values#ValuesReader', 'initFromPage(long,byte,int)')": [
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.column.values#ValuesReader', None)": [
                        55,
                        59,
                        60,
                        61,
                        62,
                        63,
                        66
                    ],
                    "('parquet.column.values#ValuesReader', 'initFromPage(int,byte,int)')": [
                        58
                    ],
                    "('parquet.column.values#ValuesReader', 'getNextOffset')": [
                        64,
                        65
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/BitPackingValuesReader.java": {
                "old": {
                    "('parquet.column.values.bitpacking#BitPackingValuesReader', 'initFromPage(long,byte,int)')": [
                        68,
                        69,
                        70,
                        75
                    ]
                },
                "new": {
                    "('parquet.column.values.bitpacking#BitPackingValuesReader', None)": [
                        42,
                        76,
                        77,
                        78
                    ],
                    "('parquet.column.values.bitpacking#BitPackingValuesReader', 'initFromPage(int,byte,int)')": [
                        69,
                        70,
                        75
                    ],
                    "('parquet.column.values.bitpacking#BitPackingValuesReader', 'getNextOffset')": [
                        79,
                        80
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBitPackingValuesReader.java": {
                "old": {
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'initFromPage(long,byte,int)')": [
                        58,
                        60,
                        61,
                        67
                    ]
                },
                "new": {
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', None)": [
                        36,
                        68,
                        69,
                        70
                    ],
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'initFromPage(int,byte,int)')": [
                        59,
                        61,
                        67
                    ],
                    "('parquet.column.values.bitpacking#ByteBitPackingValuesReader', 'getNextOffset')": [
                        71,
                        72
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/boundedint/BoundedIntValuesReader.java": {
                "old": {
                    "('parquet.column.values.boundedint#BoundedIntValuesReader', 'initFromPage(long,byte,int)')": [
                        69,
                        77
                    ]
                },
                "new": {
                    "('parquet.column.values.boundedint#BoundedIntValuesReader', None)": [
                        37,
                        79,
                        80,
                        81
                    ],
                    "('parquet.column.values.boundedint#BoundedIntValuesReader', 'initFromPage(int,byte,int)')": [
                        70,
                        78
                    ],
                    "('parquet.column.values.boundedint#BoundedIntValuesReader', 'getNextOffset')": [
                        82,
                        83
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/boundedint/ZeroIntegerValuesReader.java": {
                "old": {
                    "('parquet.column.values.boundedint#ZeroIntegerValuesReader', 'initFromPage(long,byte,int)')": [
                        34,
                        35
                    ]
                },
                "new": {
                    "('parquet.column.values.boundedint#ZeroIntegerValuesReader', None)": [
                        28,
                        29,
                        38,
                        39,
                        40
                    ],
                    "('parquet.column.values.boundedint#ZeroIntegerValuesReader', 'initFromPage(int,byte,int)')": [
                        36,
                        37
                    ],
                    "('parquet.column.values.boundedint#ZeroIntegerValuesReader', 'getNextOffset')": [
                        41,
                        42
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/delta/DeltaBinaryPackingValuesReader.java": {
                "old": {
                    "('parquet.column.values.delta#DeltaBinaryPackingValuesReader', None)": [
                        61
                    ],
                    "('parquet.column.values.delta#DeltaBinaryPackingValuesReader', 'initFromPage(long,byte,int)')": [
                        65
                    ]
                },
                "new": {
                    "('parquet.column.values.delta#DeltaBinaryPackingValuesReader', 'initFromPage(int,byte,int)')": [
                        64
                    ],
                    "('parquet.column.values.delta#DeltaBinaryPackingValuesReader', None)": [
                        79,
                        80,
                        81
                    ],
                    "('parquet.column.values.delta#DeltaBinaryPackingValuesReader', 'getNextOffset')": [
                        82
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(long,byte,int)')": [
                        52,
                        59
                    ]
                },
                "new": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(int,byte,int)')": [
                        52
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/BinaryPlainValuesReader.java": {
                "old": {
                    "('parquet.column.values.plain#BinaryPlainValuesReader', 'initFromPage(long,byte,int)')": [
                        60,
                        65
                    ]
                },
                "new": {
                    "('parquet.column.values.plain#BinaryPlainValuesReader', 'initFromPage(int,byte,int)')": [
                        60
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/BooleanPlainValuesReader.java": {
                "old": {
                    "('parquet.column.values.plain#BooleanPlainValuesReader', 'initFromPage(long,byte,int)')": [
                        62,
                        64
                    ]
                },
                "new": {
                    "('parquet.column.values.plain#BooleanPlainValuesReader', 'initFromPage(int,byte,int)')": [
                        62,
                        64
                    ],
                    "('parquet.column.values.plain#BooleanPlainValuesReader', None)": [
                        65,
                        66,
                        67
                    ],
                    "('parquet.column.values.plain#BooleanPlainValuesReader', 'getNextOffset')": [
                        68,
                        69
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/FixedLenByteArrayPlainValuesReader.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', 'initFromPage(long,byte,int)')": [
                        60,
                        65
                    ]
                },
                "new": {
                    "('parquet.column.values.plain#FixedLenByteArrayPlainValuesReader', 'initFromPage(int,byte,int)')": [
                        59
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/PlainValuesReader.java": {
                "old": {
                    "('parquet.column.values.plain#PlainValuesReader', 'initFromPage(long,byte,int)')": [
                        44,
                        47
                    ],
                    "('parquet.column.values.plain#PlainValuesReader', None)": [
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        59,
                        93,
                        94
                    ]
                },
                "new": {
                    "('parquet.column.values.plain#PlainValuesReader', 'initFromPage(int,byte,int)')": [
                        44
                    ],
                    "('parquet.column.values.plain#PlainValuesReader', None)": [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/plain/PlainValuesWriter.java": {
                "old": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RunLengthBitPackingHybridValuesReader.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(long,byte,int)')": [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        58
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', None)": [
                        34,
                        49,
                        50,
                        51,
                        64,
                        65,
                        68
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(int,byte,int)')": [
                        41,
                        48
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'getNextOffset')": [
                        52,
                        53
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'readBoolean')": [
                        66,
                        67
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RunLengthBitPackingHybridValuesWriter.java": {
                "new": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesWriter', None)": [
                        48,
                        49,
                        52
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesWriter', 'writeBoolean(boolean)')": [
                        50,
                        51
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/values/boundedint/TestBoundedColumns.java": {
                "old": {
                    "('parquet.column.values.boundedint#TestBoundedColumns', 'testSerDe')": [
                        158
                    ]
                },
                "new": {
                    "('parquet.column.values.boundedint#TestBoundedColumns', 'testSerDe')": [
                        158,
                        159
                    ]
                }
            }
        }
    },
    "13942364d47d493fe10c66c17644d8284a84cbc7": {
        "authored_data": "2013 Dec 20 21:41",
        "commit.message": "CodeStyle\n",
        "commit.author.name": "Lukas",
        "pcid": "16b2f7362bfcf64eb23a28933098d32ce19cddaf",
        "changes": {
            "src/main/java/parquet/proto/ProtoParquetOutputFormat.java": {
                "old": {
                    "(None, None)": [
                        26,
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        28
                    ]
                }
            },
            "src/main/java/parquet/proto/ProtoWriteSupport.java": {
                "old": {
                    "('parquet.proto#ProtoWriteSupport', 'writeArray(GroupType,Descriptors,List)')": [
                        141
                    ],
                    "('parquet.proto#ProtoWriteSupport', 'writeScalarValue(Type,Descriptors,Object)')": [
                        175
                    ]
                },
                "new": {
                    "('parquet.proto#ProtoWriteSupport', 'writeArray(GroupType,Descriptors,List)')": [
                        141
                    ],
                    "('parquet.proto#ProtoWriteSupport', 'writeScalarValue(Type,Descriptors,Object)')": [
                        175
                    ]
                }
            },
            "src/main/java/parquet/proto/ProtobufferRecordConverter.java": {
                "old": {
                    "('parquet.proto#ProtobufferRecordConverter', None)": [
                        38
                    ]
                },
                "new": {
                    "('parquet.proto#ProtobufferRecordConverter', None)": [
                        38
                    ]
                }
            },
            "src/test/java/parquet/proto/ProtoInputOutputFormatTest.java": {
                "old": {
                    "('parquet.proto#ProtoInputOutputFormatTest', None)": [
                        54,
                        83,
                        96,
                        104
                    ],
                    "('parquet.proto#ProtoInputOutputFormatTest', 'testInputOutput')": [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('parquet.proto#ProtoInputOutputFormatTest', 'runMRJobs(Class,Message)')": [
                        112
                    ]
                },
                "new": {
                    "('parquet.proto#ProtoInputOutputFormatTest', None)": [
                        54,
                        83,
                        96,
                        104
                    ],
                    "('parquet.proto#ProtoInputOutputFormatTest', 'testInputOutput')": [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('parquet.proto#ProtoInputOutputFormatTest', 'runMRJobs(Class,Message)')": [
                        112
                    ]
                }
            },
            "src/test/java/parquet/proto/ProtoSchemaConverterTest.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', None)": [
                        32,
                        44
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertAllDatatypes')": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertRepetition')": [
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95
                    ]
                },
                "new": {
                    "('parquet.proto#ProtoSchemaConverterTest', None)": [
                        31,
                        43
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertAllDatatypes')": [
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertRepetition')": [
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ]
                }
            },
            "src/test/java/parquet/proto/TestUtils.java": {
                "old": {
                    "('parquet.proto#TestUtils', None)": [
                        61,
                        91,
                        102,
                        123,
                        145
                    ],
                    "('parquet.proto#TestUtils', 'cloneList(MessageOrBuilder)')": [
                        74,
                        76
                    ],
                    "('parquet.proto#TestUtils', 'asMessage(MessageOrBuilder)')": [
                        94
                    ]
                },
                "new": {
                    "('parquet.proto#TestUtils', None)": [
                        61,
                        91,
                        92,
                        93,
                        94,
                        105,
                        106,
                        107,
                        128,
                        129,
                        130,
                        152
                    ],
                    "('parquet.proto#TestUtils', 'cloneList(MessageOrBuilder)')": [
                        74,
                        76
                    ],
                    "('parquet.proto#TestUtils', 'asMessage(MessageOrBuilder)')": [
                        97
                    ]
                }
            }
        }
    },
    "16b2f7362bfcf64eb23a28933098d32ce19cddaf": {
        "authored_data": "2013 Dec 20 21:10",
        "commit.message": "ProtoSchemaConverter Code Style\n",
        "commit.author.name": "Lukas",
        "pcid": "dba65be43fd824266f947570ac310775187cef83",
        "changes": {
            "src/test/java/parquet/proto/ProtoSchemaConverterTest.java": {
                "old": {
                    "(None, None)": [
                        2
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', None)": [
                        36,
                        37,
                        38,
                        40
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'setUp')": [
                        39
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertAllDatatypes')": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertRepetition')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97
                    ]
                },
                "new": {
                    "(None, None)": [
                        2
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', None)": [
                        30,
                        31,
                        32
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertAllDatatypes')": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    "('parquet.proto#ProtoSchemaConverterTest', 'testConvertRepetition')": [
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95
                    ]
                }
            }
        }
    },
    "dba65be43fd824266f947570ac310775187cef83": {
        "authored_data": "2013 Dec 20 20:59",
        "commit.message": "tests for Input and Output Formats\n",
        "commit.author.name": "Lukas",
        "pcid": "861016bc72b36074ac35c7c8b9f5eea7df87f2ad",
        "changes": {
            "src/main/java/parquet/proto/ProtobufferRecordConverter.java": {
                "old": {
                    "(None, None)": [
                        2,
                        25
                    ],
                    "('parquet.proto#ProtobufferRecordConverter', None)": [
                        34,
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        2,
                        25,
                        26,
                        27
                    ],
                    "('parquet.proto#ProtobufferRecordConverter', None)": [
                        36,
                        37,
                        38,
                        61
                    ]
                }
            }
        }
    },
    "273728238acad7800a074b11ad3ef0beb3a4af4d": {
        "authored_data": "2013 Dec 20 19:04",
        "commit.message": "optimize consecutive row groups scans\n",
        "commit.author.name": "julien",
        "pcid": "0888bdeacf422a6def35239abd69f0ad8b580abc",
        "changes": {
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetFileReader', None)": [
                        300,
                        301,
                        306,
                        307,
                        308,
                        309,
                        310,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        450,
                        451,
                        452,
                        453
                    ],
                    "('parquet.hadoop#ParquetFileReader', 'readNextRowGroup')": [
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        353,
                        354,
                        355
                    ],
                    "('parquet.hadoop#ParquetFileReader', 'readColumnChunkPages(ColumnDescriptor,ColumnChunkMetaData,List,List)')": [
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449
                    ],
                    "('parquet.hadoop#ParquetFileReader', 'close')": [
                        454,
                        455,
                        456
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetFileReader', None)": [
                        300,
                        301,
                        306,
                        307,
                        308,
                        309,
                        368,
                        369,
                        370,
                        371,
                        379,
                        380,
                        381,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        529,
                        530,
                        531,
                        532,
                        533,
                        534,
                        535,
                        536,
                        537,
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600,
                        601,
                        602,
                        603,
                        604,
                        605,
                        606,
                        607,
                        608
                    ],
                    "('parquet.hadoop#ParquetFileReader', 'readNextRowGroup')": [
                        340,
                        341,
                        342,
                        348,
                        349,
                        350,
                        351,
                        352,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361
                    ],
                    "('parquet.hadoop#ParquetFileReader', 'getStartingPos(ColumnChunkMetaData)')": [
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378
                    ],
                    "('parquet.hadoop#ParquetFileReader', 'close')": [
                        382,
                        383,
                        384
                    ],
                    "(None, None)": [
                        609,
                        610
                    ]
                }
            }
        }
    },
    "978e396663297338a186bac466f5ee7319943c6e": {
        "authored_data": "2013 Dec 20 11:28",
        "commit.message": "ProtoSchemaConverterUnitTest\n",
        "commit.author.name": "Lukas",
        "pcid": "c590038425156af6a99f5424d8ccecd4526f071f",
        "changes": {
            "src/main/java/parquet/proto/ProtoSchemaConverter.java": {
                "old": {
                    "(None, None)": [
                        21,
                        28
                    ],
                    "('parquet.proto#ProtoSchemaConverter', 'convert(Class)')": [
                        43
                    ],
                    "('parquet.proto#ProtoSchemaConverter', 'convertScalarField(String,Descriptors,Type)')": [
                        106
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39
                    ],
                    "('parquet.proto#ProtoSchemaConverter', None)": [
                        49,
                        50
                    ],
                    "('parquet.proto#ProtoSchemaConverter', 'convert(Class)')": [
                        52,
                        57
                    ],
                    "('parquet.proto#ProtoSchemaConverter', 'convertScalarField(String,Descriptors,Type)')": [
                        120
                    ]
                }
            }
        }
    }
}