{
    "a9e2c7d5fc862fe422624e29b7bcb6a8dafdb2da": {
        "authored_data": "2013 Aug 08 06:33",
        "commit.message": "Fix Short and Byte types in Hive SerDe.\n",
        "commit.author.name": "Nong Li",
        "pcid": "6eec81d8abab0644e8c2df00544f73828ee0e219",
        "changes": {
            "parquet-hive/src/main/java/parquet/hive/serde/ArrayWritableObjectInspector.java": {
                "old": {
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getObjectInspector(TypeInfo)')": [
                        103,
                        105
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        33,
                        34,
                        35,
                        42
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', 'getObjectInspector(TypeInfo)')": [
                        108,
                        110
                    ],
                    "('parquet.hive.serde#ArrayWritableObjectInspector', None)": [
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252
                    ]
                }
            },
            "parquet-hive/src/main/java/parquet/hive/write/DataWritableWriter.java": {
                "new": {
                    "(None, None)": [
                        15,
                        17
                    ],
                    "('parquet.hive.write#DataWritableWriter', 'writePrimitive(Writable)')": [
                        150,
                        151,
                        152,
                        153
                    ]
                }
            }
        }
    },
    "1fc0698ed64514c9e30de7892c3a1d142f3f5469": {
        "authored_data": "2013 Aug 07 00:14",
        "commit.message": "Fix RLE bug with partial literal groups at end of stream.\n",
        "commit.author.name": "Nong Li",
        "pcid": "6eec81d8abab0644e8c2df00544f73828ee0e219",
        "changes": {
            "parquet-column/src/main/java/parquet/column/values/dictionary/DictionaryValuesReader.java": {
                "old": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(long,byte,int)')": [
                        58
                    ]
                },
                "new": {
                    "('parquet.column.values.dictionary#DictionaryValuesReader', 'initFromPage(long,byte,int)')": [
                        58
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RunLengthBitPackingHybridDecoder.java": {
                "old": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', None)": [
                        46,
                        51
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', 'readNext')": [
                        94
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', None)": [
                        46,
                        51,
                        58
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', 'readInt')": [
                        62,
                        67
                    ],
                    "('parquet.column.values.rle#RunLengthBitPackingHybridDecoder', 'readNext')": [
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/rle/RunLengthBitPackingHybridValuesReader.java": {
                "old": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(long,byte,int)')": [
                        55
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridValuesReader', 'initFromPage(long,byte,int)')": [
                        55
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/values/rle/RunLengthBitPackingHybridIntegrationTest.java": {
                "old": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridIntegrationTest', 'doIntegrationTest(int)')": [
                        66
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#RunLengthBitPackingHybridIntegrationTest', 'doIntegrationTest(int)')": [
                        41,
                        46,
                        51,
                        56,
                        63,
                        68,
                        72
                    ]
                }
            },
            "parquet-column/src/test/java/parquet/column/values/rle/TestRunLengthBitPackingHybridEncoder.java": {
                "old": {
                    "('parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', None)": [
                        35
                    ]
                },
                "new": {
                    "('parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', None)": [
                        35,
                        278,
                        279,
                        280,
                        293
                    ],
                    "('parquet.column.values.rle#TestRunLengthBitPackingHybridEncoder', 'testGroupBoundary')": [
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292
                    ]
                }
            }
        }
    },
    "6232dafaeeea874433a1a735c96f856293514f20": {
        "authored_data": "2013 Aug 08 00:32",
        "commit.message": "fix javadoc\n",
        "commit.author.name": "julien",
        "pcid": "aa530c19c2b1c7253b1dec3d29fd7abc1762dde8",
        "changes": {
            "parquet-column/src/main/java/parquet/io/RecordReaderImplementation.java": {
                "old": {
                    "('parquet.io#RecordReaderImplementation', None)": [
                        238,
                        240,
                        241,
                        242
                    ]
                },
                "new": {
                    "('parquet.io#RecordReaderImplementation', None)": [
                        239,
                        240,
                        241
                    ]
                }
            }
        }
    },
    "a54414c908d68125994c9d3199f95000dc53db02": {
        "authored_data": "2013 Aug 07 22:41",
        "commit.message": "use Mockito to mock varibles in test, fix format and variable name\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "86ae4f87c4254a74006f807aed8199d3138cc4ad",
        "changes": {
            "parquet-cascading/src/test/java/parquet/cascading/ParquetTBaseSchemeTest.java": {
                "old": {
                    "(None, None)": [
                        16
                    ],
                    "('parquet.cascading#ParquetTBaseSchemeTest', 'testGetRecordMaterializer')": [
                        24,
                        28,
                        29,
                        31,
                        33,
                        38,
                        40
                    ]
                },
                "new": {
                    "(None, None)": [
                        11
                    ],
                    "('parquet.cascading#ParquetTBaseSchemeTest', 'testGetRecordMaterializer')": [
                        24,
                        28,
                        29,
                        30,
                        31,
                        38,
                        40
                    ]
                }
            }
        }
    },
    "86ae4f87c4254a74006f807aed8199d3138cc4ad": {
        "authored_data": "2013 Aug 07 22:12",
        "commit.message": "fix wrong converter: use TBaseRecordConverter for ParquetTBaseScheme; Add unit test for getting correct record converter\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "c126179781821c1aba1140184be1e28b3d1924c9",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/ParquetTBaseScheme.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('parquet.cascading#ParquetTBaseScheme', 'sourceConfInit(FlowProcess,Tap,JobConf)')": [
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('parquet.cascading#ParquetTBaseScheme', 'sourceConfInit(FlowProcess,Tap,JobConf)')": [
                        57
                    ]
                }
            }
        }
    },
    "c126179781821c1aba1140184be1e28b3d1924c9": {
        "authored_data": "2013 Aug 06 20:16",
        "commit.message": "remove raw type for ParquetTbaseScheme to support thrift0.5; remove scalding dependency\n",
        "commit.author.name": "Tianshuo Deng",
        "pcid": "ac0caa0f4fae463886676d3a4212009c9648eb22",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/ParquetTBaseScheme.java": {
                "old": {
                    "('parquet.cascading#ParquetTBaseScheme', None)": [
                        33
                    ]
                },
                "new": {
                    "('parquet.cascading#ParquetTBaseScheme', None)": [
                        33
                    ]
                }
            }
        }
    }
}