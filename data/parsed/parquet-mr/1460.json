{
    "e242085ac3f79d377ed62fd2620fbeaf9a61c969": {
        "authored_data": "2013 Sep 21 02:54",
        "commit.message": "add an empty constructor for ParquetTBaseScheme (which only works for reads)\n",
        "commit.author.name": "Colin Marc",
        "pcid": "310e55170d1cea2846fcdc5ecd56c394b70c799c",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/ParquetTBaseScheme.java": {
                "old": {
                    "('parquet.cascading#ParquetTBaseScheme', None)": [
                        34
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('parquet.cascading#ParquetTBaseScheme', None)": [
                        35,
                        36,
                        37,
                        38,
                        39,
                        55
                    ],
                    "('parquet.cascading#ParquetTBaseScheme', 'sourceConfInit(FlowProcess,Tap,JobConf)')": [
                        52,
                        53,
                        54
                    ],
                    "('parquet.cascading#ParquetTBaseScheme', 'sinkConfInit(FlowProcess,Tap,JobConf)')": [
                        62,
                        63,
                        64,
                        65,
                        66
                    ]
                }
            }
        }
    },
    "e6fab0681a31aa60af07136aba65b3e69c8f45e3": {
        "authored_data": "2013 Sep 21 00:33",
        "commit.message": "Document why FIXED_LEN_BYTE_ARRAY is not supported with Avro specific schema right now.\n",
        "commit.author.name": "David Z. Chen",
        "pcid": "3b5d32bcab01886a5a4b3c1378809fc5af9cc434",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroIndexedRecordConverter.java": {
                "new": {
                    "('parquet.avro#AvroIndexedRecordConverter', None)": [
                        287,
                        288,
                        289,
                        290,
                        291,
                        292
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestSpecificInputOutputFormat.java": {
                "old": {
                    "('parquet.avro#TestSpecificInputOutputFormat', 'nextRecord(int)')": [
                        47,
                        52
                    ]
                },
                "new": {
                    "('parquet.avro#TestSpecificInputOutputFormat', 'nextRecord(int)')": [
                        47,
                        52
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestSpecificReadWrite.java": {
                "old": {
                    "('parquet.avro#TestSpecificReadWrite', 'testReadWriteSpecific')": [
                        47,
                        48,
                        49
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testReadWriteSpecificWithDictionary')": [
                        59,
                        60,
                        61
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterMatchesMultiple')": [
                        73,
                        74,
                        76
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterWithDictionary')": [
                        85,
                        86,
                        87
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterOnSubAttribute')": [
                        92,
                        96,
                        97,
                        100,
                        101,
                        102,
                        105,
                        106
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'writeCarsToParquetFile(int,CompressionCodecName,boolean)')": [
                        109
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPolo')": [
                        131,
                        137
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPassat')": [
                        150,
                        156
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getBmwMini')": [
                        168,
                        174
                    ]
                },
                "new": {
                    "('parquet.avro#TestSpecificReadWrite', 'testReadWriteSpecific')": [
                        47,
                        48,
                        49
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testReadWriteSpecificWithDictionary')": [
                        59,
                        60,
                        61
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterMatchesMultiple')": [
                        73,
                        74,
                        76
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterWithDictionary')": [
                        85,
                        86,
                        87
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'testFilterOnSubAttribute')": [
                        95,
                        96,
                        99,
                        100,
                        103,
                        104
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'writeCarsToParquetFile(int,CompressionCodecName,boolean)')": [
                        107
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPolo')": [
                        129,
                        135
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getVwPassat')": [
                        148,
                        154
                    ],
                    "('parquet.avro#TestSpecificReadWrite', 'getBmwMini')": [
                        166,
                        172
                    ]
                }
            }
        }
    },
    "3b5d32bcab01886a5a4b3c1378809fc5af9cc434": {
        "authored_data": "2013 Sep 20 19:35",
        "commit.message": "Add new Vin field to Avro TestSpecificInputOutputFormat.\n",
        "commit.author.name": "David Z. Chen",
        "pcid": "e37cd2b70fcc8471451f134e37d2b25a5b36464f",
        "changes": {
            "parquet-avro/src/test/java/parquet/avro/TestSpecificInputOutputFormat.java": {
                "new": {
                    "('parquet.avro#TestSpecificInputOutputFormat', 'nextRecord(int)')": [
                        47,
                        52
                    ]
                }
            }
        }
    },
    "a73e73c8c0f5314aed0bc7f8ccd9454f461e28be": {
        "authored_data": "2013 Sep 20 16:24",
        "commit.message": "changes as per code review comments for test\n",
        "commit.author.name": "Aniket Mokashi",
        "pcid": "ebe07c6fb3f3ea3a50511fac4bd71ba683043b73",
        "changes": {
            "parquet-pig/src/test/java/parquet/pig/TestParquetLoader.java": {
                "old": {
                    "('parquet.pig#TestParquetLoader', 'testProjectionPushdown')": [
                        94,
                        98,
                        100
                    ]
                },
                "new": {
                    "('parquet.pig#TestParquetLoader', 'testProjectionPushdown')": [
                        96
                    ]
                }
            }
        }
    }
}