{
    "328c5deb015ee5bc0a24623bc29225f6ec1ae23d": {
        "authored_data": "2017 Nov 07 13:37",
        "commit.message": "PARQUET-1115: Warn users when misusing parquet-tools merge\n\nAuthor: Nandor Kollar <nkollar@cloudera.com>\n\nCloses #433 from nandorKollar/PARQUET-1115 and squashes the following commits:\n\n5504a39 [Nandor Kollar] PARQUET-1115: Warn users when misusing parquet-tools merge\nf2ece26 [Nandor Kollar] PARQUET-1115: Warn users when misusing parquet-tools merge\n4f3ec99 [Nandor Kollar] PARQUET-1115: Warn users when misusing parquet-tools merge\nf97e620 [Nandor Kollar] PARQUET-1115: Prevent users from misusing parquet-tools merge\n",
        "commit.author.name": "Nandor Kollar",
        "pcid": "d55a572e5867832f6d5755fcd46101da51a38aa4",
        "changes": {
            "parquet-tools/src/main/java/org/apache/parquet/tools/Main.java": {
                "new": {
                    "('org.apache.parquet.tools#Main', 'showUsage(HelpFormatter,PrintWriter,String,Command)')": [
                        102
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/CatCommand.java": {
                "new": {
                    "('org.apache.parquet.tools.command#CatCommand', 'getCommandDescription')": [
                        63,
                        64
                    ],
                    "('org.apache.parquet.tools.command#CatCommand', None)": [
                        65,
                        66,
                        67
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/Command.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/DumpCommand.java": {
                "old": {
                    "('org.apache.parquet.tools.command#DumpCommand', None)": [
                        116
                    ]
                },
                "new": {
                    "('org.apache.parquet.tools.command#DumpCommand', None)": [
                        116,
                        119,
                        120,
                        121
                    ],
                    "('org.apache.parquet.tools.command#DumpCommand', 'getCommandDescription')": [
                        117,
                        118
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/HeadCommand.java": {
                "new": {
                    "('org.apache.parquet.tools.command#HeadCommand', 'getCommandDescription')": [
                        67,
                        68
                    ],
                    "('org.apache.parquet.tools.command#HeadCommand', None)": [
                        69,
                        70,
                        71
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/MergeCommand.java": {
                "new": {
                    "(None, None)": [
                        29,
                        32
                    ],
                    "('org.apache.parquet.tools.command#MergeCommand', None)": [
                        47,
                        68,
                        69,
                        70
                    ],
                    "('org.apache.parquet.tools.command#MergeCommand', 'getCommandDescription')": [
                        63,
                        64,
                        65,
                        66,
                        67
                    ],
                    "('org.apache.parquet.tools.command#MergeCommand', 'execute(CommandLine)')": [
                        79,
                        85,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/RowCountCommand.java": {
                "new": {
                    "('org.apache.parquet.tools.command#RowCountCommand', 'getCommandDescription')": [
                        70,
                        71
                    ],
                    "('org.apache.parquet.tools.command#RowCountCommand', None)": [
                        72,
                        73,
                        74
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/ShowMetaCommand.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        30
                    ]
                },
                "new": {
                    "('org.apache.parquet.tools.command#ShowMetaCommand', None)": [
                        47,
                        48,
                        49
                    ],
                    "('org.apache.parquet.tools.command#ShowMetaCommand', 'getCommandDescription')": [
                        50,
                        51
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/ShowSchemaCommand.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21
                    ]
                },
                "new": {
                    "('org.apache.parquet.tools.command#ShowSchemaCommand', 'getCommandDescription')": [
                        65,
                        66
                    ],
                    "('org.apache.parquet.tools.command#ShowSchemaCommand', None)": [
                        67,
                        68,
                        69
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/SizeCommand.java": {
                "new": {
                    "('org.apache.parquet.tools.command#SizeCommand', 'getCommandDescription')": [
                        85,
                        86
                    ],
                    "('org.apache.parquet.tools.command#SizeCommand', None)": [
                        87,
                        88,
                        89
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/read/SimpleRecord.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.parquet.tools.read#SimpleRecord', None)": [
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25,
                        26,
                        27
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/read/SimpleRecordConverter.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        36,
                        37,
                        38,
                        39,
                        40
                    ],
                    "('org.apache.parquet.tools.read#SimpleRecordConverter', None)": [
                        42,
                        43,
                        44
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/util/MetadataUtils.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23,
                        24
                    ]
                }
            }
        }
    },
    "d55a572e5867832f6d5755fcd46101da51a38aa4": {
        "authored_data": "2017 Oct 10 23:20",
        "commit.message": "PARQUET-1133 Add int96 support by returning bytearray, Skip originalType comparison for map types when originalType is null\n\n- PigSchemaConverter: Added a null check before comparing a mapKeyValueType's original type with the static constant\n- PigSchemaConverter: Changed the handling of int96 types - return bytearray instead of rejecting input\n- PigSchemaConverterTest: Added unit tests for int96 conversion and handling map entries without original type specified\n\nAuthor: Addisu Feyissa <addisu.feyissa@C1159.local>\n\nCloses #422 from adisu-feyissa/hotfix/remove_originalType_check_for_maps_and_add_int96_support and squashes the following commits:\n\ne6fa3444 [Addisu Feyissa] - PigSchemaConverter: Added a null check before comparing a mapKeyValueType's original type with the static constant - PigSchemaConverter: Changed the handling of int96 types - return bytearray instead of rejecting input - PigSchemaConverTest: Added unit tests for int96 conversion and handling map entries without original type specified\n",
        "commit.author.name": "Addisu Feyissa",
        "pcid": "ddbeb4dd17d9c219b99b1e66d8be28efe37e3aa6",
        "changes": {
            "parquet-pig/src/main/java/org/apache/parquet/pig/PigSchemaConverter.java": {
                "old": {
                    "('org.apache.parquet.pig#PigSchemaConverter', 'getSimpleFieldSchema(String,Type)')": [
                        242
                    ],
                    "('org.apache.parquet.pig#PigSchemaConverter', 'getComplexFieldSchema(String,Type)')": [
                        286
                    ]
                },
                "new": {
                    "('org.apache.parquet.pig#PigSchemaConverter', 'getSimpleFieldSchema(String,Type)')": [
                        242,
                        243
                    ],
                    "('org.apache.parquet.pig#PigSchemaConverter', 'getComplexFieldSchema(String,Type)')": [
                        287
                    ]
                }
            },
            "parquet-pig/src/test/java/org/apache/parquet/pig/TestPigSchemaConverter.java": {
                "new": {
                    "('org.apache.parquet.pig#TestPigSchemaConverter', 'testMapWithFixedWithoutOriginalType')": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261
                    ],
                    "('org.apache.parquet.pig#TestPigSchemaConverter', None)": [
                        262,
                        263,
                        264,
                        271,
                        272,
                        273,
                        274
                    ],
                    "('org.apache.parquet.pig#TestPigSchemaConverter', 'testInt96')": [
                        265,
                        266,
                        267,
                        268,
                        269,
                        270
                    ]
                }
            }
        }
    },
    "352b906996f392030bfd53b93e3cf4adb78d1a55": {
        "authored_data": "2017 Jun 09 21:31",
        "commit.message": "PARQUET-1026: allow unsigned binary stats when min == max\n\nWhen min equals max this is a special case where unsigned stats would actually be the same as signed stats since there is only one value.\nThis is useful when the data is partitioned by that column and there's only one value in the file.\nDrill for example takes advantage of this.\n\nAuthor: Julien Le Dem <julien@apache.org>\n\nCloses #416 from julienledem/min_eq_max and squashes the following commits:\n\n1d71624 [Julien Le Dem] revert package import ordering change\n47d89fc [Julien Le Dem] allow unsigned binary stats when min == max\n",
        "commit.author.name": "Julien Le Dem",
        "pcid": "2d3203b10cc8edf71a6e3e0822f0d742c9516aa3",
        "changes": {
            "parquet-hadoop/src/main/java/org/apache/parquet/format/converter/ParquetMetadataConverter.java": {
                "old": {
                    "('org.apache.parquet.format.converter#ParquetMetadataConverter', 'fromParquetStatisticsInternal(String,Statistics,PrimitiveTypeName,SortOrder)')": [
                        348,
                        349
                    ]
                },
                "new": {
                    "('org.apache.parquet.format.converter#ParquetMetadataConverter', 'fromParquetStatisticsInternal(String,Statistics,PrimitiveTypeName,SortOrder)')": [
                        343,
                        344,
                        345,
                        351,
                        352
                    ]
                }
            },
            "parquet-hadoop/src/test/java/org/apache/parquet/format/converter/TestParquetMetadataConverter.java": {
                "old": {
                    "('org.apache.parquet.format.converter#TestParquetMetadataConverter', 'testIgnoreStatsWithSignedSortOrder')": [
                        537
                    ]
                },
                "new": {
                    "('org.apache.parquet.format.converter#TestParquetMetadataConverter', 'testIgnoreStatsWithSignedSortOrder')": [
                        537
                    ],
                    "('org.apache.parquet.format.converter#TestParquetMetadataConverter', None)": [
                        538,
                        539,
                        540
                    ],
                    "('org.apache.parquet.format.converter#TestParquetMetadataConverter', 'testStillUseStatsWithSignedSortOrderIfSingleValue')": [
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557
                    ]
                }
            },
            "parquet-hadoop/src/test/java/org/apache/parquet/hadoop/TestParquetFileWriter.java": {
                "old": {
                    "('org.apache.parquet.hadoop#TestParquetFileWriter', 'testWriteReadStatisticsAllNulls')": [
                        598,
                        602,
                        604,
                        606,
                        608
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#TestParquetFileWriter', 'testWriteReadStatisticsAllNulls')": [
                        598,
                        602,
                        604,
                        606,
                        607,
                        609
                    ]
                }
            }
        }
    },
    "2d3203b10cc8edf71a6e3e0822f0d742c9516aa3": {
        "authored_data": "2017 Jun 09 18:34",
        "commit.message": "PARQUET-1005: Fix DumpCommand parsing to allow column projection\n\nDumpCommand option for -c is specified as hasArgs() for unlimited\nnumber of arguments following -c. The very description of the option\nshows the real intent of using hasArg() such that multiple columns\ncan be specified as '-c c1 -c c2 ...'. Otherwise, the input path\nis parsed as an argument for -c instead of the command itself.\n\nAuthor: Gera Shegalov <gera@twitter.com>\n\nCloses #413 from gerashegalov/dump_specific_columns_fix and squashes the following commits:\n\na6b2df3 [Gera Shegalov] Fix DumpCommand parsing to allow column projection\n",
        "commit.author.name": "Gera Shegalov",
        "pcid": "9d58b6a83aa79dcad01c3bcc2ec0a7db74ba83b1",
        "changes": {
            "parquet-tools/src/main/java/org/apache/parquet/tools/Main.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ],
                    "('org.apache.parquet.tools#Main', 'main(String)')": [
                        203
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ]
                }
            },
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/DumpCommand.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        50
                    ],
                    "('org.apache.parquet.tools.command#DumpCommand', None)": [
                        94
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ],
                    "('org.apache.parquet.tools.command#DumpCommand', None)": [
                        93
                    ]
                }
            }
        }
    },
    "9d58b6a83aa79dcad01c3bcc2ec0a7db74ba83b1": {
        "authored_data": "2017 Jun 07 22:22",
        "commit.message": "Parquet-884: Add support for Decimal datatype to Parquet-Pig record reader\n\nAdds conversion support to Pig for Decimal datatype. Based on the scala code in the spark project that provides a similar function for their sql library.\n\nAuthor: EllenKletscher <ellen.kletscher@capitalone.com>\n\nCloses #404 from EllenKletscher/master and squashes the following commits:\n\n7714738 [EllenKletscher] add comment for precision check\n50c75c8 [EllenKletscher] remove check for primitiveType null\n08d4dbb [EllenKletscher] PARQUET-884: Add missing AL header\n57c4d72 [EllenKletscher] PARQUET-884: Add missing AL header\nea61267 [EllenKletscher] PARQUET-884: add support for decimal type to pig reader\n",
        "commit.author.name": "EllenKletscher",
        "pcid": "9491d7a61681f7acc7103a6d1d45efe96f7981d2",
        "changes": {
            "parquet-pig/src/main/java/org/apache/parquet/pig/PigSchemaConverter.java": {
                "old": {
                    "('org.apache.parquet.pig#PigSchemaConverter', 'getSimpleFieldSchema(String,Type)')": [
                        247,
                        248
                    ]
                },
                "new": {
                    "('org.apache.parquet.pig#PigSchemaConverter', 'getSimpleFieldSchema(String,Type)')": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252
                    ]
                }
            },
            "parquet-pig/src/main/java/org/apache/parquet/pig/convert/TupleConverter.java": {
                "new": {
                    "(None, None)": [
                        24,
                        43,
                        47
                    ],
                    "('org.apache.parquet.pig.convert#TupleConverter', 'newConverter(FieldSchema,Type,ParentValueContainer,boolean,boolean)')": [
                        146,
                        147
                    ],
                    "('org.apache.parquet.pig.convert#TupleConverter', None)": [
                        538,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559
                    ]
                }
            }
        }
    },
    "9491d7a61681f7acc7103a6d1d45efe96f7981d2": {
        "authored_data": "2017 May 17 00:19",
        "commit.message": "PARQUET-990 More detailed error messages in footer parsing\n\nInclude invalid values in exception messages when reading footer for two situations:\n\n- too-short files (include file length)\n- files with corrupted footer lengths (include calculated footer start index)\n\nAuthor: Andrew Ash <andrew@andrewash.com>\n\nCloses #408 from ash211/patch-1 and squashes the following commits:\n\n74f5836 [Andrew Ash] More detailed error messages in footer parsing\n",
        "commit.author.name": "Andrew Ash",
        "pcid": "1de41ef4baeee1c95e245837299f8be265294445",
        "changes": {
            "parquet-hadoop/src/main/java/org/apache/parquet/hadoop/ParquetFileReader.java": {
                "old": {
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readFooter(ParquetMetadataConverter,long,String,SeekableInputStream,MetadataFilter)')": [
                        474,
                        489
                    ]
                },
                "new": {
                    "('org.apache.parquet.hadoop#ParquetFileReader', 'readFooter(ParquetMetadataConverter,long,String,SeekableInputStream,MetadataFilter)')": [
                        474,
                        489
                    ]
                }
            }
        }
    },
    "1de41ef4baeee1c95e245837299f8be265294445": {
        "authored_data": "2017 May 12 22:09",
        "commit.message": "PARQUET-852: Slowly ramp up sizes of byte[] in ByteBasedBitPackingEncoder\n\nhttps://issues.apache.org/jira/browse/PARQUET-852\n\nAuthor: John Jenkins <jjenkins@kcg.com>\n\nCloses #401 from JohnPJenkins/PARQUET-852 and squashes the following commits:\n\n334acec [John Jenkins] PARQUET-852: Slowly ramp up sizes of byte[] in ByteBasedBitPackingEncoder\n",
        "commit.author.name": "John Jenkins",
        "pcid": "fd7cfed070c2aab60521afb7dcc633a0b7abea80",
        "changes": {
            "parquet-encoding/src/main/java/org/apache/parquet/column/values/bitpacking/ByteBasedBitPackingEncoder.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', None)": [
                        46,
                        60
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'toBytes')": [
                        102
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'getBufferSize')": [
                        116
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'getAllocatedSize')": [
                        123
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        143
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', None)": [
                        42,
                        43,
                        48,
                        49,
                        62,
                        64,
                        138,
                        139,
                        140
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'writeInt(int)')": [
                        82,
                        83,
                        84,
                        85
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'toBytes')": [
                        110
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'getBufferSize')": [
                        124
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'getAllocatedSize')": [
                        131
                    ],
                    "('org.apache.parquet.column.values.bitpacking#ByteBasedBitPackingEncoder', 'getNumSlabs')": [
                        141,
                        142
                    ]
                }
            },
            "parquet-encoding/src/test/java/org/apache/parquet/column/values/bitpacking/TestByteBasedBitPackingEncoder.java": {
                "old": {
                    "(None, None)": [
                        1,
                        9,
                        11
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestByteBasedBitPackingEncoder', 'testSlabBoundary')": [
                        27,
                        29,
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        1,
                        9,
                        11,
                        21,
                        23,
                        24
                    ],
                    "('org.apache.parquet.column.values.bitpacking#TestByteBasedBitPackingEncoder', 'testSlabBoundary')": [
                        30,
                        32,
                        33,
                        34,
                        41,
                        42
                    ]
                }
            }
        }
    },
    "fd7cfed070c2aab60521afb7dcc633a0b7abea80": {
        "authored_data": "2017 May 12 22:02",
        "commit.message": "PARQUET-196: parquet-tools command for row count & size\n\nThis is a rebase on already existing PR-\nhttps://github.com/apache/parquet-mr/pull/132\n\nAuthor: Swapnil Shinde <swapnilushinde@gmail.com>\n\nCloses #406 from swapnilushinde/master and squashes the following commits:\n\n59a8980 [Swapnil Shinde] Spacing to conform java style (if/for) is fixed\n5fd0279 [Swapnil Shinde] Parquet-196: parquet-tools command for row count & size\n",
        "commit.author.name": "Swapnil Shinde",
        "pcid": "a703ee75c40e0207f6831c4d48e1c7e62f160305",
        "changes": {
            "parquet-tools/src/main/java/org/apache/parquet/tools/command/Registry.java": {
                "new": {
                    "('org.apache.parquet.tools.command#Registry', None)": [
                        35,
                        36
                    ]
                }
            }
        }
    }
}