{
    "c7ebfbb14a1147b8c34d176821000140d2ec8bfc": {
        "authored_data": "2013 May 01 18:35",
        "commit.message": "Fixes based on Julian's feedback\n",
        "commit.author.name": "Josh Wills",
        "pcid": "88690f97f3aba9112b25337512d1e82e9034793d",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroGenericRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroGenericRecordConverter', None)": [
                        46
                    ]
                },
                "new": {
                    "('parquet.avro#AvroGenericRecordConverter', None)": [
                        46
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroSchemaConverter.java": {
                "new": {
                    "('parquet.avro#AvroSchemaConverter', None)": [
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        61,
                        62,
                        63
                    ],
                    "('parquet.avro#AvroSchemaConverter', 'getNonNull(Schema)')": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroWriteSupport.java": {
                "old": {
                    "('parquet.avro#AvroWriteSupport', 'writeRecordFields(GroupType,Schema,GenericRecord)')": [
                        81,
                        87
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeValue(Type,Schema,Object)')": [
                        133
                    ]
                },
                "new": {
                    "('parquet.avro#AvroWriteSupport', 'writeRecordFields(GroupType,Schema,GenericRecord)')": [
                        81,
                        87
                    ],
                    "('parquet.avro#AvroWriteSupport', 'writeValue(Type,Schema,Object)')": [
                        133
                    ]
                }
            }
        }
    },
    "5ed616243b81f61e12e45d4e4b67f312f85d5289": {
        "authored_data": "2013 May 01 18:29",
        "commit.message": "mvn license:headers\n",
        "commit.author.name": "Avi Bryant",
        "pcid": "59f4b102517c472f26ea2138d353b33ee8146380",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/ParquetTupleScheme.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-cascading/src/main/java/parquet/cascading/SchemaIntersection.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-cascading/src/main/java/parquet/cascading/TupleReadSupport.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-cascading/src/main/java/parquet/cascading/convert/TupleConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-cascading/src/main/java/parquet/cascading/convert/TupleRecordMaterializer.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            }
        }
    },
    "88690f97f3aba9112b25337512d1e82e9034793d": {
        "authored_data": "2013 May 01 16:58",
        "commit.message": "Fix Avro Read/Write support to work with the union-null optional value pattern\n",
        "commit.author.name": "Josh Wills",
        "pcid": "68551780a069bfa7dc8741f125aaf69c2c9078f7",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroGenericRecordConverter.java": {
                "old": {
                    "('parquet.avro#AvroGenericRecordConverter', None)": [
                        46
                    ]
                },
                "new": {
                    "('parquet.avro#AvroGenericRecordConverter', None)": [
                        46,
                        47
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroWriteSupport.java": {
                "old": {
                    "('parquet.avro#AvroWriteSupport', 'writeRecordFields(GroupType,Schema,GenericRecord)')": [
                        81,
                        84,
                        85,
                        86
                    ],
                    "('parquet.avro#AvroWriteSupport', None)": [
                        90
                    ]
                },
                "new": {
                    "('parquet.avro#AvroWriteSupport', 'writeRecordFields(GroupType,Schema,GenericRecord)')": [
                        81,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91
                    ],
                    "('parquet.avro#AvroWriteSupport', None)": [
                        95
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestInputOutputFormat.java": {
                "old": {
                    "('parquet.avro#TestInputOutputFormat', None)": [
                        48,
                        59
                    ],
                    "('parquet.avro#TestInputOutputFormat', 'nextRecord(int)')": [
                        51
                    ],
                    "('parquet.avro#TestInputOutputFormat', 'testReadWrite')": [
                        117
                    ]
                },
                "new": {
                    "('parquet.avro#TestInputOutputFormat', None)": [
                        48,
                        49,
                        50,
                        51,
                        62,
                        63
                    ],
                    "('parquet.avro#TestInputOutputFormat', 'nextRecord(Integer)')": [
                        54
                    ],
                    "('parquet.avro#TestInputOutputFormat', 'testReadWrite')": [
                        121
                    ]
                }
            }
        }
    },
    "59f4b102517c472f26ea2138d353b33ee8146380": {
        "authored_data": "2013 May 01 16:45",
        "commit.message": "Use the standard readFooters in ParquetTupleScheme\n",
        "commit.author.name": "Avi Bryant",
        "pcid": "9222396f31606f90b0706d767e9f169ad3c7e297",
        "changes": {
            "parquet-cascading/src/main/java/parquet/cascading/ParquetTupleScheme.java": {
                "old": {
                    "(None, None)": [
                        4
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'readSchema(FlowProcess,Tap)')": [
                        79,
                        80,
                        82
                    ]
                },
                "new": {
                    "(None, None)": [
                        4,
                        12,
                        23
                    ],
                    "('parquet.cascading#ParquetTupleScheme', 'readSchema(FlowProcess,Tap)')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        88
                    ]
                }
            },
            "parquet-cascading/src/main/java/parquet/cascading/TupleReadSupport.java": {
                "new": {
                    "('parquet.cascading#TupleReadSupport', 'getRequestedFields(Configuration)')": [
                        25,
                        26,
                        27,
                        28
                    ]
                }
            },
            "parquet-hadoop/src/main/java/parquet/hadoop/ParquetFileReader.java": {
                "old": {
                    "('parquet.hadoop#ParquetFileReader', 'readAnyFooter(Configuration,Path)')": [
                        230,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239
                    ],
                    "('parquet.hadoop#ParquetFileReader', None)": [
                        240
                    ]
                },
                "new": {
                    "('parquet.hadoop#ParquetFileReader', 'readFooters(Configuration,Path)')": [
                        230,
                        232
                    ]
                }
            }
        }
    },
    "aaa58d36317c6242fb086efd3a161d5aee0c85db": {
        "authored_data": "2013 Apr 30 20:38",
        "commit.message": "code formating and license headers\n",
        "commit.author.name": "julien",
        "pcid": "05505456e6db07603559c2d02233077889a249cf",
        "changes": {
            "parquet-avro/src/main/java/parquet/avro/AvroGenericRecordConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroParquetInputFormat.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroParquetOutputFormat.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroReadSupport.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroRecordMaterializer.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/AvroWriteSupport.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/main/java/parquet/avro/package-info.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestAvroSchemaConverter.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-avro/src/test/java/parquet/avro/TestReadWrite.java": {
                "new": {
                    "(None, None)": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBasedBitPackingGenerator.java": {
                "old": {
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingGenerator', 'generatePack(FileWriter,int,int)')": [
                        91
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingGenerator', 'generateUnpack(FileWriter,int,int)')": [
                        167
                    ]
                },
                "new": {
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingGenerator', 'generatePack(FileWriter,int,int)')": [
                        91
                    ],
                    "('parquet.column.values.bitpacking#ByteBasedBitPackingGenerator', 'generateUnpack(FileWriter,int,int)')": [
                        167
                    ]
                }
            },
            "parquet-column/src/main/java/parquet/column/values/bitpacking/ByteBitPacking.java": {
                "old": {
                    "('parquet.column.values.bitpacking#ByteBitPacking', None)": [
                        74,
                        76,
                        78,
                        80,
                        90,
                        117,
                        219,
                        253,
                        391,
                        419,
                        525,
                        559,
                        697,
                        732,
                        866,
                        906,
                        1068,
                        1098,
                        1212,
                        1246,
                        1384,
                        1427,
                        1593,
                        1639,
                        1825,
                        1869,
                        2039,
                        2085,
                        2271,
                        2322,
                        2520,
                        2572,
                        2782,
                        2816,
                        2946,
                        2980,
                        3118,
                        3177,
                        3407,
                        3465,
                        3699,
                        3759,
                        3993,
                        4051,
                        4285,
                        4352,
                        4614,
                        4678,
                        4936,
                        4998,
                        5240,
                        5298,
                        5532,
                        5607,
                        5901,
                        5971,
                        6253,
                        6329,
                        6627,
                        6697,
                        6979,
                        7062,
                        7388,
                        7464,
                        7770,
                        7836,
                        8094,
                        8152,
                        8386,
                        8477,
                        8835,
                        8917,
                        9247,
                        9339,
                        9701,
                        9783,
                        10113,
                        10212,
                        10602,
                        10690,
                        11044,
                        11138,
                        11508,
                        11590,
                        11920,
                        12027,
                        12449,
                        12543,
                        12921,
                        13029,
                        13455,
                        13549,
                        13927,
                        14042,
                        14496,
                        14596,
                        14998,
                        15096,
                        15482,
                        15564,
                        15894,
                        16017,
                        16503,
                        16609,
                        17035,
                        17159,
                        17649,
                        17755,
                        18181,
                        18312,
                        18830,
                        18942,
                        19392,
                        19518,
                        20016,
                        20122,
                        20548,
                        20687,
                        21237,
                        21355,
                        21829,
                        21969,
                        22523,
                        22641,
                        23115,
                        23262,
                        23844,
                        23968,
                        24466,
                        24596,
                        25110,
                        25216
                    ]
                },
                "new": {
                    "('parquet.column.values.bitpacking#ByteBitPacking', None)": [
                        74,
                        76,
                        78,
                        80,
                        90,
                        117,
                        219,
                        253,
                        391,
                        419,
                        525,
                        559,
                        697,
                        732,
                        866,
                        906,
                        1068,
                        1098,
                        1212,
                        1246,
                        1384,
                        1427,
                        1593,
                        1639,
                        1825,
                        1869,
                        2039,
                        2085,
                        2271,
                        2322,
                        2520,
                        2572,
                        2782,
                        2816,
                        2946,
                        2980,
                        3118,
                        3177,
                        3407,
                        3465,
                        3699,
                        3759,
                        3993,
                        4051,
                        4285,
                        4352,
                        4614,
                        4678,
                        4936,
                        4998,
                        5240,
                        5298,
                        5532,
                        5607,
                        5901,
                        5971,
                        6253,
                        6329,
                        6627,
                        6697,
                        6979,
                        7062,
                        7388,
                        7464,
                        7770,
                        7836,
                        8094,
                        8152,
                        8386,
                        8477,
                        8835,
                        8917,
                        9247,
                        9339,
                        9701,
                        9783,
                        10113,
                        10212,
                        10602,
                        10690,
                        11044,
                        11138,
                        11508,
                        11590,
                        11920,
                        12027,
                        12449,
                        12543,
                        12921,
                        13029,
                        13455,
                        13549,
                        13927,
                        14042,
                        14496,
                        14596,
                        14998,
                        15096,
                        15482,
                        15564,
                        15894,
                        16017,
                        16503,
                        16609,
                        17035,
                        17159,
                        17649,
                        17755,
                        18181,
                        18312,
                        18830,
                        18942,
                        19392,
                        19518,
                        20016,
                        20122,
                        20548,
                        20687,
                        21237,
                        21355,
                        21829,
                        21969,
                        22523,
                        22641,
                        23115,
                        23262,
                        23844,
                        23968,
                        24466,
                        24596,
                        25110,
                        25216
                    ]
                }
            }
        }
    }
}