{
    "f4c2ed4995d19c595ec0bf5c49d210df9046fda9": {
        "authored_data": "2020 Feb 22 13:28",
        "commit.message": "LANG-1518 - fix searchSupers for generic classes (#494)\n\n* fix searchSupers for generic classes\r\n\r\n* fix checkstyle\r\n",
        "commit.author.name": "Michele Preti",
        "pcid": "eb8d069089364e396e37ed5273cf7710e41eb06d",
        "changes": {
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": {
                "old": {
                    "('org.apache.commons.lang3.reflect#MethodUtils', 'getAnnotation(Method,Class,boolean,boolean)')": [
                        977,
                        978,
                        979,
                        980,
                        981,
                        982,
                        983,
                        984,
                        985,
                        986,
                        987
                    ]
                },
                "new": {
                    "('org.apache.commons.lang3.reflect#MethodUtils', 'getAnnotation(Method,Class,boolean,boolean)')": [
                        977,
                        978,
                        979,
                        980,
                        981,
                        982,
                        983
                    ]
                }
            },
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": {
                "new": {
                    "('org.apache.commons.lang3.reflect#MethodUtilsTest', 'testGetAnnotationSearchSupersAndIgnoreAccess')": [
                        802,
                        803,
                        804,
                        805,
                        806,
                        807,
                        808,
                        809,
                        810
                    ],
                    "('org.apache.commons.lang3.reflect#MethodUtilsTest', 'testGetAnnotationSearchSupersButNotIgnoreAccess')": [
                        839,
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        846,
                        847
                    ]
                }
            },
            "src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java": {
                "new": {
                    "('org.apache.commons.lang3.reflect.testbed#GenericParent', None)": [
                        28,
                        30,
                        31
                    ],
                    "('org.apache.commons.lang3.reflect.testbed#GenericParent', 'parentProtectedAnnotatedMethod(T)')": [
                        29
                    ],
                    "('org.apache.commons.lang3.reflect.testbed#GenericParent', 'parentNotAnnotatedMethod(T)')": [
                        32
                    ],
                    "(None, None)": [
                        33
                    ]
                }
            },
            "src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java": {
                "new": {
                    "('org.apache.commons.lang3.reflect.testbed#StringParameterizedChild', None)": [
                        27,
                        28,
                        30,
                        31,
                        33,
                        34,
                        35,
                        37,
                        38,
                        39
                    ],
                    "('org.apache.commons.lang3.reflect.testbed#StringParameterizedChild', 'parentProtectedAnnotatedMethod(String)')": [
                        29
                    ],
                    "('org.apache.commons.lang3.reflect.testbed#StringParameterizedChild', 'parentNotAnnotatedMethod(String)')": [
                        32
                    ],
                    "('org.apache.commons.lang3.reflect.testbed#StringParameterizedChild', 'privateAnnotatedMethod(String)')": [
                        36
                    ],
                    "('org.apache.commons.lang3.reflect.testbed#StringParameterizedChild', 'publicAnnotatedMethod(String)')": [
                        40
                    ],
                    "(None, None)": [
                        41
                    ]
                }
            }
        }
    },
    "179e8f4775add4236ad76595e5eaed83f2c3e1b6": {
        "authored_data": "2020 Feb 19 05:58",
        "commit.message": "try to cleanup merging (#493)\n\n",
        "commit.author.name": "Peter Verhas",
        "pcid": "bd147ae86c646cb6b03235ad924e35c42cec842c",
        "changes": {
            "src/main/java/org/apache/commons/lang3/Functions.java": {
                "old": {
                    "('org.apache.commons.lang3#Functions', 'call(FailableCallable)')": [
                        283,
                        284,
                        285,
                        286
                    ],
                    "('org.apache.commons.lang3#Functions', None)": [
                        287,
                        302,
                        319,
                        336,
                        355,
                        371,
                        389,
                        545
                    ],
                    "('org.apache.commons.lang3#Functions', 'accept(FailableConsumer,O)')": [
                        298,
                        299,
                        300,
                        301
                    ],
                    "('org.apache.commons.lang3#Functions', 'accept(FailableBiConsumer,O1,O2)')": [
                        315,
                        316,
                        317,
                        318
                    ],
                    "('org.apache.commons.lang3#Functions', 'apply(FailableFunction,I)')": [
                        332,
                        333,
                        334,
                        335
                    ],
                    "('org.apache.commons.lang3#Functions', 'apply(FailableBiFunction,I1,I2)')": [
                        351,
                        352,
                        353,
                        354
                    ],
                    "('org.apache.commons.lang3#Functions', 'test(FailablePredicate,O)')": [
                        367,
                        368,
                        369,
                        370
                    ],
                    "('org.apache.commons.lang3#Functions', 'test(FailableBiPredicate,O1,O2)')": [
                        385,
                        386,
                        387,
                        388
                    ],
                    "('org.apache.commons.lang3#Functions', 'tryWithResources(FailableRunnable,FailableConsumer,FailableRunnable)')": [
                        469,
                        485
                    ]
                },
                "new": {
                    "('org.apache.commons.lang3#Functions', 'call(FailableCallable)')": [
                        283
                    ],
                    "('org.apache.commons.lang3#Functions', 'accept(FailableConsumer,O)')": [
                        294
                    ],
                    "('org.apache.commons.lang3#Functions', 'accept(FailableBiConsumer,O1,O2)')": [
                        307
                    ],
                    "('org.apache.commons.lang3#Functions', 'apply(FailableFunction,I)')": [
                        320
                    ],
                    "('org.apache.commons.lang3#Functions', 'apply(FailableBiFunction,I1,I2)')": [
                        335
                    ],
                    "('org.apache.commons.lang3#Functions', 'test(FailablePredicate,O)')": [
                        347
                    ],
                    "('org.apache.commons.lang3#Functions', 'test(FailableBiPredicate,O1,O2)')": [
                        361
                    ],
                    "('org.apache.commons.lang3#Functions', 'tryWithResources(FailableRunnable,FailableConsumer,FailableRunnable)')": [
                        441,
                        457
                    ],
                    "('org.apache.commons.lang3#Functions', None)": [
                        517
                    ]
                }
            }
        }
    },
    "553a0474ea11a9b61a8de618a3512f29f5a17368": {
        "authored_data": "2020 Feb 17 15:29",
        "commit.message": "LANG-1433: MethodUtils will throw a NPE if invokeMethod() is called for a var-args method (#407)\n\n* LANG-1433: MethodUtils will throw a NPE if invokeMethod() is called for a var-args method with null parameter value\r\n\r\n* LANG-1433: Result of invokeMethod() is not deterministic for overloaded methods that can not be uniquly resolved from parameter types\r\n\r\n* LANG-1433: Fixed checkstyle errors\r\n",
        "commit.author.name": "Christian Franzen",
        "pcid": "d3112e4306ef1008673f0e8f0f087bdf273bed0b",
        "changes": {
            "src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java": {
                "old": {
                    "('org.apache.commons.lang3.reflect#MemberUtils', 'getTotalTransformationCost(Class,Executable)')": [
                        165
                    ]
                },
                "new": {
                    "('org.apache.commons.lang3.reflect#MemberUtils', 'getTotalTransformationCost(Class,Executable)')": [
                        165
                    ],
                    "('org.apache.commons.lang3.reflect#MemberUtils', 'getPrimitivePromotionCost(Class,Class)')": [
                        230,
                        231,
                        232
                    ]
                }
            },
            "src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java": {
                "old": {
                    "('org.apache.commons.lang3.reflect#MethodUtils', 'getVarArgs(Object,Class)')": [
                        465,
                        466
                    ],
                    "('org.apache.commons.lang3.reflect#MethodUtils', 'getMatchingAccessibleMethod(Class,String,Class)')": [
                        682,
                        688,
                        689,
                        690,
                        691,
                        692,
                        693,
                        694,
                        695,
                        706,
                        707,
                        708,
                        709
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29
                    ],
                    "('org.apache.commons.lang3.reflect#MethodUtils', None)": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    "('org.apache.commons.lang3.reflect#MethodUtils', 'getVarArgs(Object,Class)')": [
                        474,
                        475
                    ],
                    "('org.apache.commons.lang3.reflect#MethodUtils', 'getMatchingAccessibleMethod(Class,String,Class)')": [
                        692,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706,
                        707,
                        708,
                        709,
                        710,
                        711,
                        712,
                        723,
                        724,
                        725,
                        726,
                        727,
                        728
                    ]
                }
            },
            "src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java": {
                "new": {
                    "('org.apache.commons.lang3.reflect#MethodUtilsTest', 'testInvokeMethod_VarArgsWithNullValues')": [
                        450,
                        451,
                        452,
                        453,
                        454
                    ],
                    "('org.apache.commons.lang3.reflect#MethodUtilsTest', None)": [
                        455,
                        456,
                        457,
                        463,
                        464,
                        465
                    ],
                    "('org.apache.commons.lang3.reflect#MethodUtilsTest', 'testInvokeMethod_VarArgsNotUniqueResolvable')": [
                        458,
                        459,
                        460,
                        461,
                        462
                    ]
                }
            }
        }
    },
    "473c050cc9e52931dfbb1c8430a4093454147ebb": {
        "authored_data": "2020 Feb 17 15:13",
        "commit.message": "Exceptionutilstest to 100p (#486)\n\n* unit tests were added to top up the test coverage of ExceptionUtils to 100%\r\n\r\n* unit tests were added to top up the test coverage of ExceptionUtils to 100%\r\n\r\n* unit tests were added to top up the test coverage of ExceptionUtils to 100%\r\n\r\n* unit tests were added to top up the test coverage of ExceptionUtils to 100%\r\n\r\n* unit tests were added to top up the test coverage of ExceptionUtils to 100%\r\n",
        "commit.author.name": "Peter Verhas",
        "pcid": "f46f4e35c3d84b11bd30bcf8b3078b3ba4337a4d",
        "changes": {
            "src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java": {
                "new": {
                    "(None, None)": [
                        19,
                        39,
                        733
                    ],
                    "('org.apache.commons.lang3.exception#ExceptionUtilsTest', None)": [
                        704,
                        705,
                        706,
                        710,
                        711,
                        712,
                        713
                    ],
                    "('org.apache.commons.lang3.exception#ExceptionUtilsTest', 'testgetStackFramesNullArg')": [
                        707,
                        708,
                        709
                    ],
                    "('org.apache.commons.lang3.exception#ExceptionUtilsTest', 'testgetStackFramesHappyPath')": [
                        714,
                        715,
                        716,
                        717,
                        718,
                        719,
                        720,
                        721,
                        722,
                        723,
                        724,
                        725,
                        726,
                        727,
                        728,
                        729,
                        730,
                        731,
                        732
                    ]
                }
            }
        }
    }
}