{
    "e2a1a418c2e8ff881d46d6827ba79436b047b786": {
        "authored_data": "2020 Jun 02 16:24",
        "commit.message": "revert typo-fix in public functions for not breaking BC.\nmostly named [setCache***Availablity], which should be [setCache***Availability].\nmaybe we can fix them when next major version comes.\n",
        "commit.author.name": "XenoAmess",
        "pcid": "1ac816fde7ae874f9903fea0cefeef43557abffd",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/brotli/BrotliUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', None)": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', 'setCacheBrotliAvailability(boolean)')": [
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', None)": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', 'setCacheBrotliAvailablity(boolean)')": [
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        56
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'setCacheLZMAAvailability(boolean)')": [
                        149
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        56
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'setCacheLZMAAvailablity(boolean)')": [
                        149
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        60
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'setCacheXZAvailability(boolean)')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        60
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'setCacheXZAvailablity(boolean)')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', None)": [
                        53
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'setCacheZstdAvailability(boolean)')": [
                        88
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', None)": [
                        53
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'setCacheZstdAvailablity(boolean)')": [
                        88
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        69,
                        73
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        80,
                        82,
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        69,
                        73
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        80,
                        82,
                        85
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testCanTurnOffCaching')": [
                        88,
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        99,
                        101,
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testCanTurnOffCaching')": [
                        88,
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        99,
                        101,
                        104
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testCanTurnOffCaching')": [
                        92,
                        96
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        103,
                        105,
                        108
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testCanTurnOffCaching')": [
                        92,
                        96
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        103,
                        105,
                        108
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        71,
                        75
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        82,
                        84,
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        70,
                        74
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        81,
                        83,
                        86
                    ]
                }
            }
        }
    },
    "1ac816fde7ae874f9903fea0cefeef43557abffd": {
        "authored_data": "2020 Jun 02 13:38",
        "commit.message": "fix typos\n",
        "commit.author.name": "XenoAmess",
        "pcid": "8383bccd776903d86253b6fcb138aebe11701b45",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        108,
                        140,
                        143
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        108,
                        140,
                        143
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "(None, None)": [
                        29
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        264
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        321
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        406
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldAsciiEntry')": [
                        440
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        474
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        264
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        321
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        406
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldAsciiEntry')": [
                        440
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        474
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioConstants.java": {
                "old": {
                    "(None, None)": [
                        68
                    ]
                },
                "new": {
                    "(None, None)": [
                        68
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', None)": [
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', None)": [
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        1426
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        1426
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFileOptions.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileOptions', None)": [
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileOptions', None)": [
                        43
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldParsingBehavior.java": {
                "old": {
                    "(None, None)": [
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64RequiredException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', None)": [
                        41,
                        44,
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', None)": [
                        41,
                        44,
                        47
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'hashCode')": [
                        859
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        1112
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'hashCode')": [
                        859
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        1112
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryRequest', None)": [
                        58,
                        76
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryRequest', None)": [
                        58,
                        76
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isZip64Required(ZipArchiveEntry,Zip64Mode)')": [
                        739
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        740,
                        741,
                        748,
                        915
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isTooLageForZip32(ZipArchiveEntry)')": [
                        742
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isZip64Required(ZipArchiveEntry,Zip64Mode)')": [
                        739
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        740,
                        741,
                        748,
                        915
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isTooLargeForZip32(ZipArchiveEntry)')": [
                        742
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', None)": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', None)": [
                        47
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        88
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        88
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/brotli/BrotliUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', None)": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', 'setCacheBrotliAvailablity(boolean)')": [
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', None)": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', 'setCacheBrotliAvailability(boolean)')": [
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', None)": [
                        103,
                        947
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', None)": [
                        103,
                        947
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', None)": [
                        472,
                        523
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', None)": [
                        472,
                        523
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', None)": [
                        37
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', None)": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', None)": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "(None, None)": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        69
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', None)": [
                        71,
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', None)": [
                        71,
                        82
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        56
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'setCacheLZMAAvailablity(boolean)')": [
                        149
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        56
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'setCacheLZMAAvailability(boolean)')": [
                        149
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', None)": [
                        47,
                        69,
                        89,
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', None)": [
                        47,
                        69,
                        89,
                        114
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java": {
                "old": {
                    "(None, None)": [
                        18
                    ]
                },
                "new": {
                    "(None, None)": [
                        18
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        60
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'setCacheXZAvailablity(boolean)')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        60
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'setCacheXZAvailability(boolean)')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', None)": [
                        53
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'setCacheZstdAvailablity(boolean)')": [
                        88
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', None)": [
                        53
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'setCacheZstdAvailability(boolean)')": [
                        88
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', None)": [
                        220
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', None)": [
                        220
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java": {
                "old": {
                    "(None, None)": [
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/SkipShieldingInputStream.java": {
                "old": {
                    "(None, None)": [
                        35
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        141
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        141
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testParseReparse')": [
                        387
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testParseReparse')": [
                        387
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryUnnownSizeToFile')": [
                        764
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryUnnownSizeToFileModeAlways')": [
                        783
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryUnnownSizeToFileModeNever')": [
                        831
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryUnnownSizeToFile')": [
                        1514
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryUnnownSizeToFileModeNever')": [
                        1533
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryUnnownSizeToFileModeAlways')": [
                        1701
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryUnknownSizeToFile')": [
                        764
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryUnknownSizeToFileModeAlways')": [
                        783
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryUnknownSizeToFileModeNever')": [
                        831
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryUnknownSizeToFile')": [
                        1514
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryUnknownSizeToFileModeNever')": [
                        1533
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryUnknownSizeToFileModeAlways')": [
                        1701
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testGetNonexistentEncodng')": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testGetNonexistentEncoding')": [
                        56
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testMutiples')": [
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testMultiples')": [
                        256
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        69,
                        73
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        80,
                        82,
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        69,
                        73
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        80,
                        82,
                        85
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testCanTurnOffCaching')": [
                        88,
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        99,
                        101,
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testCanTurnOffCaching')": [
                        88,
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        99,
                        101,
                        104
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testCanTurnOffCaching')": [
                        92,
                        96
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        103,
                        105,
                        108
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testCanTurnOffCaching')": [
                        92,
                        96
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testTurningOnCachingReEvaluatesAvailability')": [
                        103,
                        105,
                        108
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        71,
                        75
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        82,
                        84,
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testCanTurnOffCaching')": [
                        71,
                        75
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testTurningOnCachingReEvaluatesAvailability')": [
                        82,
                        84,
                        87
                    ]
                }
            }
        }
    },
    "8383bccd776903d86253b6fcb138aebe11701b45": {
        "authored_data": "2020 Jun 02 11:39",
        "commit.message": "refine javadoc\n",
        "commit.author.name": "XenoAmess",
        "pcid": "637469893b0ade91d8bca61c25e0e9282f977213",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        152
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        76
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        76
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        133
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        133
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        323
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        323
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', None)": [
                        471
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        206
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        206,
                        207
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        383,
                        397
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        383,
                        397
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', None)": [
                        243,
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', None)": [
                        243,
                        256
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        682,
                        683,
                        684,
                        685,
                        699,
                        700,
                        701,
                        702
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        682,
                        683,
                        684,
                        685,
                        699,
                        700,
                        701,
                        702
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', None)": [
                        103,
                        128
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', None)": [
                        103,
                        128
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', None)": [
                        183,
                        199,
                        212,
                        237,
                        264
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', None)": [
                        183,
                        199,
                        212,
                        237,
                        264
                    ]
                }
            }
        }
    },
    "637469893b0ade91d8bca61c25e0e9282f977213": {
        "authored_data": "2020 Jun 02 01:55",
        "commit.message": "restore error deleted throws declaration\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "42b6aa4c8a097f2ed49eb51b9fac61e7f8033cb2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        338,
                        339,
                        340
                    ]
                }
            }
        }
    },
    "42b6aa4c8a097f2ed49eb51b9fac61e7f8033cb2": {
        "authored_data": "2020 Jun 01 13:00",
        "commit.message": "minor typos cleanup\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "67356a270ae9553e09dfd6b2ad8ae6e792b5a886",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        338,
                        339,
                        340
                    ]
                }
            }
        }
    },
    "67356a270ae9553e09dfd6b2ad8ae6e792b5a886": {
        "authored_data": "2020 Jun 01 11:13",
        "commit.message": "not really COMPRESS-529 also use IllegalArgumentException for big numbers\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "b13c93182365253fc16a1bac4d46ad6e946bf568",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        636
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        338,
                        339,
                        340,
                        341,
                        342,
                        343
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        642
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', None)": [
                        98,
                        105,
                        106
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberErrorMode')": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104
                    ]
                }
            }
        }
    },
    "b13c93182365253fc16a1bac4d46ad6e946bf568": {
        "authored_data": "2020 Jun 01 08:52",
        "commit.message": "typos\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "36773d948e9a220c1dc3abec3d2028b0879a7766",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        685
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        685
                    ]
                }
            }
        }
    },
    "36773d948e9a220c1dc3abec3d2028b0879a7766": {
        "authored_data": "2020 Jun 01 08:48",
        "commit.message": "COMPRESS-529 : properly throw Exceptions for tar\n\nThrow expected IOException instead of NumberFormatException if it\nencounters non-numbers in tar pax headers.\n\nThrow IllegalArgumentException if the file name is too long with the\ndefault long file mode LONGFILE_ERROR\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "6bbc7cb147d57c3db812be17d462a802ee46e26c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        1115
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        409,
                        410,
                        411,
                        412
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        683
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        657,
                        658,
                        659
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        686
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', None)": [
                        436,
                        441,
                        442,
                        443
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarWithNonNumberPaxHeaders')": [
                        437,
                        438,
                        439,
                        440
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', None)": [
                        780,
                        788,
                        789
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNameThrowsException')": [
                        781,
                        782,
                        783,
                        784,
                        785,
                        786,
                        787
                    ]
                }
            }
        }
    },
    "6bbc7cb147d57c3db812be17d462a802ee46e26c": {
        "authored_data": "2020 May 31 12:05",
        "commit.message": "COMPRESS-532 properly handle corrupt IMPLODED streams\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "e4eccde3c67483a22523be8a90d188e5416de921",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'read')": [
                        119
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'read')": [
                        119,
                        120,
                        121,
                        122,
                        123
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        362,
                        363,
                        364,
                        365
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        580,
                        581
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        580,
                        581,
                        582,
                        583,
                        584,
                        585
                    ]
                }
            }
        }
    }
}