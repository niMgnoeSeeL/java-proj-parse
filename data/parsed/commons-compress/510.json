{
    "81299d245660a7b931a445744aaf451783426f3e": {
        "authored_data": "2020 Dec 26 08:38",
        "commit.message": "add more information about allowStoredEntriesWithDataDescriptor\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "57bcd9b8af628bcb2933c7d80a7ed6e9c5d673e0",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        117
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127
                    ]
                }
            }
        }
    },
    "ffc5c186d2977765dcd3563b68dffb2d7ee8b42a": {
        "authored_data": "2020 Dec 12 15:56",
        "commit.message": "Add final\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "d462ac40c2053d25d4224cfc8e7a86a68371f9a3",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        312
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        312
                    ]
                }
            }
        }
    },
    "d462ac40c2053d25d4224cfc8e7a86a68371f9a3": {
        "authored_data": "2020 Dec 12 15:34",
        "commit.message": "COMPRESS-561 - Minor improvement\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "1470c26cadbbfe6a7150f862766eaa30937fbd2b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        140,
                        144,
                        147,
                        183
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        140,
                        141,
                        145,
                        148,
                        184
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        372
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        372
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        521
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        521
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        50,
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        50,
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        790,
                        823
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        790,
                        823
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        51,
                        62,
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        51,
                        62,
                        71
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', 'read(byte,int,int)')": [
                        78,
                        79
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', 'read(byte,int,int)')": [
                        78,
                        79
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        160,
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        160,
                        196
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        982,
                        990
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        979,
                        983,
                        991
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java": {
                "old": {
                    "(None, None)": [
                        100,
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        100,
                        101,
                        102
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'buildSparseInputStreams')": [
                        1113
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'buildSparseInputStreams')": [
                        1113
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        211
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        211
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        293,
                        295,
                        296,
                        299
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        290,
                        294,
                        296,
                        297,
                        300
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        154,
                        160,
                        161,
                        163
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        153,
                        155,
                        161,
                        162,
                        164
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'fillBuffer')": [
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'fillBuffer')": [
                        170
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        197,
                        200,
                        201
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeLocalFileDataData(ZipExtraField)')": [
                        231,
                        232,
                        234,
                        256
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeCentralDirectoryData(ZipExtraField)')": [
                        270,
                        271,
                        273,
                        294
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        196,
                        198,
                        201,
                        202
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeLocalFileDataData(ZipExtraField)')": [
                        232,
                        233,
                        234,
                        236,
                        258
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeCentralDirectoryData(ZipExtraField)')": [
                        272,
                        273,
                        274,
                        276,
                        297
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        935
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        935
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        497
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        497
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry,boolean)')": [
                        857,
                        858
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1392,
                        1432,
                        1464,
                        1465,
                        1466
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry,boolean)')": [
                        857,
                        858
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1382,
                        1393,
                        1433,
                        1465,
                        1466,
                        1467
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1374,
                        1384
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1374,
                        1384
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        181
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/brotli/BrotliUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', 'internalIsBrotliCompressionAvailable')": [
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', 'internalIsBrotliCompressionAvailable')": [
                        64
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', None)": [
                        933
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', None)": [
                        933
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackQSort3(int,int,int,int)')": [
                        370
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSort(int,byte,int)')": [
                        476
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackQSort3(int,int,int,int)')": [
                        370
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSort(int,byte,int)')": [
                        476
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        230
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        230
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expandFromList(byte,int,int)')": [
                        253
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expandFromList(byte,int,int)')": [
                        253,
                        254
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'write(byte,int,int)')": [
                        213,
                        215,
                        216,
                        217,
                        218,
                        219
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'write(byte,int,int)')": [
                        213,
                        214,
                        216,
                        217,
                        218,
                        219,
                        220
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'readLiteralLength(int)')": [
                        248
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'readLiteralLength(int)')": [
                        248
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'internalIsZstdCompressionAvailable')": [
                        77
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'internalIsZstdCompressionAvailable')": [
                        77
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        74
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        142
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        142
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        347,
                        348,
                        349
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        347,
                        348,
                        349
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', None)": [
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', None)": [
                        50
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.memory#MemoryArchiveInputStream', None)": [
                        33,
                        34,
                        36
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.memory#MemoryArchiveInputStream', None)": [
                        33,
                        34,
                        35,
                        37
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZNativeHeapTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZNativeHeapTest', None)": [
                        69,
                        167
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZNativeHeapTest', None)": [
                        69,
                        167
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        47
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        150
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'parse(String)')": [
                        105,
                        107,
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'parse(String)')": [
                        105,
                        106,
                        108,
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSample.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', None)": [
                        28,
                        29
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', None)": [
                        28,
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        288
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        287
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', None)": [
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', None)": [
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIOExceptionIfThereIsCorruptedZip64Extra')": [
                        700
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testZipWithBadExtraFields')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testZipUsingStoredWithDDAndNoDDSignature')": [
                        718
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'forgeZipInputStream')": [
                        771
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIOExceptionIfThereIsCorruptedZip64Extra')": [
                        700
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testZipWithBadExtraFields')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testZipUsingStoredWithDDAndNoDDSignature')": [
                        718
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'forgeZipInputStream')": [
                        771
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', None)": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', None)": [
                        34
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        138
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        164
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        207
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        138
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        164
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        207
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'lzmaRoundtrip')": [
                        51
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'lzmaRoundtrip')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', None)": [
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', None)": [
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        62
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', None)": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', None)": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/CharsetsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CharsetsTest', 'testToCharset')": [
                        38,
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CharsetsTest', 'testToCharset')": [
                        38,
                        39
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        44
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', None)": [
                        307,
                        351,
                        373
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', None)": [
                        306,
                        350,
                        372
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        44
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', None)": [
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', None)": [
                        40
                    ]
                }
            }
        }
    },
    "1470c26cadbbfe6a7150f862766eaa30937fbd2b": {
        "authored_data": "2020 Dec 17 19:36",
        "commit.message": "Fix spelling.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "4cf5b340bfb881457fc03819f1b2a651c798c5af",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', None)": [
                        85,
                        87,
                        88,
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', None)": [
                        85,
                        87,
                        88,
                        89
                    ]
                }
            }
        }
    },
    "4cf5b340bfb881457fc03819f1b2a651c798c5af": {
        "authored_data": "2020 Dec 10 06:56",
        "commit.message": "document COMPRESS-559 and make some comments\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "d98e849850a33c1762d318108cb21d8e210388fc",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        181,
                        182,
                        183
                    ]
                }
            }
        }
    },
    "d98e849850a33c1762d318108cb21d8e210388fc": {
        "authored_data": "2020 Dec 08 19:49",
        "commit.message": "COMPRESS-559: Skip extracting with GNU tar 1.28\n\nIt is known to be broken for the archive the test will extract\n",
        "commit.author.name": "theobisproject",
        "pcid": "75a16c23c73010988dc6dad08397ab4cc51e3533",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        181,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', None)": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'getTarBinaryHelp')": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252
                    ],
                    "(None, None)": [
                        253
                    ]
                }
            }
        }
    },
    "75a16c23c73010988dc6dad08397ab4cc51e3533": {
        "authored_data": "2020 Nov 22 12:58",
        "commit.message": "COMPRESS-559: Extract sparsefile-0.1 also on Linux\n",
        "commit.author.name": "theobisproject",
        "pcid": "05a995ee725f153b39be111c8b51adbed24d30a4",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        192,
                        193,
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        194
                    ]
                }
            }
        }
    },
    "05a995ee725f153b39be111c8b51adbed24d30a4": {
        "authored_data": "2020 Nov 30 02:01",
        "commit.message": "do not use wildcard imports\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "1258341b941928b587102fd2b29574e00621087a",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "(None, None)": [
                        29
                    ]
                },
                "new": {
                    "(None, None)": [
                        29,
                        30,
                        31,
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        27,
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ChainingTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/IOMethodsTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java": {
                "old": {
                    "(None, None)": [
                        3
                    ]
                },
                "new": {
                    "(None, None)": [
                        3,
                        4,
                        5
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "(None, None)": [
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        24
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        28,
                        29,
                        30,
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256DecoderTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "(None, None)": [
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "(None, None)": [
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23,
                        24,
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25,
                        26
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25,
                        26
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GzipUtilsTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/XZTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        32
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ]
                }
            }
        }
    }
}