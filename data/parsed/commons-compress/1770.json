{
    "ab17a70527ee46e3632be8911a31931fc3e78183": {
        "authored_data": "2016 Apr 09 16:04",
        "commit.message": "Add missing '@Override' annotations to implementations of interface\nmethods.",
        "commit.author.name": "ggregory",
        "pcid": "35d616f8e3d5ac2af4e982bc5092f71ac67485ec",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', None)": [
                        120,
                        125,
                        150,
                        159
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', None)": [
                        49,
                        63,
                        72,
                        92
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        425,
                        522,
                        586,
                        623
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        566,
                        600,
                        609,
                        699
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        141
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', None)": [
                        60,
                        95,
                        200,
                        410
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        129
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', None)": [
                        109
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        422,
                        633,
                        672,
                        847
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        48,
                        51,
                        63
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        130,
                        143,
                        151,
                        156,
                        161,
                        186
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', None)": [
                        92,
                        102,
                        117,
                        127,
                        160,
                        266,
                        304
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', None)": [
                        68,
                        77,
                        89
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/JarMarker.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#JarMarker', None)": [
                        51,
                        61,
                        71,
                        81,
                        91,
                        104,
                        116
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', None)": [
                        58,
                        71,
                        119
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', None)": [
                        89,
                        110,
                        120,
                        141,
                        154,
                        171,
                        187
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        175
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', None)": [
                        62,
                        220,
                        239,
                        267
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        207
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnicodeCommentExtraField', None)": [
                        65
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnicodePathExtraField', None)": [
                        64
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnparseableExtraFieldData', None)": [
                        42,
                        52,
                        62,
                        74,
                        84,
                        97,
                        110
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', None)": [
                        48,
                        72,
                        81,
                        105,
                        117,
                        131,
                        144
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', None)": [
                        80,
                        91,
                        109,
                        120,
                        142,
                        155,
                        180
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', None)": [
                        129,
                        140,
                        159,
                        172,
                        201,
                        220,
                        248
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', None)": [
                        84,
                        133,
                        148,
                        159,
                        197,
                        210,
                        232
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', None)": [
                        106,
                        111,
                        116,
                        124,
                        137,
                        152,
                        182
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        757
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        242,
                        1095
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java": {
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', None)": [
                        247,
                        251,
                        255,
                        270,
                        274,
                        278
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'getValue')": [
                        45
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'reset')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        54
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', None)": [
                        45,
                        51,
                        56,
                        97
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'getValue')": [
                        46
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'reset')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        57
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        98
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java": {
                "new": {
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        42,
                        47,
                        56,
                        61
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', None)": [
                        57
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveReadTest.java": {
                "new": {
                    "('org.apache.commons.compress#ArchiveReadTest', 'data')": [
                        80
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        86
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        86
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        316
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.memory#MemoryArchiveEntry', None)": [
                        33,
                        38,
                        44,
                        50
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi')": [
                        81
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        132
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'createPayloadSupplier(ByteArrayInputStream)')": [
                        82
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'readSelfGenerated100KFilesUsingZipFile')": [
                        351
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        519
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryKnownSizeToStreamModeNever')": [
                        1224
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFiles(Zip64Mode)')": [
                        207
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        325,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'readSelfGenerated100KFilesUsingZipFile')": [
                        353,
                        354
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        378
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        524,
                        525
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        579
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryModeNever(boolean)')": [
                        761
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        819
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryUnknownSizeToStream(Zip64Mode)')": [
                        1006
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1063
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryKnownSizeToStreamModeNever')": [
                        1235,
                        1236
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFileModeNever(boolean)')": [
                        1269
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntry(boolean,Zip64Mode)')": [
                        1325
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1504
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        1667
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1840
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        2023
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2198
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "new": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtraction')": [
                        41
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactory')": [
                        51
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactoryAutodetection')": [
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "new": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchive')": [
                        40
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaFactory')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaAutoDetection')": [
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java": {
                "new": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkip')": [
                        37
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingRead')": [
                        47
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkipAndRead')": [
                        62
                    ]
                }
            }
        }
    },
    "8954b8be675333bafc75f9c3ccbf1839bbff8c62": {
        "authored_data": "2016 Apr 09 15:59",
        "commit.message": "Refactor magic string.",
        "commit.author.name": "ggregory",
        "pcid": "ac6b5f3a7e1dc36c9ec4f2d34a20f311ee760900",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'getName')": [
                        53,
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'getName')": [
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readString(DataInputStream)')": [
                        117,
                        118,
                        119
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', None)": [
                        120,
                        336
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'getNextEntry')": [
                        333,
                        334,
                        335
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readString(DataInputStream)')": [
                        117,
                        118,
                        119
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'getNextEntry')": [
                        332,
                        333,
                        334
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedRandomAccessFileInputStream', 'read')": [
                        39,
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedRandomAccessFileInputStream', 'read')": [
                        40
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'getCreationDate')": [
                        150,
                        151,
                        152
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', None)": [
                        153,
                        205,
                        256
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'getLastModifiedDate')": [
                        202,
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'getAccessDate')": [
                        253,
                        254,
                        255
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'getCreationDate')": [
                        150,
                        151,
                        152
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'getLastModifiedDate')": [
                        201,
                        202,
                        203
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'getAccessDate')": [
                        251,
                        252,
                        253
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readUnpackInfo(DataInput,Archive)')": [
                        384,
                        385,
                        386,
                        387
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(DataInput,Archive)')": [
                        650,
                        651,
                        652,
                        654,
                        655,
                        656,
                        657,
                        658,
                        659,
                        660,
                        661,
                        662,
                        663,
                        664,
                        665,
                        666,
                        675,
                        676,
                        677,
                        678,
                        679,
                        680,
                        690,
                        691,
                        692,
                        693,
                        694,
                        695,
                        705,
                        706,
                        707,
                        708,
                        709,
                        710,
                        720,
                        721,
                        722,
                        723,
                        724,
                        725
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        891,
                        892
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        893
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readUnpackInfo(DataInput,Archive)')": [
                        384,
                        385,
                        386
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(DataInput,Archive)')": [
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        657,
                        658,
                        659,
                        660,
                        662,
                        663,
                        664,
                        673,
                        674,
                        675,
                        676,
                        677,
                        687,
                        688,
                        689,
                        690,
                        691,
                        701,
                        702,
                        703,
                        704,
                        705,
                        715,
                        716,
                        717,
                        718,
                        719
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        885,
                        886
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'get')": [
                        70,
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'get')": [
                        71
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'encode(String)')": [
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'decode(byte)')": [
                        91,
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'encode(String)')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'decode(byte)')": [
                        91
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        324,
                        325
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', None)": [
                        326
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        324,
                        325
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        565,
                        566
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', None)": [
                        567
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        565,
                        566
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        657,
                        658,
                        659
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        660
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        657,
                        658,
                        659
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getUnixSymlink(ZipArchiveEntry)')": [
                        478,
                        479
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        480
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getUnixSymlink(ZipArchiveEntry)')": [
                        478,
                        479
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'adjustToLong(int)')": [
                        102,
                        103
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', None)": [
                        104,
                        140,
                        178,
                        197
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'bigToLong(BigInteger)')": [
                        138,
                        139
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'signedByteToUnsignedInt(byte)')": [
                        176,
                        177
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'unsignedIntToSignedByte(int)')": [
                        195,
                        196
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        357,
                        358
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'adjustToLong(int)')": [
                        102,
                        103
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'bigToLong(BigInteger)')": [
                        137,
                        138
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'signedByteToUnsignedInt(byte)')": [
                        174,
                        175
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'unsignedIntToSignedByte(int)')": [
                        192,
                        193
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        354
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSet.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSet', 'addAddition(Change)')": [
                        111,
                        112,
                        113
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSet', 'addAddition(Change)')": [
                        112,
                        113
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read')": [
                        143,
                        144
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', None)": [
                        145,
                        319,
                        840,
                        858,
                        899,
                        927
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        633,
                        634,
                        649,
                        650,
                        651,
                        716,
                        717,
                        732,
                        733
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode0(int)')": [
                        767,
                        768,
                        769
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupRandPartA')": [
                        836,
                        837,
                        838,
                        839
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartA')": [
                        853,
                        854,
                        855,
                        856,
                        857
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupRandPartC')": [
                        894,
                        895,
                        896,
                        897,
                        898
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartC')": [
                        923,
                        924,
                        925,
                        926
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read')": [
                        143,
                        144
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        632,
                        647,
                        648,
                        713,
                        728
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode0(int)')": [
                        761,
                        762
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupRandPartA')": [
                        829,
                        830,
                        831,
                        832
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartA')": [
                        845,
                        846,
                        847,
                        848,
                        849
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupRandPartC')": [
                        885,
                        886,
                        887,
                        888,
                        889
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartC')": [
                        913,
                        914,
                        915,
                        916
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'mainSimpleSort(BZip2CompressorOutputStream,int,int,int,int)')": [
                        728,
                        729,
                        730,
                        731,
                        732,
                        733
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'mainSimpleSort(BZip2CompressorOutputStream,int,int,int,int)')": [
                        728,
                        729,
                        731
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BoundedInputStream', 'read')": [
                        48,
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BoundedInputStream', 'read')": [
                        49
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'skip(long)')": [
                        101,
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'skip(long)')": [
                        102
                    ]
                }
            }
        }
    },
    "ac6b5f3a7e1dc36c9ec4f2d34a20f311ee760900": {
        "authored_data": "2016 Apr 09 15:55",
        "commit.message": "Refactor magic string.",
        "commit.author.name": "ggregory",
        "pcid": "e21728cef4e89ff5fb173c230d56d16d424dc6c2",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        231,
                        240
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        360,
                        373,
                        376
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        45,
                        46,
                        233,
                        242
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        362,
                        375,
                        378
                    ]
                }
            }
        }
    },
    "e21728cef4e89ff5fb173c230d56d16d424dc6c2": {
        "authored_data": "2016 Apr 09 15:54",
        "commit.message": "Statement unnecessarily nested within else clause.",
        "commit.author.name": "ggregory",
        "pcid": "05bb97bf769913d05fc4c49b625149c8ba92bf66",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        371,
                        372,
                        373,
                        374
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        371,
                        372,
                        373
                    ]
                }
            }
        }
    },
    "05bb97bf769913d05fc4c49b625149c8ba92bf66": {
        "authored_data": "2016 Apr 09 08:00",
        "commit.message": "Use blocks.",
        "commit.author.name": "ggregory",
        "pcid": "8d72635b9f244fc070d7b5f0d22e6d1211a153c9",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSample.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', 'addEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        35,
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', 'addEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        35,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', None)": [
                        39
                    ]
                }
            }
        }
    },
    "8d72635b9f244fc070d7b5f0d22e6d1211a153c9": {
        "authored_data": "2016 Apr 09 07:59",
        "commit.message": "Add final modifier to private fields.",
        "commit.author.name": "ggregory",
        "pcid": "24e938962728b05aa5b21654ea7146bab8302f4c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        80
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveReadTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        54
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        61
                    ]
                }
            }
        }
    },
    "24e938962728b05aa5b21654ea7146bab8302f4c": {
        "authored_data": "2016 Apr 09 07:56",
        "commit.message": "Add missing '@Override' annotations.",
        "commit.author.name": "ggregory",
        "pcid": "ab85f00b6d327907ee23291979a6998c54cf88ad",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        273,
                        288,
                        303
                    ]
                }
            }
        }
    },
    "ab85f00b6d327907ee23291979a6998c54cf88ad": {
        "authored_data": "2016 Apr 09 07:55",
        "commit.message": "These static fields should be accessed directly.",
        "commit.author.name": "ggregory",
        "pcid": "999821c2549e641bd9c9a223be04497982eebaca",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'deflate(InputStream,int)')": [
                        171
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        189
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'deflate(InputStream,int)')": [
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        190
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        308
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        308
                    ]
                }
            }
        }
    },
    "999821c2549e641bd9c9a223be04497982eebaca": {
        "authored_data": "2016 Apr 09 00:42",
        "commit.message": "Simplify",
        "commit.author.name": "Sebb",
        "pcid": "1935e35490009d8fa1ca62f92a861ef6d958bd5b",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', None)": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        118,
                        119,
                        120
                    ],
                    "(None, None)": [
                        121,
                        122,
                        123
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', None)": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        118
                    ]
                }
            }
        }
    }
}