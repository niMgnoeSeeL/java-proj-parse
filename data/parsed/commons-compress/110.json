{
    "e1342d9849393dbe75188738b2798ff03b872954": {
        "authored_data": "2022 May 05 13:29",
        "commit.message": "Refactor commons code.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "66b946e73f0099cdfd410cc7a360be7367ce9596",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read')": [
                        81,
                        82,
                        83
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte,int,int)')": [
                        114,
                        115,
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', None)": [
                        31,
                        122
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read')": [
                        82
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte,int,int)')": [
                        113
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'verify')": [
                        123,
                        124,
                        125
                    ],
                    "(None, None)": [
                        126,
                        127
                    ]
                }
            }
        }
    },
    "66b946e73f0099cdfd410cc7a360be7367ce9596": {
        "authored_data": "2022 May 05 13:26",
        "commit.message": "Sort members.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "4f5af021834caab4dab3b08cd89db30fff6830ec",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', None)": [
                        112,
                        113,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'close')": [
                        114,
                        115
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'getBytesRemaining')": [
                        122,
                        123
                    ],
                    "(None, None)": [
                        124
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', None)": [
                        50,
                        51,
                        52,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'close')": [
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'getBytesRemaining')": [
                        61,
                        62
                    ]
                }
            }
        }
    },
    "4f5af021834caab4dab3b08cd89db30fff6830ec": {
        "authored_data": "2022 May 05 13:26",
        "commit.message": "ChecksumVerifyingInputStream.read() does not always validate checksum at\nend-of-stream.",
        "commit.author.name": "Gary Gregory",
        "pcid": "e92befb0002ea07d453be86cc9cf746b99fed834",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read')": [
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read')": [
                        68
                    ]
                }
            }
        }
    },
    "e92befb0002ea07d453be86cc9cf746b99fed834": {
        "authored_data": "2022 May 05 13:23",
        "commit.message": "Javadoc & use a ternary expression.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "63cd3cebc164e3b38278f260e81c384eb6508d7a",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CRC32VerifyingInputStream', None)": [
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CRC32VerifyingInputStream', None)": [
                        32,
                        33,
                        43,
                        44,
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'skip(long)')": [
                        102,
                        103,
                        104,
                        105
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'skip(long)')": [
                        110
                    ]
                }
            }
        }
    },
    "63cd3cebc164e3b38278f260e81c384eb6508d7a": {
        "authored_data": "2022 May 05 13:14",
        "commit.message": "Remove unused exception from private method signature.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "7927664546adf899aeaa89694b07296d4b5e323d",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'utf16Decode(char)')": [
                        2058
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'utf16Decode(char)')": [
                        2058
                    ]
                }
            }
        }
    },
    "cf7bcef58493cef99b90f1c9943893944f7598bc": {
        "authored_data": "2022 Apr 22 21:09",
        "commit.message": "Avoid use C-style array declaration. (#282)\n\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "9273cfa0f23ef41b81a10bb6c6cf98d2abcefe5c",
        "changes": {
            "src/main/java/org/apache/commons/compress/harmony/pack200/Codec.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#Codec', 'decodeInts(int,InputStream)')": [
                        148
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Codec', 'decodeInts(int,InputStream,int)')": [
                        169
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#Codec', 'decodeInts(int,InputStream)')": [
                        148
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Codec', 'decodeInts(int,InputStream,int)')": [
                        169
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/PopulationCodec.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#PopulationCodec', 'decodeInts(int,InputStream)')": [
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#PopulationCodec', 'decodeInts(int,InputStream)')": [
                        64
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/Archive.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#Archive', 'unpack')": [
                        113
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#Archive', 'unpack')": [
                        113
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/BandSet.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseFlags(String,InputStream,int,BHSDCodec,boolean)')": [
                        165
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)')": [
                        175
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseReferences(String,InputStream,BHSDCodec,int,String)')": [
                        247
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseFlags(String,InputStream,int,BHSDCodec,boolean)')": [
                        165
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)')": [
                        175
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseReferences(String,InputStream,BHSDCodec,int,String)')": [
                        247
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/CpBands.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#CpBands', 'parseCpFloat(InputStream)')": [
                        217
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#CpBands', 'parseCpUtf8(InputStream)')": [
                        379
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#CpBands', 'parseCpFloat(InputStream)')": [
                        217
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#CpBands', 'parseCpUtf8(InputStream)')": [
                        379
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/IcTuple.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#IcTuple', 'initializeClassStrings')": [
                        203
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#IcTuple', 'initializeClassStrings')": [
                        203
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/Segment.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#Segment', 'buildClassFile(int)')": [
                        190,
                        195,
                        207
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#Segment', 'buildClassFile(int)')": [
                        190,
                        195,
                        207
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/SegmentConstantPool.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentConstantPool', 'getClassSpecificPoolEntry(int,long,String)')": [
                        112
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#SegmentConstantPool', 'getClassPoolEntry(String)')": [
                        133
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentConstantPool', 'getClassSpecificPoolEntry(int,long,String)')": [
                        112
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#SegmentConstantPool', 'getClassPoolEntry(String)')": [
                        133
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/SegmentHeader.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentHeader', 'read(InputStream)')": [
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentHeader', 'read(InputStream)')": [
                        104
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode#CodeAttribute', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode#CodeAttribute', None)": [
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/bytecode/forms/LookupSwitchForm.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode.forms#LookupSwitchForm', 'setByteCodeOperands(ByteCode,OperandManager,int)')": [
                        41,
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode.forms#LookupSwitchForm', 'setByteCodeOperands(ByteCode,OperandManager,int)')": [
                        41,
                        45
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/bytecode/forms/TableSwitchForm.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode.forms#TableSwitchForm', 'setByteCodeOperands(ByteCode,OperandManager,int)')": [
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode.forms#TableSwitchForm', 'setByteCodeOperands(ByteCode,OperandManager,int)')": [
                        44
                    ]
                }
            }
        }
    }
}