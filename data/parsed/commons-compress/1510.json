{
    "c0932797ed15a9e0f49617b5b96bcb0f7827bc35": {
        "authored_data": "2017 Jan 24 13:13",
        "commit.message": "consolidate little endian conversions\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0eef29b38c209b7af55d9d867adb280ef079a15d",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert64(byte,int)')": [
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert32(byte,int)')": [
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert16(byte,int)')": [
                        129,
                        130,
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'decode(ZipEncoding,byte,int,int)')": [
                        141,
                        142,
                        143
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert64(byte,int)')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert32(byte,int)')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert16(byte,int)')": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'decode(ZipEncoding,byte,int,int)')": [
                        123
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsAsProperties(Object)')": [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', None)": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getDictionarySize(Coder)')": [
                        83,
                        84,
                        85,
                        86,
                        87
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsAsProperties(Object)')": [
                        59,
                        60,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getDictionarySize(Coder)')": [
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java": {
                "old": {
                    "(None, None)": [
                        22,
                        27
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(long,byte,int)')": [
                        151,
                        152,
                        153,
                        154
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getValue(byte,int)')": [
                        168,
                        169,
                        170,
                        171,
                        172
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        28
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(long,byte,int)')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getValue(byte,int)')": [
                        152
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java": {
                "old": {
                    "(None, None)": [
                        22,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', None)": [
                        31,
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes')": [
                        68,
                        69
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'putShort(int,byte,int)')": [
                        101,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getValue(byte,int)')": [
                        112,
                        113,
                        114
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes')": [
                        65
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'putShort(int,byte,int)')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getValue(byte,int)')": [
                        107
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        168,
                        181
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInputStream)')": [
                        236
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', None)": [
                        243,
                        244
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readLittleEndianInt(DataInputStream)')": [
                        245,
                        246,
                        247,
                        248,
                        249
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        312,
                        315,
                        323
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        34
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        170,
                        183
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInput)')": [
                        238
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        307,
                        310,
                        318
                    ]
                }
            }
        }
    },
    "0eef29b38c209b7af55d9d867adb280ef079a15d": {
        "authored_data": "2017 Jan 24 12:46",
        "commit.message": "byte[] output version\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "22252ae11d08dcb02a89b295e227e9a5a39e0d67",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtils', None)": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        161,
                        162,
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(byte,long,int,int)')": [
                        156,
                        157,
                        158,
                        159,
                        160
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "new": {
                    "(None, None)": [
                        28,
                        206
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', None)": [
                        193,
                        194,
                        199,
                        200,
                        201
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArray')": [
                        195,
                        196,
                        197,
                        198
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArrayUnsignedInt32')": [
                        202,
                        203,
                        204,
                        205
                    ]
                }
            }
        }
    },
    "22252ae11d08dcb02a89b295e227e9a5a39e0d67": {
        "authored_data": "2017 Jan 24 12:27",
        "commit.message": "DataInput and DataOutput versions\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "bd0b4b60676525a5eb6733a6ad27c67319bec59f",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', None)": [
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        146,
                        147,
                        148,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        198,
                        199,
                        200,
                        201
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(DataInput,int)')": [
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(DataOutput,long,int)')": [
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25,
                        26,
                        190,
                        191
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInput')": [
                        119,
                        120,
                        121
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', None)": [
                        122,
                        123,
                        124,
                        128,
                        129,
                        130,
                        134,
                        135,
                        136,
                        140,
                        141,
                        142,
                        174,
                        181,
                        182,
                        183
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputUnsignedInt32')": [
                        125,
                        126,
                        127
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForLengthTooBig')": [
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForPrematureEnd')": [
                        137,
                        138,
                        139
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutput')": [
                        175,
                        176,
                        177,
                        178,
                        179,
                        180
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutputUnsignedInt32')": [
                        184,
                        185,
                        186,
                        187,
                        188,
                        189
                    ]
                }
            }
        }
    },
    "bd0b4b60676525a5eb6733a6ad27c67319bec59f": {
        "authored_data": "2017 Jan 24 12:25",
        "commit.message": "fromLittleEndian failed for bytes > 127 if shift was bigger than three bytes\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2820db32e3fdeff47fbf6cb4be39eeebc1ed287e",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(InputStream,int)')": [
                        89,
                        93
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(ByteSupplier,int)')": [
                        118
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(OutputStream,long,int)')": [
                        137
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(InputStream,int)')": [
                        89,
                        93
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(ByteSupplier,int)')": [
                        118
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(OutputStream,long,int)')": [
                        137
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', None)": [
                        39,
                        43,
                        44,
                        56,
                        60,
                        61,
                        71,
                        72,
                        73,
                        94,
                        95,
                        96,
                        128,
                        129,
                        130,
                        137,
                        138
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayOneArgUnsignedInt32')": [
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayUnsignedInt32')": [
                        57,
                        58,
                        59
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamUnsignedInt32')": [
                        74,
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierUnsignedInt32')": [
                        97,
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToStreamUnsignedInt32')": [
                        123,
                        124,
                        125,
                        126,
                        127
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToConsumerUnsignedInt32')": [
                        139,
                        140,
                        141,
                        142,
                        143
                    ],
                    "(None, None)": [
                        144,
                        145
                    ]
                }
            }
        }
    },
    "2820db32e3fdeff47fbf6cb4be39eeebc1ed287e": {
        "authored_data": "2017 Jan 24 07:02",
        "commit.message": "COMPRESS-271 incomplete output stream for LZ4 frame format\n\nthe resulting output will get rejected by other implementations as the\nheader checksum is incorrect. xxhash32 is up next.\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "48d7def9df1e789b5c354167f84c406b550859bb",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        541
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'getOutputStreamCompressorNames')": [
                        635
                    ]
                },
                "new": {
                    "(None, None)": [
                        43
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        542
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorOutputStream(String,OutputStream)')": [
                        593,
                        594,
                        595,
                        596
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'getOutputStreamCompressorNames')": [
                        640
                    ]
                }
            }
        }
    },
    "48d7def9df1e789b5c354167f84c406b550859bb": {
        "authored_data": "2017 Jan 24 05:33",
        "commit.message": "NotThreadSafe markers\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "226489c0f04d427f7a75468d12b7ccbdcf4c7ccf",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java": {
                "new": {
                    "(None, None)": [
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java": {
                "new": {
                    "(None, None)": [
                        39
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "new": {
                    "(None, None)": [
                        38
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', None)": [
                        45
                    ]
                }
            }
        }
    },
    "226489c0f04d427f7a75468d12b7ccbdcf4c7ccf": {
        "authored_data": "2017 Jan 23 07:48",
        "commit.message": "COMPRESS-271 test for single-byte read and premature close\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "3f839db3d391bb92b2ece5810b422ca1725f35ba",
        "changes": {
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readsUncompressedBlocksUsingSingleByteRead')": [
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', None)": [
                        201,
                        202,
                        203,
                        204
                    ]
                }
            }
        }
    },
    "3f839db3d391bb92b2ece5810b422ca1725f35ba": {
        "authored_data": "2017 Jan 23 07:47",
        "commit.message": "use the accessors for factory's constants\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "06d761908b2567f292be102de36f88e230e5ffed",
        "changes": {
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundtripViaFactory')": [
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundtripViaFactory')": [
                        83
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactory')": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactory')": [
                        65
                    ]
                }
            }
        }
    },
    "06d761908b2567f292be102de36f88e230e5ffed": {
        "authored_data": "2017 Jan 23 07:44",
        "commit.message": "COMPRESS-271 correctly set inUncompressed\n\nI don't understand why the readBla... tests have passed before, makes\nme doubt the tests\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "9e794113568476a20990abc075b6e85be11f1562",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        179
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        179
                    ]
                }
            }
        }
    },
    "9e794113568476a20990abc075b6e85be11f1562": {
        "authored_data": "2017 Jan 23 07:27",
        "commit.message": "COMPRESS-271 forgot to read content checksum\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "45668bfc168f43bca1be6813580411a01454a807",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', None)": [
                        194,
                        195,
                        196,
                        197
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'verifyContentChecksum')": [
                        198,
                        199,
                        200,
                        201,
                        202,
                        203
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', None)": [
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithoutContentChecksum')": [
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224
                    ],
                    "(None, None)": [
                        225,
                        226
                    ]
                }
            }
        }
    }
}