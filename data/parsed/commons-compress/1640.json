{
    "696dbe907ffca38068ab0d1be2bb4b4c51e07d38": {
        "authored_data": "2016 Dec 09 03:47",
        "commit.message": "Fix Javadoc 8 errors.",
        "commit.author.name": "Gary Gregory",
        "pcid": "dd9f8951419a0431f0c7f1bf65fd995e3c12e6d2",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            }
        }
    },
    "dd9f8951419a0431f0c7f1bf65fd995e3c12e6d2": {
        "authored_data": "2016 Dec 09 03:46",
        "commit.message": "Refactor code into a reusable output stream.",
        "commit.author.name": "Gary Gregory",
        "pcid": "7e691897adafa5e5e847c259a88dfc81b8cec880",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        121
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        121,
                        122
                    ]
                }
            }
        }
    },
    "7e691897adafa5e5e847c259a88dfc81b8cec880": {
        "authored_data": "2016 Dec 09 03:46",
        "commit.message": "Fix Javadoc 8 errors.",
        "commit.author.name": "Gary Gregory",
        "pcid": "fa4f029fb82a98aa074914a6c936b51914f50e04",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java": {
                "old": {
                    "(None, None)": [
                        37,
                        38,
                        39,
                        40,
                        43,
                        44,
                        61,
                        62,
                        65,
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        50,
                        51,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        77,
                        78
                    ]
                }
            }
        }
    },
    "fa4f029fb82a98aa074914a6c936b51914f50e04": {
        "authored_data": "2016 Dec 09 03:41",
        "commit.message": "Formatting.",
        "commit.author.name": "Gary Gregory",
        "pcid": "c7c2fe4ee59a61b387945ff9b99b8e38b308c6a7",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', None)": [
                        98,
                        105,
                        111,
                        118,
                        124,
                        130,
                        136,
                        167
                    ]
                }
            }
        }
    },
    "77579145e7f4050dd5f7677f4a427d33cafd450f": {
        "authored_data": "2016 Dec 09 02:55",
        "commit.message": "Refactor code into a reusable output stream.",
        "commit.author.name": "Gary Gregory",
        "pcid": "99eb4cb217471ce5cf1cac6a1dadaa071fd27a48",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        121,
                        122,
                        123,
                        124,
                        125,
                        126
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        121
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java": {
                "old": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'encode(OutputStream,Object)')": [
                        49,
                        50,
                        51
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', None)": [
                        52,
                        53,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'encode(OutputStream,Object)')": [
                        49,
                        50
                    ]
                }
            }
        }
    },
    "99eb4cb217471ce5cf1cac6a1dadaa071fd27a48": {
        "authored_data": "2016 Dec 09 02:42",
        "commit.message": "Remove unused imports.",
        "commit.author.name": "Gary Gregory",
        "pcid": "d5f30621233501fadebe82521dae5ad4878c53cc",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "(None, None)": [
                        41
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        22,
                        23
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "(None, None)": [
                        31
                    ]
                }
            }
        }
    },
    "fdbfa5d962dbc31a2c77fc3d2d5e0f07b36f732f": {
        "authored_data": "2016 Dec 03 17:17",
        "commit.message": "COMPRESS-375 Allow the deferred creation of `ZipArchiveEntry` for parallel zips\n\nIn some cases when creating parallel zip archive the `ZipArchiveEntry`\nto be added could not be created before the `InputStream` is read.\nIn those cases there is no point in passing `ZipArchiveEntry` and\n`InputStreamSupplier` as you can't actually defer the creation\nof the `InputStream` as it's needed for the `ZipArchiveEntry`.\n\nAdd `ZipArchiveEntryRequestSupplier` to allow the deferred\ncreation of both `ZipArchiveEntry` and `InputStream`.\n",
        "commit.author.name": "Plamen Totev",
        "pcid": "9238eab678395743bce4bd273c4534d10f77f715",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        150,
                        151,
                        152,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        218,
                        219,
                        220
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'addArchiveEntry(ZipArchiveEntryRequestSupplier)')": [
                        148,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntryRequestSupplier)')": [
                        212,
                        213,
                        214,
                        215,
                        216,
                        217
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        116,
                        121
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        131,
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        116,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        142,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ]
                }
            }
        }
    }
}