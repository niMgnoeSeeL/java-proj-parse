{
    "adab245db9e187b47d1089bab9fea927cce6f6d5": {
        "authored_data": "2021 Jan 17 01:42",
        "commit.message": "Use isEmpty().\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "0bdc4081822323f582062cbf385ff9fb85ada562",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skipSparse(long)')": [
                        301
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skipSparse(long)')": [
                        301
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'concurrent')": [
                        76
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier,int)')": [
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'concurrent')": [
                        76
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier,int)')": [
                        140
                    ]
                }
            }
        }
    },
    "0bdc4081822323f582062cbf385ff9fb85ada562": {
        "authored_data": "2021 Jan 16 19:11",
        "commit.message": "Define and reuse constants.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "46b652c36e28f10b7a373190235370801f10288f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/examples/Archiver.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        55,
                        64
                    ]
                },
                "new": {
                    "(None, None)": [
                        44
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        64
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Archive', None)": [
                        32,
                        36
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Archive', None)": [
                        32,
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', None)": [
                        29,
                        30
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsAsProperties(Object)')": [
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsAsProperties(Object)')": [
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', None)": [
                        47
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', None)": [
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readStreamsInfo(ByteBuffer,Archive)')": [
                        644
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        1114
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecodingStream(int,boolean)')": [
                        1197
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getCurrentStream')": [
                        1428
                    ]
                },
                "new": {
                    "(None, None)": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readStreamsInfo(ByteBuffer,Archive)')": [
                        645
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        1115
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecodingStream(int,boolean)')": [
                        1198
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getCurrentStream')": [
                        1429
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        163
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        1388,
                        1399,
                        1400,
                        1401
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        163
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        1388,
                        1399,
                        1400,
                        1401
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        223
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        223
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        419,
                        420
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/JarMarker.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#JarMarker', None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'getLocalFileDataData')": [
                        83
                    ],
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'getCentralDirectoryData')": [
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'getLocalFileDataData')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'getCentralDirectoryData')": [
                        94
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getCentralDirectoryData')": [
                        212
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getCentralDirectoryData')": [
                        214
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', None)": [
                        50,
                        51
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'getLocalFileDataData')": [
                        134
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'getLocalFileDataData')": [
                        134
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        66,
                        67,
                        147
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtraFields(ZipExtraField)')": [
                        453
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(ExtraFieldParsingBehavior)')": [
                        528
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getParseableExtraFieldsNoCopy')": [
                        533
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getUnparseableOnly')": [
                        562
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'removeExtraField(ZipShort)')": [
                        658
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getLocalFileDataExtra')": [
                        753
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        152
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtraFields(ZipExtraField)')": [
                        452
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(ExtraFieldParsingBehavior)')": [
                        527
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getParseableExtraFieldsNoCopy')": [
                        532
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getUnparseableOnly')": [
                        561
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'removeExtraField(ZipShort)')": [
                        657
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getLocalFileDataExtra')": [
                        752
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        149,
                        150
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'preClose')": [
                        652
                    ]
                },
                "new": {
                    "(None, None)": [
                        55
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'preClose')": [
                        651
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder(String)')": [
                        491
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder(String)')": [
                        491
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        291
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        292
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtils', None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', None)": [
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', None)": [
                        64
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'cantRead7zFromStream')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testDetect')": [
                        247
                    ]
                },
                "new": {
                    "(None, None)": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'cantRead7zFromStream')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testDetect')": [
                        248
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryRead')": [
                        523
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileDirectoryRead')": [
                        536
                    ]
                },
                "new": {
                    "(None, None)": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryRead')": [
                        524
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileDirectoryRead')": [
                        537
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZNativeHeapTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZNativeHeapTest', 'testEndInflaterOnCloseStream')": [
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZNativeHeapTest', 'testEndInflaterOnCloseStream')": [
                        55
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesAndEmptyFiles')": [
                        84,
                        92
                    ]
                },
                "new": {
                    "(None, None)": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesAndEmptyFiles')": [
                        85,
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testEmptyStream')": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testNextByteFromEmptyStream')": [
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testEmptyStream')": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testNextByteFromEmptyStream')": [
                        68
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testTrimLeadingZeroesForceMinLength4')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'parseReparse(long,long,byte,long,long)')": [
                        232
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testTrimLeadingZeroesForceMinLength4')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'parseReparse(long,long,byte,long,long)')": [
                        233
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFields')": [
                        55
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFieldMerging')": [
                        109
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testAddAsFirstExtraField')": [
                        156
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'parsingModeBehaviorTestData')": [
                        366
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFields')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFieldMerging')": [
                        110
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testAddAsFirstExtraField')": [
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'parsingModeBehaviorTestData')": [
                        367
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown')": [
                        327
                    ]
                },
                "new": {
                    "(None, None)": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown')": [
                        328
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'throwsExceptionWhenWritingPreamble')": [
                        770
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertAllReadMethods(byte,ZipFile,ZipArchiveEntry)')": [
                        874,
                        890
                    ]
                },
                "new": {
                    "(None, None)": [
                        55
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'throwsExceptionWhenWritingPreamble')": [
                        771
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertAllReadMethods(byte,ZipFile,ZipArchiveEntry)')": [
                        875,
                        891
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetection')": [
                        122
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetect')": [
                        148
                    ]
                },
                "new": {
                    "(None, None)": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetection')": [
                        123
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetect')": [
                        149
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'prefillCanBeUsedForBackReferences')": [
                        63
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'ifPrefillExceedsWindowSizeTheLastBytesAreUsed')": [
                        77
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'prefillCanBeUsedForBackReferences')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'ifPrefillExceedsWindowSizeTheLastBytesAreUsed')": [
                        78
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayThrowsForLengthTooBig')": [
                        72
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamThrowsForLengthTooBig')": [
                        89
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierThrowsForLengthTooBig')": [
                        113
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForLengthTooBig')": [
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayThrowsForLengthTooBig')": [
                        72
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamThrowsForLengthTooBig')": [
                        89
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierThrowsForLengthTooBig')": [
                        113
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForLengthTooBig')": [
                        136
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testSkipReturningZero')": [
                        44,
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testSkipReturningZero')": [
                        44
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'copyThrowsOnZeroBufferSize')": [
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'copyThrowsOnZeroBufferSize')": [
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeEmpty')": [
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeEmpty')": [
                        147
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forOrderedSeekableByteChannelsReturnsIdentityForSingleElement')": [
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forOrderedSeekableByteChannelsReturnsIdentityForSingleElement')": [
                        102
                    ]
                }
            }
        }
    },
    "f36fe7e9715e063f500231d8cccae7cfef4f42e6": {
        "authored_data": "2021 Jan 04 15:53",
        "commit.message": "COMPRESS-540: Tar entry offset should not be smaller than 0\n",
        "commit.author.name": "theobisproject",
        "pcid": "34759ba88f8121e5ac4332c4b2150e758e27cbb2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        571
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        571
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setDataOffset(long)')": [
                        1220,
                        1221,
                        1222
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "new": {
                    "(None, None)": [
                        37,
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', None)": [
                        246,
                        269,
                        270,
                        271,
                        274,
                        275
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'negativeOffsetInConstructorNotAllowed')": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'negativeOffsetInSetterNotAllowed')": [
                        272,
                        273
                    ]
                }
            }
        }
    },
    "34759ba88f8121e5ac4332c4b2150e758e27cbb2": {
        "authored_data": "2020 Dec 30 16:26",
        "commit.message": "COMPRESS-540: Remove commented out code in test\n",
        "commit.author.name": "theobisproject",
        "pcid": "20f8b3e7292a6571b34690b1b408e93e0b81b42b",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testTarFileOldGNU')": [
                        82,
                        83
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveEntry,String)')": [
                        125,
                        126
                    ]
                }
            }
        }
    },
    "20f8b3e7292a6571b34690b1b408e93e0b81b42b": {
        "authored_data": "2020 Dec 29 21:38",
        "commit.message": "COMPRESS-540: Include changes from COMPRESS-559\n",
        "commit.author.name": "theobisproject",
        "pcid": "53bc2f725b006d54c1b1d94cc2970de818440dea",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testTarFileExtractPaxGNU')": [
                        382,
                        383,
                        385
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testTarFileExtractPaxGNU')": [
                        371,
                        372,
                        373,
                        374,
                        375,
                        388
                    ]
                }
            }
        }
    },
    "53bc2f725b006d54c1b1d94cc2970de818440dea": {
        "authored_data": "2020 Dec 26 11:56",
        "commit.message": "COMPRESS-540: Rename BoundedNIOInputStream -> BoundedArchiveInputStream\n",
        "commit.author.name": "theobisproject",
        "pcid": "a9a03f63895cabfa903415da19a581443592ee88",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        647
                    ]
                },
                "new": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        647
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "(None, None)": [
                        48
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'createBoundedInputStream(long,long)')": [
                        1319
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1331
                    ]
                },
                "new": {
                    "(None, None)": [
                        48
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'createBoundedInputStream(long,long)')": [
                        1319
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1331
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BoundedSeekableByteChannelInputStream', None)": [
                        30
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BoundedSeekableByteChannelInputStream', None)": [
                        30
                    ]
                }
            }
        }
    },
    "a9a03f63895cabfa903415da19a581443592ee88": {
        "authored_data": "2020 Dec 26 11:46",
        "commit.message": "COMPRESS-540: Implement reading of padded last record\n",
        "commit.author.name": "theobisproject",
        "pcid": "543ac95593bcad8d656e27be1e2ce2e48cd26b4a",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'getRecord')": [
                        551,
                        552
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'getRecord')": [
                        551
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        582,
                        583,
                        584,
                        585,
                        590,
                        591,
                        592,
                        593
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'consumeRemainderOfLastBlock')": [
                        586,
                        587,
                        588,
                        589
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', None)": [
                        126,
                        127,
                        128
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarFileTest.java": {
                "new": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', None)": [
                        115,
                        116,
                        117,
                        118,
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'archiveWithTrailer')": [
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125
                    ]
                }
            }
        }
    },
    "543ac95593bcad8d656e27be1e2ce2e48cd26b4a": {
        "authored_data": "2020 Dec 25 20:37",
        "commit.message": "COMPRESS-540: Javadoc enhancement\n\n- Add thread safety information for input streams\n- Use consistent capitalization and punctuation in Javadoc\n- Use html tags for better Javadoc formatting\n",
        "commit.author.name": "theobisproject",
        "pcid": "f0aaab65408f53684efa9fc450819fff51c69436",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        559,
                        560,
                        563,
                        565,
                        566,
                        872,
                        887,
                        1216
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        559,
                        560,
                        563,
                        565,
                        566,
                        872,
                        887,
                        1216
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        335,
                        403,
                        410,
                        411,
                        413,
                        416,
                        417
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        335,
                        401,
                        404,
                        411,
                        412,
                        413,
                        415,
                        418,
                        419,
                        420,
                        422
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BoundedNIOInputStream.java": {
                "new": {
                    "(None, None)": [
                        26
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream.java": {
                "new": {
                    "(None, None)": [
                        27
                    ]
                }
            }
        }
    },
    "f0aaab65408f53684efa9fc450819fff51c69436": {
        "authored_data": "2020 Nov 13 13:08",
        "commit.message": "COMPRESS-540: Fix problems with long filenames\n\nIncludes fix for COMPRESS-558\nIf an archive contains many files with long names or a name which is larger than the buffer until know the name was wrong\nAdd missing tests from TarArchiveInputStreamTest to TarFileTest\n",
        "commit.author.name": "theobisproject",
        "pcid": "6270ff564f88804757d859cd4fb1b989df1021d9",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "(None, None)": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'getNextTarEntry')": [
                        276,
                        278,
                        279,
                        280
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'getLongNameData')": [
                        477,
                        478
                    ]
                },
                "new": {
                    "(None, None)": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'getNextTarEntry')": [
                        276,
                        277,
                        279,
                        280
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'getLongNameData')": [
                        477,
                        478,
                        479,
                        480
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "old": {
                    "(None, None)": [
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        29,
                        30,
                        588
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', None)": [
                        540,
                        541,
                        552,
                        553,
                        554,
                        555,
                        556,
                        567,
                        568,
                        569,
                        570,
                        577,
                        578
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testLongNameLargerThanBuffer')": [
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileLongNameLargerThanBuffer')": [
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        564,
                        565,
                        566
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'createLongName(int)')": [
                        571,
                        572,
                        573,
                        574,
                        575,
                        576
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'createTarWithOneLongNameEntry(String)')": [
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarFileTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        24,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        36,
                        37,
                        40,
                        42,
                        341,
                        342
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', None)": [
                        45,
                        46,
                        56,
                        57,
                        58,
                        59,
                        62,
                        63,
                        64,
                        67,
                        68,
                        78,
                        79,
                        80,
                        81,
                        86,
                        87,
                        88,
                        89,
                        110,
                        111,
                        112,
                        113,
                        126,
                        127,
                        128,
                        129,
                        140,
                        141,
                        142,
                        143,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        211,
                        212,
                        213,
                        214,
                        221,
                        222,
                        223,
                        224,
                        232,
                        233,
                        285,
                        286,
                        287,
                        288,
                        317,
                        318
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'workaroundForBrokenTimeHeader')": [
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'datePriorToEpochInGNUFormat')": [
                        60,
                        61
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'datePriorToEpochInPAXFormat')": [
                        65,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'datePriorToEpoch(String)')": [
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'testCompress197')": [
                        82,
                        83,
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'shouldUseSpecifiedEncodingWhenReadingGNULongNames')": [
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'readsArchiveCompletely_COMPRESS245')": [
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'shouldThrowAnExceptionOnTruncatedEntries')": [
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'shouldReadBigGid')": [
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'shouldReadGNULongNameEntryWithWrongName')": [
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'survivesBlankLinesInPaxHeader')": [
                        181,
                        182,
                        183,
                        184,
                        185
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'survivesPaxHeaderWithNameEndingInSlash')": [
                        193,
                        194,
                        195,
                        196,
                        197
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'skipsDevNumbersWhenEntryIsNoDevice')": [
                        205,
                        206,
                        207,
                        208,
                        209,
                        210
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        215,
                        216,
                        217,
                        218,
                        219,
                        220
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'testParseTarWithSpecialPaxHeaders')": [
                        283,
                        284
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'testCompress558')": [
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340
                    ]
                }
            }
        }
    }
}