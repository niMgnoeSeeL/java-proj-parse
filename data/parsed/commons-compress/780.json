{
    "80657d31997ed64aeef57376402985258430a8f9": {
        "authored_data": "2020 Jan 23 17:24",
        "commit.message": "make TarArchiveStructSparse immutable\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2f6addbd38448573a7838494ce7b97b83a3f25cb",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        681,
                        718,
                        719,
                        720,
                        724,
                        725,
                        727,
                        729,
                        730
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        681,
                        718,
                        719,
                        720,
                        721,
                        722,
                        723,
                        727,
                        728,
                        730,
                        732,
                        733,
                        748,
                        749,
                        750,
                        751
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', None)": [
                        35,
                        36,
                        37,
                        38,
                        77,
                        78,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', 'setOffset(long)')": [
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', 'setNumbytes(long)')": [
                        83,
                        84
                    ],
                    "(None, None)": [
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', None)": [
                        35,
                        36,
                        37
                    ]
                }
            }
        }
    },
    "2f6addbd38448573a7838494ce7b97b83a3f25cb": {
        "authored_data": "2020 Jan 23 06:16",
        "commit.message": "address issues detected by FindBugs\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "ef43074d7b95c0a43d0f5b8d05d562947b0c2fba",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        82,
                        83,
                        1089
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'paxHeaders')": [
                        567
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'buildSparseInputStreams')": [
                        1041,
                        1042,
                        1043,
                        1044,
                        1058,
                        1059,
                        1060,
                        1061,
                        1062,
                        1063,
                        1064,
                        1065,
                        1066,
                        1067,
                        1068,
                        1069,
                        1070,
                        1071,
                        1072,
                        1073,
                        1074,
                        1075,
                        1076,
                        1077
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'paxHeaders')": [
                        565
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'buildSparseInputStreams')": [
                        1039,
                        1040,
                        1054,
                        1055,
                        1056,
                        1057,
                        1058,
                        1059,
                        1060,
                        1061,
                        1062,
                        1063,
                        1064,
                        1065,
                        1066,
                        1067,
                        1068,
                        1069,
                        1070,
                        1071,
                        1072,
                        1073,
                        1074,
                        1075,
                        1076,
                        1077
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        1089
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', 'equals(Object)')": [
                        47,
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', 'equals(Object)')": [
                        47,
                        48,
                        49,
                        50,
                        51,
                        52
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateIfZip64IsNeededInEOCD')": [
                        1523,
                        1537
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1610
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateIfZip64IsNeededInEOCD')": [
                        1523,
                        1537,
                        1538
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1611
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        49,
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'finish')": [
                        155
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        49,
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'finish')": [
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        172,
                        173,
                        174
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        48,
                        228
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        169,
                        170,
                        171,
                        173,
                        174
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        49,
                        232,
                        233
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177
                    ]
                }
            }
        }
    },
    "ef43074d7b95c0a43d0f5b8d05d562947b0c2fba": {
        "authored_data": "2020 Jan 21 17:45",
        "commit.message": "user rmdir to delete temp directory added with #90\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2dbdb7b8278e4e9df0a3754b7335325e6e275155",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean,Long)')": [
                        2440,
                        2441,
                        2442,
                        2465,
                        2466,
                        2467,
                        2469,
                        2470,
                        2471,
                        2472,
                        2473,
                        2474,
                        2475
                    ]
                },
                "new": {
                    "(None, None)": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean,Long)')": [
                        2441,
                        2464,
                        2465,
                        2466,
                        2467,
                        2469,
                        2470,
                        2471,
                        2472
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        2473,
                        2474
                    ]
                }
            }
        }
    },
    "cb9d1674c239a3d3da43dac601c301e79684519e": {
        "authored_data": "2020 Jan 21 12:15",
        "commit.message": "avoid resource leak in test of #91\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "70835c96f0adf6cf000df1892b21681a129d707a",
        "changes": {
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2NSelectorsOverflowTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2NSelectorsOverflowTest', None)": [
                        35
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2NSelectorsOverflowTest', 'shouldDecompressBlockWithNSelectorOverflow')": [
                        38,
                        39,
                        40,
                        41,
                        42,
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2NSelectorsOverflowTest', None)": [
                        35
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2NSelectorsOverflowTest', 'shouldDecompressBlockWithNSelectorOverflow')": [
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44
                    ]
                }
            }
        }
    },
    "70835c96f0adf6cf000df1892b21681a129d707a": {
        "authored_data": "2020 Jan 21 12:12",
        "commit.message": "still check nSelectors in not negative\n\nsee #91\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "bfeaaff800145adac509d069a0c6ebfe22148a89",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'recvDecodingTables')": [
                        497,
                        505,
                        510,
                        512,
                        513,
                        514,
                        515
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'recvDecodingTables')": [
                        497,
                        498,
                        499,
                        500,
                        508,
                        513,
                        515,
                        516,
                        517
                    ]
                }
            }
        }
    },
    "bfeaaff800145adac509d069a0c6ebfe22148a89": {
        "authored_data": "2020 Jan 20 20:39",
        "commit.message": "Make bz2 decompressor robust to selector overflow\n\nAs explained in https://gnu.wildebeest.org/blog/mjw/2019/08/02/bzip2-and-the-cve-that-wasnt/\nbz2 has historically been able to decompress wrongly formatted compressed\nfiles, more precisely files stating more selectors that the algorithm\nactually uses.\nThis patch replicates https://sourceware.org/ml/bzip2-devel/2019-q3/msg00007.html\nand provides the same test file as described in the above article (lbzip2_32767.bz2).\n",
        "commit.author.name": "Joseph Allemandou",
        "pcid": "f16125435723d143183c9c45fd3a0f92bdf97ba3",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'recvDecodingTables')": [
                        497,
                        500,
                        507
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'recvDecodingTables')": [
                        497,
                        500,
                        501,
                        502,
                        503,
                        510,
                        511,
                        512,
                        513,
                        514
                    ]
                }
            }
        }
    },
    "27fd2033d1218a652f09f59aa3d52db2b4d839ab": {
        "authored_data": "2020 Jan 11 01:19",
        "commit.message": "COMPRESS-477 : add testcases for zip64 split zip\n\nadd testcases about zip64 in split zip\n",
        "commit.author.name": "Lee",
        "pcid": "13cd268a4c99045a32a30ef5dc3d63ea04477d18",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        373,
                        389,
                        430,
                        434,
                        451
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        648,
                        676
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        902,
                        930
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1156,
                        1184
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1597,
                        1617
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1938,
                        1957
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2297,
                        2316
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean)')": [
                        2407,
                        2408,
                        2409,
                        2411
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        365,
                        366
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        367,
                        368,
                        2405,
                        2411,
                        2412,
                        2413,
                        2420,
                        2421,
                        2430,
                        2431
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode,boolean)')": [
                        377,
                        393,
                        434,
                        438,
                        455
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        652,
                        680
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        906,
                        934
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1160,
                        1188
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1601,
                        1621
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1942,
                        1961
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2301,
                        2320
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingManySplitArchiveFileModeNever')": [
                        2406,
                        2407,
                        2408,
                        2409,
                        2410
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingManySplitArchiveFileModeAlways')": [
                        2414,
                        2415,
                        2416,
                        2417,
                        2418,
                        2419
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean)')": [
                        2428,
                        2429
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean,Long)')": [
                        2432,
                        2433,
                        2434,
                        2435,
                        2436,
                        2437,
                        2438,
                        2439,
                        2440,
                        2441,
                        2442,
                        2443,
                        2444,
                        2445,
                        2446,
                        2448,
                        2451,
                        2452,
                        2453,
                        2454,
                        2465,
                        2466,
                        2467,
                        2468,
                        2469,
                        2470
                    ]
                }
            }
        }
    }
}