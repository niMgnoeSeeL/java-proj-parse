{
    "e0692eca48f9b86131d41ec6697c7f2d14715b0b": {
        "authored_data": "2010 Feb 24 15:35",
        "commit.message": "canRead => canReadEntryData as discussed on the list\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@915826 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "734e6f780498f63263090fb88d19421300ff40d0",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'canRead(ArchiveEntry)')": [
                        146
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        146
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'canWrite(ArchiveEntry)')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canRead(ArchiveEntry)')": [
                        199
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        199
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWrite(ArchiveEntry)')": [
                        514
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        514
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'canRead(ZipArchiveEntry)')": [
                        253
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'canReadEntryData(ZipArchiveEntry)')": [
                        253
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSupportedCompressionMethod')": [
                        125,
                        129
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        148
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSupportedCompressionMethod')": [
                        125,
                        129
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        148
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaZipFile')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaZipFile')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        64
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        208,
                        212,
                        216,
                        221
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        208,
                        212,
                        216,
                        221
                    ]
                }
            }
        }
    },
    "734e6f780498f63263090fb88d19421300ff40d0": {
        "authored_data": "2010 Feb 19 12:33",
        "commit.message": "if it's not a ZipArchiveEntry then the stream can't read/write it\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911798 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "9e94237b80053da48c888ee5333ceee602271da0",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canRead(ArchiveEntry)')": [
                        206
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canRead(ArchiveEntry)')": [
                        206
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWrite(ArchiveEntry)')": [
                        520
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWrite(ArchiveEntry)')": [
                        520
                    ]
                }
            }
        }
    },
    "a33505b5c6bf810025567b1c6ce244cd1c85f078": {
        "authored_data": "2010 Feb 19 12:23",
        "commit.message": "move canRead/canWrite up.  Remove isSupportedCompressionMethod.  COMPRESS-93\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911795 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "e0ffbc118e78b263033461bfab6352f29eb76427",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', None)": [
                        99,
                        111,
                        130,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'canRead(ArchiveEntry)')": [
                        146,
                        147
                    ],
                    "(None, None)": [
                        148,
                        149
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', None)": [
                        130,
                        151,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'canWrite(ArchiveEntry)')": [
                        166,
                        167
                    ],
                    "(None, None)": [
                        168
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'isSupportedCompressionMethod')": [
                        160,
                        161
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canRead(ZipArchiveEntry)')": [
                        199,
                        200,
                        201,
                        202
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canRead(ArchiveEntry)')": [
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWrite(ZipArchiveEntry)')": [
                        514,
                        515,
                        516
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWrite(ArchiveEntry)')": [
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSupportedCompressionMethod')": [
                        125,
                        129
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        148
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSupportedCompressionMethod')": [
                        125,
                        129
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        148
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        206,
                        210,
                        214,
                        219
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        204,
                        205,
                        208,
                        212,
                        216,
                        221
                    ]
                }
            }
        }
    },
    "c7e51ede7a9894e57bb72877ab6b77a0c3ef0705": {
        "authored_data": "2010 Feb 19 10:55",
        "commit.message": "detect encrypted entries and say that you can't read/write them.  COMPRESS-89\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911781 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "b7bd6e448925795f0bbb84eaea37e64f806240a3",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        77,
                        78,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        527
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'isEncrypted')": [
                        499,
                        500
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'isStronglyEncrypted')": [
                        507,
                        508
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setEncrypted(boolean)')": [
                        515,
                        516
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setStronglyEncrypted(boolean)')": [
                        523,
                        524,
                        525,
                        526
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        201
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canRead(ZipArchiveEntry)')": [
                        199,
                        200,
                        201,
                        202
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        216,
                        217,
                        218,
                        219,
                        220,
                        221
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'write(byte,int,int)')": [
                        515,
                        519
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        517,
                        518,
                        519
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWrite(ZipArchiveEntry)')": [
                        514,
                        515,
                        516
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'write(byte,int,int)')": [
                        527,
                        528,
                        529,
                        530,
                        531,
                        535,
                        536
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        257,
                        258,
                        259
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'canRead(ZipArchiveEntry)')": [
                        253,
                        254,
                        255,
                        256
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        359,
                        360
                    ]
                }
            }
        }
    },
    "b7bd6e448925795f0bbb84eaea37e64f806240a3": {
        "authored_data": "2010 Feb 19 10:09",
        "commit.message": "add encryption related flags.  COMPRESS-89\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911769 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "4d68ddaedca7219f4b12b3c239f9238d5e1c185b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', None)": [
                        27,
                        28,
                        29,
                        30,
                        31,
                        36,
                        37,
                        38,
                        39,
                        40,
                        53,
                        54,
                        90,
                        91,
                        94,
                        95,
                        96,
                        97,
                        98,
                        101,
                        102,
                        103,
                        104,
                        105,
                        108,
                        109,
                        110,
                        111,
                        112,
                        117,
                        118,
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'usesEncryption')": [
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useEncryption(boolean)')": [
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'usesStrongEncryption')": [
                        106,
                        107
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useStrongEncryption(boolean)')": [
                        113,
                        114,
                        115,
                        116
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'encode')": [
                        128,
                        129,
                        130,
                        131
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'parse(byte,int)')": [
                        145,
                        146,
                        147
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDefaults')": [
                        30,
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testParseEdgeCases')": [
                        41,
                        42,
                        43,
                        44,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', None)": [
                        74,
                        81,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testEncryption')": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testStringEncryption')": [
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92
                    ],
                    "(None, None)": [
                        93,
                        94
                    ]
                }
            }
        }
    },
    "4d68ddaedca7219f4b12b3c239f9238d5e1c185b": {
        "authored_data": "2010 Feb 19 09:56",
        "commit.message": "extract general purpose bit logic\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911765 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2b2099395b165cc549232570213ef63cfcf8c10c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        137,
                        138,
                        139,
                        142
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        137,
                        138,
                        141
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean)')": [
                        901,
                        906,
                        907,
                        914
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        100,
                        101,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean)')": [
                        895,
                        896,
                        901,
                        908
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        332,
                        333,
                        334
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        332,
                        333
                    ]
                }
            }
        }
    },
    "2b2099395b165cc549232570213ef63cfcf8c10c": {
        "authored_data": "2010 Feb 19 08:41",
        "commit.message": "EFS in APPNOTE.TXT stands for 'Early Feature Specification' so our usage of it as 'use the general purpose field to signal UTF8' is wrong.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911740 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "231f1dfbff121018a6dafdaa033b5c7bf4b4cbb5",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        138,
                        139,
                        141,
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        138,
                        139,
                        141,
                        181
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        97,
                        101,
                        218,
                        219,
                        220
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setEncoding(String)')": [
                        293
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setUseLanguageEncodingFlag(boolean)')": [
                        312
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean)')": [
                        893
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        97,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        225,
                        226,
                        227,
                        228
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setEncoding(String)')": [
                        301
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setUseLanguageEncodingFlag(boolean)')": [
                        320
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeVersionNeededToExtractAndGeneralPurposeBits(int,boolean)')": [
                        901
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        181,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        307,
                        333,
                        334,
                        336,
                        399,
                        400,
                        401,
                        402,
                        403
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        498,
                        530,
                        532
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        181,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        307,
                        333,
                        334,
                        336,
                        399,
                        400,
                        401,
                        402,
                        403
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        498,
                        530,
                        532
                    ]
                }
            }
        }
    },
    "231f1dfbff121018a6dafdaa033b5c7bf4b4cbb5": {
        "authored_data": "2010 Feb 19 05:13",
        "commit.message": "Update count properly in CpioArchiveOutputStream, get rid of CountingStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@911701 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "b0d75e6155c08fca835610e303351f0c1a79286f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        114,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'finish')": [
                        406,
                        407
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(String)')": [
                        476
                    ],
                    "(None, None)": [
                        512
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeHeader(CpioArchiveEntry)')": [
                        198,
                        203,
                        208
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'finish')": [
                        409
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'pad(int)')": [
                        439
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeBinaryLong(long,int,boolean)')": [
                        447
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        471,
                        472,
                        473
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(String)')": [
                        482,
                        483,
                        485
                    ]
                }
            }
        }
    }
}