{
    "f3afb6e6e6e32ac47a1760e52e639310eb7bc688": {
        "authored_data": "2020 Aug 08 22:08",
        "commit.message": "Use final.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "06e05dab3bcb9044cc599f0ff18be78c54a8fbae",
        "changes": {
            "src/main/java/org/apache/commons/compress/MemoryLimitException.java": {
                "old": {
                    "('org.apache.commons.compress#MemoryLimitException', None)": [
                        39,
                        45
                    ],
                    "('org.apache.commons.compress#MemoryLimitException', 'buildMessage(long,int)')": [
                        59
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#MemoryLimitException', None)": [
                        39,
                        45
                    ],
                    "('org.apache.commons.compress#MemoryLimitException', 'buildMessage(long,int)')": [
                        59
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        111
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'putAll(Set,ArchiveStreamProvider,TreeMap)')": [
                        171,
                        172,
                        173
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'findAvailableArchiveInputStreamProviders')": [
                        217,
                        219
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'findAvailableArchiveOutputStreamProviders')": [
                        258,
                        260
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'detect(InputStream)')": [
                        490,
                        505,
                        529,
                        542
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'putAll(Set,ArchiveStreamProvider,TreeMap)')": [
                        171,
                        172,
                        173
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'findAvailableArchiveInputStreamProviders')": [
                        217,
                        219
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'findAvailableArchiveOutputStreamProviders')": [
                        258,
                        260
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'detect(InputStream)')": [
                        490,
                        505,
                        529,
                        542
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#Lister', 'main(String)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listStream(File,String)')": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'detectFormat(File)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'list7z(File)')": [
                        88,
                        93
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingZipFile(File)')": [
                        100,
                        103
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#Lister', 'main(String)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listStream(File,String)')": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'detectFormat(File)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'list7z(File)')": [
                        88,
                        93
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingZipFile(File)')": [
                        100,
                        103
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', None)": [
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', None)": [
                        132
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asLong(byte,int,int)')": [
                        204
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int)')": [
                        208
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,boolean)')": [
                        212
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,int)')": [
                        216
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,int,boolean)')": [
                        220
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asLong(byte,int,int)')": [
                        204
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int)')": [
                        208
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,boolean)')": [
                        212
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,int)')": [
                        216
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,int,boolean)')": [
                        220
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        237
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        237
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'equals(Object)')": [
                        153
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'equals(Object)')": [
                        153
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#LocalFileHeader', 'equals(Object)')": [
                        134
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#LocalFileHeader', 'equals(Object)')": [
                        134
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        336,
                        399
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(Charset)')": [
                        548
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(long)')": [
                        568
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        336,
                        399
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(Charset)')": [
                        548
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(long)')": [
                        568
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        305
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        337
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        368
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(byte)')": [
                        562
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        588
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        305
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        337
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        368
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(byte)')": [
                        562
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        588
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        141
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        192
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        240
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        141
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        192
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        240
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/CloseableConsumer.java": {
                "old": {
                    "(None, None)": [
                        39,
                        49
                    ]
                },
                "new": {
                    "(None, None)": [
                        39,
                        49
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/CloseableConsumerAdapter.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#CloseableConsumerAdapter', None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.examples#CloseableConsumerAdapter', 'track(C)')": [
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#CloseableConsumerAdapter', None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.examples#CloseableConsumerAdapter', 'track(C)')": [
                        33
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/Expander.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(File,File)')": [
                        66
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,File,File)')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(InputStream,File)')": [
                        113
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(InputStream,File,CloseableConsumer)')": [
                        136
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,InputStream,File)')": [
                        161
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,InputStream,File,CloseableConsumer)')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File)')": [
                        210
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File,CloseableConsumer)')": [
                        234,
                        235
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ArchiveInputStream,File)')": [
                        259,
                        272
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ZipFile,File)')": [
                        286,
                        300
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(SevenZFile,File)')": [
                        316,
                        325
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'prefersSeekableByteChannel(String)')": [
                        335
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ArchiveEntrySupplier,EntryWriter,File)')": [
                        339,
                        347,
                        357
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(File,File)')": [
                        66
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,File,File)')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(InputStream,File)')": [
                        113
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(InputStream,File,CloseableConsumer)')": [
                        136
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,InputStream,File)')": [
                        161
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,InputStream,File,CloseableConsumer)')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File)')": [
                        210
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File,CloseableConsumer)')": [
                        234,
                        235
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ArchiveInputStream,File)')": [
                        259,
                        272
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ZipFile,File)')": [
                        286,
                        300
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(SevenZFile,File)')": [
                        316,
                        325
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'prefersSeekableByteChannel(String)')": [
                        335
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ArchiveEntrySupplier,EntryWriter,File)')": [
                        339,
                        347,
                        357
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', 'read')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', 'read(int)')": [
                        95,
                        97
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', 'read')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', 'read(int)')": [
                        95,
                        97
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(String,InputStream,long,Coder,byte,int)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        94,
                        111,
                        138,
                        163,
                        164,
                        199,
                        200,
                        239,
                        252
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(String,InputStream,long,Coder,byte,int)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        94,
                        111,
                        138,
                        163,
                        164,
                        199,
                        200,
                        239,
                        252
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        34
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        37
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsAsProperties(Object)')": [
                        69,
                        70
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        86,
                        88,
                        89,
                        90
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsAsProperties(Object)')": [
                        69,
                        70
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        86,
                        88,
                        89,
                        90
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'equals(Object)')": [
                        497
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'equalSevenZMethods(Iterable,Iterable)')": [
                        554,
                        555,
                        562,
                        563
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'equals(Object)')": [
                        497
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'equalSevenZMethods(Iterable,Iterable)')": [
                        554,
                        555,
                        562,
                        563
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        127,
                        175,
                        227,
                        246,
                        263,
                        281,
                        324,
                        329,
                        330
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readHeaders(byte)')": [
                        430,
                        450,
                        451
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'tryToLocateEndHeader(byte)')": [
                        475,
                        493,
                        501,
                        506
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'initializeArchive(StartHeader,byte,boolean)')": [
                        514
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecodingStream(int,boolean)')": [
                        1162,
                        1189,
                        1190
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'reopenFolderInputStream(int,SevenZArchiveEntry)')": [
                        1230
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipEntriesWhenNeeded(int,boolean,int)')": [
                        1267,
                        1294
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'hasCurrentEntryBeenRead')": [
                        1318
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        1361
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read')": [
                        1392
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getInputStream(SevenZArchiveEntry)')": [
                        1432
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read(byte,int,int)')": [
                        1477
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getUnsignedByte(ByteBuffer)')": [
                        1519
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipBytesFully(ByteBuffer,long)')": [
                        1550,
                        1551
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFully(ByteBuffer)')": [
                        1559
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'utf16Decode(char)')": [
                        1602,
                        1606,
                        1610
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'assertFitsIntoInt(String,long)')": [
                        1615
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        127,
                        175,
                        227,
                        246,
                        263,
                        281,
                        324,
                        329,
                        330
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readHeaders(byte)')": [
                        430,
                        450,
                        451
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'tryToLocateEndHeader(byte)')": [
                        475,
                        493,
                        501,
                        506
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'initializeArchive(StartHeader,byte,boolean)')": [
                        514
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecodingStream(int,boolean)')": [
                        1162,
                        1189,
                        1190
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'reopenFolderInputStream(int,SevenZArchiveEntry)')": [
                        1230
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipEntriesWhenNeeded(int,boolean,int)')": [
                        1267,
                        1294
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'hasCurrentEntryBeenRead')": [
                        1318
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        1361
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read')": [
                        1392
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getInputStream(SevenZArchiveEntry)')": [
                        1432
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read(byte,int,int)')": [
                        1477
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getUnsignedByte(ByteBuffer)')": [
                        1519
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipBytesFully(ByteBuffer,long)')": [
                        1550,
                        1551
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFully(ByteBuffer)')": [
                        1559
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'utf16Decode(char)')": [
                        1602,
                        1606,
                        1610
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'assertFitsIntoInt(String,long)')": [
                        1615
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFileOptions.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileOptions', None)": [
                        33,
                        93,
                        106
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileOptions', None)": [
                        33,
                        93,
                        106
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZMethodConfiguration', 'equals(Object)')": [
                        90
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZMethodConfiguration', 'equals(Object)')": [
                        90
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'createArchiveEntry(Path,String,LinkOption)')": [
                        178
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'write(Path,OpenOption)')": [
                        291
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'finish')": [
                        321
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'createArchiveEntry(Path,String,LinkOption)')": [
                        178
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'write(Path,OpenOption)')": [
                        291
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'finish')": [
                        321
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        263,
                        423,
                        434,
                        550
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'readOsSpecificProperties(Path,LinkOption)')": [
                        471
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setSparseHeaders(List)')": [
                        900
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'addPaxHeader(String,String)')": [
                        1211
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getExtraPaxHeader(String)')": [
                        1221
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'updateEntryFromPaxHeaders(Map)')": [
                        1230
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'processPaxHeader(String,String)')": [
                        1245
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'processPaxHeader(String,String,Map)')": [
                        1259
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        1343,
                        1345,
                        1347,
                        1350
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean,boolean)')": [
                        1531
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseOctalOrBinary(byte,int,int,boolean)')": [
                        1572,
                        1576
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        263,
                        423,
                        434,
                        550
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'readOsSpecificProperties(Path,LinkOption)')": [
                        471
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setSparseHeaders(List)')": [
                        900
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'addPaxHeader(String,String)')": [
                        1211
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getExtraPaxHeader(String)')": [
                        1221
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'updateEntryFromPaxHeaders(Map)')": [
                        1230
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'processPaxHeader(String,String)')": [
                        1245
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'processPaxHeader(String,String,Map)')": [
                        1259
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        1343,
                        1345,
                        1347,
                        1350
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean,boolean)')": [
                        1531
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseOctalOrBinary(byte,int,int,boolean)')": [
                        1572,
                        1576
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        119,
                        190
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'close')": [
                        209
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePAX01SparseHeaders(String)')": [
                        599,
                        600,
                        601,
                        604,
                        605
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePAX1XSparseHeaders')": [
                        623,
                        631,
                        635,
                        641
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readLineOfNumberForPax1X(InputStream)')": [
                        654
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        693
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readSparse(byte,int,int)')": [
                        924,
                        934,
                        935,
                        953
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'buildSparseInputStreams')": [
                        1074,
                        1075,
                        1086
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        119,
                        190
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'close')": [
                        209
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePAX01SparseHeaders(String)')": [
                        599,
                        600,
                        601,
                        604,
                        605
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePAX1XSparseHeaders')": [
                        623,
                        631,
                        635,
                        641
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readLineOfNumberForPax1X(InputStream)')": [
                        654
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        693
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readSparse(byte,int,int)')": [
                        924,
                        934,
                        935,
                        953
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'buildSparseInputStreams')": [
                        1074,
                        1075,
                        1086
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        452
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'encodeExtendedPaxHeadersContents(Map)')": [
                        489
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        563
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        452
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'encodeExtendedPaxHeadersContents(Map)')": [
                        489
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        563
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveSparseEntry', None)": [
                        49,
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveSparseEntry', None)": [
                        49,
                        62
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveStructSparse.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', None)": [
                        39
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', 'equals(Object)')": [
                        45,
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', None)": [
                        39
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveStructSparse', 'equals(Object)')": [
                        45,
                        52
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseSparse(byte,int)')": [
                        314,
                        315
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseSparse(byte,int)')": [
                        314,
                        315
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'read')": [
                        121
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'read')": [
                        121
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'createExtraField(ZipShort)')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        160,
                        161,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        201,
                        212
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'fillExtraField(ZipExtraField,byte,int,int,boolean)')": [
                        329
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        391,
                        392
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'createExtraField(ZipShort)')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        160,
                        161,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        201,
                        212
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'fillExtraField(ZipExtraField,byte,int,int,boolean)')": [
                        329
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        391,
                        392
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#InflaterInputStreamWithStatistics', None)": [
                        38,
                        42,
                        46
                    ],
                    "('org.apache.commons.compress.archivers.zip#InflaterInputStreamWithStatistics', 'read(byte,int,int)')": [
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#InflaterInputStreamWithStatistics', None)": [
                        38,
                        42,
                        46
                    ],
                    "('org.apache.commons.compress.archivers.zip#InflaterInputStreamWithStatistics', 'read(byte,int,int)')": [
                        66
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', None)": [
                        54
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encode(String)')": [
                        93,
                        102,
                        113
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)')": [
                        139,
                        142,
                        144
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encodeSurrogate(CharBuffer,char)')": [
                        151
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'estimateInitialBufferSize(CharsetEncoder,int)')": [
                        202,
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'estimateIncrementalEncodingSize(CharsetEncoder,int)')": [
                        215
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', None)": [
                        54
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encode(String)')": [
                        93,
                        102,
                        113
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)')": [
                        139,
                        142,
                        144
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encodeSurrogate(CharBuffer,char)')": [
                        151
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'estimateInitialBufferSize(CharsetEncoder,int)')": [
                        202,
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'estimateIncrementalEncodingSize(CharsetEncoder,int)')": [
                        215
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        233
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntryRequestSupplier)')": [
                        260
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        302
                    ],
                    "(None, None)": [
                        329
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        233
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntryRequestSupplier)')": [
                        260
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        302
                    ],
                    "(None, None)": [
                        329
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', None)": [
                        58,
                        62,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', 'getLocalFileDataData')": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        127
                    ],
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        133,
                        137
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', None)": [
                        58,
                        62,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', 'getLocalFileDataData')": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        127
                    ],
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        133,
                        137
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        54,
                        129,
                        143
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        54,
                        129,
                        143
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'zipLongToDate(ZipLong)')": [
                        591
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'unixTimeToZipLong(long)')": [
                        595
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'zipLongToDate(ZipLong)')": [
                        591
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'unixTimeToZipLong(long)')": [
                        595
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getLocalFileDataData')": [
                        171,
                        173
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getLocalFileDataData')": [
                        171,
                        173
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        250,
                        1179,
                        1208,
                        1232,
                        1237,
                        1238,
                        1249,
                        1254,
                        1255,
                        1258
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setAlignment(int)')": [
                        428
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(ExtraFieldParsingBehavior)')": [
                        503,
                        504,
                        506,
                        507,
                        509,
                        510,
                        518
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'findUnparseable(List)')": [
                        570,
                        571
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'findMatching(ZipShort,List)')": [
                        579,
                        580
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setLocalHeaderOffset(long)')": [
                        860
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setDataOffset(long)')": [
                        875
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setStreamContiguous(boolean)')": [
                        884
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        951
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setNameSource(NameSource)')": [
                        1099
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCommentSource(CommentSource)')": [
                        1117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setDiskNumberStart(long)')": [
                        1137
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        250,
                        1179,
                        1208,
                        1232,
                        1237,
                        1238,
                        1249,
                        1254,
                        1255,
                        1258
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setAlignment(int)')": [
                        428
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(ExtraFieldParsingBehavior)')": [
                        503,
                        504,
                        506,
                        507,
                        509,
                        510,
                        518
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'findUnparseable(List)')": [
                        570,
                        571
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'findMatching(ZipShort,List)')": [
                        579,
                        580
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setLocalHeaderOffset(long)')": [
                        860
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setDataOffset(long)')": [
                        875
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setStreamContiguous(boolean)')": [
                        884
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        951
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setNameSource(NameSource)')": [
                        1099
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCommentSource(CommentSource)')": [
                        1117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setDiskNumberStart(long)')": [
                        1137
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        264,
                        353,
                        356,
                        367
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        1064
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'isApkSigningBlock(byte)')": [
                        1179,
                        1181,
                        1186,
                        1191,
                        1196,
                        1209
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        264,
                        353,
                        356,
                        367
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        1064
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'isApkSigningBlock(byte)')": [
                        1179,
                        1181,
                        1186,
                        1191,
                        1196,
                        1209
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        324,
                        389,
                        1964
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'finish')": [
                        539,
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        1138
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1152,
                        1153,
                        1157,
                        1166,
                        1170
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1346,
                        1350
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1505
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1602,
                        1637
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldUseZip64EOCD')": [
                        1695
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getGeneralPurposeBits(boolean,boolean)')": [
                        1728
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'usesDataDescriptor(int,boolean)')": [
                        1747
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'versionNeededToExtractMethod(int)')": [
                        1751
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        1793
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getZip64Extra(ZipArchiveEntry)')": [
                        1813
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        324,
                        389,
                        1964
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'finish')": [
                        539,
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        1138
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1152,
                        1153,
                        1157,
                        1166,
                        1170
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1346,
                        1350
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1505
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1602,
                        1637
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldUseZip64EOCD')": [
                        1695
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getGeneralPurposeBits(boolean,boolean)')": [
                        1728
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'usesDataDescriptor(int,boolean)')": [
                        1747
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'versionNeededToExtractMethod(int)')": [
                        1751
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        1793
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getZip64Extra(ZipArchiveEntry)')": [
                        1813
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'getZipEncoding(String)')": [
                        59,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'growBufferBy(ByteBuffer,int)')": [
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'getZipEncoding(String)')": [
                        59,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'growBufferBy(ByteBuffer,int)')": [
                        87
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        377,
                        1353,
                        1376,
                        1384,
                        1410,
                        1411,
                        1493
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        583
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        1174
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'skipBytes(int)')": [
                        1204,
                        1205
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1241
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setDataOffset(ZipArchiveEntry)')": [
                        1271
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getDataOffset(ZipArchiveEntry)')": [
                        1293,
                        1294
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'createBoundedInputStream(long,long)')": [
                        1317
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        377,
                        1353,
                        1376,
                        1384,
                        1410,
                        1411,
                        1493
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        583
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        1174
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'skipBytes(int)')": [
                        1204,
                        1205
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1241
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setDataOffset(ZipArchiveEntry)')": [
                        1271
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getDataOffset(ZipArchiveEntry)')": [
                        1293,
                        1294
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'createBoundedInputStream(long,long)')": [
                        1317
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', None)": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(long,byte,int)')": [
                        153
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', None)": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(long,byte,int)')": [
                        153
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'prepareToWriteUnsplittableContent(long)')": [
                        84,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'write(int)')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'write(byte)')": [
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'write(byte,int,int)')": [
                        116,
                        125
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'finish')": [
                        152,
                        153
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'createNewSplitSegmentFile(Integer)')": [
                        220,
                        221,
                        222,
                        230
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'prepareToWriteUnsplittableContent(long)')": [
                        84,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'write(int)')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'write(byte)')": [
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'write(byte,int,int)')": [
                        116,
                        125
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'finish')": [
                        152,
                        153
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'createNewSplitSegmentFile(Integer)')": [
                        220,
                        221,
                        222,
                        230
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        65,
                        236,
                        237,
                        238,
                        248,
                        249
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'assertSplitSignature(List)')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel)')": [
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)')": [
                        135,
                        136,
                        140,
                        141,
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        159,
                        160,
                        165,
                        166,
                        167,
                        170,
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        197,
                        198,
                        199
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        219,
                        223,
                        224,
                        229
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        65,
                        236,
                        237,
                        238,
                        248,
                        249
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'assertSplitSignature(List)')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel)')": [
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)')": [
                        135,
                        136,
                        140,
                        141,
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        159,
                        160,
                        165,
                        166,
                        167,
                        170,
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        197,
                        198,
                        199
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        219,
                        223,
                        224,
                        229
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'youNeed(String,String)')": [
                        216
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'detect(InputStream)')": [
                        481
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'youNeed(String,String)')": [
                        216
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'detect(InputStream)')": [
                        481
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'readNextByte(BitInputStream)')": [
                        239,
                        240
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        279
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsR(BitInputStream,int)')": [
                        390,
                        391
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetBit(BitInputStream)')": [
                        398
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetUByte(BitInputStream)')": [
                        402
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetInt(BitInputStream)')": [
                        406
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'checkBounds(int,int,String)')": [
                        410
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'readNextByte(BitInputStream)')": [
                        239,
                        240
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        279
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsR(BitInputStream,int)')": [
                        390,
                        391
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetBit(BitInputStream)')": [
                        398
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetUByte(BitInputStream)')": [
                        402
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetInt(BitInputStream)')": [
                        406
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'checkBounds(int,int,String)')": [
                        410
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', None)": [
                        45,
                        50
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read')": [
                        60
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read(byte,int,int)')": [
                        78,
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', None)": [
                        45,
                        50
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read')": [
                        60
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read(byte,int,int)')": [
                        78,
                        86
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        116,
                        209,
                        219,
                        224,
                        229,
                        263,
                        291,
                        303,
                        310,
                        317,
                        321,
                        323,
                        326,
                        327,
                        328,
                        330,
                        350,
                        351,
                        427,
                        431,
                        510,
                        515,
                        521,
                        527,
                        531,
                        540
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte)')": [
                        128
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        132,
                        136,
                        145,
                        152
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'switchToUncompressedState')": [
                        170,
                        171
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'readDynamicTables')": [
                        180,
                        181,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'nextSymbol(BitInputStream,BinaryTreeNode)')": [
                        372,
                        375
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'populateDynamicTables(BitInputStream,int,int)')": [
                        381,
                        382,
                        383,
                        384,
                        389,
                        401
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'buildTree(int)')": [
                        452,
                        453,
                        454,
                        455,
                        458,
                        461,
                        463
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'getCodes(int)')": [
                        476,
                        480,
                        491
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'readBits(int)')": [
                        549
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'readBits(BitInputStream,int)')": [
                        553,
                        554
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        116,
                        209,
                        219,
                        224,
                        229,
                        263,
                        291,
                        303,
                        310,
                        317,
                        321,
                        323,
                        326,
                        327,
                        328,
                        330,
                        350,
                        351,
                        427,
                        431,
                        510,
                        515,
                        521,
                        527,
                        531,
                        540
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte)')": [
                        128
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        132,
                        136,
                        145,
                        152
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'switchToUncompressedState')": [
                        170,
                        171
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'readDynamicTables')": [
                        180,
                        181,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'nextSymbol(BitInputStream,BinaryTreeNode)')": [
                        372,
                        375
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'populateDynamicTables(BitInputStream,int,int)')": [
                        381,
                        382,
                        383,
                        384,
                        389,
                        401
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'buildTree(int)')": [
                        452,
                        453,
                        454,
                        455,
                        458,
                        461,
                        463
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'getCodes(int)')": [
                        476,
                        480,
                        491
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'readBits(int)')": [
                        549
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'readBits(BitInputStream,int)')": [
                        553,
                        554
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'read(byte,int,int)')": [
                        74,
                        86
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'readSizes')": [
                        97
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'initializeBackReference')": [
                        134,
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'read(byte,int,int)')": [
                        74,
                        86
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'readSizes')": [
                        97
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'initializeBackReference')": [
                        134,
                        150
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', None)": [
                        86,
                        89,
                        113,
                        118,
                        425,
                        428,
                        429,
                        434,
                        444,
                        454,
                        455,
                        460,
                        474,
                        479,
                        480,
                        481,
                        484,
                        494,
                        495,
                        500,
                        501
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'write(int)')": [
                        135
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'write(byte,int,int)')": [
                        141
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'prefill(byte,int,int)')": [
                        175,
                        177
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'addLiteralBlock(LZ77Compressor)')": [
                        183,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'addBackReference(LZ77Compressor)')": [
                        189,
                        190
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'writeBlocksAndReturnUnfinishedPair(int)')": [
                        196
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'recordLiteral(byte)')": [
                        206
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'clearUnusedBlocks')": [
                        218
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'recordBackReference(LZ77Compressor)')": [
                        231
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expand(int,int)')": [
                        236,
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expandFromList(byte,int,int)')": [
                        249,
                        259
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'clearUnusedPairs')": [
                        288,
                        289,
                        298
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'writeFinalLiteralBlock')": [
                        309
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'writeWritablePairs(int)')": [
                        317,
                        319,
                        320,
                        326
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'rewriteLastPairs')": [
                        340,
                        341,
                        343,
                        344,
                        348,
                        356,
                        388,
                        392,
                        393,
                        394
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'createParameterBuilder')": [
                        412
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', None)": [
                        86,
                        89,
                        113,
                        118,
                        425,
                        428,
                        429,
                        434,
                        444,
                        454,
                        455,
                        460,
                        474,
                        479,
                        480,
                        481,
                        484,
                        494,
                        495,
                        500,
                        501
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'write(int)')": [
                        135
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'write(byte,int,int)')": [
                        141
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'prefill(byte,int,int)')": [
                        175,
                        177
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'addLiteralBlock(LZ77Compressor)')": [
                        183,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'addBackReference(LZ77Compressor)')": [
                        189,
                        190
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'writeBlocksAndReturnUnfinishedPair(int)')": [
                        196
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'recordLiteral(byte)')": [
                        206
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'clearUnusedBlocks')": [
                        218
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'recordBackReference(LZ77Compressor)')": [
                        231
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expand(int,int)')": [
                        236,
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expandFromList(byte,int,int)')": [
                        249,
                        259
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'clearUnusedPairs')": [
                        288,
                        289,
                        298
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'writeFinalLiteralBlock')": [
                        309
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'writeWritablePairs(int)')": [
                        317,
                        319,
                        320,
                        326
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'rewriteLastPairs')": [
                        340,
                        341,
                        343,
                        344,
                        348,
                        356,
                        388,
                        392,
                        393,
                        394
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'createParameterBuilder')": [
                        412
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', None)": [
                        100,
                        114
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'init(boolean)')": [
                        174
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readSignature(boolean)')": [
                        181,
                        182
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        208,
                        227,
                        233,
                        234,
                        241,
                        245
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        254,
                        255,
                        256,
                        278
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'verifyChecksum(XXHash32,String)')": [
                        304,
                        305,
                        306,
                        311
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readOnce(byte,int,int)')": [
                        326,
                        328,
                        332,
                        333,
                        334
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'isSkippableFrameSignature(byte)')": [
                        339
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        359,
                        366
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'appendToBlockDependencyBuffer(byte,int,int)')": [
                        380
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', None)": [
                        100,
                        114
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'init(boolean)')": [
                        174
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readSignature(boolean)')": [
                        181,
                        182
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        208,
                        227,
                        233,
                        234,
                        241,
                        245
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        254,
                        255,
                        256,
                        278
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'verifyChecksum(XXHash32,String)')": [
                        304,
                        305,
                        306,
                        311
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readOnce(byte,int,int)')": [
                        326,
                        328,
                        332,
                        333,
                        334
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'isSkippableFrameSignature(byte)')": [
                        339
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        359,
                        366
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'appendToBlockDependencyBuffer(byte,int,int)')": [
                        380
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', None)": [
                        56,
                        73,
                        107,
                        119,
                        120,
                        135,
                        136,
                        156,
                        157,
                        158,
                        179,
                        190
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'write(int)')": [
                        203
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'write(byte,int,int)')": [
                        209
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'writeFrameDescriptor')": [
                        264
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'flushBlock')": [
                        273,
                        284
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'appendToBlockDependencyBuffer(byte,int,int)')": [
                        316
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', None)": [
                        56,
                        73,
                        107,
                        119,
                        120,
                        135,
                        136,
                        156,
                        157,
                        158,
                        179,
                        190
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'write(int)')": [
                        203
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'write(byte,int,int)')": [
                        209
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'writeFrameDescriptor')": [
                        264
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'flushBlock')": [
                        273,
                        284
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', 'appendToBlockDependencyBuffer(byte,int,int)')": [
                        316
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', None)": [
                        66
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'update(int)')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'update(byte,int,int)')": [
                        85
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'getInt(byte,int)')": [
                        149
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'process(byte,int)')": [
                        160
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', None)": [
                        66
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'update(int)')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'update(byte,int,int)')": [
                        85
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'getInt(byte,int)')": [
                        149
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'process(byte,int)')": [
                        160
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', None)": [
                        135
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'prefill(byte)')": [
                        184,
                        189
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'startLiteral(long)')": [
                        210
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'tryToReadLiteral(int)')": [
                        248
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'startBackReference(int,long)')": [
                        290
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'tryToCopy(int)')": [
                        322,
                        325
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', None)": [
                        135
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'prefill(byte)')": [
                        184,
                        189
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'startLiteral(long)')": [
                        210
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'tryToReadLiteral(int)')": [
                        248
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'startBackReference(int,long)')": [
                        290
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'tryToCopy(int)')": [
                        322,
                        325
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        115,
                        159,
                        258
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'compress(byte)')": [
                        280
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'compress(byte,int,int)')": [
                        293
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'prefill(byte)')": [
                        333
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'nextHash(int,byte)')": [
                        368
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'doCompress(byte,int,int)')": [
                        374,
                        375
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'slide')": [
                        400,
                        404
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'compress')": [
                        424
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'insertString(int)')": [
                        464,
                        466
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'longestMatchForNextPosition(int)')": [
                        479
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'insertStringsInMatch(int)')": [
                        497
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'flushBackReference(int)')": [
                        514
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        115,
                        159,
                        258
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'compress(byte)')": [
                        280
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'compress(byte,int,int)')": [
                        293
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'prefill(byte)')": [
                        333
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'nextHash(int,byte)')": [
                        368
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'doCompress(byte,int,int)')": [
                        374,
                        375
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'slide')": [
                        400,
                        404
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'compress')": [
                        424
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'insertString(int)')": [
                        464,
                        466
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'longestMatchForNextPosition(int)')": [
                        479
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'insertStringsInMatch(int)')": [
                        497
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'flushBackReference(int)')": [
                        514
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', 'builder(int)')": [
                        46
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', None)": [
                        59,
                        88,
                        114,
                        134,
                        153,
                        168,
                        180,
                        195,
                        208,
                        248,
                        250,
                        251,
                        252,
                        263,
                        264,
                        265
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', 'isPowerOfTwo(int)')": [
                        346
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', 'builder(int)')": [
                        46
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', None)": [
                        59,
                        88,
                        114,
                        134,
                        153,
                        168,
                        180,
                        195,
                        208,
                        248,
                        250,
                        251,
                        252,
                        263,
                        264,
                        265
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', 'isPowerOfTwo(int)')": [
                        346
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', None)": [
                        76,
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', None)": [
                        76,
                        80
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'initializeTables(int,int)')": [
                        146,
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'initializeTables(int,int)')": [
                        146,
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', None)": [
                        74
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'write(int)')": [
                        82
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'write(byte,int,int)')": [
                        88
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'flushBuffer')": [
                        125,
                        129
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'writeLittleEndian(int,long)')": [
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', None)": [
                        74
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'write(int)')": [
                        82
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'write(byte,int,int)')": [
                        88
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'flushBuffer')": [
                        125,
                        129
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'writeLittleEndian(int,long)')": [
                        136
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        105,
                        111
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill')": [
                        175,
                        201,
                        226
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        105,
                        111
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill')": [
                        175,
                        201,
                        226
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', None)": [
                        98,
                        104
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'write(int)')": [
                        121
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'write(byte,int,int)')": [
                        127
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlock(LZ77Compressor)')": [
                        177,
                        178
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockNoSizeBytes(LZ77Compressor,int)')": [
                        192
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockOneSizeByte(LZ77Compressor,int)')": [
                        196
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockTwoSizeBytes(LZ77Compressor,int)')": [
                        200
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockThreeSizeBytes(LZ77Compressor,int)')": [
                        204
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockFourSizeBytes(LZ77Compressor,int)')": [
                        208
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockWithSize(int,int,int,LZ77Compressor)')": [
                        212
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLittleEndian(int,int)')": [
                        219
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReference(LZ77Compressor)')": [
                        234
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithOneOffsetByte(int,int)')": [
                        247
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithTwoOffsetBytes(int,int)')": [
                        252
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithFourOffsetBytes(int,int)')": [
                        256
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithLittleEndianOffset(int,int,int,int)')": [
                        260
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'createParameterBuilder(int)')": [
                        278
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', None)": [
                        98,
                        104
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'write(int)')": [
                        121
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'write(byte,int,int)')": [
                        127
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlock(LZ77Compressor)')": [
                        177,
                        178
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockNoSizeBytes(LZ77Compressor,int)')": [
                        192
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockOneSizeByte(LZ77Compressor,int)')": [
                        196
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockTwoSizeBytes(LZ77Compressor,int)')": [
                        200
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockThreeSizeBytes(LZ77Compressor,int)')": [
                        204
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockFourSizeBytes(LZ77Compressor,int)')": [
                        208
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLiteralBlockWithSize(int,int,int,LZ77Compressor)')": [
                        212
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeLittleEndian(int,int)')": [
                        219
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReference(LZ77Compressor)')": [
                        234
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithOneOffsetByte(int,int)')": [
                        247
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithTwoOffsetBytes(int,int)')": [
                        252
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithFourOffsetBytes(int,int)')": [
                        256
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'writeBackReferenceWithLittleEndianOffset(int,int,int,int)')": [
                        260
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', 'createParameterBuilder(int)')": [
                        278
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', None)": [
                        128,
                        129
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read')": [
                        145
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read(byte,int,int)')": [
                        159
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'skip(long)')": [
                        169
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', None)": [
                        128,
                        129
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read')": [
                        145
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read(byte,int,int)')": [
                        159
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'skip(long)')": [
                        169
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorOutputStream', None)": [
                        46,
                        47,
                        61,
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorOutputStream', None)": [
                        46,
                        47,
                        61,
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java": {
                "old": {
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        41,
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        41,
                        43
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'alignWithByteBoundary')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        146,
                        153,
                        158
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'readCachedBits(int)')": [
                        168
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'alignWithByteBoundary')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        146,
                        153,
                        158
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'readCachedBits(int)')": [
                        168
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BoundedInputStream', 'skip(long)')": [
                        82,
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BoundedInputStream', 'skip(long)')": [
                        82,
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(byte)')": [
                        67
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(byte,int,int)')": [
                        79
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(InputStream,int)')": [
                        97,
                        102
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(ByteSupplier,int)')": [
                        124,
                        125,
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(DataInput,int)')": [
                        146,
                        151
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(OutputStream,long,int)')": [
                        181
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(ByteConsumer,long,int)')": [
                        199
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(DataOutput,long,int)')": [
                        216
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', None)": [
                        232,
                        247,
                        251
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'checkReadLength(int)')": [
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(byte)')": [
                        67
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(byte,int,int)')": [
                        79
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(InputStream,int)')": [
                        97,
                        102
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(ByteSupplier,int)')": [
                        124,
                        125,
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(DataInput,int)')": [
                        146,
                        151
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(OutputStream,long,int)')": [
                        181
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(ByteConsumer,long,int)')": [
                        199
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'toLittleEndian(DataOutput,long,int)')": [
                        216
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', None)": [
                        232,
                        247,
                        251
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'checkReadLength(int)')": [
                        256
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/CloseShieldFilterInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CloseShieldFilterInputStream', None)": [
                        32
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CloseShieldFilterInputStream', None)": [
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/FileNameUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getExtension(String)')": [
                        40,
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getBaseName(String)')": [
                        64,
                        69,
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getExtension(String)')": [
                        40,
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getBaseName(String)')": [
                        64,
                        69,
                        71
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', None)": [
                        62,
                        64,
                        78,
                        228,
                        233,
                        242,
                        243,
                        247,
                        250
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'writeBlock')": [
                        92,
                        93,
                        95
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'write(int)')": [
                        104
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'write(byte,int,int)')": [
                        113,
                        120
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'write(ByteBuffer)')": [
                        129,
                        133,
                        140,
                        144
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'padBlock')": [
                        198,
                        200
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', None)": [
                        62,
                        64,
                        78,
                        228,
                        233,
                        242,
                        243,
                        247,
                        250
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'writeBlock')": [
                        92,
                        93,
                        95
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'write(int)')": [
                        104
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'write(byte,int,int)')": [
                        113,
                        120
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'write(ByteBuffer)')": [
                        129,
                        133,
                        140,
                        144
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', 'padBlock')": [
                        198,
                        200
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FlushShieldFilterOutputStream', None)": [
                        31
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FlushShieldFilterOutputStream', None)": [
                        31
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(ReadableByteChannel,ByteBuffer)')": [
                        222,
                        226
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'copy(File,OutputStream)')": [
                        282
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(ReadableByteChannel,ByteBuffer)')": [
                        222,
                        226
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'copy(File,OutputStream)')": [
                        282
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', None)": [
                        57
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'read(ByteBuffer)')": [
                        63
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'close')": [
                        96,
                        99
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'isOpen')": [
                        112
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'position(long,long)')": [
                        140
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'size')": [
                        158
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'truncate(long)')": [
                        168
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'write(ByteBuffer)')": [
                        176
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'position(long)')": [
                        181,
                        205
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'forSeekableByteChannels(SeekableByteChannel)')": [
                        228
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        243,
                        244,
                        245
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', None)": [
                        57
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'read(ByteBuffer)')": [
                        63
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'close')": [
                        96,
                        99
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'isOpen')": [
                        112
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'position(long,long)')": [
                        140
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'size')": [
                        158
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'truncate(long)')": [
                        168
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'write(ByteBuffer)')": [
                        176
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'position(long)')": [
                        181,
                        205
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'forSeekableByteChannels(SeekableByteChannel)')": [
                        228
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        243,
                        244,
                        245
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', None)": [
                        55,
                        74
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'position(long)')": [
                        91
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'truncate(long)')": [
                        118
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'read(ByteBuffer)')": [
                        132,
                        135
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'write(ByteBuffer)')": [
                        158,
                        161,
                        163
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'resize(int)')": [
                        192
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', None)": [
                        55,
                        74
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'position(long)')": [
                        91
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'truncate(long)')": [
                        118
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'read(ByteBuffer)')": [
                        132,
                        135
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'write(ByteBuffer)')": [
                        158,
                        161,
                        163
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'resize(int)')": [
                        192
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/Sets.java": {
                "old": {
                    "('org.apache.commons.compress.utils#Sets', 'newHashSet(E)')": [
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#Sets', 'newHashSet(E)')": [
                        45
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/SkipShieldingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SkipShieldingInputStream', None)": [
                        43
                    ],
                    "('org.apache.commons.compress.utils#SkipShieldingInputStream', 'skip(long)')": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#SkipShieldingInputStream', None)": [
                        43
                    ],
                    "('org.apache.commons.compress.utils#SkipShieldingInputStream', 'skip(long)')": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveReadTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testIsEqualWithNullWithPositive')": [
                        102
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testToAsciiBytes')": [
                        112
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testToStringWithNonNull')": [
                        123,
                        124
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testToAsciiStringThrowsStringIndexOutOfBoundsException')": [
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testIsEqualWithNullWithPositive')": [
                        102
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testToAsciiBytes')": [
                        112
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testToStringWithNonNull')": [
                        123,
                        124
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testToAsciiStringThrowsStringIndexOutOfBoundsException')": [
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/MockEvilInputStream.java": {
                "old": {
                    "('org.apache.commons.compress#MockEvilInputStream', 'read(byte,int,int)')": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#MockEvilInputStream', 'read(byte,int,int)')": [
                        37
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'createArchiveWithDummyEntry(String,OutputStream,File)')": [
                        199,
                        201
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'createArchiveWithDummyEntry(String,OutputStream,File)')": [
                        199,
                        201
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testDetect')": [
                        232,
                        249,
                        256,
                        263
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detect(String)')": [
                        268
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testDetect')": [
                        232,
                        249,
                        256,
                        263
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detect(String)')": [
                        268
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(SevenZFile)')": [
                        156
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(SevenZFile)')": [
                        199
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(SevenZFile)')": [
                        156
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(SevenZFile)')": [
                        199
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreationInMemory')": [
                        151
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        261
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testFileEntryFromFile')": [
                        508,
                        509
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveEntryNewFromPath')": [
                        556,
                        557,
                        558
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsOfZipBombExcel')": [
                        647
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForImplodedEntry')": [
                        656
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForShrunkEntry')": [
                        664
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForStoredEntry')": [
                        673
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForBzip2Entry')": [
                        681
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForDeflate64Entry')": [
                        689
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipWithSegmentAlreadyExistThrowsException')": [
                        707,
                        708,
                        709,
                        714
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        723,
                        726,
                        733,
                        740
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testInputStreamStatistics(String,Map)')": [
                        752,
                        778,
                        783
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'getFilesToZip')": [
                        808,
                        810
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createTestSplitZipSegments')": [
                        841,
                        842,
                        843
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'addFilesToZip(ZipArchiveOutputStream,File)')": [
                        850,
                        852,
                        856
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'countNonDirectories(File)')": [
                        867,
                        873
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreationInMemory')": [
                        151
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        261
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testFileEntryFromFile')": [
                        508,
                        509
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveEntryNewFromPath')": [
                        556,
                        557,
                        558
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsOfZipBombExcel')": [
                        647
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForImplodedEntry')": [
                        656
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForShrunkEntry')": [
                        664
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForStoredEntry')": [
                        673
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForBzip2Entry')": [
                        681
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'inputStreamStatisticsForDeflate64Entry')": [
                        689
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipWithSegmentAlreadyExistThrowsException')": [
                        707,
                        708,
                        709,
                        714
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        723,
                        726,
                        733,
                        740
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testInputStreamStatistics(String,Map)')": [
                        752,
                        778,
                        783
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'getFilesToZip')": [
                        808,
                        810
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createTestSplitZipSegments')": [
                        841,
                        842,
                        843
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'addFilesToZip(ZipArchiveOutputStream,File)')": [
                        850,
                        852,
                        856
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'countNonDirectories(File)')": [
                        867,
                        873
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        76,
                        79
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'simpleInputStream')": [
                        101,
                        106
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        76,
                        79
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'simpleInputStream')": [
                        101,
                        106
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        99,
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        99,
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/arj/CoverageTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#CoverageTest', 'testHostOsInstance')": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.arj#CoverageTest', 'testCallLFHToString')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#CoverageTest', 'testHostOsInstance')": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.arj#CoverageTest', 'testCallLFHToString')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        99,
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        99,
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveTest', None)": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveTest', 'utf18RoundtripTest')": [
                        56,
                        67
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveTest', None)": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveTest', 'utf18RoundtripTest')": [
                        56,
                        67
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioUtilTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtilTest', 'testByteArray2longThrowsUnsupportedOperationException')": [
                        76
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtilTest', 'testByteArray2longThrowsUnsupportedOperationException')": [
                        76
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        77
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        86,
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        77
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        86,
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'fileCantEscapeDoubleDotPathWithSimilarSibling')": [
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setup7z')": [
                        152
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip(String)')": [
                        197,
                        199
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'assertHelloWorld(String,String)')": [
                        220,
                        222,
                        224
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'fileCantEscapeDoubleDotPathWithSimilarSibling')": [
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setup7z')": [
                        152
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip(String)')": [
                        197,
                        199
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'assertHelloWorld(String,String)')": [
                        220,
                        222,
                        224
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ParameterizedArchiverTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', None)": [
                        66
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'setUp')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'verifyContent')": [
                        123
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'assertDir(String,ArchiveEntry)')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,InputStream)')": [
                        144,
                        149,
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', None)": [
                        66
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'setUp')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'verifyContent')": [
                        123
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'assertDir(String,ArchiveEntry)')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,InputStream)')": [
                        144,
                        149,
                        150
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ParameterizedExpanderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', None)": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'setUp')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'assertHelloWorld(String,String)')": [
                        147,
                        149,
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', None)": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'setUp')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'assertHelloWorld(String,String)')": [
                        147,
                        149,
                        151
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/SevenZArchiverTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'setUp')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'verifyContent')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'assertDir(String,ArchiveEntry)')": [
                        107
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,SevenZFile)')": [
                        113,
                        118,
                        119
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'setUp')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'verifyContent')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'assertDir(String,ArchiveEntry)')": [
                        107
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,SevenZFile)')": [
                        113,
                        118,
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/jar/JarMarkerTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarMarkerTest', 'testJarMarkerLengthCheck')": [
                        30
                    ],
                    "(None, None)": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarMarkerTest', 'testJarMarkerLengthCheck')": [
                        30
                    ],
                    "(None, None)": [
                        34
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256DecoderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256DecoderTest', 'testDecodeWithNonEmptyString')": [
                        43,
                        44,
                        45,
                        46,
                        49,
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256DecoderTest', 'testDecodeWithNonEmptyString')": [
                        43,
                        44,
                        45,
                        46,
                        49,
                        57
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/CoverageTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CoverageTest', 'testCLIInstance')": [
                        33
                    ],
                    "(None, None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CoverageTest', 'testCLIInstance')": [
                        33
                    ],
                    "(None, None)": [
                        38
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/FolderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testGetUnpackSizeForCoderOne')": [
                        38,
                        39,
                        40
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testGetUnpackSizeOne')": [
                        51,
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testGetUnpackSizeTwo')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testFindBindPairForInStream')": [
                        77,
                        78,
                        79
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testGetUnpackSizeForCoderOne')": [
                        38,
                        39,
                        40
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testGetUnpackSizeOne')": [
                        51,
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testGetUnpackSizeTwo')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#FolderTest', 'testFindBindPairForInStream')": [
                        77,
                        78,
                        79
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'noMethodsIsDifferentFromSomeMethods')": [
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'oneMethodsIsDifferentFromTwoMethods')": [
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'sameMethodsYieldEqualEntries')": [
                        64,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'methodOrderMattersInEquals')": [
                        76,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'methodConfigurationMattersInEquals')": [
                        88,
                        89,
                        90
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'noMethodsIsDifferentFromSomeMethods')": [
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'oneMethodsIsDifferentFromTwoMethods')": [
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'sameMethodsYieldEqualEntries')": [
                        64,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'methodOrderMattersInEquals')": [
                        76,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntryTest', 'methodConfigurationMattersInEquals')": [
                        88,
                        89,
                        90
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'handlesEmptyArchiveWithFilesInfo')": [
                        387
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractSpecifiedFile')": [
                        426,
                        430
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessTogetherWithSequentialAccess')": [
                        478,
                        483
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingBackwards')": [
                        537,
                        538,
                        547,
                        560,
                        561
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingForwards')": [
                        590,
                        591,
                        598,
                        605
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessMultipleReadSameFile')": [
                        650
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractNonExistSpecifiedFile')": [
                        671
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'retrieveInputStreamForAllEntriesMultipleTimes')": [
                        681,
                        682,
                        683
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'retrieveInputStreamForAllEntriesWithoutCRCMultipleTimes')": [
                        694,
                        703,
                        704,
                        705
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(SevenZFile,SevenZMethod)')": [
                        723
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'handlesEmptyArchiveWithFilesInfo')": [
                        387
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractSpecifiedFile')": [
                        426,
                        430
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessTogetherWithSequentialAccess')": [
                        478,
                        483
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingBackwards')": [
                        537,
                        538,
                        547,
                        560,
                        561
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingForwards')": [
                        590,
                        591,
                        598,
                        605
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessMultipleReadSameFile')": [
                        650
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractNonExistSpecifiedFile')": [
                        671
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'retrieveInputStreamForAllEntriesMultipleTimes')": [
                        681,
                        682,
                        683
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'retrieveInputStreamForAllEntriesWithoutCRCMultipleTimes')": [
                        694,
                        703,
                        704,
                        705
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(SevenZFile,SevenZMethod)')": [
                        723
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZNativeHeapTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZNativeHeapTest', None)": [
                        66,
                        78,
                        83,
                        88,
                        93,
                        118,
                        123,
                        163,
                        176,
                        181,
                        186,
                        191,
                        196,
                        201,
                        221,
                        226,
                        231
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZNativeHeapTest', None)": [
                        66,
                        78,
                        83,
                        88,
                        93,
                        118,
                        123,
                        163,
                        176,
                        181,
                        186,
                        191,
                        196,
                        201,
                        221,
                        226,
                        231
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        156
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        221
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'extractTarAndGetInputStream(File,String)')": [
                        234,
                        235,
                        237,
                        241
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        156
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        221
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'extractTarAndGetInputStream(File,String)')": [
                        234,
                        235,
                        237,
                        241
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testExtraPaxHeaders')": [
                        134,
                        135,
                        155
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'getFileFromNonFileEntry')": [
                        205
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinuxFileInformationFromFile')": [
                        213
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinuxFileInformationFromPath')": [
                        222
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testWindowsFileInformationFromFile')": [
                        231
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testWindowsFileInformationFromPath')": [
                        238
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testExtraPaxHeaders')": [
                        134,
                        135,
                        155
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'getFileFromNonFileEntry')": [
                        205
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinuxFileInformationFromFile')": [
                        213
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinuxFileInformationFromPath')": [
                        222
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testWindowsFileInformationFromFile')": [
                        231
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testWindowsFileInformationFromPath')": [
                        238
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testGetAndSetOfPaxEntry')": [
                        325,
                        335
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        359
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        368,
                        371
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testDirectoryWithLongNameEndsWithSlash')": [
                        383,
                        393,
                        399,
                        400,
                        401,
                        402,
                        406,
                        407,
                        417,
                        418
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testGetAndSetOfPaxEntry')": [
                        325,
                        335
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        359
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        368,
                        371
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testDirectoryWithLongNameEndsWithSlash')": [
                        383,
                        393,
                        399,
                        400,
                        401,
                        402,
                        406,
                        407,
                        417,
                        418
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testRecordSize')": [
                        629,
                        632,
                        636,
                        639
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBlockSizes')": [
                        653,
                        662,
                        668
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPadding(int,String,byte)')": [
                        677,
                        695,
                        698,
                        699
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'getResourceContents(String)')": [
                        703
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPutGlobalPaxHeaderEntry')": [
                        712,
                        713,
                        714,
                        715,
                        716,
                        717,
                        722,
                        728,
                        735,
                        740
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testRecordSize')": [
                        629,
                        632,
                        636,
                        639
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBlockSizes')": [
                        653,
                        662,
                        668
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPadding(int,String,byte)')": [
                        677,
                        695,
                        698,
                        699
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'getResourceContents(String)')": [
                        703
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPutGlobalPaxHeaderEntry')": [
                        712,
                        713,
                        714,
                        715,
                        716,
                        717,
                        722,
                        728,
                        735,
                        740
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarMemoryFileSystemTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarFromMemoryFileSystem')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarToMemoryFileSystem')": [
                        65
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'checkUserInformationInTarEntry')": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarFromMemoryFileSystem')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarToMemoryFileSystem')": [
                        65
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'checkUserInformationInTarEntry')": [
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundTripOctalOrBinary8_ValueTooBigForBinary')": [
                        381
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseSparse')": [
                        393
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundTripOctalOrBinary8_ValueTooBigForBinary')": [
                        381
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseSparse')": [
                        393
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTreeTest', 'testExceptions')": [
                        57,
                        60,
                        64
                    ],
                    "(None, None)": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTreeTest', 'testExceptions')": [
                        57,
                        60,
                        64
                    ],
                    "(None, None)": [
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'writesDataDescriptorForDeflatedEntryOnUnseekableOutput')": [
                        55,
                        61,
                        63,
                        66,
                        69,
                        72,
                        73,
                        75,
                        78,
                        80,
                        81,
                        82,
                        85,
                        87,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        95,
                        107,
                        110,
                        114,
                        115,
                        117,
                        120,
                        122,
                        123,
                        124,
                        127,
                        129,
                        131
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        137,
                        144,
                        149,
                        157,
                        158,
                        161,
                        165,
                        166,
                        168,
                        171,
                        173,
                        174,
                        175,
                        178,
                        180,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'findCentralDirectory(byte)')": [
                        186
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'writesDataDescriptorForDeflatedEntryOnUnseekableOutput')": [
                        55,
                        61,
                        63,
                        66,
                        69,
                        72,
                        73,
                        75,
                        78,
                        80,
                        81,
                        82,
                        85,
                        87,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        95,
                        107,
                        110,
                        114,
                        115,
                        117,
                        120,
                        122,
                        123,
                        124,
                        127,
                        129,
                        131
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        137,
                        144,
                        149,
                        157,
                        158,
                        161,
                        165,
                        166,
                        168,
                        171,
                        173,
                        174,
                        175,
                        178,
                        180,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'findCentralDirectory(byte)')": [
                        186
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testConstructorThrowsExceptions')": [
                        107,
                        109,
                        113
                    ],
                    "(None, None)": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testConstructorThrowsExceptions')": [
                        107,
                        109,
                        113
                    ],
                    "(None, None)": [
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'parseTurnsArrayIndexOutOfBoundsIntoZipException')": [
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', None)": [
                        275,
                        281
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'parseTurnsArrayIndexOutOfBoundsIntoZipException')": [
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', None)": [
                        275,
                        281
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        125
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        125
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/NioZipEncodingTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF16BE')": [
                        35,
                        36,
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF8')": [
                        44,
                        45,
                        47
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToISO88591')": [
                        53,
                        54,
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableUmlauts')": [
                        62,
                        63,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableRainbowEmoji')": [
                        73,
                        74,
                        76
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'rainbowEmojiToSurrogatePairUTF16')": [
                        82,
                        83,
                        85
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'partialSurrogatePair')": [
                        91,
                        92,
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF16BE')": [
                        35,
                        36,
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF8')": [
                        44,
                        45,
                        47
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToISO88591')": [
                        53,
                        54,
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableUmlauts')": [
                        62,
                        63,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableRainbowEmoji')": [
                        73,
                        74,
                        76
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'rainbowEmojiToSurrogatePairUTF16')": [
                        82,
                        83,
                        85
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'partialSurrogatePair')": [
                        91,
                        92,
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmit')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmitStreamAwareCallable')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableWithLowestLevelApiUsingSubmit')": [
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithHighestLevelUsingSubmitStreamAwareCallable')": [
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier)')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier,int)')": [
                        177
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithTestFiles(CallableConsumerSupplier,int)')": [
                        200
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeTestFilesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        316,
                        341
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmit')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmitStreamAwareCallable')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableWithLowestLevelApiUsingSubmit')": [
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithHighestLevelUsingSubmitStreamAwareCallable')": [
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier)')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier,int)')": [
                        177
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithTestFiles(CallableConsumerSupplier,int)')": [
                        200
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeTestFilesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        316,
                        341
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/PkWareExtraHeaderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#PkWareExtraHeaderTest', 'testEncryptionAlgorithm')": [
                        31,
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#PkWareExtraHeaderTest', 'testHashAlgorithm')": [
                        39,
                        40,
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#PkWareExtraHeaderTest', 'testEncryptionAlgorithm')": [
                        31,
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#PkWareExtraHeaderTest', 'testHashAlgorithm')": [
                        39,
                        40,
                        41
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'testCreateDataOutputCompressor')": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'testCreateDataOutputCompressor')": [
                        65
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testGettersSetters')": [
                        252
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testGettersSetters')": [
                        252
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1969
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2328
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1969
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2328
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'isUnixSymlinkIsFalseIfMoreThanOneFlagIsSet')": [
                        285
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testIsUnixSymlink')": [
                        292
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'reparsingUnicodeExtraWithUnsupportedversionThrowsInStrictMode')": [
                        303
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'bestEffortIncludesUnparseableExtraData')": [
                        312,
                        313,
                        314,
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'onlyParseableLenientExcludesUnparseableExtraData')": [
                        321,
                        322,
                        323,
                        324
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'strictForKnowExtraFieldsIncludesUnparseableExtraData')": [
                        330,
                        331,
                        332,
                        333
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'onlyParseableStrictExcludesUnparseableExtraData')": [
                        339,
                        340,
                        341,
                        342
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'draconicThrowsOnUnparseableExtraData')": [
                        348,
                        349
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'parsingModeBehaviorTestData')": [
                        364
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testZipArchiveClone')": [
                        374,
                        375
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'isUnixSymlinkIsFalseIfMoreThanOneFlagIsSet')": [
                        285
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testIsUnixSymlink')": [
                        292
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'reparsingUnicodeExtraWithUnsupportedversionThrowsInStrictMode')": [
                        303
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'bestEffortIncludesUnparseableExtraData')": [
                        312,
                        313,
                        314,
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'onlyParseableLenientExcludesUnparseableExtraData')": [
                        321,
                        322,
                        323,
                        324
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'strictForKnowExtraFieldsIncludesUnparseableExtraData')": [
                        330,
                        331,
                        332,
                        333
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'onlyParseableStrictExcludesUnparseableExtraData')": [
                        339,
                        340,
                        341,
                        342
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'draconicThrowsOnUnparseableExtraData')": [
                        348,
                        349
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'parsingModeBehaviorTestData')": [
                        364
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testZipArchiveClone')": [
                        374,
                        375
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStream')": [
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStreamWithDataDescriptor')": [
                        242,
                        245,
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testThrowOnInvalidEntry')": [
                        295
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testOffsets')": [
                        311,
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown')": [
                        344
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        384,
                        387
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        424,
                        425,
                        428
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        447,
                        451,
                        457,
                        463
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        479,
                        482,
                        486,
                        492,
                        498
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'rejectsStoredEntriesWithDataDescriptorByDefault')": [
                        530,
                        537
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithSignature')": [
                        545,
                        550
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithoutSignature')": [
                        561,
                        566
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsInconsistent')": [
                        577,
                        584
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsDifferentFromLengthRead')": [
                        592,
                        599
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZip')": [
                        605,
                        610
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipOfZip64')": [
                        627,
                        632
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByWinrar')": [
                        649,
                        654
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipThrowsException')": [
                        672,
                        673,
                        674
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readEntry(ZipArchiveInputStream,ZipArchiveEntry)')": [
                        713
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'nameSource(String,String,ZipArchiveEntry)')": [
                        721
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'nameSource(String,String,int,ZipArchiveEntry)')": [
                        725
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStream')": [
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStreamWithDataDescriptor')": [
                        242,
                        245,
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testThrowOnInvalidEntry')": [
                        295
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testOffsets')": [
                        311,
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown')": [
                        344
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        384,
                        387
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        424,
                        425,
                        428
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        447,
                        451,
                        457,
                        463
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        479,
                        482,
                        486,
                        492,
                        498
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'rejectsStoredEntriesWithDataDescriptorByDefault')": [
                        530,
                        537
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithSignature')": [
                        545,
                        550
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithoutSignature')": [
                        561,
                        566
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsInconsistent')": [
                        577,
                        584
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsDifferentFromLengthRead')": [
                        592,
                        599
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZip')": [
                        605,
                        610
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipOfZip64')": [
                        627,
                        632
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByWinrar')": [
                        649,
                        654
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipThrowsException')": [
                        672,
                        673,
                        674
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readEntry(ZipArchiveInputStream,ZipArchiveEntry)')": [
                        713
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'nameSource(String,String,ZipArchiveEntry)')": [
                        721
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'nameSource(String,String,int,ZipArchiveEntry)')": [
                        725
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipClassCoverageTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipClassCoverageTest', 'testConstructZip64RequiredException')": [
                        35
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipClassCoverageTest', 'testMessageException')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipClassCoverageTest', 'testConstantConstructor')": [
                        49,
                        50,
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipClassCoverageTest', 'testConstructZip64RequiredException')": [
                        35
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipClassCoverageTest', 'testMessageException')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipClassCoverageTest', 'testConstantConstructor')": [
                        49,
                        50,
                        53
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testNothingToMakeCoverallsHappier')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testGetNonexistentEncoding')": [
                        57,
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'doSimpleEncodingsTest(int)')": [
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testNothingToMakeCoverallsHappier')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testGetNonexistentEncoding')": [
                        57,
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'doSimpleEncodingsTest(int)')": [
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileIgnoringLocalFileHeaderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'testZipUnarchive')": [
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'getEntryWorks')": [
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'getRawInputStreamReturnsNull')": [
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'testPhysicalOrder')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'openZipWithoutLFH(String)')": [
                        105
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'testZipUnarchive')": [
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'getEntryWorks')": [
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'getRawInputStreamReturnsNull')": [
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'testPhysicalOrder')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'openZipWithoutLFH(String)')": [
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testPhysicalOrderOfSpecificFile')": [
                        158,
                        159,
                        160,
                        161
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        370,
                        375,
                        378,
                        384,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadFile')": [
                        400,
                        405,
                        408,
                        414,
                        415
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testOffsets')": [
                        431,
                        435
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testDelayedOffsetsAndSizes')": [
                        447,
                        449,
                        455,
                        456,
                        467,
                        473
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        487,
                        489,
                        496,
                        503,
                        511,
                        523,
                        524,
                        536,
                        537,
                        550,
                        551,
                        564,
                        565
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignmentExceed')": [
                        585,
                        587
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testInvalidAlignment')": [
                        598
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readDeflate64CompressedStream')": [
                        628,
                        629,
                        631
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        667,
                        669
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'extractFileLiesAcrossSplitZipSegmentsCreatedByZip')": [
                        710,
                        711
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'extractFileLiesAcrossSplitZipSegmentsCreatedByZipOfZip64')": [
                        727,
                        728
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'extractFileLiesAcrossSplitZipSegmentsCreatedByWinrar')": [
                        744,
                        745,
                        749,
                        750
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        766,
                        767,
                        769
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertAllReadMethods(byte,ZipFile,ZipArchiveEntry)')": [
                        778,
                        781,
                        784,
                        791,
                        792,
                        801,
                        808,
                        813,
                        815,
                        825
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readStreamRest(byte,int,InputStream)')": [
                        833,
                        834,
                        835
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'calculateCrc32(byte)')": [
                        841,
                        842
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'nameSource(String,String,ZipArchiveEntry)')": [
                        871,
                        873
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualsToEntry(File,ZipArchiveEntry,ZipFile)')": [
                        879,
                        880,
                        881,
                        882,
                        883
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        895,
                        896,
                        897
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testPhysicalOrderOfSpecificFile')": [
                        158,
                        159,
                        160,
                        161
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        370,
                        375,
                        378,
                        384,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadFile')": [
                        400,
                        405,
                        408,
                        414,
                        415
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testOffsets')": [
                        431,
                        435
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testDelayedOffsetsAndSizes')": [
                        447,
                        449,
                        455,
                        456,
                        467,
                        473
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        487,
                        489,
                        496,
                        503,
                        511,
                        523,
                        524,
                        536,
                        537,
                        550,
                        551,
                        564,
                        565
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignmentExceed')": [
                        585,
                        587
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testInvalidAlignment')": [
                        598
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readDeflate64CompressedStream')": [
                        628,
                        629,
                        631
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        667,
                        669
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'extractFileLiesAcrossSplitZipSegmentsCreatedByZip')": [
                        710,
                        711
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'extractFileLiesAcrossSplitZipSegmentsCreatedByZipOfZip64')": [
                        727,
                        728
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'extractFileLiesAcrossSplitZipSegmentsCreatedByWinrar')": [
                        744,
                        745,
                        749,
                        750
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        766,
                        767,
                        769
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertAllReadMethods(byte,ZipFile,ZipArchiveEntry)')": [
                        778,
                        781,
                        784,
                        791,
                        792,
                        801,
                        808,
                        813,
                        815,
                        825
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readStreamRest(byte,int,InputStream)')": [
                        833,
                        834,
                        835
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'calculateCrc32(byte)')": [
                        841,
                        842
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'nameSource(String,String,ZipArchiveEntry)')": [
                        871,
                        873
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualsToEntry(File,ZipArchiveEntry,ZipFile)')": [
                        879,
                        880,
                        881,
                        882,
                        883
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        895,
                        896,
                        897
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'throwsIfUnsplittableSizeLargerThanSplitSize')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'splitZipBeginsWithZipSplitSignature')": [
                        58,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'testCreateSplittedFiles')": [
                        70,
                        71,
                        72,
                        74,
                        75,
                        76
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'throwsIfUnsplittableSizeLargerThanSplitSize')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'splitZipBeginsWithZipSplitSignature')": [
                        58,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'testCreateSplittedFiles')": [
                        70,
                        71,
                        72,
                        74,
                        75,
                        76
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testUnsupportedMethod')": [
                        251
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testUnknownMethod')": [
                        258
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testUnsupportedMethod')": [
                        251
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testUnknownMethod')": [
                        258
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/changes/ChangeTest.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeTest', 'testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionOne')": [
                        39,
                        41
                    ],
                    "('org.apache.commons.compress.changes#ChangeTest', 'testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionTwo')": [
                        49,
                        51
                    ],
                    "('org.apache.commons.compress.changes#ChangeTest', 'testFailsToCreateChangeTakingThreeArgumentsThrowsNullPointerException')": [
                        59
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeTest', 'testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionOne')": [
                        39,
                        41
                    ],
                    "('org.apache.commons.compress.changes#ChangeTest', 'testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionTwo')": [
                        49,
                        51
                    ],
                    "('org.apache.commons.compress.changes#ChangeTest', 'testFailsToCreateChangeTakingThreeArgumentsThrowsNullPointerException')": [
                        59
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetect')": [
                        150,
                        157,
                        164
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'detect(String)')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,int)')": [
                        211,
                        213,
                        217
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetect')": [
                        150,
                        157,
                        164
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'detect(String)')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,int)')": [
                        211,
                        213,
                        217
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtripWithOneBigWrite')": [
                        108,
                        109,
                        115,
                        121,
                        130,
                        131
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtrip(File)')": [
                        136,
                        137,
                        150,
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtripWithOneBigWrite')": [
                        108,
                        109,
                        115,
                        121,
                        130,
                        131
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtrip(File)')": [
                        136,
                        137,
                        150,
                        151
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        299
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        299
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        96
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        212
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        232,
                        234
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        212
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        232,
                        234
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        40
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        91
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        40
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        91
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        83
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64BugsTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64BugsTest', 'readBeyondMemoryException')": [
                        34,
                        36,
                        37,
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64BugsTest', 'readBeyondMemoryException')": [
                        34,
                        36,
                        37,
                        40
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'readWhenClosed')": [
                        48
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'properSizeWhenClosed')": [
                        56
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'delegatesAvailable')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'closeCallsDecoder')": [
                        71
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'closeIsDelegatedJustOnce')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlock')": [
                        90
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlockViaFactory')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlockAvailable')": [
                        119
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'streamIgnoresExtraBytesAfterDeflatedInput')": [
                        133
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'throwsEOFExceptionOnTruncatedStreams')": [
                        148
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        172
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'readWhenClosed')": [
                        48
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'properSizeWhenClosed')": [
                        56
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'delegatesAvailable')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'closeCallsDecoder')": [
                        71
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'closeIsDelegatedJustOnce')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlock')": [
                        90
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlockViaFactory')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlockAvailable')": [
                        119
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'streamIgnoresExtraBytesAfterDeflatedInput')": [
                        133
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'throwsEOFExceptionOnTruncatedStreams')": [
                        148
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        172
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoderTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeUncompressedBlock')": [
                        31,
                        37,
                        38,
                        39
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeUncompressedBlockWithInvalidLenNLenValue')": [
                        47,
                        53,
                        54,
                        56,
                        58
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeSimpleFixedHuffmanBlock')": [
                        65,
                        82,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeSimpleFixedHuffmanBlockToSmallBuffer')": [
                        92,
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeFixedHuffmanBlockWithMemoryLookup')": [
                        123,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeFixedHuffmanBlockWithMemoryLookupInSmallBuffer')": [
                        153,
                        173,
                        174
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeFixedHuffmanBlockWithMemoryLookupInExactBuffer')": [
                        188,
                        208,
                        209
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeUncompressedBlock')": [
                        31,
                        37,
                        38,
                        39
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeUncompressedBlockWithInvalidLenNLenValue')": [
                        47,
                        53,
                        54,
                        56,
                        58
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeSimpleFixedHuffmanBlock')": [
                        65,
                        82,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeSimpleFixedHuffmanBlockToSmallBuffer')": [
                        92,
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeFixedHuffmanBlockWithMemoryLookup')": [
                        123,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeFixedHuffmanBlockWithMemoryLookupInSmallBuffer')": [
                        153,
                        173,
                        174
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeFixedHuffmanBlockWithMemoryLookupInExactBuffer')": [
                        188,
                        208,
                        209
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'pairSeesBackReferenceWhenSet')": [
                        34
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWriteBackReferenceFollowedByLongLiteral')": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWriteBackReferenceFollowedByShortLiteralIfOffsetIsBigEnough')": [
                        53
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWriteBackReferenceFollowedByShortLiteralIfLengthIsBigEnough')": [
                        61
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'cantWriteBackReferenceFollowedByLiteralThatIsTooShort')": [
                        68
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'cantWriteBackReferenceIfAccumulatedOffsetIsTooShort')": [
                        75
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'pairAccumulatesLengths')": [
                        82,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWritePairWithoutLiterals')": [
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor19ByteLengthBackReference')": [
                        101,
                        103
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor273ByteLengthBackReference')": [
                        110,
                        112
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor274ByteLengthBackReference')": [
                        119,
                        121
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWritePairWithoutBackReference')": [
                        128,
                        129,
                        131
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor15ByteLengthLiteral')": [
                        138,
                        139,
                        142
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor269ByteLengthLiteral')": [
                        150,
                        151,
                        156
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor270ByteLengthLiteral')": [
                        164,
                        165,
                        169
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCompletePair')": [
                        177,
                        178,
                        182
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingOfFinalBlockWithoutTrailingLZ77Literals')": [
                        196,
                        197,
                        210,
                        211,
                        226,
                        227
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingOfFinalBlockWithTrailingLZ77Literals')": [
                        244,
                        245,
                        264,
                        265,
                        283,
                        284
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingOfFourPairs')": [
                        305,
                        306
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingWithFinalBackreferenceAndOffsetBiggerThan1')": [
                        326,
                        332,
                        333
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'compress(int)')": [
                        345
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'compress(int,int)')": [
                        349,
                        350
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'compress(byte,int)')": [
                        354,
                        359
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'prepareExpected(int)')": [
                        369,
                        370
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'pairSeesBackReferenceWhenSet')": [
                        34
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWriteBackReferenceFollowedByLongLiteral')": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWriteBackReferenceFollowedByShortLiteralIfOffsetIsBigEnough')": [
                        53
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWriteBackReferenceFollowedByShortLiteralIfLengthIsBigEnough')": [
                        61
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'cantWriteBackReferenceFollowedByLiteralThatIsTooShort')": [
                        68
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'cantWriteBackReferenceIfAccumulatedOffsetIsTooShort')": [
                        75
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'pairAccumulatesLengths')": [
                        82,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWritePairWithoutLiterals')": [
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor19ByteLengthBackReference')": [
                        101,
                        103
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor273ByteLengthBackReference')": [
                        110,
                        112
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor274ByteLengthBackReference')": [
                        119,
                        121
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'canWritePairWithoutBackReference')": [
                        128,
                        129,
                        131
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor15ByteLengthLiteral')": [
                        138,
                        139,
                        142
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor269ByteLengthLiteral')": [
                        150,
                        151,
                        156
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCorrectSizeFor270ByteLengthLiteral')": [
                        164,
                        165,
                        169
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'writesCompletePair')": [
                        177,
                        178,
                        182
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingOfFinalBlockWithoutTrailingLZ77Literals')": [
                        196,
                        197,
                        210,
                        211,
                        226,
                        227
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingOfFinalBlockWithTrailingLZ77Literals')": [
                        244,
                        245,
                        264,
                        265,
                        283,
                        284
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingOfFourPairs')": [
                        305,
                        306
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'rewritingWithFinalBackreferenceAndOffsetBiggerThan1')": [
                        326,
                        332,
                        333
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'compress(int)')": [
                        345
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'compress(int,int)')": [
                        349,
                        350
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'compress(byte,int)')": [
                        354,
                        359
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStreamTest', 'prepareExpected(int)')": [
                        369,
                        370
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', None)": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        57,
                        58,
                        72,
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', None)": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        57,
                        58,
                        72,
                        73
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FactoryTest', 'roundtripViaFactory(String)')": [
                        45,
                        46,
                        60,
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FactoryTest', 'roundtripViaFactory(String)')": [
                        45,
                        46,
                        60,
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        59,
                        60
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactory')": [
                        71,
                        72
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryAutoDetection')": [
                        82,
                        83
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4WithDecompressConcatenated')": [
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedTrue')": [
                        102
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedFalse')": [
                        112
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithoutExplicitDecompressConcatenated')": [
                        122
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryWithDecompressConcatenated')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue')": [
                        145
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse')": [
                        156
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated')": [
                        167
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaDumpLz4')": [
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutFrameDescriptor')": [
                        193,
                        200
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutBlockSizeByte')": [
                        207,
                        215
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithWrongVersion')": [
                        222,
                        230
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithInsufficientContentSize')": [
                        237,
                        246
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutHeaderChecksum')": [
                        253,
                        262
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithBadHeaderChecksum')": [
                        269,
                        279
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readsUncompressedBlocks')": [
                        286,
                        296
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readsUncompressedBlocksUsingSingleByteRead')": [
                        305,
                        315
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsBlocksWithoutChecksum')": [
                        322,
                        335
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithoutContentChecksum')": [
                        342,
                        356
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithBadContentChecksum')": [
                        363,
                        378
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'skipsOverSkippableFrames')": [
                        385,
                        405
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'skipsOverTrailingSkippableFrames')": [
                        414,
                        427
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByJunk')": [
                        436,
                        454
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByTooFewBytes')": [
                        461,
                        479
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEnd')": [
                        486,
                        503
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEndInLengthBytes')": [
                        510,
                        526
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignatureTrailer')": [
                        533,
                        548
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignaturePrefix')": [
                        555,
                        570
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsTrailingBytesAfterValidFrame')": [
                        577,
                        592
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        613
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4(StreamWrapper,boolean)')": [
                        643,
                        648,
                        651,
                        652
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'duplicate(byte)')": [
                        657,
                        658
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'expectIOException(String)')": [
                        663
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        59,
                        60
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactory')": [
                        71,
                        72
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryAutoDetection')": [
                        82,
                        83
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4WithDecompressConcatenated')": [
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedTrue')": [
                        102
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedFalse')": [
                        112
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithoutExplicitDecompressConcatenated')": [
                        122
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryWithDecompressConcatenated')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue')": [
                        145
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse')": [
                        156
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated')": [
                        167
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaDumpLz4')": [
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutFrameDescriptor')": [
                        193,
                        200
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutBlockSizeByte')": [
                        207,
                        215
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithWrongVersion')": [
                        222,
                        230
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithInsufficientContentSize')": [
                        237,
                        246
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutHeaderChecksum')": [
                        253,
                        262
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithBadHeaderChecksum')": [
                        269,
                        279
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readsUncompressedBlocks')": [
                        286,
                        296
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readsUncompressedBlocksUsingSingleByteRead')": [
                        305,
                        315
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsBlocksWithoutChecksum')": [
                        322,
                        335
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithoutContentChecksum')": [
                        342,
                        356
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithBadContentChecksum')": [
                        363,
                        378
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'skipsOverSkippableFrames')": [
                        385,
                        405
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'skipsOverTrailingSkippableFrames')": [
                        414,
                        427
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByJunk')": [
                        436,
                        454
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByTooFewBytes')": [
                        461,
                        479
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEnd')": [
                        486,
                        503
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEndInLengthBytes')": [
                        510,
                        526
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignatureTrailer')": [
                        533,
                        548
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignaturePrefix')": [
                        555,
                        570
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsTrailingBytesAfterValidFrame')": [
                        577,
                        592
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        613
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4(StreamWrapper,boolean)')": [
                        643,
                        648,
                        651,
                        652
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'duplicate(byte)')": [
                        657,
                        658
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'expectIOException(String)')": [
                        663
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', None)": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        68,
                        69,
                        76,
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', None)": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        68,
                        69,
                        76,
                        86
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/XXHash32Test.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#XXHash32Test', None)": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32Test', 'verifyChecksum')": [
                        59,
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#XXHash32Test', None)": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32Test', 'verifyChecksum')": [
                        59,
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', None)": [
                        34,
                        44
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'cantPrefillAfterDataHasBeenRead')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'prefillCanBeUsedForBackReferences')": [
                        62,
                        66
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'ifPrefillExceedsWindowSizeTheLastBytesAreUsed')": [
                        74,
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', None)": [
                        34,
                        44
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'cantPrefillAfterDataHasBeenRead')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'prefillCanBeUsedForBackReferences')": [
                        62,
                        66
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStreamTest', 'ifPrefillExceedsWindowSizeTheLastBytesAreUsed')": [
                        74,
                        80
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'compress(Parameters,byte)')": [
                        64,
                        66,
                        74,
                        75,
                        83
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableWithLengthSmallerThanLiteralMax')": [
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableWithLengthGreaterThanLiteralMaxButLessThanTwiceWindowSize')": [
                        99
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableWithLengthThatForcesWindowSlide')": [
                        107
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableSentAsSingleBytes')": [
                        116
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithFullArrayAvailableForCompression')": [
                        125
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithShorterBackReferenceLength')": [
                        134
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleSmallerWindowSize')": [
                        146
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithSingleByteWrites')": [
                        157
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'samIAmExampleWithFullArrayAvailableForCompression')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefill')": [
                        198,
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithShortPrefill')": [
                        226,
                        234,
                        235
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefillBiggerThanWindowSize')": [
                        255,
                        263,
                        264
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillTwice')": [
                        285,
                        286,
                        287
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillAfterCompress')": [
                        296,
                        297,
                        298
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertSize(int,List)')": [
                        305
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        310
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(byte,LZ77Compressor)')": [
                        315
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertBackReference(int,int,LZ77Compressor)')": [
                        320,
                        322
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'stagger(byte)')": [
                        327,
                        328
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'newParameters(int)')": [
                        335
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'newParameters(int,int,int,int,int)')": [
                        339,
                        340
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'compress(Parameters,byte)')": [
                        64,
                        66,
                        74,
                        75,
                        83
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableWithLengthSmallerThanLiteralMax')": [
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableWithLengthGreaterThanLiteralMaxButLessThanTwiceWindowSize')": [
                        99
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableWithLengthThatForcesWindowSlide')": [
                        107
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'nonCompressableSentAsSingleBytes')": [
                        116
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithFullArrayAvailableForCompression')": [
                        125
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithShorterBackReferenceLength')": [
                        134
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleSmallerWindowSize')": [
                        146
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithSingleByteWrites')": [
                        157
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'samIAmExampleWithFullArrayAvailableForCompression')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefill')": [
                        198,
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithShortPrefill')": [
                        226,
                        234,
                        235
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefillBiggerThanWindowSize')": [
                        255,
                        263,
                        264
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillTwice')": [
                        285,
                        286,
                        287
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillAfterCompress')": [
                        296,
                        297,
                        298
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertSize(int,List)')": [
                        305
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        310
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(byte,LZ77Compressor)')": [
                        315
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertBackReference(int,int,LZ77Compressor)')": [
                        320,
                        322
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'stagger(byte)')": [
                        327,
                        328
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'newParameters(int)')": [
                        335
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'newParameters(int,int,int,int,int)')": [
                        339,
                        340
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'defaultConstructor')": [
                        29
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'minBackReferenceLengthIsAtLeastThree')": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLength')": [
                        45
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLengthReversedInvocationOrder')": [
                        51
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxBackReferenceLengthIsMinBackReferenceLengthIfBothAreEqual')": [
                        62
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxOffsetIsWindowSizeMinus1IfSetTo0')": [
                        68
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxOffsetIsWindowSizeMinus1IfSetToANegativeValue')": [
                        74
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxOffsetIsWindowSizeMinus1IfBiggerThanWindowSize')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxLiteralLengthIsWindowSizeIfSetTo0')": [
                        86
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxLiteralLengthIsWindowSizeIfSetToANegativeValue')": [
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxLiteralLengthIsWindowSizeIfSetToAValueTooBigToHoldInSlidingWindow')": [
                        98
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'allParametersUsuallyTakeTheirSpecifiedValues')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'newParameters(int)')": [
                        122
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'newParameters(int,int,int,int,int)')": [
                        126,
                        127
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'defaultConstructor')": [
                        29
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'minBackReferenceLengthIsAtLeastThree')": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLength')": [
                        45
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLengthReversedInvocationOrder')": [
                        51
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxBackReferenceLengthIsMinBackReferenceLengthIfBothAreEqual')": [
                        62
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxOffsetIsWindowSizeMinus1IfSetTo0')": [
                        68
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxOffsetIsWindowSizeMinus1IfSetToANegativeValue')": [
                        74
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxOffsetIsWindowSizeMinus1IfBiggerThanWindowSize')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxLiteralLengthIsWindowSizeIfSetTo0')": [
                        86
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxLiteralLengthIsWindowSizeIfSetToANegativeValue')": [
                        92
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'maxLiteralLengthIsWindowSizeIfSetToAValueTooBigToHoldInSlidingWindow')": [
                        98
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'allParametersUsuallyTakeTheirSpecifiedValues')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'newParameters(int)')": [
                        122
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#ParametersTest', 'newParameters(int,int,int,int,int)')": [
                        126,
                        127
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFileWithBiggerOffset')": [
                        174,
                        183,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        205
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFileWithBiggerOffset')": [
                        174,
                        183,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        205
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(String)')": [
                        36
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(File,Parameters)')": [
                        42,
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(byte,Parameters)')": [
                        62,
                        64,
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'tryReallyBigOffset')": [
                        131,
                        132,
                        137,
                        138
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'tryReallyLongLiterals')": [
                        165,
                        167,
                        168
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'newParameters(int,int,int,int,int)')": [
                        176,
                        177
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(String)')": [
                        36
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(File,Parameters)')": [
                        42,
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(byte,Parameters)')": [
                        62,
                        64,
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'tryReallyBigOffset')": [
                        131,
                        132,
                        137,
                        138
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'tryReallyLongLiterals')": [
                        165,
                        167,
                        168
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'newParameters(int,int,int,int,int)')": [
                        176,
                        177
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        54
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        76,
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        54
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        76,
                        78
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStreamTest', 'testWrite')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStreamTest', 'testWrite')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/z/ZCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'testFailsToCreateZCompressorInputStreamAndThrowsIOException')": [
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'testFailsToCreateZCompressorInputStreamAndThrowsIOException')": [
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        65
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        109
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        109
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'directRoundtrip')": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtrip(OutputStreamCreator)')": [
                        48,
                        49,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'factoryRoundtrip')": [
                        71,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCustomLevel')": [
                        93
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCloseFrameOnFlush')": [
                        103
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithChecksum')": [
                        113
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'directRoundtrip')": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtrip(OutputStreamCreator)')": [
                        48,
                        49,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'factoryRoundtrip')": [
                        71,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCustomLevel')": [
                        93
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCloseFrameOnFlush')": [
                        103
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithChecksum')": [
                        113
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        126
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        126
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        151
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayOneArg')": [
                        40
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayOneArgUnsignedInt32')": [
                        46
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArray')": [
                        57
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayUnsignedInt32')": [
                        63
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStream')": [
                        74
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamUnsignedInt32')": [
                        80
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamThrowsForPrematureEnd')": [
                        91
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplier')": [
                        97
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierUnsignedInt32')": [
                        103
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierThrowsForPrematureEnd')": [
                        115
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInput')": [
                        121
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputUnsignedInt32')": [
                        127
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForLengthTooBig')": [
                        133
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForPrematureEnd')": [
                        139
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToStream')": [
                        145
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToStreamUnsignedInt32')": [
                        153
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToConsumer')": [
                        161
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToConsumerUnsignedInt32')": [
                        169
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutput')": [
                        177,
                        178
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutputUnsignedInt32')": [
                        186,
                        187
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArray')": [
                        196
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArrayUnsignedInt32')": [
                        203
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayOneArg')": [
                        40
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayOneArgUnsignedInt32')": [
                        46
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArray')": [
                        57
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayUnsignedInt32')": [
                        63
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStream')": [
                        74
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamUnsignedInt32')": [
                        80
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamThrowsForPrematureEnd')": [
                        91
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplier')": [
                        97
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierUnsignedInt32')": [
                        103
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierThrowsForPrematureEnd')": [
                        115
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInput')": [
                        121
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputUnsignedInt32')": [
                        127
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForLengthTooBig')": [
                        133
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputThrowsForPrematureEnd')": [
                        139
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToStream')": [
                        145
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToStreamUnsignedInt32')": [
                        153
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToConsumer')": [
                        161
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToConsumerUnsignedInt32')": [
                        169
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutput')": [
                        177,
                        178
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutputUnsignedInt32')": [
                        186,
                        187
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArray')": [
                        196
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArrayUnsignedInt32')": [
                        203
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testSkipReturningZero')": [
                        42,
                        43,
                        44,
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testSkipReturningPositive')": [
                        59,
                        60,
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testReadTakingNoArguments')": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testReadTakingByteArray')": [
                        96,
                        97,
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne')": [
                        113
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionTwo')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree')": [
                        131
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testSkipReturningZero')": [
                        42,
                        43,
                        44,
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testSkipReturningPositive')": [
                        59,
                        60,
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testReadTakingNoArguments')": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testReadTakingByteArray')": [
                        96,
                        97,
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne')": [
                        113
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionTwo')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree')": [
                        131
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStreamTest', 'testReadTakingByteArrayThrowsIOException')": [
                        42,
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStreamTest', 'testReadTakingNoArgumentsThrowsIOException')": [
                        55,
                        56,
                        57,
                        58
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStreamTest', 'testSkip')": [
                        68,
                        69,
                        70,
                        71,
                        72,
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStreamTest', 'testReadTakingByteArrayThrowsIOException')": [
                        42,
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStreamTest', 'testReadTakingNoArgumentsThrowsIOException')": [
                        55,
                        56,
                        57,
                        58
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStreamTest', 'testSkip')": [
                        68,
                        69,
                        70,
                        71,
                        72,
                        74
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteSingleBytes')": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        75
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteBuf')": [
                        83
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testMultiWriteBuf')": [
                        92,
                        93,
                        94,
                        95,
                        96,
                        100,
                        104,
                        105,
                        107,
                        108,
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testPartialWritingThrowsException')": [
                        125,
                        126
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteFailsAfterFLClosedThrowsException')": [
                        136,
                        139,
                        144,
                        147,
                        153,
                        156
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'getClosedFLBOS')": [
                        164,
                        165
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteFailsAfterDestClosedThrowsException')": [
                        176,
                        177,
                        178,
                        186
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWithFileOutputStream')": [
                        200,
                        204,
                        205,
                        206,
                        209,
                        214,
                        215,
                        217
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testBuf(int,String)')": [
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        236,
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'getByteBuffer(byte)')": [
                        247,
                        248,
                        249
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPad(int,String,boolean)')": [
                        256,
                        258,
                        259,
                        260,
                        261
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPadToStream(int,String,boolean)')": [
                        270,
                        272,
                        273,
                        274,
                        275
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'validate(int,byte,byte)')": [
                        285,
                        286
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'assertContainsAtOffset(String,byte,int,byte)')": [
                        295,
                        296
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', None)": [
                        308,
                        309,
                        310,
                        316,
                        327,
                        333,
                        353,
                        359,
                        364
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteSingleBytes')": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        75
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteBuf')": [
                        83
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testMultiWriteBuf')": [
                        92,
                        93,
                        94,
                        95,
                        96,
                        100,
                        104,
                        105,
                        107,
                        108,
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testPartialWritingThrowsException')": [
                        125,
                        126
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteFailsAfterFLClosedThrowsException')": [
                        136,
                        139,
                        144,
                        147,
                        153,
                        156
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'getClosedFLBOS')": [
                        164,
                        165
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteFailsAfterDestClosedThrowsException')": [
                        176,
                        177,
                        178,
                        186
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWithFileOutputStream')": [
                        200,
                        204,
                        205,
                        206,
                        209,
                        214,
                        215,
                        217
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testBuf(int,String)')": [
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        236,
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'getByteBuffer(byte)')": [
                        247,
                        248,
                        249
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPad(int,String,boolean)')": [
                        256,
                        258,
                        259,
                        260,
                        261
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPadToStream(int,String,boolean)')": [
                        270,
                        272,
                        273,
                        274,
                        275
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'validate(int,byte,byte)')": [
                        285,
                        286
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'assertContainsAtOffset(String,byte,int,byte)')": [
                        295,
                        296
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', None)": [
                        308,
                        309,
                        310,
                        316,
                        327,
                        333,
                        353,
                        359,
                        364
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFullyOnChannelReadsFully')": [
                        86
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFullyOnChannelThrowsEof')": [
                        97
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFully(byte,ByteBuffer)')": [
                        110,
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFullyOnChannelReadsFully')": [
                        86
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFullyOnChannelThrowsEof')": [
                        97
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFully(byte,ByteBuffer)')": [
                        110,
                        114
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'closesAllAndThrowsExceptionIfCloseThrows')": [
                        111,
                        115,
                        119
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantTruncate')": [
                        127
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantWrite')": [
                        134
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantPositionToANegativePosition')": [
                        141
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeSingle(byte)')": [
                        150
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeMulti(byte)')": [
                        154,
                        155
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'checkEmpty(SeekableByteChannel)')": [
                        162,
                        163,
                        179
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        184,
                        271,
                        275,
                        283,
                        291
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'check(byte,SeekableByteChannel)')": [
                        197
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'check(byte,SeekableByteChannel,int)')": [
                        221,
                        242
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'grouped(byte,int)')": [
                        248
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'readingFromAPositionAfterEndReturnsEOF')": [
                        371
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'closesAllAndThrowsExceptionIfCloseThrows')": [
                        111,
                        115,
                        119
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantTruncate')": [
                        127
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantWrite')": [
                        134
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantPositionToANegativePosition')": [
                        141
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeSingle(byte)')": [
                        150
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeMulti(byte)')": [
                        154,
                        155
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'checkEmpty(SeekableByteChannel)')": [
                        162,
                        163,
                        179
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        184,
                        271,
                        275,
                        283,
                        291
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'check(byte,SeekableByteChannel)')": [
                        197
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'check(byte,SeekableByteChannel,int)')": [
                        221,
                        242
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'grouped(byte,int)')": [
                        248
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'readingFromAPositionAfterEndReturnsEOF')": [
                        371
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadContentsProperly')": [
                        42,
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadContentsWhenBiggerBufferSupplied')": [
                        56,
                        57,
                        58,
                        59
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadDataFromSetPosition')": [
                        70,
                        71,
                        74
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldSignalEOFWhenPositionAtTheEnd')": [
                        85,
                        86,
                        89
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionOnReadingClosedChannel')": [
                        100
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldWriteDataProperly')": [
                        109,
                        110,
                        111,
                        112
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldWriteDataProperlyAfterPositionSet')": [
                        123,
                        124,
                        125,
                        128
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionOnWritingToClosedChannel')": [
                        141
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        150,
                        154
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldSetProperPositionOnTruncate')": [
                        162
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldSetProperPosition')": [
                        175,
                        176,
                        177,
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionWhenSettingIncorrectPosition')": [
                        190
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionWhenTruncatingToIncorrectSize')": [
                        199
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'readingFromAPositionAfterEndReturnsEOF')": [
                        273
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'writingToAPositionAfterEndGrowsChannel')": [
                        288,
                        293
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'truncateToCurrentSizeDoesntChangeAnything')": [
                        320
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'truncateToBiggerSizeDoesntChangeAnything')": [
                        335
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadContentsProperly')": [
                        42,
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadContentsWhenBiggerBufferSupplied')": [
                        56,
                        57,
                        58,
                        59
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadDataFromSetPosition')": [
                        70,
                        71,
                        74
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldSignalEOFWhenPositionAtTheEnd')": [
                        85,
                        86,
                        89
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionOnReadingClosedChannel')": [
                        100
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldWriteDataProperly')": [
                        109,
                        110,
                        111,
                        112
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldWriteDataProperlyAfterPositionSet')": [
                        123,
                        124,
                        125,
                        128
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionOnWritingToClosedChannel')": [
                        141
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        150,
                        154
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldSetProperPositionOnTruncate')": [
                        162
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldSetProperPosition')": [
                        175,
                        176,
                        177,
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionWhenSettingIncorrectPosition')": [
                        190
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionWhenTruncatingToIncorrectSize')": [
                        199
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'readingFromAPositionAfterEndReturnsEOF')": [
                        273
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'writingToAPositionAfterEndGrowsChannel')": [
                        288,
                        293
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'truncateToCurrentSizeDoesntChangeAnything')": [
                        320
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'truncateToBiggerSizeDoesntChangeAnything')": [
                        335
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ServiceLoaderIteratorTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testNextThrowsNoSuchElementException')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testHasNextReturnsFalse')": [
                        51,
                        52,
                        53
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testRemoveThrowsUnsupportedOperationException')": [
                        63,
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testNextThrowsNoSuchElementException')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testHasNextReturnsFalse')": [
                        51,
                        52,
                        53
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testRemoveThrowsUnsupportedOperationException')": [
                        63,
                        64
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'constructorThrowsOnNonSplitZipFiles')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'channelsPositionIsZeroAfterConstructor')": [
                        59,
                        61
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forOrderedSeekableByteChannelsReturnCorrectClass')": [
                        80,
                        81,
                        83,
                        84,
                        86,
                        87,
                        89
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forOrderedSeekableByteChannelsReturnsIdentityForSingleElement')": [
                        102
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forFilesReturnCorrectClass')": [
                        121,
                        122,
                        123,
                        125
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'buildFromLastSplitSegmentThrowsOnNotZipFile')": [
                        139
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'positionToSomeZipSplitSegment')": [
                        145,
                        146,
                        148,
                        149,
                        151,
                        152,
                        154,
                        155,
                        156,
                        158
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'getSplitZipChannels')": [
                        169,
                        170,
                        173,
                        176
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'constructorThrowsOnNonSplitZipFiles')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'channelsPositionIsZeroAfterConstructor')": [
                        59,
                        61
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forOrderedSeekableByteChannelsReturnCorrectClass')": [
                        80,
                        81,
                        83,
                        84,
                        86,
                        87,
                        89
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forOrderedSeekableByteChannelsReturnsIdentityForSingleElement')": [
                        102
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forFilesReturnCorrectClass')": [
                        121,
                        122,
                        123,
                        125
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'buildFromLastSplitSegmentThrowsOnNotZipFile')": [
                        139
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'positionToSomeZipSplitSegment')": [
                        145,
                        146,
                        148,
                        149,
                        151,
                        152,
                        154,
                        155,
                        156,
                        158
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'getSplitZipChannels')": [
                        169,
                        170,
                        173,
                        176
                    ]
                }
            }
        }
    },
    "06e05dab3bcb9044cc599f0ff18be78c54a8fbae": {
        "authored_data": "2020 Aug 08 21:52",
        "commit.message": "- Add TarArchiveOutputStream.createArchiveEntry(Path, String,\nLinkOption...).\n- Add IOUtils.EMPTY_LINK_OPTIONS.\n- Update new ctor TarArchiveEntry(Path, String, LinkOption...)",
        "commit.author.name": "Gary Gregory",
        "pcid": "6529f6102dc924495295cb7260a153d75386c540",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        449,
                        452,
                        453,
                        479,
                        480,
                        481
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'readOsSpecificProperties(Path)')": [
                        460,
                        463,
                        468,
                        469,
                        472,
                        474,
                        476,
                        478
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'readFileMode(Path,String)')": [
                        482,
                        483
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isDirectory')": [
                        1091
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isFile')": [
                        1109
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        162,
                        240,
                        241,
                        242,
                        272,
                        419,
                        454,
                        458,
                        461,
                        462,
                        463,
                        489,
                        490,
                        491
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'readOsSpecificProperties(Path,LinkOption)')": [
                        470,
                        473,
                        478,
                        479,
                        482,
                        484,
                        486,
                        488
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'readFileMode(Path,String,LinkOption)')": [
                        492,
                        493
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isDirectory')": [
                        1101
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isFile')": [
                        1119
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "new": {
                    "(None, None)": [
                        28,
                        29
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        561,
                        562,
                        568
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        563,
                        564,
                        565,
                        566,
                        567
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49
                    ]
                }
            }
        }
    },
    "6529f6102dc924495295cb7260a153d75386c540": {
        "authored_data": "2020 Aug 08 21:48",
        "commit.message": "Add LinkOptions to SevenZOutputFile.createArchiveEntry().\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "8de9c3978173bbd6157ef3b86184726493ffb3e8",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'createArchiveEntry(Path,String)')": [
                        176,
                        178,
                        180
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', None)": [
                        171
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'createArchiveEntry(Path,String,LinkOption)')": [
                        178,
                        180,
                        182
                    ]
                }
            }
        }
    },
    "8de9c3978173bbd6157ef3b86184726493ffb3e8": {
        "authored_data": "2020 Aug 08 21:13",
        "commit.message": "- Support passing in LinkOption[] to the Archiver file visitor.",
        "commit.author.name": "Gary Gregory",
        "pcid": "5916d5ba161e953e72e225ee7aac46eeff1c34b8",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/examples/Archiver.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        58,
                        75,
                        114
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(ArchiveOutputStream,Path,EnumSet)')": [
                        119,
                        120
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        57,
                        60,
                        63,
                        78,
                        117,
                        118
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(ArchiveOutputStream,Path,EnumSet,LinkOption)')": [
                        123,
                        124,
                        125
                    ]
                }
            }
        }
    },
    "5916d5ba161e953e72e225ee7aac46eeff1c34b8": {
        "authored_data": "2020 Aug 08 21:03",
        "commit.message": "- Add ctor CpioArchiveEntry(Path, String, LinkOption...)\n- Add ctor CpioArchiveEntry(short, Path, String, LinkOption...)\n- Add CpioArchiveEntry.setTime(FileTime)\n- Add createArchiveEntry(Path, String, LinkOption...)\n- Javadoc nits.",
        "commit.author.name": "Gary Gregory",
        "pcid": "7eead05c527f6cd986dbc09d1c9c3e4103b779f6",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        354,
                        363,
                        372,
                        384,
                        397,
                        410,
                        421,
                        432,
                        441,
                        450,
                        459,
                        468,
                        481,
                        499,
                        522,
                        537,
                        546,
                        555,
                        567,
                        578,
                        591,
                        604,
                        617,
                        631,
                        640,
                        649,
                        658,
                        668,
                        677,
                        686,
                        695,
                        704,
                        713,
                        725,
                        739,
                        750,
                        761,
                        775,
                        785,
                        795,
                        823,
                        833,
                        843,
                        857,
                        871,
                        885,
                        895
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        929,
                        930
                    ],
                    "(None, None)": [
                        931
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24,
                        25,
                        26,
                        27,
                        29
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        423,
                        432,
                        444,
                        457,
                        470,
                        481,
                        492,
                        501,
                        510,
                        519,
                        528,
                        541,
                        559,
                        582,
                        597,
                        606,
                        615,
                        627,
                        638,
                        651,
                        664,
                        677,
                        691,
                        700,
                        709,
                        718,
                        728,
                        737,
                        746,
                        755,
                        764,
                        773,
                        785,
                        799,
                        810,
                        821,
                        835,
                        845,
                        855,
                        883,
                        893,
                        903,
                        917,
                        931,
                        945,
                        955,
                        956,
                        957,
                        958,
                        959,
                        962,
                        963,
                        964,
                        965
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'setTime(FileTime)')": [
                        960,
                        961
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        999,
                        1000
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        594,
                        595
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        582,
                        583,
                        584,
                        585,
                        586,
                        587
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        588,
                        589,
                        590,
                        591,
                        592,
                        593
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "new": {
                    "(None, None)": [
                        26,
                        32,
                        276
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', None)": [
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'copy(File,OutputStream)')": [
                        274,
                        275
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'addArchiveEntry(ArchiveOutputStream,String,File)')": [
                        220
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'addArchiveEntry(ArchiveOutputStream,String,File)')": [
                        220
                    ]
                }
            }
        }
    },
    "7eead05c527f6cd986dbc09d1c9c3e4103b779f6": {
        "authored_data": "2020 Aug 08 20:45",
        "commit.message": "Add missing test.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "9cd1221cc7eb094eedd44d7a311852ec963b7e1a",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/examples/ParameterizedExpanderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'setUp')": [
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'setUp')": [
                        78
                    ]
                }
            }
        }
    },
    "9cd1221cc7eb094eedd44d7a311852ec963b7e1a": {
        "authored_data": "2020 Aug 08 20:36",
        "commit.message": "- Add ArArchiveOutputStream.createArchiveEntry(Path, String,\nLinkOption...).\n- Add ArArchiveEntry(Path, String, LinkOption...).\n- Fix formatting in method signatures.\n- No need to nest an else clause.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "38195196f73d9db9335b0e46c1ca0bed1f2c40e8",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', None)": [
                        110
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        183,
                        184
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', None)": [
                        114,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        201
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', None)": [
                        51
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        88
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'fill(long,long,char)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(String)')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        132
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        222,
                        223
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', None)": [
                        53,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'fill(long,long,char)')": [
                        116
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(String)')": [
                        128
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        134
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        224,
                        225
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'createArchiveEntry(Path,String,LinkOption)')": [
                        237,
                        238,
                        239,
                        240,
                        241
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromFile')": [
                        281,
                        284,
                        286,
                        287,
                        302,
                        304,
                        305,
                        318,
                        319
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromFile')": [
                        280,
                        281,
                        283,
                        286,
                        288,
                        289,
                        304,
                        306,
                        319,
                        320
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', None)": [
                        321,
                        322,
                        323,
                        324
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromPath')": [
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371
                    ]
                }
            }
        }
    },
    "38195196f73d9db9335b0e46c1ca0bed1f2c40e8": {
        "authored_data": "2020 Aug 08 20:22",
        "commit.message": "Use new API ArchiveOutputStream.createArchiveEntry(Path, String,\nLinkOption...).\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "29481dd09b4b7d0b5ddbcc9ae92db49b9f2fba6a",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/examples/Archiver.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        74
                    ]
                }
            }
        }
    },
    "29481dd09b4b7d0b5ddbcc9ae92db49b9f2fba6a": {
        "authored_data": "2020 Aug 08 20:17",
        "commit.message": "Add SevenZOutputFile.createArchiveEntry(Path, String).\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "56d780acd21e4d42e4b4280682933910ce89d1c4",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/examples/Archiver.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(SevenZOutputFile,Path)')": [
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(SevenZOutputFile,Path)')": [
                        170
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', None)": [
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        182,
                        183,
                        184
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'createArchiveEntry(Path,String)')": [
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesAndEmptyFiles')": [
                        125,
                        126,
                        127,
                        128,
                        129,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215
                    ]
                }
            }
        }
    }
}