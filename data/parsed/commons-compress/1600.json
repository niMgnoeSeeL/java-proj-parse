{
    "52947266af5797cee1a9277ffea125cbf5363925": {
        "authored_data": "2016 Dec 19 17:40",
        "commit.message": "improve null-safety\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "6b75de47f629a88aa7962fd2b9a2f1f1c1eaf63c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'equals(TarArchiveEntry)')": [
                        379
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'equals(TarArchiveEntry)')": [
                        379
                    ]
                }
            }
        }
    },
    "6b75de47f629a88aa7962fd2b9a2f1f1c1eaf63c": {
        "authored_data": "2016 Dec 19 17:39",
        "commit.message": "silence Sonar where I disagree with it\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "8705e97fbd1aa9de951456f05dff9ec56c4344b2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        361
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        361
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'closeArchiveEntry')": [
                        182,
                        185
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'closeArchiveEntry')": [
                        182,
                        185
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        623
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        623,
                        624
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        487
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        486,
                        488
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'mainSimpleSort(BZip2CompressorOutputStream,int,int,int,int)')": [
                        648,
                        666,
                        679,
                        682
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'mainSort(BZip2CompressorOutputStream,int)')": [
                        976
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'mainSimpleSort(BZip2CompressorOutputStream,int,int,int,int)')": [
                        648,
                        666,
                        679,
                        682
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'mainSort(BZip2CompressorOutputStream,int)')": [
                        976,
                        977
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        63,
                        64,
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        63,
                        64,
                        65
                    ]
                }
            }
        }
    },
    "8705e97fbd1aa9de951456f05dff9ec56c4344b2": {
        "authored_data": "2016 Dec 19 17:38",
        "commit.message": "trivial fixes of \"bugs\" reported by Sonar\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d5867f1852f62498773104babf9abb3792a43a32",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        333
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        363
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        522
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        333
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        363
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        522
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readCLRI')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readBITS')": [
                        212
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'getNextEntry')": [
                        267
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readCLRI')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readBITS')": [
                        212
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'getNextEntry')": [
                        267
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        185
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        185
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFolder(DataOutput,SevenZArchiveEntry)')": [
                        441
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFolder(DataOutput,SevenZArchiveEntry)')": [
                        441
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        680
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        680
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseBinaryLong(byte,int,int,boolean)')": [
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseBinaryLong(byte,int,int,boolean)')": [
                        196
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        243
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        243
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        919,
                        921
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        919,
                        921
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1389
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1389
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1023
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1023
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', None)": [
                        276
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', None)": [
                        276,
                        277
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'getEclass')": [
                        449,
                        450
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'getEclass')": [
                        449,
                        450,
                        451,
                        452
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'finish')": [
                        136,
                        137
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'finish')": [
                        136,
                        137
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        206
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        206
                    ]
                }
            }
        }
    },
    "f015344879f1bc3505bc616fc7ae517cf9f60838": {
        "authored_data": "2016 Oct 28 12:03",
        "commit.message": "COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream\n\nZipArchiveInputStream.getNextZipEntry() throws a ZipException rather\nthan returning null if an invalid entry is encountered in order to\ndifferentiate between \"no more entries\" and \"error\" conditions.\n",
        "commit.author.name": "Mike Mole",
        "pcid": "e0c83d24ed5a59911b0ee59a72104410b91a7c0d",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        249
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        247,
                        250
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        253,
                        257,
                        258,
                        259,
                        261,
                        270,
                        271,
                        272,
                        273
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        247,
                        255,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        268,
                        277,
                        278,
                        279,
                        280,
                        281
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        231,
                        232,
                        233,
                        234,
                        235,
                        248,
                        249,
                        250
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testThrowOnInvalidEntry')": [
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247
                    ]
                }
            }
        }
    },
    "459314a112dd0d7467870a5a2d07fab734940584": {
        "authored_data": "2016 Dec 09 21:03",
        "commit.message": "[COMPRESS-362] Bullet-proof code using try-with-resources statements.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "ffe346a8400f215b6c09825e1959e04c8f303642",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/ArTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', None)": [
                        91,
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'testOptionalFinish')": [
                        95,
                        96,
                        97,
                        98,
                        100,
                        101,
                        102,
                        103,
                        105
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        144,
                        145,
                        146,
                        160,
                        161,
                        162
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'testOptionalFinish')": [
                        95,
                        96,
                        97,
                        98,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        107
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        146,
                        147,
                        148,
                        162,
                        163,
                        164
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStreamAutodetect')": [
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStream')": [
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingOutputStream')": [
                        307,
                        308,
                        309,
                        310,
                        311
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStreamAutodetect')": [
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStream')": [
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingOutputStream')": [
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        44,
                        45,
                        46,
                        47,
                        61,
                        62,
                        63,
                        64,
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        44,
                        45
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        46,
                        47
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        53,
                        54,
                        56,
                        57,
                        58,
                        60,
                        61,
                        63,
                        64,
                        65,
                        66,
                        68,
                        69,
                        70,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        37,
                        38
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        49,
                        50,
                        52,
                        54
                    ]
                }
            }
        }
    }
}