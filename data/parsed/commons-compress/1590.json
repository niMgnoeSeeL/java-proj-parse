{
    "ce6c33a2bb74d3faa76fce1c816dda24cee495fb": {
        "authored_data": "2016 Dec 20 14:35",
        "commit.message": "flag false positive\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2b5ba89b7705592e5ac2de46c6b68cfc5c16a53b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        295
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        295,
                        296
                    ]
                }
            }
        }
    },
    "2b5ba89b7705592e5ac2de46c6b68cfc5c16a53b": {
        "authored_data": "2016 Dec 20 14:06",
        "commit.message": "rename class constants that look like instance fields\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "c61c68d802266e0265a60e81f2eb5ae56e14b315",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'resetBlockSize(int,boolean)')": [
                        71,
                        78,
                        79,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        117,
                        119
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        163,
                        165
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        226
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readRecord')": [
                        239
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'resetBlockSize(int,boolean)')": [
                        71,
                        78,
                        79,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        117,
                        119
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        163,
                        165
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        226
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readRecord')": [
                        239
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        59,
                        60,
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        59,
                        60,
                        61
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        66,
                        67,
                        74,
                        75,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        100
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', None)": [
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        66,
                        67,
                        74,
                        75,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        100
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', None)": [
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114
                    ]
                }
            }
        }
    },
    "c61c68d802266e0265a60e81f2eb5ae56e14b315": {
        "authored_data": "2016 Dec 20 14:00",
        "commit.message": "rename instance fields that look like class fields\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "5e0980f01a5b434aa9bccd8e584ebae681377492",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', None)": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'read')": [
                        81,
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', None)": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'read')": [
                        81,
                        82
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', None)": [
                        58,
                        59,
                        60,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        139,
                        141,
                        145,
                        162,
                        163,
                        164
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', None)": [
                        58,
                        59,
                        60,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        139,
                        141,
                        145,
                        162,
                        163,
                        164
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        85,
                        86,
                        87
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        237,
                        238,
                        240,
                        244,
                        245,
                        246,
                        247,
                        248
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(int)')": [
                        279
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        85,
                        86,
                        87
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        237,
                        238,
                        240,
                        244,
                        245,
                        246,
                        247,
                        248
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(int)')": [
                        279
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getLongNameData')": [
                        360,
                        361
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getLongNameData')": [
                        360,
                        361
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        235,
                        237,
                        243,
                        256,
                        260,
                        268,
                        271,
                        277,
                        280,
                        283,
                        289,
                        293
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skip(long)')": [
                        553
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        731,
                        732,
                        735,
                        736,
                        751,
                        752,
                        754,
                        755,
                        756,
                        758,
                        759
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        923,
                        925
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        977
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        235,
                        237,
                        243,
                        256,
                        260,
                        268,
                        271,
                        277,
                        280,
                        283,
                        289,
                        293
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skip(long)')": [
                        553
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        731,
                        732,
                        735,
                        736,
                        751,
                        752,
                        754,
                        755,
                        756,
                        758,
                        759
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        923,
                        925
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        977
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        1197
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        362
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder(String)')": [
                        411
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        615,
                        616,
                        617,
                        626,
                        627,
                        628
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        645,
                        646,
                        651,
                        656,
                        659,
                        664,
                        669,
                        672,
                        676,
                        679,
                        682,
                        685,
                        688,
                        691,
                        694,
                        697,
                        700,
                        708
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory')": [
                        881,
                        882,
                        884
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory64')": [
                        910,
                        911,
                        912,
                        913,
                        914,
                        915,
                        921,
                        922,
                        923
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory32')": [
                        936,
                        937,
                        938
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        970,
                        971,
                        972,
                        976,
                        978,
                        980,
                        982
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1043,
                        1044,
                        1045,
                        1046,
                        1047,
                        1048,
                        1049
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'startsWithLocalFileHeader')": [
                        1079,
                        1080,
                        1081
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        1196
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        361
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder(String)')": [
                        410
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        614,
                        615,
                        616,
                        625,
                        626,
                        627
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        644,
                        645,
                        650,
                        655,
                        658,
                        663,
                        668,
                        671,
                        675,
                        678,
                        681,
                        684,
                        687,
                        690,
                        693,
                        696,
                        699,
                        707
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory')": [
                        880,
                        881,
                        883
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory64')": [
                        909,
                        910,
                        911,
                        912,
                        913,
                        914,
                        920,
                        921,
                        922
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory32')": [
                        935,
                        936,
                        937
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        969,
                        970,
                        971,
                        975,
                        977,
                        979,
                        981
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1042,
                        1043,
                        1044,
                        1045,
                        1046,
                        1047,
                        1048
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'startsWithLocalFileHeader')": [
                        1078,
                        1079,
                        1080
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', None)": [
                        36
                    ],
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', 'getInput')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', 'stop')": [
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', None)": [
                        36
                    ],
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', 'getInput')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', 'stop')": [
                        68
                    ]
                }
            }
        }
    },
    "5e0980f01a5b434aa9bccd8e584ebae681377492": {
        "authored_data": "2016 Dec 20 13:41",
        "commit.message": "whitelist byte-arrays deliberately shared in package\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0c73ea7c62d325bde4612d19cc31b542f36c9457",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        86,
                        87
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        976,
                        981,
                        985,
                        989,
                        993,
                        997,
                        1001
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        976,
                        981,
                        985,
                        989,
                        993,
                        997,
                        1001
                    ]
                }
            }
        }
    },
    "0c73ea7c62d325bde4612d19cc31b542f36c9457": {
        "authored_data": "2016 Dec 20 13:36",
        "commit.message": "two more trivial fixes for Sonar\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "a03362129bd63208aa6c0a5a47d5ddd2b0cc81f1",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        188
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseBinaryLong(byte,int,int,boolean)')": [
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseBinaryLong(byte,int,int,boolean)')": [
                        196
                    ]
                }
            }
        }
    },
    "a03362129bd63208aa6c0a5a47d5ddd2b0cc81f1": {
        "authored_data": "2016 Dec 20 13:36",
        "commit.message": "move NOSONAR to first line of multi-line statements\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "066ee4cd338aa7a168fe372efc33ee7070b9c962",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        360,
                        361
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        360,
                        361
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        636,
                        638
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        687,
                        689
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        636,
                        638
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        687,
                        689
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        543,
                        544
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        543,
                        544
                    ]
                }
            }
        }
    },
    "066ee4cd338aa7a168fe372efc33ee7070b9c962": {
        "authored_data": "2016 Dec 19 18:00",
        "commit.message": "suppress warnings on \"impossible\" exceptions and exceptions mandated by the public API\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "b03521d077f913e2618d315b458362232ecb96f1",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        987
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1074
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        987
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1074
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        638
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        689
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        638
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        689
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        270
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        331
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        270
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        331
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        59
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        59
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'clone')": [
                        334
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'clone')": [
                        334
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        69,
                        71,
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        69,
                        71,
                        73
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'clone')": [
                        242
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'clone')": [
                        242
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        89
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCentralDirectoryExtra(byte)')": [
                        569
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCentralDirectoryExtra(byte)')": [
                        569
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'clone')": [
                        212
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'clone')": [
                        212
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'clone')": [
                        154
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'clone')": [
                        154
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'mark(int)')": [
                        227
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'mark(int)')": [
                        227
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        78
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        105
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        119
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        135
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        78,
                        79
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        106,
                        107
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        121,
                        122
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        138,
                        139
                    ]
                }
            }
        }
    },
    "b03521d077f913e2618d315b458362232ecb96f1": {
        "authored_data": "2016 Dec 19 17:51",
        "commit.message": "whitespace\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "bcc204d7d0c2fa22970cea1e82691e6f6340e0c2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptions(Object)')": [
                        103
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptions(Object)')": [
                        103
                    ]
                }
            }
        }
    },
    "bcc204d7d0c2fa22970cea1e82691e6f6340e0c2": {
        "authored_data": "2016 Dec 19 17:50",
        "commit.message": "don't wrap XZ for Java's exception\n\nshould be backwards compatible as I'm only changing the signature of a\npackage private method in a package private class.\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "587430df734ed479175bd81377f096be81127b3c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsAsProperties(Object)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsFromCoder(Coder,InputStream)')": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsAsProperties(Object)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsFromCoder(Coder,InputStream)')": [
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsAsProperties(Object)')": [
                        55
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        69,
                        70,
                        82,
                        83
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', None)": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptions(Object)')": [
                        102,
                        107,
                        109,
                        110,
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsAsProperties(Object)')": [
                        55
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        69
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMADecoder', 'getOptions(Object)')": [
                        98
                    ]
                }
            }
        }
    },
    "587430df734ed479175bd81377f096be81127b3c": {
        "authored_data": "2016 Dec 19 17:40",
        "commit.message": "properly make UnsupportedZipFeatureException Serializable\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "52947266af5797cee1a9277ffea125cbf5363925",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        31,
                        32,
                        95
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        31,
                        32,
                        95
                    ]
                }
            }
        }
    }
}