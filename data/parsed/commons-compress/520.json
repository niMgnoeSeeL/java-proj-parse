{
    "291b49d2f36b2e21f209a6eb2913db2ddaf6fef8": {
        "authored_data": "2020 Nov 27 15:30",
        "commit.message": "COMPRESS-560: Add message to assume check\n",
        "commit.author.name": "theobisproject",
        "pcid": "7d004266d31d6bbbc0560159d39c04fec02abb9a",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        118
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        137
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        176
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        118
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        137
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        176
                    ]
                }
            }
        }
    },
    "7d004266d31d6bbbc0560159d39c04fec02abb9a": {
        "authored_data": "2020 Nov 22 13:09",
        "commit.message": "COMPRESS-560: Use assumeTrue/assumeFalse to check if the test should be run on the current OS\n",
        "commit.author.name": "theobisproject",
        "pcid": "b86feb61e7d96e36c9348b4c4ac9ead331fc714a",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        118,
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        139,
                        140,
                        141
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        180,
                        181,
                        182
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        118
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        137
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        176
                    ]
                }
            }
        }
    },
    "b86feb61e7d96e36c9348b4c4ac9ead331fc714a": {
        "authored_data": "2020 Nov 22 13:07",
        "commit.message": "COMPRESS-560: Do not return false if the entry is a tar sparse entry\n",
        "commit.author.name": "theobisproject",
        "pcid": "0bff34c1b409b10f4066ced3e146ed8ae0ad0fe9",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        1009
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        1013,
                        1014,
                        1015,
                        1016,
                        1017
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        1009
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        1013
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        48
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        85,
                        87,
                        89,
                        93,
                        95,
                        97,
                        101,
                        103,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        179,
                        182,
                        187,
                        190,
                        191,
                        192,
                        193,
                        196
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        207
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        48
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        85,
                        86,
                        88,
                        89,
                        91,
                        95,
                        96,
                        98,
                        99,
                        101,
                        105,
                        106,
                        108,
                        109,
                        111
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        147
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        187,
                        188,
                        191,
                        196,
                        197,
                        200,
                        201,
                        202,
                        203,
                        204,
                        207
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        218
                    ]
                }
            }
        }
    },
    "0bff34c1b409b10f4066ced3e146ed8ae0ad0fe9": {
        "authored_data": "2020 Nov 21 18:50",
        "commit.message": "Redundant return.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "50174a9f89328862359546b250cc72d65bfe2fc5",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1379
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte)')": [
                        281,
                        282,
                        283
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte)')": [
                        284
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSet.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSet', 'addAddition(Change)')": [
                        110
                    ]
                }
            }
        }
    },
    "50174a9f89328862359546b250cc72d65bfe2fc5": {
        "authored_data": "2020 Nov 21 18:42",
        "commit.message": "Use upper-case 'L' instead of 'l' for long literal suffix.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "37f193f4f1cc98490f9e13eb752c1ecae4624d7a",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'forgeZipInputStream')": [
                        776
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'forgeZipInputStream')": [
                        776
                    ]
                }
            }
        }
    },
    "37f193f4f1cc98490f9e13eb752c1ecae4624d7a": {
        "authored_data": "2020 Nov 21 17:54",
        "commit.message": "Use final.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "ef28595d5c69d8a52bbdcb7ab06d6734fdfd3cca",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testNoOOMOnCorruptedHeader')": [
                        724
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testNoOOMOnCorruptedHeader')": [
                        724
                    ]
                }
            }
        }
    },
    "ef28595d5c69d8a52bbdcb7ab06d6734fdfd3cca": {
        "authored_data": "2020 Nov 21 17:42",
        "commit.message": "Use blocks.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "ae5baa9f24681ef9f0cfe05658f25b548ed59765",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'populateDynamicTables(BitInputStream,int,int)')": [
                        405
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'populateDynamicTables(BitInputStream,int,int)')": [
                        405,
                        421
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'readStream(InputStream,ArchiveEntry,Map)')": [
                        787
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'readStream(InputStream,ArchiveEntry,Map)')": [
                        787,
                        788,
                        789
                    ]
                }
            }
        }
    },
    "ae5baa9f24681ef9f0cfe05658f25b548ed59765": {
        "authored_data": "2020 Nov 21 17:29",
        "commit.message": "Remove redundant modifiers like private on enum constructors.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "d959766c1419a677f1583b31f654387a735e5589",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        1229
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        1229
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java": {
                "old": {
                    "(None, None)": [
                        190
                    ]
                },
                "new": {
                    "(None, None)": [
                        190
                    ]
                }
            }
        }
    },
    "d959766c1419a677f1583b31f654387a735e5589": {
        "authored_data": "2020 Nov 21 15:26",
        "commit.message": "Use try-with-resource.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "993d5878768f1351d67f61a05f250802a0302945",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'close')": [
                        504,
                        505,
                        507,
                        508
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'close')": [
                        504
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'copy(File,SevenZOutputFile)')": [
                        209,
                        210,
                        211,
                        217,
                        218,
                        219
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', None)": [
                        220
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'copy(File,SevenZOutputFile)')": [
                        209
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        42,
                        43,
                        44,
                        63,
                        64,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', None)": [
                        66,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testPaxGNU')": [
                        73,
                        74,
                        75,
                        79,
                        80,
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testPaxGNU')": [
                        67
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'workaroundForBrokenTimeHeader')": [
                        116,
                        117,
                        118,
                        125,
                        126,
                        127
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', None)": [
                        128,
                        157
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        144,
                        145,
                        146,
                        154,
                        155,
                        156
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'workaroundForBrokenTimeHeader')": [
                        116
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        138
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        59,
                        60,
                        61,
                        75,
                        76,
                        77
                    ],
                    "(None, None)": [
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        59
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        97,
                        98,
                        99,
                        101,
                        102,
                        103
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', None)": [
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        97
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        117,
                        118,
                        119,
                        123,
                        124,
                        125
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', None)": [
                        126,
                        252
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        245,
                        246,
                        247,
                        249,
                        250,
                        251
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        239
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2451,
                        2452,
                        2453,
                        2454,
                        2476,
                        2477,
                        2478,
                        2479,
                        2480
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2521,
                        2522,
                        2523,
                        2524,
                        2534,
                        2535,
                        2536,
                        2537,
                        2538
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2451,
                        2452
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2514,
                        2515
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'winzipBackSlashWorkaround')": [
                        63,
                        64,
                        65,
                        70,
                        71,
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        73,
                        133
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'shouldReadNestedZip')": [
                        126,
                        127,
                        128,
                        130,
                        131,
                        132
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testWithBytesAfterData')": [
                        268,
                        269,
                        270,
                        279,
                        280
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testThrowOnInvalidEntry')": [
                        292,
                        293,
                        294,
                        299,
                        300
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'winzipBackSlashWorkaround')": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'shouldReadNestedZip')": [
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testWithBytesAfterData')": [
                        256,
                        257
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testThrowOnInvalidEntry')": [
                        277,
                        278
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateUnarchive')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        87,
                        88,
                        89,
                        90,
                        91
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        108,
                        109,
                        110,
                        111,
                        113,
                        114,
                        115,
                        116,
                        117
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateUnarchive')": [
                        81,
                        82,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        102,
                        103
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        60,
                        61,
                        62,
                        63,
                        66,
                        67,
                        68,
                        69,
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        60,
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipUnarchive')": [
                        61,
                        63,
                        64,
                        65,
                        67,
                        68,
                        69,
                        70,
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipUnarchive')": [
                        61,
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'copy(InputStream,File)')": [
                        108,
                        109,
                        110,
                        113,
                        114,
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'copy(InputStream,File)')": [
                        108
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/XZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZUnarchive')": [
                        56,
                        58,
                        59,
                        60,
                        62,
                        63,
                        64,
                        65,
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZUnarchive')": [
                        56,
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        69,
                        70,
                        71,
                        72,
                        74,
                        75,
                        76,
                        77,
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        69,
                        70
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliUnarchive')": [
                        156,
                        158,
                        159,
                        160,
                        162,
                        163,
                        164,
                        165,
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliUnarchive')": [
                        156,
                        158
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        153,
                        155,
                        156,
                        157,
                        159,
                        160,
                        161,
                        162,
                        163
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        153,
                        155
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstandardUnarchive')": [
                        156,
                        158,
                        159,
                        160,
                        162,
                        163,
                        164,
                        165,
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstandardUnarchive')": [
                        156,
                        158
                    ]
                }
            }
        }
    }
}