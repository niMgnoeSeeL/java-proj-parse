{
    "e176d4b7d2a818dd7550c9dcb16250c3470869f2": {
        "authored_data": "2020 May 24 10:18",
        "commit.message": "COMPRESS-526 COMRESS-527 more potential runtime exceptions in deflate64\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "aa1bc8720d1186aeb03efff3f7f26cf2d76d2c6a",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read(byte,int,int)')": [
                        86,
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read(byte,int,int)')": [
                        86,
                        87
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'buildTree(int)')": [
                        465,
                        466,
                        467
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'getCodes(int)')": [
                        481,
                        482,
                        483,
                        484
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', None)": [
                        236,
                        237,
                        238,
                        239,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        278,
                        279,
                        280
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadOfRuntimeExceptionCOMPRESS526')": [
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadOfRuntimeExceptionCOMPRESS527')": [
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277
                    ]
                }
            }
        }
    },
    "aa1bc8720d1186aeb03efff3f7f26cf2d76d2c6a": {
        "authored_data": "2020 May 24 08:43",
        "commit.message": "COMPRESS-521 COMPRESS-522 COMPRESS-525 IOException instead of IllegalArgumentException\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "ea37bc163ecd6dfa9e0ec4935f4f0d1557c30b4d",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read(byte,int,int)')": [
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read(byte,int,int)')": [
                        84,
                        85,
                        86,
                        87,
                        88
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        20,
                        21,
                        32,
                        246,
                        247
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', None)": [
                        182,
                        183,
                        184,
                        185,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        233,
                        234,
                        235
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadOfRuntimeExceptionCOMPRESS521')": [
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadOfRuntimeExceptionCOMPRESS522')": [
                        202,
                        203,
                        204,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadOfRuntimeExceptionCOMPRESS525')": [
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'fuzzingTest(int)')": [
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245
                    ]
                }
            }
        }
    },
    "ea37bc163ecd6dfa9e0ec4935f4f0d1557c30b4d": {
        "authored_data": "2020 May 23 21:17",
        "commit.message": "COMPRESS-519 another missed bounds check\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "1d805661b4efad521d9ebd42a51bd2d1faafb520",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        662
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadofRuntimeExceptionCOMPRESS516')": [
                        106,
                        107,
                        109,
                        111,
                        112,
                        113,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        125,
                        126
                    ],
                    "(None, None)": [
                        131
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadOfRuntimeExceptionCOMPRESS516')": [
                        106,
                        107,
                        109,
                        111,
                        112,
                        113,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', None)": [
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        145,
                        146,
                        147
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadOfRuntimeExceptionCOMPRESS519')": [
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'fuzzingTest(int)')": [
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155
                    ]
                }
            }
        }
    },
    "1d805661b4efad521d9ebd42a51bd2d1faafb520": {
        "authored_data": "2020 May 23 20:04",
        "commit.message": "COMPRESS-523 fix test method name\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2ea0e4647c6826bea9b04acb104a2954003e8b5c",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfZip64ExtraCouldNotBeUnderstoodY')": [
                        703
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfThereIsNoEocd')": [
                        703
                    ]
                }
            }
        }
    },
    "2ea0e4647c6826bea9b04acb104a2954003e8b5c": {
        "authored_data": "2020 May 23 19:59",
        "commit.message": "COMPRESS-523 be more defensive when skipping over remainder of archive\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "1793167ce82c43b8ca15cee53fd96e164345607a",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        1058,
                        1059,
                        1060,
                        1061,
                        1062,
                        1063
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'findEocdRecord')": [
                        1070,
                        1095,
                        1096
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skipRemainderOfArchive')": [
                        1058,
                        1059,
                        1060,
                        1061,
                        1062,
                        1063,
                        1064,
                        1065,
                        1066,
                        1067,
                        1068,
                        1069,
                        1070,
                        1071,
                        1072
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'findEocdRecord')": [
                        1079,
                        1104,
                        1106,
                        1107,
                        1111
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        699,
                        700,
                        701,
                        702,
                        710,
                        711,
                        712
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfZip64ExtraCouldNotBeUnderstoodY')": [
                        703,
                        704,
                        705,
                        706,
                        707,
                        708,
                        709
                    ]
                }
            }
        }
    },
    "1793167ce82c43b8ca15cee53fd96e164345607a": {
        "authored_data": "2020 May 23 18:03",
        "commit.message": "COMPRESS-520 don't rely on extra fields to actually be what you think they are\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "f71d3ddd9f9ab2b6c4c072168451e6f72920398f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'processZip64Extra(ZipLong,ZipLong)')": [
                        416,
                        418,
                        419
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'processZip64Extra(ZipLong,ZipLong)')": [
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        423
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1139,
                        1140,
                        1141,
                        1142
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getZip64Extra(ZipArchiveEntry)')": [
                        1771,
                        1772,
                        1773,
                        1774
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'hasZip64Extra(ZipArchiveEntry)')": [
                        1800
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1138,
                        1139,
                        1140,
                        1141,
                        1143
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getZip64Extra(ZipArchiveEntry)')": [
                        1772,
                        1773,
                        1774
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        1800
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setSizesAndOffsetFromZip64Extra(ZipArchiveEntry)')": [
                        837,
                        838
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setSizesAndOffsetFromZip64Extra(ZipArchiveEntry)')": [
                        836,
                        837,
                        838,
                        839,
                        840,
                        842
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        43,
                        44,
                        733,
                        734
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        682,
                        683,
                        684,
                        685,
                        696,
                        697,
                        698,
                        722
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfZip64ExtraCouldNotBeUnderstood')": [
                        686,
                        687,
                        688,
                        689,
                        690,
                        691,
                        692,
                        693,
                        694,
                        695
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'fuzzingTest(int)')": [
                        723,
                        724,
                        725,
                        726,
                        727,
                        728,
                        729,
                        730,
                        731,
                        732
                    ]
                }
            }
        }
    },
    "f71d3ddd9f9ab2b6c4c072168451e6f72920398f": {
        "authored_data": "2020 May 23 16:51",
        "commit.message": "COMPRESS-517 make sure flags and existing fields agree with each other\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "e2b9f6445330be3ae98fe14404e31366a5557825",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'parseFromLocalFileData(byte,int,int)')": [
                        230,
                        231,
                        236,
                        237,
                        242,
                        243
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "new": {
                    "(None, None)": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', None)": [
                        476,
                        483,
                        484
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'resetsFlagsWhenLocalFileArrayIsTooShort')": [
                        477,
                        478,
                        479,
                        480,
                        481,
                        482
                    ]
                }
            }
        }
    },
    "3497dcbcf332cd932604713984edbb04965b0281": {
        "authored_data": "2020 May 23 16:30",
        "commit.message": "COMPRESS-516 turn ArrayIndexOutOfBounds into IOException\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "c3f6b4a5eab979d6e8fac632381b09469c0f9405",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        670
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        29,
                        30,
                        129,
                        130,
                        131
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', None)": [
                        102,
                        103,
                        104,
                        105
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowIOExceptionInsteadofRuntimeExceptionCOMPRESS516')": [
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128
                    ]
                }
            }
        }
    },
    "c3f6b4a5eab979d6e8fac632381b09469c0f9405": {
        "authored_data": "2020 May 23 15:52",
        "commit.message": "COMPRESS-514 7z UINT64 may turn out to become negative longs\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "9e4238713c9a8f9ef16edb1022f81531a705adbc",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'assertFitsIntoInt(String,long)')": [
                        1617
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'assertFitsIntoInt(String,long)')": [
                        1617
                    ]
                }
            }
        }
    }
}