{
    "ef3cad07da846a9a0a2b9112c4f8859e10926e3d": {
        "authored_data": "2020 Oct 30 07:02",
        "commit.message": "Modify some calls of method Collection.toArray\n\nUse method with empty array instead of pre size array, cause it's thread\nsafe and faster.\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "f56300c867658d77451bb7647479cbef59a6bf05",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        222,
                        223
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,ExtraFieldParsingBehavior)')": [
                        222
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        442
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        442
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)')": [
                        146,
                        147
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        229,
                        230
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        228
                    ]
                }
            }
        }
    },
    "f56300c867658d77451bb7647479cbef59a6bf05": {
        "authored_data": "2020 Oct 25 19:36",
        "commit.message": "Use lambdas.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "294f555caf13a63ca162ac422fc9fcf54421362b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        139,
                        140,
                        141,
                        143,
                        144
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        184,
                        185,
                        186,
                        187,
                        188
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        189,
                        236,
                        263
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        230,
                        231,
                        232,
                        233,
                        234,
                        235
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntryRequestSupplier)')": [
                        257,
                        258,
                        259,
                        260,
                        261,
                        262
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        184,
                        185,
                        186
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        227,
                        228,
                        229,
                        230
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntryRequestSupplier)')": [
                        251,
                        252,
                        253,
                        254
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1435,
                        1436,
                        1437,
                        1438,
                        1439,
                        1440,
                        1441,
                        1442,
                        1443,
                        1444,
                        1445,
                        1446,
                        1447,
                        1448,
                        1449,
                        1450,
                        1451,
                        1452,
                        1453,
                        1454,
                        1455,
                        1456,
                        1457,
                        1458,
                        1459
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1435,
                        1436,
                        1437,
                        1438,
                        1439,
                        1440,
                        1441,
                        1442,
                        1443,
                        1444,
                        1445,
                        1446,
                        1447,
                        1448,
                        1449,
                        1450,
                        1451,
                        1452,
                        1453,
                        1454,
                        1455,
                        1456
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        94,
                        95,
                        96,
                        97,
                        98,
                        99
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        92,
                        93,
                        94,
                        95,
                        96,
                        97
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        91
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarMemoryFileSystemTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'checkUserInformationInTarEntry')": [
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'checkUserInformationInTarEntry')": [
                        90,
                        91
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmit')": [
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', None)": [
                        91,
                        92,
                        93,
                        94,
                        107,
                        108,
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmitStreamAwareCallable')": [
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooBig')": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooSmall')": [
                        131,
                        132,
                        133,
                        134,
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableWithLowestLevelApiUsingSubmit')": [
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithHighestLevelUsingSubmitStreamAwareCallable')": [
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier,int)')": [
                        182,
                        183,
                        184,
                        185,
                        186,
                        187
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithTestFiles(CallableConsumerSupplier,int)')": [
                        205,
                        206,
                        207,
                        208,
                        209,
                        210
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeTestFilesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmit')": [
                        83
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmitStreamAwareCallable')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooBig')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooSmall')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableWithLowestLevelApiUsingSubmit')": [
                        113
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithHighestLevelUsingSubmitStreamAwareCallable')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier,int)')": [
                        131
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiWithTestFiles(CallableConsumerSupplier,int)')": [
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        191,
                        195
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        208,
                        213
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeTestFilesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        255,
                        256,
                        257,
                        258,
                        259,
                        267
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        47,
                        48,
                        49,
                        50,
                        51,
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        47
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        27,
                        85,
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'createPayloadSupplier(ByteArrayInputStream)')": [
                        81,
                        82,
                        83,
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'createPayloadSupplier(ByteArrayInputStream)')": [
                        80
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadFile')": [
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        375,
                        376,
                        377,
                        378,
                        379
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadFile')": [
                        402,
                        403,
                        404,
                        405,
                        406
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtraction')": [
                        41,
                        42,
                        43,
                        44
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', None)": [
                        45,
                        46,
                        57,
                        58,
                        67,
                        68
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactory')": [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactoryAutodetection')": [
                        63,
                        64,
                        65,
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtraction')": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactory')": [
                        44,
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactoryAutodetection')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchive')": [
                        39,
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', None)": [
                        43,
                        44,
                        54,
                        55,
                        65,
                        66
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaFactory')": [
                        49,
                        50,
                        51,
                        52,
                        53
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaAutoDetection')": [
                        60,
                        61,
                        62,
                        63,
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchive')": [
                        38
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaFactory')": [
                        43,
                        44
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaAutoDetection')": [
                        49,
                        50
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedTrue')": [
                        100,
                        101,
                        102,
                        103,
                        104,
                        105
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedFalse')": [
                        110,
                        111,
                        112,
                        113,
                        114,
                        115
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithoutExplicitDecompressConcatenated')": [
                        120,
                        121,
                        122,
                        123,
                        124,
                        125
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue')": [
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse')": [
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated')": [
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedTrue')": [
                        100
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedFalse')": [
                        105
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithoutExplicitDecompressConcatenated')": [
                        110
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue')": [
                        128,
                        129
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse')": [
                        134,
                        135
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated')": [
                        140,
                        141
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'compress(Parameters,byte)')": [
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefill')": [
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithShortPrefill')": [
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefillBiggerThanWindowSize')": [
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillTwice')": [
                        285,
                        286,
                        287,
                        288,
                        289
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillAfterCompress')": [
                        296,
                        297,
                        298,
                        299,
                        300
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'compress(Parameters,byte)')": [
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefill')": [
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithShortPrefill')": [
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'blaExampleWithPrefillBiggerThanWindowSize')": [
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillTwice')": [
                        273,
                        274
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'cantPrefillAfterCompress')": [
                        281,
                        282
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'directRoundtrip')": [
                        40,
                        41,
                        42,
                        43
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', None)": [
                        44,
                        45,
                        95,
                        96,
                        105,
                        106
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCustomLevel')": [
                        91,
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCloseFrameOnFlush')": [
                        101,
                        102,
                        103,
                        104
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithChecksum')": [
                        111,
                        112,
                        113,
                        114
                    ],
                    "(None, None)": [
                        115,
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'directRoundtrip')": [
                        40
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCustomLevel')": [
                        86
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCloseFrameOnFlush')": [
                        91
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithChecksum')": [
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkip')": [
                        40,
                        41,
                        42,
                        43
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', None)": [
                        44,
                        45,
                        57,
                        58,
                        59,
                        60,
                        78,
                        79,
                        81
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingRead')": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkipAndRead')": [
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkip')": [
                        40
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingRead')": [
                        45,
                        46,
                        47,
                        48
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', None)": [
                        49,
                        50,
                        65,
                        66
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkipAndRead')": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        64
                    ]
                }
            }
        }
    },
    "555daa4e9bfca0df3449f5484d5b87a5194a5abd": {
        "authored_data": "2020 Oct 07 02:51",
        "commit.message": "COMPRESS-553 : fix for pax header of tar\n\nThe length validation in TarArchiveInputStream.parsePaxHeaders should also consider the headers with length smaller than 1 and ignore these headers.\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "8a65cc9f7db7a851af562c7d098bb06283b64a85",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        757
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        757
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInPadding')": [
                        447
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInContent')": [
                        456
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testThrowExceptionWithNullEntry')": [
                        465
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInPadding')": [
                        447
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInContent')": [
                        456
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testThrowExceptionWithNullEntry')": [
                        465,
                        466,
                        467
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', None)": [
                        468,
                        469,
                        470,
                        471,
                        472
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testThrowException')": [
                        473,
                        474
                    ]
                }
            }
        }
    },
    "8a65cc9f7db7a851af562c7d098bb06283b64a85": {
        "authored_data": "2020 Sep 24 06:25",
        "commit.message": "Fix for CFH detect in ZipArchiveInputStream\n\nThe problem has been fixed in commit 86bb35a. This commit just add a\ntest for it, and document it in changes.xml.\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "0628668ea394775bb750ed5b7fe32626ea0e55d4",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        32,
                        41,
                        815,
                        816
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        733,
                        738,
                        739,
                        740,
                        741,
                        778,
                        779,
                        780,
                        781,
                        782,
                        783,
                        784,
                        785,
                        786
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testZipUsingStoredWithDDAndNoDDSignature')": [
                        734,
                        735,
                        736,
                        737
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'forgeZipInputStream')": [
                        787,
                        788,
                        789,
                        790,
                        791,
                        792,
                        793,
                        794,
                        795,
                        796,
                        797,
                        798,
                        799,
                        800,
                        801,
                        802,
                        803,
                        804,
                        805,
                        806,
                        807,
                        808,
                        809,
                        810,
                        811,
                        812,
                        813,
                        814
                    ]
                }
            }
        }
    },
    "0628668ea394775bb750ed5b7fe32626ea0e55d4": {
        "authored_data": "2020 Sep 20 22:49",
        "commit.message": "Use uppercase for long literal suffix.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "cf2f6c64558280e125a1d90f640f3fdea3160834",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'tryToLocateEndHeader(byte)')": [
                        479
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'tryToLocateEndHeader(byte)')": [
                        479
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        170
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', None)": [
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', None)": [
                        54
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        82,
                        97
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        82,
                        97
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadBigGid')": [
                        266,
                        277
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadBigGid')": [
                        266,
                        277
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundTripOctalOrBinary(int)')": [
                        168,
                        169
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary8Byte')": [
                        238
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary12Byte')": [
                        248
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testWriteNegativeBinary8Byte')": [
                        258
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundTripOctalOrBinary(int)')": [
                        168,
                        169
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary8Byte')": [
                        238
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary12Byte')": [
                        248
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testWriteNegativeBinary8Byte')": [
                        258
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFSTest', 'simpleRountrip')": [
                        33,
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFSTest', 'simpleRountrip')": [
                        33,
                        40
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', None)": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', None)": [
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongToBytes')": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongFromBytes')": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongToBytes')": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongFromBytes')": [
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfStoredEntry')": [
                        190
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSelfExtractingZipUsingUnzipsfx')": [
                        803
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfStoredEntry')": [
                        190
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSelfExtractingZipUsingUnzipsfx')": [
                        803
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testSign')": [
                        94,
                        98
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testSign')": [
                        94,
                        98
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testChecksumUnmasking')": [
                        145,
                        146
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testChecksumUnmasking')": [
                        145,
                        146
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        141
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        141
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        166
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayOneArgUnsignedInt32')": [
                        47
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayUnsignedInt32')": [
                        64
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamUnsignedInt32')": [
                        81
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierUnsignedInt32')": [
                        104
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputUnsignedInt32')": [
                        128
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToStreamUnsignedInt32')": [
                        154
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToConsumerUnsignedInt32')": [
                        170
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutputUnsignedInt32')": [
                        188
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArrayUnsignedInt32')": [
                        204
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayOneArgUnsignedInt32')": [
                        47
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromArrayUnsignedInt32')": [
                        64
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromStreamUnsignedInt32')": [
                        81
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromSupplierUnsignedInt32')": [
                        104
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'fromLittleEndianFromDataInputUnsignedInt32')": [
                        128
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToStreamUnsignedInt32')": [
                        154
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToConsumerUnsignedInt32')": [
                        170
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToDataOutputUnsignedInt32')": [
                        188
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArrayUnsignedInt32')": [
                        204
                    ]
                }
            }
        }
    }
}