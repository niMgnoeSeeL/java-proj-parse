{
    "b5fcfd52e313bc6a2b6b38eccdf9534394c62b83": {
        "authored_data": "2015 Jan 22 17:14",
        "commit.message": "Removed unused import, upgraded statement to contains()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653946 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "0911c6ec7ead06cf9594847412b24bd56e98cc46",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        141
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        141
                    ]
                }
            }
        }
    },
    "0911c6ec7ead06cf9594847412b24bd56e98cc46": {
        "authored_data": "2015 Jan 22 16:32",
        "commit.message": "unused import\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653937 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "4571c58dd7ff37a70765d0226a37e9a4f7b25baf",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "(None, None)": [
                        22
                    ]
                }
            }
        }
    },
    "4571c58dd7ff37a70765d0226a37e9a4f7b25baf": {
        "authored_data": "2015 Jan 20 21:02",
        "commit.message": "Arrays.copyOf requires Java6\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653370 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "a103f8aac368abed3f3e40733886a3833bb7e1a1",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField)')": [
                        369
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getMergedFields')": [
                        373
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addExtraField(ZipExtraField)')": [
                        404
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField)')": [
                        369
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        370,
                        371
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField,int)')": [
                        372,
                        373,
                        374,
                        375
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getMergedFields')": [
                        379
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addExtraField(ZipExtraField)')": [
                        410
                    ]
                }
            }
        }
    },
    "a103f8aac368abed3f3e40733886a3833bb7e1a1": {
        "authored_data": "2015 Jan 20 16:24",
        "commit.message": "some formatting changes and a stray semicolon\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653284 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "70900a3cf93480fa95d4716b40eeb6a2d5f85f92",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        502,
                        897,
                        898,
                        899,
                        900,
                        1163,
                        1164,
                        1165,
                        1319,
                        1320
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1162
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        207,
                        208,
                        270,
                        271,
                        272,
                        634,
                        1164
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1163
                    ]
                }
            }
        }
    },
    "70900a3cf93480fa95d4716b40eeb6a2d5f85f92": {
        "authored_data": "2015 Jan 20 16:20",
        "commit.message": "Updated changes.xml, fixed a small javadoc issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653282 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "ee8f99bbec00035fb82da003395b8bf909cb6c66",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/InputStreamSupplier.java": {
                "old": {
                    "(None, None)": [
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ]
                }
            }
        }
    },
    "ee8f99bbec00035fb82da003395b8bf909cb6c66": {
        "authored_data": "2015 Jan 20 15:03",
        "commit.message": "javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653268 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "446ee1ad204e2a12744f70eb10a2453b845b9a28",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#PasswordRequiredException', None)": [
                        29,
                        30,
                        31,
                        32,
                        33
                    ]
                }
            }
        }
    },
    "446ee1ad204e2a12744f70eb10a2453b845b9a28": {
        "authored_data": "2015 Jan 20 14:56",
        "commit.message": "provide archive name if anything goes wrong extracting stuff from 7z archives\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653264 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "e707c8233405d1a2eda96649f0fbcb10b623386b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(InputStream,long,Coder,byte)')": [
                        33,
                        49,
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        33,
                        49,
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'decode(InputStream,long,Coder,byte)')": [
                        67
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'decode(String,InputStream,long,Coder,byte)')": [
                        67,
                        68
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(InputStream,long,Coder,byte)')": [
                        70,
                        75,
                        76,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        91,
                        103,
                        111,
                        124,
                        129,
                        152,
                        171
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(String,InputStream,long,Coder,byte)')": [
                        70,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        92,
                        104,
                        112,
                        125,
                        130,
                        131,
                        154,
                        173
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'decode(InputStream,long,Coder,byte)')": [
                        33
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        33
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(InputStream,long,Coder,byte)')": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#PasswordRequiredException', None)": [
                        29,
                        30
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#PasswordRequiredException', None)": [
                        29,
                        30
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(DataInputStream,Archive,byte)')": [
                        279,
                        280
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        862,
                        863
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        70,
                        95
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(DataInputStream,Archive,byte)')": [
                        281,
                        282
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        864,
                        865
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zDecryptUnarchiveWithoutPassword')": [
                        63,
                        64,
                        65,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        67,
                        68,
                        69,
                        70,
                        71
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testEncryptedArchiveRequiresPassword')": [
                        80,
                        81,
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testEncryptedArchiveRequiresPassword')": [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78
                    ]
                }
            }
        }
    },
    "e707c8233405d1a2eda96649f0fbcb10b623386b": {
        "authored_data": "2015 Jan 20 14:24",
        "commit.message": "throw a special exception when there is no password for an encrpyted 7z archive - COMPRESS-298\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1653252 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "3b7a059940786cad20282eb2fe303514114e1e1d",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(InputStream,long,Coder,byte)')": [
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(InputStream,long,Coder,byte)')": [
                        57
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zDecryptUnarchiveWithoutPassword')": [
                        63,
                        64,
                        65,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        67,
                        68,
                        69,
                        70,
                        71
                    ]
                }
            }
        }
    },
    "3b7a059940786cad20282eb2fe303514114e1e1d": {
        "authored_data": "2015 Jan 14 07:06",
        "commit.message": "Added ZipArchiveEntryRequest class\n\nZipArchiveEntry is not thread safe, and the hand-off between the creating thread\nand the executorService actually doing the compression has been somewhat of a\ntightrope-walking effort, since we cannot reliably read fields off the ZipArchiveEntry\n\nFurthermore, to achieve true maximum IO performance in the gather-phase it would\nbe required that Zip headers be created in the parallel part of the compression run,\nwhich was not possible prior to this commit.\n\nThe ZipArchiveEntryRequest has clear and well-defined thread semantics and can cater\nfor any future algorithmic improvements that may want to try to take performance to the\nvery edge of what is achievable. To my understanding this will not be for this next\nrelasease :)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1651575 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "8aa559f2da10a595d114bd4890197a5a81d3d8ed",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        135
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        152,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165
                    ]
                },
                "new": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        153,
                        158,
                        161
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        52,
                        55,
                        58,
                        59,
                        62,
                        70,
                        84,
                        85,
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'addArchiveEntry(ZipArchiveEntry,InputStream,int)')": [
                        89,
                        90,
                        91,
                        92,
                        93
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        52,
                        57,
                        58,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        71,
                        75,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'addArchiveEntry(ZipArchiveEntryRequest)')": [
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'putArchiveEntry')": [
                        39,
                        40,
                        44
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        27,
                        70,
                        71,
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'putArchiveEntry')": [
                        41,
                        42,
                        43,
                        46,
                        48
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', None)": [
                        65
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'createPayloadSupplier(ByteArrayInputStream)')": [
                        66,
                        67,
                        68,
                        69
                    ]
                }
            }
        }
    }
}