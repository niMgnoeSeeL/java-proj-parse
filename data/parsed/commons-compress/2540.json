{
    "5b0d41a55655e62b599b3f132a52c2aa520847de": {
        "authored_data": "2012 Jul 16 23:32",
        "commit.message": "Cannot use close on null underlying stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1362311 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "ead7019cc23ea1ec60f0cf1777ed1f85c0925c34",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        209
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        210
                    ]
                }
            }
        }
    },
    "ead7019cc23ea1ec60f0cf1777ed1f85c0925c34": {
        "authored_data": "2012 Jul 16 22:48",
        "commit.message": "Ensure resources are closed\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1362302 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "00fecc4053a2ea7c62b2bdde88c9352f3ccc3147",
        "changes": {
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "new": {
                    "(None, None)": [
                        22,
                        398,
                        399,
                        400,
                        401,
                        402
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        393
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'closeQuietly(Closeable)')": [
                        394,
                        395,
                        396,
                        397
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        34,
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        33,
                        35,
                        42,
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.memory#MemoryArchiveTestCase', 'testReading')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readSimplePaxHeader')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readNonAsciiPaxHeader')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readSimplePaxHeader')": [
                        41,
                        42,
                        47
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        52,
                        53,
                        58
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readNonAsciiPaxHeader')": [
                        66,
                        67,
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberStarMode')": [
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberPosixMode')": [
                        124,
                        125
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'writePaxHeader(Map)')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNamePosixMode')": [
                        213,
                        214
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryStarMode')": [
                        241,
                        242
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryPosixMode')": [
                        271,
                        272
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryError')": [
                        286
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiPathNamePaxHeader')": [
                        307
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiLinkPathNamePaxHeader')": [
                        329
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        207
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', None)": [
                        241
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        207,
                        226
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', None)": [
                        242
                    ]
                }
            }
        }
    },
    "00fecc4053a2ea7c62b2bdde88c9352f3ccc3147": {
        "authored_data": "2012 Jul 16 22:48",
        "commit.message": "Javadoc syntax\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1362301 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "13f8b90189b1856e19c7cbe4fb025daf848df2c9",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java": {
                "old": {
                    "(None, None)": [
                        44,
                        52,
                        60,
                        68,
                        76,
                        84,
                        92,
                        107,
                        114,
                        121,
                        128,
                        129,
                        137,
                        144,
                        151,
                        159
                    ]
                },
                "new": {
                    "(None, None)": [
                        44,
                        52,
                        60,
                        68,
                        76,
                        84,
                        92,
                        107,
                        114,
                        121,
                        128,
                        129,
                        137,
                        144,
                        151,
                        159
                    ]
                }
            }
        }
    },
    "13f8b90189b1856e19c7cbe4fb025daf848df2c9": {
        "authored_data": "2012 Jul 16 22:44",
        "commit.message": "Remove @return from void method\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1362300 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "9d2363748bfaeb8c06c6d3ea73e318bb343bd803",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', None)": [
                        127
                    ]
                }
            }
        }
    },
    "9d2363748bfaeb8c06c6d3ea73e318bb343bd803": {
        "authored_data": "2012 Jul 16 22:43",
        "commit.message": "Ensure resource is closed\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1362299 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "c96b2e2f749d7909c1b5aaa518ff687a70e9f5ba",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        293
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        292,
                        294,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311
                    ]
                }
            }
        }
    },
    "c96b2e2f749d7909c1b5aaa518ff687a70e9f5ba": {
        "authored_data": "2012 Jul 08 18:55",
        "commit.message": "COMPRESS-188 improve exception method for unsupported compression methods in zips.  Submitted by Harald Kuhn\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1358814 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "581a7f54400ee8a22b306d60f2fcd1f1f1f92870",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        228,
                        229,
                        230
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234
                    ],
                    "(None, None)": [
                        235
                    ]
                }
            }
        }
    },
    "2ab43b0a1d56be413754424910362811fa3d85c4": {
        "authored_data": "2012 Jul 07 19:34",
        "commit.message": "COMPRESS-192 add an encoding option to ArchiveStreamFactory for zip and tar.  Based on patch by Jukka Zitting\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1358626 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "9bdacbfb9631d3a3710a64f35482c643b78a2e79",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(String,InputStream)')": [
                        132,
                        135
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveOutputStream(String,OutputStream)')": [
                        173,
                        176
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        213,
                        237
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', None)": [
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        132,
                        133,
                        134
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'getEntryEncoding')": [
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'setEntryEncoding(String)')": [
                        130,
                        131
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(String,InputStream)')": [
                        159,
                        160,
                        161,
                        162,
                        163,
                        166,
                        167,
                        168,
                        169,
                        170
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveOutputStream(String,OutputStream)')": [
                        208,
                        209,
                        210,
                        211,
                        212,
                        215,
                        216,
                        217,
                        218,
                        219
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        256,
                        257,
                        258,
                        259,
                        260,
                        284,
                        285,
                        286,
                        287,
                        288
                    ],
                    "(None, None)": [
                        311
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141
                    ]
                }
            }
        }
    },
    "9bdacbfb9631d3a3710a64f35482c643b78a2e79": {
        "authored_data": "2012 Jul 07 05:30",
        "commit.message": "COMPRESS-191 ArchiveStreamFactory false positive for tar format.  Submitted by Jukka Zitting\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1358506 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "811fb4e1f7cb0b87d9af62cc892ac06a413eb560",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        243,
                        244
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        243,
                        244,
                        245,
                        246
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "new": {
                    "(None, None)": [
                        24,
                        26,
                        27,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        47,
                        48,
                        49,
                        50
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'aiffFilesAreNoTARs')": [
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61
                    ]
                }
            }
        }
    },
    "811fb4e1f7cb0b87d9af62cc892ac06a413eb560": {
        "authored_data": "2012 Jul 07 05:19",
        "commit.message": "COMPRESS-191 add checksum check to TarArchiveEntry.  Submitted by Jukka Zitting.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1358504 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "aa8365f5b5bc871f1c8ad95412e68ee09ea44af2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        135,
                        136,
                        137,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isCheckSumOK')": [
                        563,
                        564
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean)')": [
                        959
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java": {
                "new": {
                    "(None, None)": [
                        72,
                        73,
                        74,
                        75,
                        76
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        621,
                        622
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        564,
                        565,
                        566,
                        567,
                        568,
                        569,
                        570,
                        571,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580,
                        581,
                        582,
                        583,
                        584,
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595,
                        596,
                        597,
                        598
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'verifyCheckSum(byte)')": [
                        599,
                        600,
                        601,
                        602,
                        603,
                        604,
                        605,
                        606,
                        607,
                        608,
                        609,
                        610,
                        611,
                        612,
                        613,
                        614,
                        615,
                        616,
                        617,
                        618,
                        619,
                        620
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testTarFileWithFSRoot')": [
                        83,
                        87,
                        91,
                        95
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'workaroundForBrokenTimeHeader')": [
                        79
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        109
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', None)": [
                        242
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testVerifyHeaderCheckSum')": [
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332
                    ],
                    "(None, None)": [
                        333,
                        334
                    ]
                }
            }
        }
    }
}