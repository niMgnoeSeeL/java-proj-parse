{
    "f2af9f0c583ce5d5e294b60ada9e14516f5e92ac": {
        "authored_data": "2017 May 11 03:06",
        "commit.message": "COMPRESS-391: Persist alignment request\n",
        "commit.author.name": "Zbynek Vyskovsky",
        "pcid": "c312e43b03d1e18fd65908621a0ce885ae1c5fed",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1048,
                        1049,
                        1050,
                        1051,
                        1052,
                        1053,
                        1054,
                        1055,
                        1056,
                        1057,
                        1058,
                        1059
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1045,
                        1046,
                        1047,
                        1048,
                        1049,
                        1050,
                        1051,
                        1052,
                        1053,
                        1054,
                        1055,
                        1056,
                        1057,
                        1058,
                        1059,
                        1060,
                        1061,
                        1062,
                        1063,
                        1064,
                        1065,
                        1066
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        488,
                        490,
                        520
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        488,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        506,
                        507,
                        511,
                        512,
                        513,
                        519,
                        520,
                        524,
                        525,
                        526,
                        533,
                        534,
                        538,
                        539,
                        540,
                        542,
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556
                    ]
                }
            }
        }
    },
    "c312e43b03d1e18fd65908621a0ce885ae1c5fed": {
        "authored_data": "2017 May 10 08:02",
        "commit.message": "COMPRESS-391 add pointer to zipalign\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "702f27a8779fa77a2ea0a1b6cc6e1e4d678d4fbb",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java": {
                "new": {
                    "(None, None)": [
                        30,
                        31,
                        32,
                        34,
                        35
                    ]
                }
            }
        }
    },
    "702f27a8779fa77a2ea0a1b6cc6e1e4d678d4fbb": {
        "authored_data": "2017 May 10 07:55",
        "commit.message": "deal with existing PaddingExtraFields when calculating the alignment\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "e3e137df87f35b4249133478b77c4222f8e530a8",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#PaddingExtraField', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#PaddingExtraField', None)": [
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1047,
                        1053
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1047,
                        1051,
                        1052,
                        1053,
                        1054,
                        1055,
                        1058
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        501
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        509,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520
                    ]
                }
            }
        }
    },
    "e3e137df87f35b4249133478b77c4222f8e530a8": {
        "authored_data": "2017 May 09 07:27",
        "commit.message": "COMPRESS-391 implement padding as ZipExtraField class\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "bd64dc7abee36984e830c740588990739b71cc93",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setAlignment(int)')": [
                        343,
                        344
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setAlignment(int)')": [
                        343,
                        344,
                        345
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        146,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1051,
                        1054,
                        1057,
                        1058,
                        1111,
                        1112,
                        1113,
                        1114,
                        1115,
                        1116,
                        1118,
                        1125,
                        1126,
                        1127,
                        1128,
                        1129,
                        1130
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1045,
                        1050,
                        1051,
                        1052,
                        1053,
                        1107
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', None)": [
                        30,
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', None)": [
                        512
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignmentExceed')": [
                        519,
                        520,
                        521
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', None)": [
                        512
                    ]
                }
            }
        }
    },
    "bd64dc7abee36984e830c740588990739b71cc93": {
        "authored_data": "2017 May 05 03:44",
        "commit.message": "COMPRESS-391: Allow alignment on zip content\n",
        "commit.author.name": "Zbynek Vyskovsky",
        "pcid": "ca7ea939eaa9dad5f00c8a5e269f09681602bc98",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        88,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getAlignment')": [
                        332,
                        333
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setAlignment(int)')": [
                        342,
                        343,
                        344,
                        345,
                        346
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        1029
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        1039,
                        1042,
                        1095
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        1041
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1050,
                        1053,
                        1054,
                        1055,
                        1056,
                        1057,
                        1058,
                        1059,
                        1111,
                        1112,
                        1113,
                        1114,
                        1115,
                        1116,
                        1118,
                        1123,
                        1125,
                        1126,
                        1127,
                        1128,
                        1129,
                        1130,
                        1131
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', None)": [
                        464,
                        465,
                        466,
                        467,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        522,
                        523,
                        524,
                        525,
                        526,
                        527,
                        528,
                        532,
                        533
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502,
                        503,
                        504
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignmentExceed')": [
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testInvalidAlignment')": [
                        529,
                        530,
                        531
                    ]
                }
            }
        }
    },
    "ca7ea939eaa9dad5f00c8a5e269f09681602bc98": {
        "authored_data": "2017 May 10 15:15",
        "commit.message": "make Sonar less unhappy\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "3240f2526fa6b16f73fd445286641af7e16f2925",
        "changes": {
            "src/main/java/org/apache/commons/compress/MemoryLimitException.java": {
                "old": {
                    "('org.apache.commons.compress#MemoryLimitException', 'buildMessage(long,int)')": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#MemoryLimitException', 'buildMessage(long,int)')": [
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'detect(InputStream)')": [
                        502,
                        509,
                        526,
                        539,
                        554
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'detect(InputStream)')": [
                        502,
                        509,
                        526,
                        539,
                        554
                    ]
                }
            }
        }
    },
    "3240f2526fa6b16f73fd445286641af7e16f2925": {
        "authored_data": "2017 May 10 10:46",
        "commit.message": "remove @return after changing method to void\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "a4b0ee96fc87effd27a4c0af23835cce3647cc0c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        266
                    ]
                }
            }
        }
    },
    "a4b0ee96fc87effd27a4c0af23835cce3647cc0c": {
        "authored_data": "2017 May 10 10:20",
        "commit.message": "readFully's return value is useless, it throws an exception at EOF\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "4ac67bf326c1494126161b18612bb62975246ab2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        129,
                        130
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        176,
                        177,
                        178
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        221,
                        222
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        257,
                        258,
                        259,
                        266,
                        269,
                        270,
                        271,
                        279,
                        286,
                        330,
                        331
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readFully(byte,int,int)')": [
                        337,
                        343,
                        344
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        129,
                        130,
                        131,
                        132,
                        133,
                        134
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        180,
                        181,
                        182,
                        183,
                        184,
                        185
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        228,
                        229,
                        230,
                        231,
                        232,
                        233
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        268,
                        275,
                        278,
                        286,
                        293
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readFully(byte,int,int)')": [
                        342
                    ]
                }
            }
        }
    },
    "4ac67bf326c1494126161b18612bb62975246ab2": {
        "authored_data": "2017 May 08 10:42",
        "commit.message": "avoid returning 0 from read(b, off, len)\n\nwhile debugging what seemed to be a bug inside the compress antlib it\nlooks as if BufferedInputStream would translate a 0 return value into\nEOF.\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0eccda844e59b6d5bdd06e62710bbf09dacc040d",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'read(byte,int,int)')": [
                        75,
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'read(byte,int,int)')": [
                        75,
                        87
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        105,
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        105,
                        111
                    ]
                }
            }
        }
    }
}