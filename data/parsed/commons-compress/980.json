{
    "792da6735e532a6e7f2f2a017d999a8f7c30f2fe": {
        "authored_data": "2018 Jul 28 14:24",
        "commit.message": "COMPRESS-460 rudimentary javadocs and tests\n\ncloses #68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "c5c231e643365485c5805cbca81070a51429de9c",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorOutputStream', None)": [
                        37,
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorOutputStream', None)": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        73,
                        74,
                        75,
                        76,
                        77
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'directRoundtrip')": [
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', None)": [
                        34,
                        35,
                        36,
                        37,
                        44,
                        45,
                        46,
                        47,
                        89,
                        95,
                        96,
                        97,
                        98,
                        99,
                        105,
                        106,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'directRoundtrip')": [
                        40,
                        41,
                        42,
                        43
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtrip(OutputStreamCreator)')": [
                        48,
                        54
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCustomLevel')": [
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithCloseFrameOnFlush')": [
                        100,
                        101,
                        102,
                        103,
                        104
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtripWithChecksum')": [
                        110,
                        111,
                        112,
                        113,
                        114
                    ],
                    "(None, None)": [
                        115,
                        116,
                        117,
                        118
                    ]
                }
            }
        }
    },
    "c5c231e643365485c5805cbca81070a51429de9c": {
        "authored_data": "2018 Jul 24 07:30",
        "commit.message": "Allow specifying Zstandard compression level\n\nZstdCompressorOutputStream allows to compress data using Zstandard, but the default compression level of 3 is hard-coded.\nPrograms that wish to use a different compression level must reimplement ZstdCompressorOutputStream.\nI suggest we add a constructor that takes a compression level and passes it to\n`new ZstdOutputStream(...)`.\n",
        "commit.author.name": "Carmi Grushko",
        "pcid": "6f8c4960c2af25b7e4b36473d81fe652490dbbeb",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorOutputStream', None)": [
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorOutputStream', None)": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ]
                }
            }
        }
    },
    "6f8c4960c2af25b7e4b36473d81fe652490dbbeb": {
        "authored_data": "2018 Jul 11 16:59",
        "commit.message": "COMPRESS-459 no reason to encode the name twice\n\nThis reverts commit c8ee9f781900f874b075433141de779723b3e110.\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "430e1267633bf2db0ee1c833c0c5f61f4a45702d",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23,
                        27
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        473,
                        485,
                        486,
                        503
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(ZipEncoding)')": [
                        490,
                        494,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        471,
                        483,
                        484
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(Charset)')": [
                        488,
                        492,
                        495
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        307
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        370
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        308
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        371
                    ]
                }
            }
        }
    },
    "c8ee9f781900f874b075433141de779723b3e110": {
        "authored_data": "2018 Jul 11 16:50",
        "commit.message": "COMPRESS-459 use ZipEncoding consistently\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "72bfc1247553bdd2711d6bb27a7179be86ded4f1",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        471,
                        483,
                        484
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(Charset)')": [
                        488,
                        492,
                        495
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23,
                        27
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        473,
                        485,
                        486,
                        503
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(ZipEncoding)')": [
                        490,
                        494,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        308
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        371
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        307
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        370
                    ]
                }
            }
        }
    },
    "72bfc1247553bdd2711d6bb27a7179be86ded4f1": {
        "authored_data": "2018 Jul 11 16:42",
        "commit.message": "COMPRESS-459 fix writing of multibyte names and add a test as proof\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "17575b8836ba18201ac7b839aeb432421b0c89bf",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        303,
                        305
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        334,
                        336
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        364,
                        366
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        540,
                        543
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(String)')": [
                        544,
                        547,
                        549
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        304,
                        305,
                        307
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        336,
                        337,
                        339
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        367,
                        368,
                        370
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        544,
                        545,
                        548,
                        549,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'encode(String)')": [
                        550,
                        553
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(byte)')": [
                        561,
                        562,
                        564
                    ]
                }
            }
        }
    },
    "17575b8836ba18201ac7b839aeb432421b0c89bf": {
        "authored_data": "2018 Jul 11 16:09",
        "commit.message": "whitespace\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "1fbb16b037e62c6af90ab89ab3ac8d3633c59a90",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        484,
                        505
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(Charset)')": [
                        488,
                        489,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(long)')": [
                        508,
                        515
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        484,
                        505
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(Charset)')": [
                        488,
                        489,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(long)')": [
                        508,
                        515
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        396
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        452
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        396
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        452
                    ]
                }
            }
        }
    },
    "1fbb16b037e62c6af90ab89ab3ac8d3633c59a90": {
        "authored_data": "2018 Jul 11 07:20",
        "commit.message": "Fix writing of multibyte name entries\n",
        "commit.author.name": "Jens Reimann",
        "pcid": "9e80104befc54daaa097870b857e1bc334521490",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount')": [
                        472,
                        473
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        470,
                        471,
                        472,
                        475,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount')": [
                        477
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(Charset)')": [
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        305
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        366
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        306
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        367
                    ]
                }
            }
        }
    },
    "9e80104befc54daaa097870b857e1bc334521490": {
        "authored_data": "2018 Jul 09 09:41",
        "commit.message": "Fix reading of multibyte name entries\n\nThis fixes COMPRESS-459 by using the name number of bytes from the field\nin the stream instead of relying on the assumption that each character\nis exactly one byte, which isn't true for UTF-8, UTF-16 or other\nmulti-byte character encodings.\n",
        "commit.author.name": "Jens Reimann",
        "pcid": "f5330f7e667f5a7245c8a5f3007cda04554c5fe2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount')": [
                        475
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount')": [
                        472,
                        473
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount(long)')": [
                        486,
                        490
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        396
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        452
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        396
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        452
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', None)": [
                        68,
                        69
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchiveMultibyteCharName')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82
                    ],
                    "(None, None)": [
                        83
                    ]
                }
            }
        }
    },
    "f5330f7e667f5a7245c8a5f3007cda04554c5fe2": {
        "authored_data": "2018 Jul 07 20:30",
        "commit.message": "(doc) fix typo in javadoc\n",
        "commit.author.name": "Arne Babenhauserheide",
        "pcid": "3125fb600973a3dbef65660a6780c2f6cfe6a9db",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/SkipShieldingInputStream.java": {
                "old": {
                    "(None, None)": [
                        28
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ]
                }
            }
        }
    }
}