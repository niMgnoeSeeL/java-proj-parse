{
    "9ab66a22c30fd3949c9074075bfa54038c2a1500": {
        "authored_data": "2021 Jul 02 22:46",
        "commit.message": "Simplify Assertions (#205)\n\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "bce1af06f799943cd5d6b99a7ef4ff60e4c48937",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testEquals')": [
                        106,
                        110,
                        111
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testEquals')": [
                        107,
                        111,
                        112
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testEquals')": [
                        82,
                        86,
                        87
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testEquals')": [
                        83,
                        87,
                        88
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testEquals')": [
                        80,
                        84,
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testEquals')": [
                        81,
                        85,
                        86
                    ]
                }
            }
        }
    },
    "80124dd9fe4b0a0b2e203ca19aacac8cd0afc96f": {
        "authored_data": "2021 Jul 02 18:00",
        "commit.message": "remove pattern where we first allocate an array and then try to fill it\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d80d76f81b45655b0b1d234d25ee26f817f7b770",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        104,
                        105,
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        343,
                        344
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte,int,int)')": [
                        389,
                        390
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        104,
                        105,
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        343,
                        344
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte,int,int)')": [
                        389,
                        390
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readFully(DataInputStream,byte)')": [
                        125,
                        127
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readHeader')": [
                        147,
                        148
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readMainHeader')": [
                        169,
                        170,
                        188,
                        204,
                        205
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readLocalFileHeader')": [
                        225,
                        226,
                        255,
                        256
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readRange(InputStream,int)')": [
                        126,
                        128,
                        130,
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readHeader')": [
                        152
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readMainHeader')": [
                        173,
                        174,
                        175,
                        193,
                        209
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readLocalFileHeader')": [
                        229,
                        230,
                        259
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readBinaryLong(int,boolean)')": [
                        359,
                        360
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readAsciiLong(int,int)')": [
                        366,
                        367
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readCString(int)')": [
                        484,
                        485
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readRange(int)')": [
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        365,
                        366
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readBinaryLong(int,boolean)')": [
                        369
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readAsciiLong(int,int)')": [
                        375
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readCString(int)')": [
                        492
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readDirectoryEntry(DumpArchiveEntry)')": [
                        340,
                        341,
                        342,
                        343
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readDirectoryEntry(DumpArchiveEntry)')": [
                        341,
                        342,
                        343,
                        344,
                        345
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        300,
                        301
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        300
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readRange(int)')": [
                        357,
                        358,
                        359,
                        360,
                        361,
                        362
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        363,
                        364
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/Expander.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(SevenZFile,File)')": [
                        330
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(SevenZFile,File)')": [
                        330
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readArchiveProperties(ByteBuffer)')": [
                        649
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        707,
                        708
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        706,
                        707
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map,long)')": [
                        757,
                        758
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map,long)')": [
                        757,
                        758
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        126,
                        127,
                        128
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        126,
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFileFormat(byte,int,int)')": [
                        374
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFileFormat(byte,int,int)')": [
                        378
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        281,
                        342,
                        343,
                        349,
                        350
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFirstLocalFileHeader(byte)')": [
                        413,
                        414,
                        415,
                        426,
                        427
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        281,
                        342,
                        348
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFirstLocalFileHeader')": [
                        411,
                        412,
                        413,
                        424,
                        425
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        881,
                        882
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readRange(int)')": [
                        883,
                        884,
                        885,
                        886,
                        887,
                        888,
                        889
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        823,
                        824,
                        832,
                        833,
                        845,
                        846
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1309,
                        1310
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        823,
                        824,
                        825,
                        826,
                        834,
                        835,
                        836,
                        837,
                        849,
                        850,
                        851,
                        852
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1315,
                        1316,
                        1317,
                        1318
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "new": {
                    "('org.apache.commons.compress.utils#IOUtils', None)": [
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'copyRange(InputStream,long,OutputStream)')": [
                        299,
                        300,
                        301
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'copyRange(InputStream,long,OutputStream,int)')": [
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readRange(InputStream,int)')": [
                        348,
                        349,
                        350,
                        351
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readRange(ReadableByteChannel,int)')": [
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378
                    ],
                    "(None, None)": [
                        379,
                        380
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFully(byte,ByteBuffer)')": [
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', None)": [
                        97,
                        100,
                        101,
                        102,
                        109,
                        110,
                        111,
                        112,
                        119,
                        120,
                        121,
                        122,
                        128,
                        129,
                        130,
                        131,
                        137,
                        138,
                        139,
                        140,
                        148,
                        149,
                        150,
                        151,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'copyRangeThrowsOnZeroBufferSize')": [
                        98,
                        99
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'copyRangeDoesntCopyMoreThanAskedFor')": [
                        103,
                        104,
                        105,
                        106,
                        107,
                        108
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'copyRangeStopsIfThereIsNothingToCopyAnymore')": [
                        113,
                        114,
                        115,
                        116,
                        117,
                        118
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readRangeFromStreamDoesntReadMoreThanAskedFor')": [
                        123,
                        124,
                        125,
                        126,
                        127
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readRangeFromStreamStopsIfThereIsNothingToReadAnymore')": [
                        132,
                        133,
                        134,
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readRangeFromChannelDoesntReadMoreThanAskedFor')": [
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readRangeFromChannelStopsIfThereIsNothingToReadAnymore')": [
                        152,
                        153,
                        154,
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'readFully(byte,ByteBuffer)')": [
                        162
                    ]
                }
            }
        }
    },
    "d80d76f81b45655b0b1d234d25ee26f817f7b770": {
        "authored_data": "2021 Jul 02 13:34",
        "commit.message": "sanity check entry sizes in TarFile\n\nCredit to OSS-Fuzz\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "ef5d70b625000e38404194aaab311b771c44efda",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        670
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        670,
                        672,
                        673,
                        674
                    ]
                }
            }
        }
    },
    "ef5d70b625000e38404194aaab311b771c44efda": {
        "authored_data": "2021 Jun 30 19:45",
        "commit.message": "sanity check for link length in AsiExtraField\n\nCredit to OSS-Fuzz\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "7ce1b0796d6cbe1f41b969583bd49f33ae0efef0",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        292,
                        293,
                        296,
                        299,
                        300,
                        301
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        292,
                        293,
                        294,
                        295,
                        296,
                        302
                    ]
                }
            }
        }
    },
    "7ce1b0796d6cbe1f41b969583bd49f33ae0efef0": {
        "authored_data": "2021 Jun 30 20:01",
        "commit.message": "potential integer overflow in check\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d0af873e77d16f41edfef7b69da5c8c35c96a650",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map,long)')": [
                        750
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map,long)')": [
                        744,
                        745,
                        746,
                        753
                    ]
                }
            }
        }
    },
    "d0af873e77d16f41edfef7b69da5c8c35c96a650": {
        "authored_data": "2021 Jun 05 19:01",
        "commit.message": "make sure PAX header value fits into the size of the current entry\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "3fe6b42110dc56d0d6fe0aaf80cfecb8feea5321",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readGlobalPaxHeaders')": [
                        570
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'paxHeaders')": [
                        605
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readGlobalPaxHeaders')": [
                        570
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'paxHeaders')": [
                        605
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'paxHeaders')": [
                        428
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'readGlobalPaxHeaders')": [
                        458
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'paxHeaders')": [
                        428
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'readGlobalPaxHeaders')": [
                        458,
                        459
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        688
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map)')": [
                        725
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        688,
                        689,
                        690,
                        694,
                        695,
                        696,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706,
                        707,
                        708,
                        709,
                        710,
                        711,
                        712,
                        713,
                        714,
                        715,
                        716,
                        717,
                        718,
                        719,
                        720
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map)')": [
                        693
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map,long)')": [
                        721,
                        722,
                        723,
                        727,
                        734,
                        743,
                        750,
                        751,
                        752,
                        763,
                        765
                    ]
                }
            }
        }
    },
    "3fe6b42110dc56d0d6fe0aaf80cfecb8feea5321": {
        "authored_data": "2021 Jun 06 06:09",
        "commit.message": "make sure coders are only used once in folder\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "488425c1b9fb8c8d0f1ef1ce7d665058880870e2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', 'getOrderedCoders')": [
                        56
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Folder', 'getOrderedCoders')": [
                        57,
                        64,
                        65,
                        66
                    ]
                }
            }
        }
    }
}