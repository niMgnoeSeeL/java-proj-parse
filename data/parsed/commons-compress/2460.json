{
    "f3a5bf6884fe0658be48ea5c969a97987003210b": {
        "authored_data": "2013 Feb 11 14:23",
        "commit.message": "COMPRESS-214 move getUnixSymlink from ZipArchiveEntry to ZipFile\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1444779 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "b19fe7016c3954d33c45bf452658aedcc81763be",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        347
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getUnixSymlink(ZipFile)')": [
                        308,
                        309
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getUnixSymlink(ZipFile,String)')": [
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "new": {
                    "(None, None)": [
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        382,
                        383,
                        384,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getUnixSymlink(ZipArchiveEntry)')": [
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', None)": [
                        39,
                        40,
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testUnixSymlinkSampleFile')": [
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "new": {
                    "(None, None)": [
                        29,
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnixSymlinkSampleFile')": [
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', None)": [
                        203,
                        204,
                        205,
                        206
                    ]
                }
            }
        }
    },
    "9000c892f42452079dbdc27b43c397b03826fc57": {
        "authored_data": "2013 Jan 27 16:39",
        "commit.message": "don't search beyond the start of the archive\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1439116 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "6681dfb8d19a8422b66bcda85bed2a1a92dba82a",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory')": [
                        670,
                        671,
                        672,
                        673,
                        676
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory')": [
                        670,
                        671,
                        672,
                        673,
                        674,
                        675,
                        676,
                        677,
                        678,
                        681,
                        682,
                        683
                    ]
                }
            }
        }
    },
    "6681dfb8d19a8422b66bcda85bed2a1a92dba82a": {
        "authored_data": "2013 Jan 27 13:16",
        "commit.message": "Unused\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1439079 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "bc1766198c69e1852a8136acc088882642ef2004",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        46,
                        47
                    ]
                }
            }
        }
    },
    "bc1766198c69e1852a8136acc088882642ef2004": {
        "authored_data": "2013 Jan 27 13:15",
        "commit.message": "Unthrown exception\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1439078 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "284b0450f2c3e645a688413aafce5be5d3bbbf41",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchive')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        100,
                        101
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        121
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        146,
                        147
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromZipFile')": [
                        200
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        212
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchive')": [
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        144
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromZipFile')": [
                        197
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        209
                    ]
                }
            }
        }
    },
    "284b0450f2c3e645a688413aafce5be5d3bbbf41": {
        "authored_data": "2013 Jan 27 13:13",
        "commit.message": "Unused imports\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1439077 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "de0b7d762f74e45c9837dd1a0ca69822a2a00a9c",
        "changes": {
            "src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java": {
                "old": {
                    "(None, None)": [
                        24,
                        27,
                        28
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "(None, None)": [
                        29
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                }
            }
        }
    },
    "de0b7d762f74e45c9837dd1a0ca69822a2a00a9c": {
        "authored_data": "2013 Jan 27 12:58",
        "commit.message": "constructor IOException(java.net.URISyntaxException) is Java 1.6+\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1439076 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "bb74f0c4cd5febd41fd6ab74f978a6219dc33f64",
        "changes": {
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        85,
                        86,
                        87,
                        88
                    ]
                }
            }
        }
    },
    "bb74f0c4cd5febd41fd6ab74f978a6219dc33f64": {
        "authored_data": "2013 Jan 27 09:45",
        "commit.message": "COMPRESS-205 - allow tests to pass even if source tree is placed in strange directories.  Based on patch by Daniel Lowe\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1439043 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "291e52bfca307fa0ec4b0ccc7358fc5a87d219df",
        "changes": {
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        74,
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        31
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ChainingTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarGzip')": [
                        33
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarBzip2')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarGzip')": [
                        33
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarBzip2')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'testDetectionNotArchive')": [
                        41
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'getStreamFor(String)')": [
                        86,
                        87,
                        88,
                        91
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'testDetectionNotArchive')": [
                        41
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'getStreamFor(String)')": [
                        86,
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress#DetectCompressorTestCase', 'getStreamFor(String)')": [
                        57,
                        58,
                        59,
                        60,
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        26
                    ],
                    "('org.apache.commons.compress#DetectCompressorTestCase', 'getStreamFor(String)')": [
                        59,
                        62
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'suite')": [
                        65,
                        66,
                        67
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'suite')": [
                        65
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        31,
                        32
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        31
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        28,
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'workaroundForBrokenTimeHeader')": [
                        81,
                        84
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpochInGNUFormat')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpochInPAXFormat')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        110,
                        113
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'workaroundForBrokenTimeHeader')": [
                        81
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpochInGNUFormat')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpochInPAXFormat')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        109
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaZipFile')": [
                        33,
                        34,
                        35
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        56,
                        57,
                        58
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaZipFile')": [
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        54,
                        55
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForStream')": [
                        69,
                        70,
                        72,
                        73,
                        74
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        117,
                        118,
                        119,
                        120
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForStream')": [
                        68,
                        70,
                        71
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        114,
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "(None, None)": [
                        26,
                        28
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchive')": [
                        90,
                        91
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        105,
                        107
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        126,
                        127
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        153,
                        155
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromZipFile')": [
                        207,
                        208
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        220,
                        222
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchive')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        124
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        151
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromZipFile')": [
                        203
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        216
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testSampleFile')": [
                        90,
                        91
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testSampleFile')": [
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testSampleFile')": [
                        49,
                        50
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testSampleFile')": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "(None, None)": [
                        38,
                        39
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getFile(String)')": [
                        2323,
                        2324,
                        2325,
                        2326,
                        2327,
                        2328
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        2329,
                        2330
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFile')": [
                        2332
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedBy7ZIP')": [
                        2336
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedByJava7Jar')": [
                        2340
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedByWinZIP')": [
                        2344
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedByPKZip')": [
                        2348
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFile')": [
                        2352
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedBy7ZIP')": [
                        2356
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByWinCF')": [
                        2360
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByJava7Jar')": [
                        2364
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByWinZIP')": [
                        2368
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByPKZip')": [
                        2372
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFile')": [
                        2323
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedBy7ZIP')": [
                        2327
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedByJava7Jar')": [
                        2331
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedByWinZIP')": [
                        2335
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get5GBZerosFileGeneratedByPKZip')": [
                        2339
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFile')": [
                        2343
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedBy7ZIP')": [
                        2347
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByWinCF')": [
                        2351
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByJava7Jar')": [
                        2355
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByWinZIP')": [
                        2359
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'get100KFileFileGeneratedByPKZip')": [
                        2363
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testUnixSymlinkSampleFile')": [
                        62,
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testUnixSymlinkSampleFile')": [
                        62
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        29,
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'winzipBackSlashWorkaround')": [
                        41,
                        44
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properUseOfInflater')": [
                        61,
                        65
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'winzipBackSlashWorkaround')": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properUseOfInflater')": [
                        62
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testWinzipBackSlashWorkaround')": [
                        148,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSkipsPK00Prefix')": [
                        161,
                        162
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readOrderTest')": [
                        179,
                        180
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testWinzipBackSlashWorkaround')": [
                        148
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSkipsPK00Prefix')": [
                        160
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readOrderTest')": [
                        177
                    ]
                }
            }
        }
    }
}