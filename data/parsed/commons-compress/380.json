{
    "a3b3b82506426708a7048405c2b77c1ebfdbf361": {
        "authored_data": "2021 May 22 15:05",
        "commit.message": "add back assertion that has been removed\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "f8a4a3ef5c455e80a25d6d6e00904ae9a54546b2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readSubStreamsInfo(ByteBuffer,Archive)')": [
                        999,
                        1003,
                        1008,
                        1009,
                        1010,
                        1011,
                        1012
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readSubStreamsInfo(ByteBuffer,Archive)')": [
                        999,
                        1003,
                        1008,
                        1009,
                        1010,
                        1011,
                        1012,
                        1013,
                        1014
                    ]
                }
            }
        }
    },
    "f8a4a3ef5c455e80a25d6d6e00904ae9a54546b2": {
        "authored_data": "2021 May 22 14:48",
        "commit.message": "simplify readEncodedHeader a bit\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "93aab64df1cbff990057677af33990be971b4f58",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        674,
                        677,
                        701,
                        702,
                        703,
                        704,
                        705
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(ByteBuffer,Archive,byte)')": [
                        674,
                        677,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706
                    ]
                }
            }
        }
    },
    "ce1c3f0d6d3ef873d43fa1337821800de7cc77ce": {
        "authored_data": "2021 May 22 12:36",
        "commit.message": "COMPRESS-580 - Remove redundant operation\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "9bc02b24a67db2783ca6817278e4b6b218677e26",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readString(DataInputStream)')": [
                        118,
                        121
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readString(DataInputStream)')": [
                        118,
                        121
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        45
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        181,
                        374
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        181,
                        374
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        71,
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        71,
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntries(String)')": [
                        478
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntries(String)')": [
                        478
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testIsEqual')": [
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testIsEqual')": [
                        136
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveTest', 'factory')": [
                        37,
                        38,
                        41
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveTest', None)": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveTest', 'factory')": [
                        37,
                        40
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'factory')": [
                        41,
                        42,
                        46
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', None)": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'factory')": [
                        41,
                        45
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', 'factory')": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', None)": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', 'factory')": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/z/ZCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'testFailsToCreateZCompressorInputStreamAndThrowsIOException')": [
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'testFailsToCreateZCompressorInputStreamAndThrowsIOException')": [
                        45
                    ]
                }
            }
        }
    },
    "8dbf582b9e46573025fc80dc9a40b7d45bcf9f56": {
        "authored_data": "2021 May 22 12:14",
        "commit.message": "COMPRESS-579 - Remove redundant local variable\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "9bc02b24a67db2783ca6817278e4b6b218677e26",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/ArTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        84,
                        85,
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        84,
                        85
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        92,
                        93
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#TarTestCase', 'createLongName(int)')": [
                        572
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#TarTestCase', 'createLongName(int)')": [
                        572
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        79
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        79
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testLongNameMd5Hash')": [
                        760,
                        763,
                        770
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testLongNameMd5Hash')": [
                        762,
                        769
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzipCreation')": [
                        51,
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzipCreation')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(byte,Parameters)')": [
                        76,
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(byte,Parameters)')": [
                        77
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', None)": [
                        327,
                        328
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', None)": [
                        327
                    ]
                }
            }
        }
    },
    "e893413aed7433646989a3f2ef7d7cc9491d9d7b": {
        "authored_data": "2021 May 22 12:01",
        "commit.message": "COMPRESS-577 - Simplify assertion\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "9bc02b24a67db2783ca6817278e4b6b218677e26",
        "changes": {
            "src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'asciiToByteAndBackFail(String)')": [
                        154
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'asciiToByteAndBackFail(String)')": [
                        155
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomlySkippingEntries')": [
                        110,
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomlySkippingEntries')": [
                        110
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int,Iterable)')": [
                        545
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int,Iterable)')": [
                        545
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testGetAndSetOfPaxEntry')": [
                        257,
                        258
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        25
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testGetAndSetOfPaxEntry')": [
                        258,
                        259
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testReparse')": [
                        97,
                        98,
                        113,
                        127
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testReparse')": [
                        98,
                        99,
                        114,
                        128
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java": {
                "old": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDefaults')": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDataDescriptor')": [
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testLanguageEncodingFlag')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testEncryption')": [
                        91
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testStrongEncryption')": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDefaults')": [
                        39
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDataDescriptor')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testLanguageEncodingFlag')": [
                        81
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testEncryption')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testStrongEncryption')": [
                        100
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFSTest', 'simpleRountrip')": [
                        41
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFSTest', 'simpleRountrip')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testMisc')": [
                        196,
                        198,
                        199,
                        200,
                        203,
                        209,
                        216
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'parseReparse(byte,ZipLong,byte,byte,byte)')": [
                        497,
                        521
                    ]
                },
                "new": {
                    "(None, None)": [
                        44
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testMisc')": [
                        196,
                        198,
                        199,
                        200,
                        203,
                        209,
                        216
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'parseReparse(byte,ZipLong,byte,byte,byte)')": [
                        497,
                        521
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java": {
                "old": {
                    "(None, None)": [
                        26,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testMisc')": [
                        93,
                        97,
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testTrimLeadingZeroesForceMinLength4')": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testParseReparse')": [
                        179,
                        187
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'parseReparse(long,long,byte,long,long)')": [
                        217,
                        219
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testMisc')": [
                        93,
                        97,
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testTrimLeadingZeroesForceMinLength4')": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testParseReparse')": [
                        179,
                        187
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'parseReparse(long,long,byte,long,long)')": [
                        217,
                        219
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNotEquals')": [
                        254
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNullCommentEqualsEmptyComment')": [
                        270,
                        271
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testZipArchiveClone')": [
                        381
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNotEquals')": [
                        255
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNullCommentEqualsEmptyComment')": [
                        271,
                        272
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testZipArchiveClone')": [
                        382
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testEquals')": [
                        103,
                        105,
                        106,
                        108,
                        110,
                        111
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testEquals')": [
                        103,
                        105,
                        106,
                        108,
                        110,
                        111
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testEquals')": [
                        79,
                        81,
                        82,
                        84,
                        86,
                        87
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testEquals')": [
                        79,
                        81,
                        82,
                        84,
                        86,
                        87
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testEquals')": [
                        77,
                        79,
                        80,
                        82,
                        84,
                        85
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testEquals')": [
                        77,
                        79,
                        80,
                        82,
                        84,
                        85
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testReverse')": [
                        128,
                        129
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testReverse')": [
                        128,
                        129
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'availableShouldReturnZero')": [
                        96
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'availableShouldReturnZero')": [
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlock')": [
                        101
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlockViaFactory')": [
                        116
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'streamIgnoresExtraBytesAfterDeflatedInput')": [
                        144
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlock')": [
                        102
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'uncompressedBlockViaFactory')": [
                        117
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'streamIgnoresExtraBytesAfterDeflatedInput')": [
                        145
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testReadTakingNoArguments')": [
                        83
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStreamTest', 'testReadTakingNoArguments')": [
                        83
                    ]
                }
            }
        }
    },
    "0f8a69c71b663404c592a938e2a04ff42a9ee682": {
        "authored_data": "2021 May 21 22:10",
        "commit.message": "Grammar glitch",
        "commit.author.name": "Helder Magalh\u00e3es",
        "pcid": "06f1169984ad6dee94c3568029b3ea057dfe3533",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        169
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        169
                    ]
                }
            }
        }
    }
}