{
    "6ddd84637bfe28d51425da8a43aefcb5b7ff6671": {
        "authored_data": "2019 Dec 30 05:42",
        "commit.message": "COMPRESS-477 grammar fixes\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "672fe1d006430a1526e4fb81b6b7476c76b7d028",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "(None, None)": [
                        40,
                        41,
                        42,
                        43
                    ]
                },
                "new": {
                    "(None, None)": [
                        40,
                        41,
                        42,
                        43
                    ]
                }
            }
        }
    },
    "672fe1d006430a1526e4fb81b6b7476c76b7d028": {
        "authored_data": "2019 Dec 29 18:15",
        "commit.message": "COMPRESS-498 ensure the bundle name doesn't change without notice\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "11edea657038529fea5e36f180f590bf20107cd1",
        "changes": {
            "src/test/java/org/apache/commons/compress/OsgiITest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        32,
                        33,
                        34,
                        35
                    ],
                    "('org.apache.commons.compress#OsgiITest', None)": [
                        39,
                        40,
                        41,
                        42,
                        43
                    ],
                    "('org.apache.commons.compress#OsgiITest', 'loadBundle')": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76
                    ]
                }
            }
        }
    },
    "b4fd49a959cc58db476e1c79f25df1728c7f22b8": {
        "authored_data": "2019 Dec 27 12:07",
        "commit.message": "COMPRESS-477 : add Zip64 support for split zip\n",
        "commit.author.name": "Lee",
        "pcid": "11edea657038529fea5e36f180f590bf20107cd1",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64RequiredException.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', None)": [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1395
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1477,
                        1478,
                        1479,
                        1480,
                        1481,
                        1482,
                        1483,
                        1484,
                        1485
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1520,
                        1521,
                        1522
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1300
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1396,
                        1397,
                        1398,
                        1399,
                        1400
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleZip64Extra(ZipArchiveEntry,long,boolean)')": [
                        1452,
                        1453,
                        1454
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1471,
                        1472
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        1511,
                        1512,
                        1513,
                        1514,
                        1554,
                        1555,
                        1556,
                        1557,
                        1558,
                        1661,
                        1662,
                        1663,
                        1664,
                        1665,
                        1666,
                        1667,
                        1668,
                        1669,
                        1682
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateIfZip64IsNeededInEOCD')": [
                        1515,
                        1516,
                        1517,
                        1518,
                        1519,
                        1520,
                        1521,
                        1522,
                        1523,
                        1524,
                        1525,
                        1526,
                        1527,
                        1528,
                        1529,
                        1530,
                        1531,
                        1532,
                        1533,
                        1534,
                        1535,
                        1536,
                        1537,
                        1538,
                        1539,
                        1540,
                        1541,
                        1542,
                        1543,
                        1544,
                        1545,
                        1546,
                        1547,
                        1548,
                        1549,
                        1550,
                        1551,
                        1552,
                        1553
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1569
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldUseZip64EOCD')": [
                        1670,
                        1671,
                        1672,
                        1673,
                        1674,
                        1675,
                        1676,
                        1677,
                        1678,
                        1679,
                        1680,
                        1681
                    ]
                }
            }
        }
    },
    "11edea657038529fea5e36f180f590bf20107cd1": {
        "authored_data": "2019 Dec 26 01:01",
        "commit.message": "Use Objects.requireNonNull() instead of custom check. Minor formatting.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "eecd6ae89ada048cea11f8a18bd369e609eae33e",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/examples/CloseableConsumerAdapter.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#CloseableConsumerAdapter', None)": [
                        29,
                        30,
                        31,
                        32
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.examples#CloseableConsumerAdapter', None)": [
                        30
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)')": [
                        135,
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        216,
                        217,
                        218
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        215,
                        216
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/Change.java": {
                "old": {
                    "('org.apache.commons.compress.changes#Change', None)": [
                        50,
                        51,
                        52,
                        63,
                        64,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.changes#Change', None)": [
                        51,
                        62,
                        63,
                        65,
                        66,
                        67,
                        68,
                        69
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        258,
                        259,
                        260,
                        261,
                        262,
                        263
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        259,
                        260,
                        261
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStream', None)": [
                        33,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        44
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStream', None)": [
                        34,
                        36,
                        37,
                        40
                    ]
                }
            }
        }
    },
    "eecd6ae89ada048cea11f8a18bd369e609eae33e": {
        "authored_data": "2019 Dec 26 00:54",
        "commit.message": "FIx leaky test that causes builds to fail (at least on Oracle Java 8 and\nWindows 10) because many file handles are left open.\n\n- Refactor File to byte array code pattern into new IOUtils method.\n- Use less obtuse names.",
        "commit.author.name": "Gary Gregory",
        "pcid": "711f58e497bb9759fa4f34f40ab0ee9b3ef48e8a",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        69,
                        173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'close')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skip(long)')": [
                        247
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skipRecordPadding')": [
                        375
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readRecord')": [
                        459
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream)')": [
                        482,
                        490,
                        497,
                        507
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'tryToConsumeSecondEOFRecord')": [
                        598,
                        600,
                        607
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'read(byte,int,int)')": [
                        642
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'consumeRemainderOfLastBlock')": [
                        700
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        69,
                        173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'close')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skip(long)')": [
                        247
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skipRecordPadding')": [
                        375
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readRecord')": [
                        459
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream)')": [
                        482,
                        490,
                        497,
                        507
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'tryToConsumeSecondEOFRecord')": [
                        598,
                        600,
                        607
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'read(byte,int,int)')": [
                        642
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'consumeRemainderOfLastBlock')": [
                        700
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        116,
                        122,
                        128
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        116,
                        122,
                        128
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        458
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'detect(InputStream)')": [
                        466,
                        467,
                        471,
                        476,
                        479,
                        480
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        458
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'detect(InputStream)')": [
                        466,
                        467,
                        471,
                        476,
                        479,
                        480
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', None)": [
                        73,
                        115
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'close')": [
                        135
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'getCompressedCount')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readSignature(boolean)')": [
                        184
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        234
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        269
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'verifyChecksum(XXHash32,String)')": [
                        306
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readOneByte')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        366,
                        371
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', None)": [
                        73,
                        115
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'close')": [
                        135
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'getCompressedCount')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readSignature(boolean)')": [
                        184
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        234
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        269
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'verifyChecksum(XXHash32,String)')": [
                        306
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readOneByte')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        366,
                        371
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', None)": [
                        68,
                        134
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'close')": [
                        157
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'available')": [
                        183
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOnce(byte,int,int)')": [
                        212
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        240,
                        272
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readCrc')": [
                        284
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        309
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readStreamIdentifier')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOneByte')": [
                        326
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', None)": [
                        68,
                        134
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'close')": [
                        157
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'available')": [
                        183
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOnce(byte,int,int)')": [
                        212
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        240,
                        272
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readCrc')": [
                        284
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        309
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readStreamIdentifier')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOneByte')": [
                        326
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtils', None)": [
                        130,
                        136,
                        137,
                        140,
                        154
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte)')": [
                        141,
                        142
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte,int,int)')": [
                        161,
                        163,
                        168
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', None)": [
                        132,
                        138,
                        139,
                        142,
                        143,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        175
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'read(File,byte)')": [
                        144,
                        145,
                        146
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte)')": [
                        162,
                        163
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte,int,int)')": [
                        182,
                        184,
                        189
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreationInMemory')": [
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        191,
                        192
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testTokenizationCompressionMethod')": [
                        203,
                        204,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        251,
                        252,
                        253,
                        254,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawEntriesFromFile')": [
                        368,
                        373,
                        374,
                        379,
                        380,
                        385,
                        388,
                        389
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawZip64EntryFromFile')": [
                        409,
                        410,
                        416,
                        419
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testUnixModeInAddRaw')": [
                        430,
                        431,
                        439
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'assertSameFileContents(File,File)')": [
                        490,
                        491,
                        492,
                        493,
                        494,
                        495
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipWithSegmentAlreadyExistThrowsException')": [
                        669,
                        670,
                        671,
                        672,
                        673,
                        674,
                        675,
                        676
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        691,
                        692,
                        700,
                        701,
                        702,
                        703,
                        704
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'getFilesToZip')": [
                        769,
                        770,
                        771,
                        772,
                        773,
                        774,
                        775,
                        776,
                        777,
                        778,
                        779,
                        780,
                        781,
                        782,
                        783,
                        784,
                        785,
                        786,
                        787,
                        788,
                        789,
                        790,
                        791,
                        792,
                        793,
                        794,
                        795,
                        796,
                        797,
                        798,
                        799,
                        800
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createTestSplitZipSegments')": [
                        804,
                        808,
                        809,
                        810,
                        811,
                        812
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'addFilesToZip(ZipArchiveOutputStream,File)')": [
                        816,
                        817,
                        825
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        58,
                        197,
                        659,
                        788
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreationInMemory')": [
                        123,
                        124,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        181,
                        182
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testTokenizationCompressionMethod')": [
                        193,
                        194,
                        195,
                        196
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        241,
                        242,
                        260
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawEntriesFromFile')": [
                        351,
                        356,
                        357,
                        362,
                        363,
                        368,
                        371,
                        372
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawZip64EntryFromFile')": [
                        392,
                        393,
                        399,
                        402
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testUnixModeInAddRaw')": [
                        413,
                        414,
                        422
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'assertSameFileContents(File,File)')": [
                        473,
                        474,
                        475,
                        476,
                        477
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipWithSegmentAlreadyExistThrowsException')": [
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        657,
                        658
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        681,
                        682,
                        683,
                        684,
                        685
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'getFilesToZip')": [
                        750,
                        751,
                        752,
                        753,
                        754,
                        755,
                        756,
                        757,
                        758,
                        759,
                        760,
                        761,
                        762,
                        763,
                        764,
                        765,
                        766,
                        767,
                        768,
                        769,
                        770,
                        771,
                        772,
                        773,
                        774,
                        775,
                        776,
                        777
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createTestSplitZipSegments')": [
                        781,
                        785,
                        786,
                        787
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'addFilesToZip(ZipArchiveOutputStream,File)')": [
                        792,
                        793,
                        801,
                        802,
                        803
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        55,
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'checkFile(File)')": [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        55,
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', None)": [
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'checkFile(File)')": [
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliDecode')": [
                        48,
                        49,
                        51,
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliDecode')": [
                        48,
                        50,
                        53
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'testMatches')": [
                        49,
                        50,
                        51,
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'testMatches')": [
                        49
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testMatches')": [
                        43,
                        44,
                        45,
                        46
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testMatches')": [
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecode')": [
                        50,
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecode')": [
                        52
                    ]
                }
            }
        }
    },
    "711f58e497bb9759fa4f34f40ab0ee9b3ef48e8a": {
        "authored_data": "2019 Dec 25 23:55",
        "commit.message": "Fix broken test, on Windows 10 at least.\n\n[INFO] Running org.apache.commons.compress.archivers.ZipTestCase\nCleaning up unclosed ZipFile for archive\nC:\\git\\commons-compress\\target\\test-classes\\COMPRESS-477\\split_zip_created_by_zip\\zip_to_compare_created_by_zip.zip\nFailed to delete ArArchiveEntry.java in\nC:\\Users\\ggregory\\AppData\\Local\\Temp\\dir8859418000064656822\\commons-compress\\src\\main\\java\\org\\apache\\commons\\compress\\archivers\\ar\nFailed to delete ArArchiveInputStream.java in\nC:\\Users\\ggregory\\AppData\\Local\\Temp\\dir8859418000064656822\\commons-compress\\src\\main\\java\\org\\apache\\commons\\compress\\archivers\\ar\nFailed to delete ArArchiveOutputStream.java in\nC:\\Users\\ggregory\\AppData\\Local\\Temp\\dir8859418000064656822\\commons-compress\\src\\main\\java\\org\\apache\\commons\\compress\\archivers\\ar\nFailed to delete package.html in\nC:\\Users\\ggregory\\AppData\\Local\\Temp\\dir8859418000064656822\\commons-compress\\src\\main\\java\\org\\apache\\commons\\compress\\archivers\\ar\nCleaning up unclosed ZipFile for archive\nC:\\git\\commons-compress\\target\\test-classes\\COMPRESS-477\\split_zip_created_by_zip\\zip_to_compare_created_by_zip.zip\nCleaning up unclosed ZipFile for archive\nC:\\git\\commons-compress\\target\\test-classes\\COMPRESS-477\\split_zip_created_by_zip\\zip_to_compare_created_by_zip.zip\n[ERROR] Tests run: 24, Failures: 0, Errors: 1, Skipped: 0, Time elapsed:\n4.972 s <<< FAILURE! - in\norg.apache.commons.compress.archivers.ZipTestCase\n[ERROR] buildSplitZipTest(org.apache.commons.compress.archivers.ZipTestCase)\nTime elapsed: 3.098 s  <<< ERROR!\njava.lang.Error: Failed to delete\nC:\\Users\\ggregory\\AppData\\Local\\Temp\\dir8859418000064656822\\commons-compress\\src\\main\\java\\org\\apache\\commons\\compress\\archivers\\ar",
        "commit.author.name": "Gary Gregory",
        "pcid": "26c7aff58aa4cdf4943cf3ddb744f680a1fbe007",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        685,
                        686,
                        687,
                        688,
                        689,
                        690,
                        691,
                        692,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        685,
                        686,
                        687,
                        688,
                        689,
                        690,
                        691,
                        692,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706,
                        707,
                        708
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        709
                    ]
                }
            }
        }
    },
    "26c7aff58aa4cdf4943cf3ddb744f680a1fbe007": {
        "authored_data": "2019 Dec 15 11:09",
        "commit.message": "COMPRESS-477 add javadocs, make ZipSplitOutputStream an implementation detail\n\nsee #86\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "21025c71938d91bcaa1d55529087c0a082d22324",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "(None, None)": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        282,
                        328,
                        329,
                        335
                    ]
                },
                "new": {
                    "(None, None)": [
                        64,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        283,
                        300,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        358,
                        379
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        27
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        29,
                        30,
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        32
                    ]
                }
            }
        }
    }
}