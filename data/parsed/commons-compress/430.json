{
    "735e99ad81cb90eedafe1c228b9e7ca5ec957a11": {
        "authored_data": "2021 Apr 11 07:12",
        "commit.message": "Change test to use NIO Api's\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "40fcdf6dfd162976bb8864e6e5f3676686e60307",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        68
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        144
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        143
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "(None, None)": [
                        27,
                        29
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createArchive(String)')": [
                        178
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createEmptyArchive(String)')": [
                        240
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createSingleEntryArchive(String)')": [
                        267
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(File,List)')": [
                        293
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        336
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDirAndFile')": [
                        387
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'createArchive(String)')": [
                        176
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createEmptyArchive(String)')": [
                        238
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createSingleEntryArchive(String)')": [
                        265
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(File,List)')": [
                        291
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        334
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDirAndFile')": [
                        385
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveReadTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'setUpFileList')": [
                        73
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'setUpFileList')": [
                        73
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ChainingTestCase.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarGzip')": [
                        40
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarBzip2')": [
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarGzip')": [
                        40
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarBzip2')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'getStreamFor(String)')": [
                        111,
                        112
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'checkEmptyArchive(String)')": [
                        147
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'getStreamFor(String)')": [
                        111
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'checkEmptyArchive(String)')": [
                        146
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/IOMethodsTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareReads(String)')": [
                        151,
                        162,
                        168
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareReads(String)')": [
                        151,
                        162,
                        168
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArTestCase.java": {
                "old": {
                    "(None, None)": [
                        29,
                        30
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArArchiveCreation')": [
                        51,
                        54,
                        58
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        71,
                        74,
                        78,
                        86,
                        92
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArDelete')": [
                        107,
                        110,
                        114,
                        133,
                        134,
                        170
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestDirectoryEntryFromFile')": [
                        203,
                        210
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestExplicitDirectoryEntry')": [
                        245,
                        253
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromFile')": [
                        282,
                        288,
                        292,
                        301
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromPath')": [
                        333,
                        339,
                        343,
                        352
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testExplicitFileEntry')": [
                        384,
                        388,
                        394,
                        403
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArArchiveCreation')": [
                        50,
                        53,
                        57
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        70,
                        73,
                        77,
                        85,
                        91
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArDelete')": [
                        106,
                        109,
                        113,
                        132,
                        133,
                        169
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestDirectoryEntryFromFile')": [
                        202,
                        209
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestExplicitDirectoryEntry')": [
                        244,
                        252
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromFile')": [
                        281,
                        287,
                        291,
                        300
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromPath')": [
                        332,
                        338,
                        342,
                        351
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testExplicitFileEntry')": [
                        383,
                        387,
                        393,
                        402
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        147,
                        163
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'createArchiveWithDummyEntry(String,OutputStream,File)')": [
                        203
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        147,
                        163
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'createArchiveWithDummyEntry(String,OutputStream,File)')": [
                        203
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'aiffFilesAreNoTARs')": [
                        68
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testCOMPRESS209')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detectsAndThrowsFor7z')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'skipsPK00Prefix')": [
                        128
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        217,
                        224
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detect(String)')": [
                        270,
                        271
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,ArchiveStreamFactory)')": [
                        418,
                        419
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,String,ArchiveStreamFactory)')": [
                        426,
                        427
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        34
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'aiffFilesAreNoTARs')": [
                        69
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testCOMPRESS209')": [
                        81
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detectsAndThrowsFor7z')": [
                        112
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'skipsPK00Prefix')": [
                        129
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        218,
                        225
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detect(String)')": [
                        271
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,ArchiveStreamFactory)')": [
                        418
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,String,ArchiveStreamFactory)')": [
                        425
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioArchiveCreation')": [
                        51,
                        54,
                        58
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        74,
                        79,
                        85,
                        94,
                        102
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testDirectoryEntryFromFile')": [
                        128,
                        135
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitDirectoryEntry')": [
                        168,
                        177
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testFileEntryFromFile')": [
                        206,
                        207,
                        208,
                        209,
                        210,
                        214,
                        223
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitFileEntry')": [
                        255,
                        256,
                        257,
                        258,
                        259,
                        266,
                        275
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioArchiveCreation')": [
                        50,
                        53,
                        57
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        73,
                        78,
                        84,
                        93,
                        101
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testDirectoryEntryFromFile')": [
                        127,
                        134
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitDirectoryEntry')": [
                        167,
                        176
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testFileEntryFromFile')": [
                        205,
                        206,
                        207,
                        208,
                        209,
                        213,
                        222
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitFileEntry')": [
                        254,
                        255,
                        256,
                        257,
                        258,
                        265,
                        274
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'unarchiveAll(File)')": [
                        49,
                        65
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'archiveDetection(File)')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        117
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'unarchiveAll(File)')": [
                        48,
                        64
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'archiveDetection(File)')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        116
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/JarTestCase.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarArchiveCreation')": [
                        41,
                        46,
                        50
                    ],
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarUnarchive')": [
                        60,
                        66,
                        73,
                        80
                    ],
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarUnarchiveAll')": [
                        91,
                        103
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarArchiveCreation')": [
                        40,
                        45,
                        49
                    ],
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarUnarchive')": [
                        59,
                        65,
                        72,
                        79
                    ],
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarUnarchiveAll')": [
                        90,
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'setUpFileList')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'testArchive')": [
                        121
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'setUpFileList')": [
                        79
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'testArchive')": [
                        120
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'setUpFileList')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'testArchive')": [
                        120
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'setUpFileList')": [
                        77
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'testArchive')": [
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'copy(File,SevenZOutputFile)')": [
                        209
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'copy(File,SevenZOutputFile)')": [
                        210
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveCreation')": [
                        56,
                        67
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        80,
                        91,
                        103,
                        114
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarUnarchive')": [
                        128,
                        131
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileUnarchive')": [
                        142
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS114')": [
                        151
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryEntryFromFile')": [
                        181,
                        188
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileDirectoryEntryFromFile')": [
                        218
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitDirectoryEntry')": [
                        249,
                        257
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileExplicitDirectoryEntry')": [
                        285
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testFileEntryFromFile')": [
                        313,
                        317,
                        321,
                        330
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileEntryFromFile')": [
                        361,
                        365
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitFileEntry')": [
                        393,
                        397,
                        403,
                        412
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileExplicitFileEntry')": [
                        443,
                        449
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS178')": [
                        474
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS178Lenient')": [
                        501
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryRead')": [
                        518
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveCreation')": [
                        55,
                        66
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        79,
                        90,
                        102,
                        113
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarUnarchive')": [
                        127,
                        130
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileUnarchive')": [
                        141
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS114')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryEntryFromFile')": [
                        180,
                        187
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileDirectoryEntryFromFile')": [
                        217
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitDirectoryEntry')": [
                        248,
                        256
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileExplicitDirectoryEntry')": [
                        284
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testFileEntryFromFile')": [
                        312,
                        316,
                        320,
                        329
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileEntryFromFile')": [
                        360,
                        364
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitFileEntry')": [
                        392,
                        396,
                        402,
                        411
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarFileExplicitFileEntry')": [
                        442,
                        448
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS178')": [
                        473
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS178Lenient')": [
                        500
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryRead')": [
                        517
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "(None, None)": [
                        31,
                        32
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        78,
                        81,
                        87,
                        97,
                        104
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipUnarchive')": [
                        168,
                        171
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        218
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        248
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testFileEntryFromFile')": [
                        502,
                        512
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveEntryNewFromPath')": [
                        550,
                        562
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testExplicitFileEntry')": [
                        599,
                        609
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        736
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testInputStreamStatistics(String,Map)')": [
                        754
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'getFilesToZip')": [
                        826
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'addFilesToZip(ZipArchiveOutputStream,File)')": [
                        857
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        77,
                        80,
                        86,
                        96,
                        103
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipUnarchive')": [
                        167,
                        170
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        187
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        217
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        247
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testFileEntryFromFile')": [
                        501,
                        511
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveEntryNewFromPath')": [
                        549,
                        561
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testExplicitFileEntry')": [
                        598,
                        608
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        735
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testInputStreamStatistics(String,Map)')": [
                        753
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'getFilesToZip')": [
                        825
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'addFilesToZip(ZipArchiveOutputStream,File)')": [
                        856
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        52,
                        53
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'simpleInputStream')": [
                        95
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'cantReadWithoutOpeningAnEntry')": [
                        124
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'cantReadAfterClose')": [
                        132
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        52,
                        53
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'simpleInputStream')": [
                        95
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'cantReadWithoutOpeningAnEntry')": [
                        124
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'cantReadAfterClose')": [
                        132
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        50,
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        51,
                        52
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testArjUnarchive')": [
                        44
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesDosVersion')": [
                        61
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesUnixVersion')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testArjUnarchive')": [
                        45
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesDosVersion')": [
                        62
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesUnixVersion')": [
                        76
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchive')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchiveCreatedByRedlineRpm')": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchiveMultibyteCharName')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchive')": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchiveCreatedByRedlineRpm')": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchiveMultibyteCharName')": [
                        76
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStreamTest', 'testWriteOldBinary')": [
                        39,
                        48,
                        61
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStreamTest', 'testWriteOldBinary')": [
                        39,
                        48,
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchive')": [
                        39
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchiveButBigEnough')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchive')": [
                        39
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchiveButBigEnough')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        90
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStreamTest', 'testJarMarker')": [
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStreamTest', 'testJarMarker')": [
                        46
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'getEntriesOfUnarchiveInMemoryTest')": [
                        283
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'getEntriesOfUnarchiveInMemoryTest')": [
                        282
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        51
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testPaxGNU')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        143,
                        148,
                        158,
                        168
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        225
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        257
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        339
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'extractTarAndGetInputStream(File,String)')": [
                        437
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testPaxGNU')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractSparseTarsOnWindows')": [
                        142,
                        147,
                        157,
                        167
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractOldGNU')": [
                        224
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractExtendedOldGNU')": [
                        256
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testExtractPaxGNU')": [
                        338
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'extractTarAndGetInputStream(File,String)')": [
                        436
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "old": {
                    "(None, None)": [
                        34,
                        35
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testTarFileWithFSRoot')": [
                        69,
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testTarFileWithFSRoot')": [
                        68,
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'workaroundForBrokenTimeHeader')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldThrowAnExceptionOnTruncatedEntries')": [
                        167,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        285
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        297
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testDirectoryWithLongNameEndsWithSlash')": [
                        329,
                        345
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarWithSpecialPaxHeaders')": [
                        358
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarWithNonNumberPaxHeaders')": [
                        367
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInPadding')": [
                        375
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInContent')": [
                        384
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testThrowExceptionWithNullEntry')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testThrowException')": [
                        402
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'rejectsArchivesWithNegativeSizes')": [
                        437
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        35
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'workaroundForBrokenTimeHeader')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldThrowAnExceptionOnTruncatedEntries')": [
                        167,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        285
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        297
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testDirectoryWithLongNameEndsWithSlash')": [
                        329,
                        345
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarWithSpecialPaxHeaders')": [
                        358
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarWithNonNumberPaxHeaders')": [
                        367
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInPadding')": [
                        375
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testParseTarTruncatedInContent')": [
                        384
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testThrowExceptionWithNullEntry')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testThrowException')": [
                        402
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'rejectsArchivesWithNegativeSizes')": [
                        437
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        31,
                        32
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testCount')": [
                        58,
                        67
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPadding(int,String,byte)')": [
                        680
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testCount')": [
                        58,
                        67
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPadding(int,String,byte)')": [
                        680
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        46
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseTarWithSpecialPaxHeaders')": [
                        453
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        25
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseTarWithSpecialPaxHeaders')": [
                        454
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        145
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        146
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java": {
                "old": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testZipStreamWithImplodeCompression(String,String)')": [
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testZipStreamWithImplodeCompression(String,String)')": [
                        74
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Lister.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        97
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        97
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForStream')": [
                        72,
                        73
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForStream')": [
                        73,
                        74
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "(None, None)": [
                        29,
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeTestFilesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        248,
                        257,
                        258
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeTestFilesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        247,
                        256,
                        257
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        116,
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testZipFileReadsUnicodeFields')": [
                        191
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'streamSkipsOverUnicodeExtraFieldWithUnsupportedVersion')": [
                        250
                    ]
                },
                "new": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        116,
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testZipFileReadsUnicodeFields')": [
                        191
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'streamSkipsOverUnicodeExtraFieldWithUnsupportedVersion')": [
                        250
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testWriteReadRoundtrip')": [
                        421,
                        422
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testWriteReadRoundtrip')": [
                        421,
                        422
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "(None, None)": [
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean,Long)')": [
                        2369
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2451
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2514
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean,Long)')": [
                        2367
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2449
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2512
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'winzipBackSlashWorkaround')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'shouldReadNestedZip')": [
                        121
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnshrinkEntry')": [
                        139,
                        145,
                        156
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testReadingOfFirstStoredEntry')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testMessageWithCorruptFileName')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnzipBZip2CompressedEntry')": [
                        203
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStream')": [
                        219,
                        220
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStreamWithDataDescriptor')": [
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        370
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        411
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        423
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        457
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntries')": [
                        491
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'rejectsStoredEntriesWithDataDescriptorByDefault')": [
                        513
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithSignature')": [
                        528
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithoutSignature')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsInconsistent')": [
                        560
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsDifferentFromLengthRead')": [
                        575
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZip')": [
                        596
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipOfZip64')": [
                        618
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByWinrar')": [
                        640
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipThrowsException')": [
                        658
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIOExceptionIfThereIsCorruptedZip64Extra')": [
                        700
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testZipWithBadExtraFields')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'nameSource(String,String,int,ZipArchiveEntry)')": [
                        739
                    ]
                },
                "new": {
                    "(None, None)": [
                        39
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'winzipBackSlashWorkaround')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'shouldReadNestedZip')": [
                        121
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnshrinkEntry')": [
                        139,
                        145,
                        156
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testReadingOfFirstStoredEntry')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testMessageWithCorruptFileName')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnzipBZip2CompressedEntry')": [
                        203
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStream')": [
                        219,
                        220
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'readDeflate64CompressedStreamWithDataDescriptor')": [
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        370
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        411
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        423
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        457
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntries')": [
                        491
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'rejectsStoredEntriesWithDataDescriptorByDefault')": [
                        513
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithSignature')": [
                        528
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properlyReadsStoredEntryWithDataDescriptorWithoutSignature')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsInconsistent')": [
                        560
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsDifferentFromLengthRead')": [
                        575
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZip')": [
                        596
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipOfZip64')": [
                        618
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByWinrar')": [
                        640
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testSplitZipCreatedByZipThrowsException')": [
                        658
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIOExceptionIfThereIsCorruptedZip64Extra')": [
                        700
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testZipWithBadExtraFields')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'nameSource(String,String,int,ZipArchiveEntry)')": [
                        739
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileIgnoringLocalFileHeaderTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'testZipUnarchive')": [
                        58
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'testZipUnarchive')": [
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "(None, None)": [
                        32,
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testCDOrderInMemory')": [
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfStoredEntry')": [
                        192
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnshrinking')": [
                        324,
                        332
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        371
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readDeflate64CompressedStream')": [
                        627
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSelfExtractingZipUsingUnzipsfx')": [
                        793,
                        794,
                        829
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualsToEntry(File,ZipArchiveEntry,ZipFile)')": [
                        963
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testCDOrderInMemory')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfStoredEntry')": [
                        190
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnshrinking')": [
                        322,
                        330
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        369
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readDeflate64CompressedStream')": [
                        625
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSelfExtractingZipUsingUnzipsfx')": [
                        791,
                        792,
                        827
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualsToEntry(File,ZipArchiveEntry,ZipFile)')": [
                        961
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'splitZipBeginsWithZipSplitSignature')": [
                        61
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'testCreateSplittedFiles')": [
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'splitZipBeginsWithZipSplitSignature')": [
                        61
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStreamTest', 'testCreateSplittedFiles')": [
                        75
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28,
                        29
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwice')": [
                        86,
                        87
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwiceWithoutReplace')": [
                        121,
                        122
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir')": [
                        163,
                        164,
                        165,
                        166,
                        167
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir2')": [
                        205,
                        206,
                        207,
                        208,
                        209
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir3')": [
                        247,
                        248,
                        249,
                        250,
                        251
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile')": [
                        289,
                        290,
                        291,
                        292,
                        293
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile2')": [
                        332,
                        333,
                        334,
                        335,
                        336
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAddSame')": [
                        378,
                        379,
                        380,
                        381,
                        390,
                        410,
                        417
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testChangeSetResults')": [
                        448,
                        449,
                        450,
                        451,
                        460
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAdd')": [
                        512,
                        513,
                        514,
                        515,
                        524
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZip')": [
                        559,
                        560,
                        561,
                        562,
                        568
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZipUsingZipFilePerform')": [
                        608,
                        614
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteAdd')": [
                        652,
                        653,
                        654,
                        655,
                        661
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddDelete')": [
                        701,
                        702,
                        703,
                        704,
                        712
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromZip')": [
                        750,
                        756
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromTar')": [
                        791,
                        796
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromJar')": [
                        832,
                        837
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToTar')": [
                        876,
                        879,
                        884,
                        900
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToJar')": [
                        923,
                        926,
                        931
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAr')": [
                        965,
                        970
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToAr')": [
                        1008,
                        1011,
                        1016
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddToEmptyArchive')": [
                        1079,
                        1080,
                        1081,
                        1082,
                        1083,
                        1087
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddToOneFileArchive')": [
                        1125,
                        1126,
                        1127,
                        1128,
                        1129,
                        1135
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteToOneFileArchive')": [
                        1174,
                        1175,
                        1176,
                        1177,
                        1178,
                        1181
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceTrue')": [
                        1222,
                        1223,
                        1224,
                        1225,
                        1231
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceFalse')": [
                        1267,
                        1268,
                        1269,
                        1270,
                        1276
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwice')": [
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwiceWithoutReplace')": [
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir')": [
                        161,
                        162,
                        163,
                        164,
                        165
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir2')": [
                        203,
                        204,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir3')": [
                        245,
                        246,
                        247,
                        248,
                        249
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile')": [
                        287,
                        288,
                        289,
                        290,
                        291
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile2')": [
                        330,
                        331,
                        332,
                        333,
                        334
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAddSame')": [
                        376,
                        377,
                        378,
                        379,
                        388,
                        408,
                        415
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testChangeSetResults')": [
                        446,
                        447,
                        448,
                        449,
                        458
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAdd')": [
                        510,
                        511,
                        512,
                        513,
                        522
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZip')": [
                        557,
                        558,
                        559,
                        560,
                        566
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZipUsingZipFilePerform')": [
                        606,
                        612
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteAdd')": [
                        650,
                        651,
                        652,
                        653,
                        659
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddDelete')": [
                        699,
                        700,
                        701,
                        702,
                        710
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromZip')": [
                        748,
                        754
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromTar')": [
                        789,
                        794
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromJar')": [
                        830,
                        835
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToTar')": [
                        874,
                        877,
                        882,
                        898
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToJar')": [
                        921,
                        924,
                        929
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAr')": [
                        963,
                        968
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToAr')": [
                        1006,
                        1009,
                        1014
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddToEmptyArchive')": [
                        1077,
                        1078,
                        1079,
                        1080,
                        1081,
                        1085
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddToOneFileArchive')": [
                        1123,
                        1124,
                        1125,
                        1126,
                        1127,
                        1133
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteToOneFileArchive')": [
                        1172,
                        1173,
                        1174,
                        1175,
                        1176,
                        1179
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceTrue')": [
                        1220,
                        1221,
                        1222,
                        1223,
                        1229
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceFalse')": [
                        1265,
                        1266,
                        1267,
                        1268,
                        1274
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzipCreation')": [
                        42,
                        44,
                        53,
                        56
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzip2Unarchive')": [
                        69,
                        71
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFully')": [
                        92
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testCOMPRESS131')": [
                        105
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzipCreation')": [
                        41,
                        43,
                        52,
                        55
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzip2Unarchive')": [
                        68,
                        70
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFully')": [
                        91
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testCOMPRESS131')": [
                        104
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateCreation')": [
                        45,
                        48
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateCreation')": [
                        62,
                        66
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateUnarchive')": [
                        80,
                        84
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        99,
                        103
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateCreation')": [
                        44,
                        47
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateCreation')": [
                        61,
                        65
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateUnarchive')": [
                        79,
                        83
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        98,
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'detect(String)')": [
                        175
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,int)')": [
                        215
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String)')": [
                        275,
                        276
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,CompressorStreamFactory)')": [
                        282,
                        283
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'detect(String)')": [
                        175
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,int)')": [
                        215
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String)')": [
                        275,
                        276
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,CompressorStreamFactory)')": [
                        282,
                        283
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        58,
                        62,
                        68,
                        69
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtripWithOneBigWrite')": [
                        87,
                        94,
                        95,
                        104,
                        106
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtrip(File)')": [
                        116,
                        117,
                        124,
                        126
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        59,
                        63,
                        69,
                        70
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtripWithOneBigWrite')": [
                        88,
                        95,
                        96,
                        105,
                        107
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testRoundtrip(File)')": [
                        117,
                        118,
                        125,
                        127
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipCreation')": [
                        49,
                        52
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipUnarchive')": [
                        61,
                        64
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        73
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFully')": [
                        85
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testCorruptedInput')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        139
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        165
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        208
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testMetadataRoundTrip')": [
                        261,
                        262
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        280
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        294
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipCreation')": [
                        48,
                        51
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipUnarchive')": [
                        60,
                        63
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        72
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFully')": [
                        84
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testCorruptedInput')": [
                        103
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        138
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        164
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        207
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testMetadataRoundTrip')": [
                        260,
                        261
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        279
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        293
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'lzmaRoundtrip')": [
                        41,
                        44,
                        48,
                        52
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchive')": [
                        63
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchiveWithAutodetection')": [
                        73
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        83
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        97
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'copy(InputStream,File)')": [
                        108
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'lzmaRoundtrip')": [
                        40,
                        43,
                        47,
                        51
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchive')": [
                        62
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchiveWithAutodetection')": [
                        72
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        82
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        96
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'copy(InputStream,File)')": [
                        107
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        74,
                        88
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        114,
                        120,
                        124
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testGoodSignature')": [
                        143
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testBadSignature')": [
                        152
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testShortSignature')": [
                        161
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        172
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        196
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        73,
                        87
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        113,
                        119,
                        123
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testGoodSignature')": [
                        142
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testBadSignature')": [
                        151
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testShortSignature')": [
                        160
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        195
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/XZTestCase.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZCreation')": [
                        43,
                        46
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZUnarchive')": [
                        55,
                        58
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        67
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFully')": [
                        79
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZCreation')": [
                        42,
                        45
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZUnarchive')": [
                        54,
                        57
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        66
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFully')": [
                        78
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "old": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        69,
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        69,
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliDecode')": [
                        47
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'availableShouldReturnZero')": [
                        93
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        115
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        127
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        141
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliUnarchive')": [
                        155,
                        158
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliDecode')": [
                        47
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'availableShouldReturnZero')": [
                        93
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        115
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        127
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        141
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliUnarchive')": [
                        155,
                        158
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        78
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        92
                    ]
                },
                "new": {
                    "(None, None)": [
                        28,
                        29
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        40
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2NSelectorsOverflowTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2NSelectorsOverflowTest', 'shouldDecompressBlockWithNSelectorOverflow')": [
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2NSelectorsOverflowTest', 'shouldDecompressBlockWithNSelectorOverflow')": [
                        38
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'availableShouldReturnNonZero')": [
                        36
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        47
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        84
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'availableShouldReturnNonZero')": [
                        36
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        47
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        34,
                        35
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        45
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        59
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        46
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        60
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        61,
                        62,
                        70,
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        62,
                        63,
                        71,
                        72
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FactoryTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FactoryTest', 'roundtripViaFactory(String)')": [
                        49,
                        50,
                        57,
                        59
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FactoryTest', 'roundtripViaFactory(String)')": [
                        48,
                        49,
                        56,
                        58
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactory')": [
                        74,
                        75
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryAutoDetection')": [
                        85,
                        86
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4WithDecompressConcatenated')": [
                        95,
                        96
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryWithDecompressConcatenated')": [
                        122,
                        124
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaDumpLz4')": [
                        151,
                        152
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsNonLZ4Stream')": [
                        161
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        575
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        589
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4(StreamWrapper,boolean)')": [
                        620,
                        625
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'expectIOException(String)')": [
                        640
                    ]
                },
                "new": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4')": [
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactory')": [
                        74,
                        75
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryAutoDetection')": [
                        85,
                        86
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4WithDecompressConcatenated')": [
                        95,
                        96
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaLz4ViaFactoryWithDecompressConcatenated')": [
                        122,
                        124
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readBlaDumpLz4')": [
                        151,
                        152
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsNonLZ4Stream')": [
                        161
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        575
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        589
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4(StreamWrapper,boolean)')": [
                        620,
                        625
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'expectIOException(String)')": [
                        640
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        73
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorRoundtripTest', 'roundTripTest(String)')": [
                        74
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/XXHash32Test.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32Test', 'verifyChecksum')": [
                        60
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32Test', 'verifyChecksum')": [
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        43,
                        56
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalizeInPlace')": [
                        75,
                        78,
                        88,
                        102
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        24
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        43,
                        56
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalizeInPlace')": [
                        75,
                        78,
                        88,
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        30,
                        31
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testLoremIpsum')": [
                        60,
                        62,
                        64,
                        72,
                        75,
                        86,
                        87
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testRemainingChunkTypes')": [
                        97
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testAvailable')": [
                        116
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        159
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFileWithBiggerOffset')": [
                        172,
                        175,
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        189
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        203
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testLoremIpsum')": [
                        61,
                        63,
                        65,
                        73,
                        76,
                        87,
                        88
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testRemainingChunkTypes')": [
                        98
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testAvailable')": [
                        117
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        160
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFileWithBiggerOffset')": [
                        173,
                        176,
                        179,
                        180
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        190
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        204
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(File,Parameters)')": [
                        45,
                        46,
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'tryReallyLongLiterals')": [
                        166
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'roundTripTest(File,Parameters)')": [
                        46,
                        47,
                        54,
                        55
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyRoundtripTest', 'tryReallyLongLiterals')": [
                        167
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        56
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        79
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        57
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        80
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/z/ZCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        66
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        66
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecode')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecodeWithNoPool')": [
                        67
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecodeWithRecyclingBufferPool')": [
                        84
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        129
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        147,
                        151
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        177
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstandardUnarchive')": [
                        191,
                        194
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecode')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecodeWithNoPool')": [
                        67
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstdDecodeWithRecyclingBufferPool')": [
                        84
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        129
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        147,
                        151
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        177
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'testZstandardUnarchive')": [
                        191,
                        194
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdRoundtripTest.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtrip(OutputStreamCreator)')": [
                        47,
                        55,
                        56
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'factoryRoundtrip')": [
                        69,
                        70,
                        75,
                        77
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'roundtrip(OutputStreamCreator)')": [
                        50,
                        58,
                        59
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdRoundtripTest', 'factoryRoundtrip')": [
                        72,
                        73,
                        78,
                        80
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWithFileOutputStream')": [
                        207
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWithFileOutputStream')": [
                        206
                    ]
                }
            }
        }
    },
    "40fcdf6dfd162976bb8864e6e5f3676686e60307": {
        "authored_data": "2021 Apr 10 09:03",
        "commit.message": "Replace construction of FileInputStream and FileOutputStream objects with Files NIO APIs.\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "33789f6aa82c7e0576ea918611a484ba410ba08c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        179
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        179
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        135,
                        136
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        137,
                        138
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'read(File,byte)')": [
                        154
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtils', 'read(File,byte)')": [
                        153
                    ]
                }
            }
        }
    },
    "33789f6aa82c7e0576ea918611a484ba410ba08c": {
        "authored_data": "2021 Mar 26 17:41",
        "commit.message": "* Remove redundant initializer\n* Remove not use return value\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "2ea18b8ac2cbc752820e9987259956cec1ece015",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', None)": [
                        46
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', None)": [
                        46
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', None)": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', None)": [
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', None)": [
                        40,
                        47,
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', None)": [
                        40,
                        47,
                        50
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', None)": [
                        45,
                        47,
                        51
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeArchiveHeader')": [
                        69,
                        72
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        134,
                        198
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', None)": [
                        45,
                        47,
                        51
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeArchiveHeader')": [
                        69
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        133
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', None)": [
                        50,
                        51
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', None)": [
                        50,
                        51
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#LocalFileHeader', None)": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#LocalFileHeader', None)": [
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/MainHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#MainHeader', None)": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#MainHeader', None)": [
                        42
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        171,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        171,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        70,
                        74,
                        75,
                        76,
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        70,
                        74,
                        75,
                        76,
                        80
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        72,
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        72,
                        85
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        43,
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        43,
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStream', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStream', None)": [
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        37,
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coder', None)": [
                        24
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coder', None)": [
                        24
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        96
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        96
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', None)": [
                        59,
                        62,
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', None)": [
                        59,
                        62,
                        63
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        182,
                        185,
                        188,
                        214,
                        217,
                        233
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        182,
                        185,
                        188,
                        214,
                        217,
                        233
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        103,
                        108,
                        113,
                        123
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        103,
                        108,
                        113,
                        123
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', None)": [
                        59,
                        63,
                        67,
                        77
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', None)": [
                        59,
                        63,
                        67,
                        77
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', None)": [
                        69,
                        70,
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', None)": [
                        69,
                        70,
                        71
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', None)": [
                        72,
                        73,
                        74,
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', None)": [
                        72,
                        73,
                        74,
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#InflaterInputStreamWithStatistics', None)": [
                        35,
                        36
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#InflaterInputStreamWithStatistics', None)": [
                        35,
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', None)": [
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ResourceAlignmentExtraField', None)": [
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        55,
                        56,
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        55,
                        56,
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        134,
                        139,
                        140,
                        142,
                        143,
                        144,
                        148
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        134,
                        139,
                        140,
                        142,
                        143,
                        144,
                        148
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        102,
                        105,
                        108,
                        115,
                        128,
                        131,
                        181,
                        1326
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        102,
                        105,
                        108,
                        115,
                        128,
                        131,
                        181,
                        1326
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        120,
                        169,
                        187,
                        192,
                        197,
                        202,
                        262,
                        274,
                        1962,
                        1966,
                        1971,
                        1975
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        120,
                        169,
                        187,
                        192,
                        197,
                        202,
                        262,
                        274,
                        1962,
                        1966,
                        1971,
                        1975
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        36,
                        37,
                        38,
                        164,
                        165,
                        166
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        167,
                        185
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        36,
                        37,
                        38,
                        164,
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorInputStream', None)": [
                        24
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorInputStream', None)": [
                        24
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        398
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        398
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', None)": [
                        313
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', None)": [
                        313
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        113,
                        286,
                        291,
                        293
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        113,
                        286,
                        291,
                        293
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', None)": [
                        109
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', None)": [
                        109
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', None)": [
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', None)": [
                        84
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', None)": [
                        47,
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', None)": [
                        47,
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', None)": [
                        109
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', None)": [
                        109
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        234,
                        239,
                        241,
                        244,
                        250
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        234,
                        239,
                        241,
                        244,
                        250
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', None)": [
                        37
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', None)": [
                        51
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', None)": [
                        51
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', None)": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', None)": [
                        58
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', None)": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', None)": [
                        62
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', None)": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', None)": [
                        39
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', None)": [
                        43,
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', None)": [
                        43,
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CountingOutputStream', None)": [
                        31
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CountingOutputStream', None)": [
                        31
                    ]
                }
            }
        }
    },
    "af921560e30e688342f8441994e780d02d99e683": {
        "authored_data": "2021 Mar 25 16:50",
        "commit.message": "* Use lambda and method reference\n* Simplify conditions\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "a669dfb03576e5dd68e105ba86b1fcab90594b1e",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'equals(Object)')": [
                        330,
                        331,
                        332,
                        333,
                        334
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'equals(Object)')": [
                        330
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/Expander.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(SevenZFile,File)')": [
                        304
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(SevenZFile,File)')": [
                        304
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'equalSevenZMethods(Iterable,Iterable)')": [
                        573,
                        574,
                        575,
                        576
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'equalSevenZMethods(Iterable,Iterable)')": [
                        573
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'buildSparseInputStreams')": [
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', 'buildSparseInputStreams')": [
                        343,
                        344,
                        345,
                        346
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'fillNameMap')": [
                        1280,
                        1281,
                        1282,
                        1283,
                        1284
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'fillNameMap')": [
                        1280
                    ]
                }
            }
        }
    },
    "65a5c75c015e332adf99ef033311b2642b106c38": {
        "authored_data": "2021 Mar 17 08:00",
        "commit.message": "COMPRESS-571 : SevenZFile.getEntries now return a copy of entries\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "d2d1834f13f0056d3f23e4fe074939fcdbe55d5c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        417,
                        426
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getEntries')": [
                        430
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        417,
                        426
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getEntries')": [
                        430
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "new": {
                    "(None, None)": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        738,
                        745,
                        746,
                        747,
                        748
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'retrieveInputStreamForShuffledEntries')": [
                        739,
                        740,
                        741,
                        742,
                        743,
                        744
                    ]
                }
            }
        }
    }
}