{
    "f43590aaf5416ce79cb1aad770c83096ddf2a5c2": {
        "authored_data": "2018 Jan 14 19:37",
        "commit.message": "'long' literal ending with lowercase 'l' instead of 'L'\n",
        "commit.author.name": "shahab",
        "pcid": "5b56985334a63d63cdd9bbea30f225013302a7d3",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'getLastModifiedDate')": [
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'getLastModifiedDate')": [
                        94
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        333
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        363
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeNewEntry(CpioArchiveEntry)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldAsciiEntry(CpioArchiveEntry)')": [
                        333
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeOldBinaryEntry(CpioArchiveEntry,boolean)')": [
                        363
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeaderField(long,byte,int,int,boolean)')": [
                        1192
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeaderField(long,byte,int,int,boolean)')": [
                        1192
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        674
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        674
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongBinary(long,byte,int,int,boolean)')": [
                        494,
                        503
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongBinary(long,byte,int,int,boolean)')": [
                        494,
                        503
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        244
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        244
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'dateToZip(Date)')": [
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'zipToDate(ZipEightByteInteger)')": [
                        390
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'dateToZip(Date)')": [
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'zipToDate(ZipEightByteInteger)')": [
                        390
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        320
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        320
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', None)": [
                        39,
                        40,
                        41
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'getValue')": [
                        146
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'getInt(byte,int)')": [
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', None)": [
                        39,
                        40,
                        41
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'getValue')": [
                        146
                    ],
                    "('org.apache.commons.compress.compressors.lz4#XXHash32', 'getInt(byte,int)')": [
                        150
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        233
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        233
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'flushBuffer')": [
                        127
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorOutputStream', 'flushBuffer')": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'bitsAvailable')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'bitsAvailable')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        140
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(byte,int,int)')": [
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(byte,int,int)')": [
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/CRC32VerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CRC32VerifyingInputStream', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CRC32VerifyingInputStream', None)": [
                        37
                    ]
                }
            }
        }
    },
    "5b56985334a63d63cdd9bbea30f225013302a7d3": {
        "authored_data": "2018 Jan 14 19:32",
        "commit.message": "Explicit manual boxing is unnecessary under Java 5 and newer, and can be safely removed.\n",
        "commit.author.name": "shahab",
        "pcid": "e816ab756d3296d6de6c80b8589ba6fd2669b04b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', None)": [
                        221,
                        250,
                        276,
                        305
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', None)": [
                        221,
                        250,
                        276,
                        305
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        433
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        433
                    ]
                }
            }
        }
    },
    "e816ab756d3296d6de6c80b8589ba6fd2669b04b": {
        "authored_data": "2018 Jan 14 19:26",
        "commit.message": "remove unused import.\n",
        "commit.author.name": "shahab",
        "pcid": "6c203ab46b24751c285f021caad9d8969cf2f45f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                }
            }
        }
    },
    "6c203ab46b24751c285f021caad9d8969cf2f45f": {
        "authored_data": "2018 Jan 14 19:25",
        "commit.message": "There is General exception 'IOException' in the throws list already.\n",
        "commit.author.name": "shahab",
        "pcid": "f8e33e702ca0570076c58eaa7a83baeefece9553",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        473
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        476
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        475
                    ]
                }
            }
        }
    },
    "f8e33e702ca0570076c58eaa7a83baeefece9553": {
        "authored_data": "2018 Jan 14 19:21",
        "commit.message": "Local variable is redundant.\n",
        "commit.author.name": "shahab",
        "pcid": "f21a7054086522e3d34b569d8d05d5caa6297f69",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'exceptionMessage(byte,int,int,int,byte)')": [
                        248,
                        249
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'exceptionMessage(byte,int,int,int,byte)')": [
                        248
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        181,
                        182
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        181
                    ]
                }
            }
        }
    },
    "f21a7054086522e3d34b569d8d05d5caa6297f69": {
        "authored_data": "2018 Jan 14 19:19",
        "commit.message": "if statement can be simplified.\n",
        "commit.author.name": "shahab",
        "pcid": "0194bb8ca57e5a4a3fd5fe3c39b0ccdeb4711043",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        182,
                        183
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        889,
                        890,
                        891,
                        892,
                        893,
                        894,
                        895
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        889,
                        890
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        421,
                        422,
                        423,
                        424,
                        425,
                        426
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        421,
                        422
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'verify(byte)')": [
                        69,
                        70,
                        71,
                        72,
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'verify(byte)')": [
                        69
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isDirectory')": [
                        867,
                        868,
                        869,
                        870,
                        871
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isDirectory')": [
                        867
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'matches(byte,int)')": [
                        707,
                        709,
                        710,
                        711,
                        712,
                        713,
                        714,
                        715
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'matches(byte,int)')": [
                        707,
                        709,
                        710,
                        711
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'matches(byte,int)')": [
                        957,
                        958,
                        959,
                        960,
                        961,
                        962,
                        963,
                        964,
                        965,
                        966,
                        967,
                        968,
                        969,
                        970,
                        971,
                        972,
                        973,
                        974
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'matches(byte,int)')": [
                        957,
                        958
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'matches(byte,int)')": [
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'matches(byte,int)')": [
                        348
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'matches(byte,int)')": [
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'matches(byte,int)')": [
                        126,
                        127,
                        128
                    ]
                }
            }
        }
    },
    "0194bb8ca57e5a4a3fd5fe3c39b0ccdeb4711043": {
        "authored_data": "2018 Jan 14 19:12",
        "commit.message": "if statement can be simplified.\n",
        "commit.author.name": "shahab",
        "pcid": "eb816f66486a7eec9cb544bbb1637be81636ad71",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'matches(byte,int)')": [
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'matches(byte,int)')": [
                        274,
                        275,
                        276,
                        277,
                        278
                    ]
                }
            }
        }
    },
    "eb816f66486a7eec9cb544bbb1637be81636ad71": {
        "authored_data": "2018 Jan 14 19:08",
        "commit.message": "Modifier 'static' is redundant for enum constructors.\n",
        "commit.author.name": "shahab",
        "pcid": "c30de4b2259b04ced7917589dbcaa827d0f11ca3",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        27
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        27
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/brotli/BrotliUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', None)": [
                        28
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliUtils', None)": [
                        28
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        90
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        90
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        41
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', None)": [
                        28
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', None)": [
                        28
                    ]
                }
            }
        }
    },
    "c30de4b2259b04ced7917589dbcaa827d0f11ca3": {
        "authored_data": "2018 Jan 14 19:06",
        "commit.message": "Modifier 'private' is redundant for enum constructors.\n",
        "commit.author.name": "shahab",
        "pcid": "08cdbe2993fef2890e2b2609a653217e38fb67e0",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        52,
                        77
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        52,
                        77
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        789,
                        822
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        789,
                        822
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        106
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        106
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java": {
                "old": {
                    "(None, None)": [
                        95
                    ]
                },
                "new": {
                    "(None, None)": [
                        95
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', None)": [
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorOutputStream', None)": [
                        73
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java": {
                "old": {
                    "(None, None)": [
                        39,
                        40
                    ]
                },
                "new": {
                    "(None, None)": [
                        39,
                        40
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        44
                    ]
                }
            }
        }
    }
}