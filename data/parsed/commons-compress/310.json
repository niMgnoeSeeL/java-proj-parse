{
    "a9ed0221c7b8d591048013cc317cfac9a60d0ab1": {
        "authored_data": "2021 Jul 19 13:20",
        "commit.message": "Use static import for StandardCharsets\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "4c46384d395419798147d9d3a34cb1bb03323043",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(String)')": [
                        128
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        31
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(String)')": [
                        129
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        1403
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        2059
                    ]
                },
                "new": {
                    "(None, None)": [
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        1404
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        2060
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileNames(DataOutput)')": [
                        629
                    ]
                },
                "new": {
                    "(None, None)": [
                        50,
                        51
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileNames(DataOutput)')": [
                        630
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'encodeExtendedPaxHeadersContents(Map)')": [
                        498,
                        507,
                        511
                    ]
                },
                "new": {
                    "(None, None)": [
                        39,
                        40
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'encodeExtendedPaxHeadersContents(Map)')": [
                        499,
                        508,
                        512
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map,long)')": [
                        772,
                        773
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parsePaxHeaders(InputStream,List,Map,long)')": [
                        772
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'isUTF8(String)')": [
                        76,
                        79
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'isUTF8(String)')": [
                        77,
                        80
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        241,
                        242,
                        247,
                        248
                    ]
                },
                "new": {
                    "(None, None)": [
                        38,
                        39
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        242,
                        247
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        114,
                        119
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        32
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        115,
                        120
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        75
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        98
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        108
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        120
                    ]
                },
                "new": {
                    "(None, None)": [
                        24,
                        25
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        76
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        99
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        109
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        121
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        74
                    ]
                },
                "new": {
                    "(None, None)": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        74
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        726
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'buildSplitZipTest')": [
                        726
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setup7z')": [
                        174,
                        177
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip')": [
                        198,
                        201
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupTar')": [
                        222,
                        225
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip(String)')": [
                        240
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'assertHelloWorld(String,String)')": [
                        256
                    ]
                },
                "new": {
                    "(None, None)": [
                        46,
                        47
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setup7z')": [
                        175,
                        178
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip')": [
                        199,
                        202
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupTar')": [
                        223,
                        226
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setupZip(String)')": [
                        241
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'assertHelloWorld(String,String)')": [
                        257
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ParameterizedArchiverTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'setUp')": [
                        77,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,InputStream)')": [
                        149
                    ]
                },
                "new": {
                    "(None, None)": [
                        46,
                        47
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'setUp')": [
                        78,
                        81
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,InputStream)')": [
                        150
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ParameterizedExpanderTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'setUp')": [
                        85,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'assertHelloWorld(String,String)')": [
                        149
                    ]
                },
                "new": {
                    "(None, None)": [
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'setUp')": [
                        86,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.examples#ParameterizedExpanderTest', 'assertHelloWorld(String,String)')": [
                        150
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/SevenZArchiverTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'setUp')": [
                        49,
                        52
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,SevenZFile)')": [
                        118
                    ]
                },
                "new": {
                    "(None, None)": [
                        38,
                        39
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'setUp')": [
                        50,
                        53
                    ],
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'assertHelloWorld(String,String,ArchiveEntry,SevenZFile)')": [
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zDecryptUnarchive')": [
                        163
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractSpecifiedFile')": [
                        455
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessTogetherWithSequentialAccess')": [
                        509,
                        528
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingBackwards')": [
                        575
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingForwards')": [
                        640
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessMultipleReadSameFile')": [
                        680
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'retrieveInputStreamForAllEntriesWithoutCRCMultipleTimes')": [
                        715
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(SevenZFile,SevenZMethod)')": [
                        791
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        806
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zDecryptUnarchive')": [
                        163
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractSpecifiedFile')": [
                        455
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessTogetherWithSequentialAccess')": [
                        509,
                        528
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingBackwards')": [
                        575
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingForwards')": [
                        640
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessMultipleReadSameFile')": [
                        680
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'retrieveInputStreamForAllEntriesWithoutCRCMultipleTimes')": [
                        715
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(SevenZFile,SevenZMethod)')": [
                        791
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        806
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "old": {
                    "(None, None)": [
                        35
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'negativeOffsetInConstructorNotAllowed')": [
                        268
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'negativeOffsetInConstructorNotAllowed')": [
                        268
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberPosixMode')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        171,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        188,
                        191
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        207,
                        210
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNamePosixMode')": [
                        245
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryPosixMode')": [
                        304
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiPathNamePaxHeader')": [
                        347
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiLinkPathNamePaxHeader')": [
                        370
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberPosixMode')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        171,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        188,
                        191
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        207,
                        210
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNamePosixMode')": [
                        245
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryPosixMode')": [
                        304
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiPathNamePaxHeader')": [
                        347
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiLinkPathNamePaxHeader')": [
                        370
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarMemoryFileSystemTest.java": {
                "old": {
                    "(None, None)": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarFromMemoryFileSystem')": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarToMemoryFileSystem')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'checkUserInformationInTarEntry')": [
                        89
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarFromMemoryFileSystem')": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'tarToMemoryFileSystem')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarMemoryFileSystemTest', 'checkUserInformationInTarEntry')": [
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctal')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        115,
                        121,
                        127
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        210
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        217
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readSimplePaxHeader')": [
                        418
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        427
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        436
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readNonAsciiPaxHeader')": [
                        453,
                        455
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPaxHeaderWithoutTrailingNewline')": [
                        475
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeader')": [
                        485
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderMakesNumbytesOptional')": [
                        498
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNonNumericOffset')": [
                        514
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNonNumericNumbytes')": [
                        525
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNegativeOffset')": [
                        536
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNegativeNumbytes')": [
                        547
                    ]
                },
                "new": {
                    "(None, None)": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctal')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        115,
                        121,
                        127
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        210
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        217
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readSimplePaxHeader')": [
                        418
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        427
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        436
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readNonAsciiPaxHeader')": [
                        453,
                        455
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPaxHeaderWithoutTrailingNewline')": [
                        475
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeader')": [
                        485
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderMakesNumbytesOptional')": [
                        498
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNonNumericOffset')": [
                        514
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNonNumericNumbytes')": [
                        525
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNegativeOffset')": [
                        536
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPax00SparseHeaderRejectsNegativeNumbytes')": [
                        547
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'writesDataDescriptorForDeflatedEntryOnUnseekableOutput')": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        141
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'writesDataDescriptorForDeflatedEntryOnUnseekableOutput')": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        141
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/NioZipEncodingTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF16BE')": [
                        35,
                        39
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF8')": [
                        44,
                        48
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToISO88591')": [
                        53,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableUmlauts')": [
                        62,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableRainbowEmoji')": [
                        73,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'rainbowEmojiToSurrogatePairUTF16')": [
                        82,
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'partialSurrogatePair')": [
                        91
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF16BE')": [
                        36,
                        40
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToUTF8')": [
                        45,
                        49
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'umlautToISO88591')": [
                        54,
                        58
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableUmlauts')": [
                        63,
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'unmappableRainbowEmoji')": [
                        74,
                        78
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'rainbowEmojiToSurrogatePairUTF16')": [
                        83,
                        87
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncodingTest', 'partialSurrogatePair')": [
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        169,
                        170
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        316,
                        333,
                        351
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        410,
                        411
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        169,
                        170
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        316,
                        333,
                        351
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        410
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        492,
                        499,
                        507,
                        514,
                        533,
                        546,
                        560,
                        574
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        975,
                        976
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        492,
                        499,
                        507,
                        514,
                        533,
                        546,
                        560,
                        574
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        975,
                        976
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactoryRoundtripTest', 'testCompressorStreamFactoryRoundtrip')": [
                        63
                    ]
                },
                "new": {
                    "(None, None)": [
                        30,
                        31
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactoryRoundtripTest', 'testCompressorStreamFactoryRoundtrip')": [
                        64
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', None)": [
                        41,
                        60
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        293
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', None)": [
                        41,
                        60
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        293
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.utils#BoundedSeekableByteChannelInputStreamTest', 'checkRestrictedRead')": [
                        34,
                        38
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.utils#BoundedSeekableByteChannelInputStreamTest', 'checkRestrictedRead')": [
                        34,
                        38
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPad(int,String,boolean)')": [
                        256
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPadToStream(int,String,boolean)')": [
                        270
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPad(int,String,boolean)')": [
                        256
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteAndPadToStream(int,String,boolean)')": [
                        270
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "(None, None)": [
                        26
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'checkForString')": [
                        89
                    ]
                },
                "new": {
                    "(None, None)": [
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'checkForString')": [
                        90
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java": {
                "old": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', None)": [
                        37
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadDataFromSetPosition')": [
                        77
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        155
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', None)": [
                        37
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadDataFromSetPosition')": [
                        77
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        155
                    ]
                }
            }
        }
    },
    "4c46384d395419798147d9d3a34cb1bb03323043": {
        "authored_data": "2021 Jul 19 13:00",
        "commit.message": "Use the diamond operator\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "ff2a8c517a47ca3fe02fb2abe66b8deb5edc1565",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readSimplePaxHeader')": [
                        419
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        427
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        436
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readNonAsciiPaxHeader')": [
                        455
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readSimplePaxHeader')": [
                        419
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        427
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        436
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'readNonAsciiPaxHeader')": [
                        455
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        41,
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        41
                    ]
                }
            }
        }
    },
    "ff2a8c517a47ca3fe02fb2abe66b8deb5edc1565": {
        "authored_data": "2021 Jul 19 12:57",
        "commit.message": "Use Objects.equals()\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "9bb5a8dbd1965bf97c217fca91984ebaae84b83b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        328,
                        329,
                        330
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        329,
                        330,
                        331
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        567,
                        568,
                        569
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        568,
                        569,
                        570
                    ]
                }
            }
        }
    },
    "9bb5a8dbd1965bf97c217fca91984ebaae84b83b": {
        "authored_data": "2021 Jul 19 12:54",
        "commit.message": "Remove unnecessary throws clauses\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "1a2f727881f38c9157da89853ac09c2faf456204",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#Lister', 'list7z(File)')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingZipFile(File)')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingTarFile(File)')": [
                        113
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#Lister', 'list7z(File)')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingZipFile(File)')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingTarFile(File)')": [
                        113
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte,int)')": [
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/Archive.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#Archive', 'doZeroEffortPack')": [
                        103
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Archive', 'splitIntoSegments(List)')": [
                        140
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Archive', 'addJarEntry(PackingFile,List,List)')": [
                        175,
                        176
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#Archive', 'doZeroEffortPack')": [
                        103
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Archive', 'splitIntoSegments(List)')": [
                        140
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Archive', 'addJarEntry(PackingFile,List,List)')": [
                        175
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#AttributeLayoutMap', 'getAttributeLayout(int,int)')": [
                        163
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#AttributeLayoutMap', 'getAttributeLayout(int,int)')": [
                        163
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/SegmentHeader.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentHeader', 'read(InputStream)')": [
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentHeader', 'read(InputStream)')": [
                        102
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setup7z')": [
                        160
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'setup7z')": [
                        160
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/SevenZArchiverTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'verifyContent')": [
                        88
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#SevenZArchiverTest', 'verifyContent')": [
                        88
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256DecoderTest.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256DecoderTest', 'testDecodeWithNonEmptyString')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256DecoderTest', 'testDecodeWithNonEmptyString')": [
                        41
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCantFinishTwice')": [
                        264
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCantFinishTwice')": [
                        264
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testCompress197')": [
                        88
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readsArchiveCompletely_COMPRESS245')": [
                        146
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testCompress197')": [
                        88
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readsArchiveCompletely_COMPRESS245')": [
                        146
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarFileTest.java": {
                "old": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'testCompress197')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'readsArchiveCompletely_COMPRESS245')": [
                        130
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'testDirectoryWithLongNameEndsWithSlash')": [
                        252
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'testCompress197')": [
                        83
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'readsArchiveCompletely_COMPRESS245')": [
                        129
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarFileTest', 'testDirectoryWithLongNameEndsWithSlash')": [
                        251
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctal')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        101
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        207
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        214
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalCompress330')": [
                        385
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'parsePAX01SparseHeadersRejectsOddNumberOfEntries')": [
                        668
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctal')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        101
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        207
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        214
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalCompress330')": [
                        385
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'parsePAX01SparseHeadersRejectsOddNumberOfEntries')": [
                        668
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testPutAndGet')": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testCopy')": [
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testPutAndGet')": [
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testCopy')": [
                        49
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'tearDown')": [
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'tearDown')": [
                        50
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'parseTurnsArrayIndexOutOfBoundsIntoZipException')": [
                        108
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', None)": [
                        277,
                        278,
                        283,
                        284
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'parseTurnsArrayIndexOutOfBoundsIntoZipException')": [
                        108
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', None)": [
                        277,
                        282
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooBig')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooSmall')": [
                        101
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooBig')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'throwsExceptionWithCompressionLevelTooSmall')": [
                        101
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testGetNonexistentEncoding')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testIsUTF8')": [
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testGetNonexistentEncoding')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testIsUTF8')": [
                        66
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileIgnoringLocalFileHeaderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'tearDown')": [
                        45
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileIgnoringLocalFileHeaderTest', 'tearDown')": [
                        45
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testInvalidAlignment')": [
                        596
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSetLevelTooSmallForZipArchiveOutputStream')": [
                        754
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSetLevelTooBigForZipArchiveOutputStream')": [
                        760
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testInvalidAlignment')": [
                        596
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSetLevelTooSmallForZipArchiveOutputStream')": [
                        754
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSetLevelTooBigForZipArchiveOutputStream')": [
                        760
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testZipLong')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testZipLong')": [
                        62
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testMatches')": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testMatches')": [
                        55
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutFrameDescriptor')": [
                        167
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutBlockSizeByte')": [
                        181
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithWrongVersion')": [
                        196
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithInsufficientContentSize')": [
                        211
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutHeaderChecksum')": [
                        227
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithBadHeaderChecksum')": [
                        243
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsBlocksWithoutChecksum')": [
                        296
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithoutContentChecksum')": [
                        316
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithBadContentChecksum')": [
                        337
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByJunk')": [
                        410
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByTooFewBytes')": [
                        435
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEnd')": [
                        460
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEndInLengthBytes')": [
                        484
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignatureTrailer')": [
                        507
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignaturePrefix')": [
                        529
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsTrailingBytesAfterValidFrame')": [
                        551
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutFrameDescriptor')": [
                        167
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutBlockSizeByte')": [
                        181
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithWrongVersion')": [
                        196
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithInsufficientContentSize')": [
                        211
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithoutHeaderChecksum')": [
                        227
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsFileWithBadHeaderChecksum')": [
                        243
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsBlocksWithoutChecksum')": [
                        296
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithoutContentChecksum')": [
                        316
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsStreamsWithBadContentChecksum')": [
                        337
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByJunk')": [
                        410
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameFollowedByTooFewBytes')": [
                        435
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEnd')": [
                        460
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEndInLengthBytes')": [
                        484
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignatureTrailer')": [
                        507
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithBadSignaturePrefix')": [
                        529
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsTrailingBytesAfterValidFrame')": [
                        551
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        292,
                        293
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        292
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/harmony/pack200/tests/ArchiveTest.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200.tests#ArchiveTest', 'testAlternativeConstructor')": [
                        130,
                        131
                    ],
                    "('org.apache.commons.compress.harmony.pack200.tests#ArchiveTest', 'compareJarEntries(JarFile,JarFile)')": [
                        301,
                        302
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200.tests#ArchiveTest', 'testAlternativeConstructor')": [
                        130
                    ],
                    "('org.apache.commons.compress.harmony.pack200.tests#ArchiveTest', 'compareJarEntries(JarFile,JarFile)')": [
                        300
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/harmony/pack200/tests/CodecTest.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200.tests#CodecTest', 'testCardinality')": [
                        110
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200.tests#CodecTest', 'testCardinality')": [
                        110
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/harmony/pack200/tests/PackingOptionsTest.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200.tests#PackingOptionsTest', 'compareJarEntries(JarFile,JarFile)')": [
                        640,
                        641
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200.tests#PackingOptionsTest', 'compareJarEntries(JarFile,JarFile)')": [
                        640
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolTest.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200.tests#SegmentConstantPoolTest', 'testMatchSpecificPoolEntryIndex_SingleArray')": [
                        61
                    ],
                    "('org.apache.commons.compress.harmony.unpack200.tests#SegmentConstantPoolTest', 'testMatchSpecificPoolEntryIndex_DoubleArray')": [
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200.tests#SegmentConstantPoolTest', 'testMatchSpecificPoolEntryIndex_SingleArray')": [
                        61
                    ],
                    "('org.apache.commons.compress.harmony.unpack200.tests#SegmentConstantPoolTest', 'testMatchSpecificPoolEntryIndex_DoubleArray')": [
                        87
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArray')": [
                        198
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArrayUnsignedInt32')": [
                        205
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArray')": [
                        198
                    ],
                    "('org.apache.commons.compress.utils#ByteUtilsTest', 'toLittleEndianToByteArrayUnsignedInt32')": [
                        205
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'forSeekableByteChannelsThrowsOnNullArg')": [
                        53
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'forSeekableByteChannelsReturnsIdentityForSingleElement')": [
                        65
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'closesAllAndThrowsExceptionIfCloseThrows')": [
                        110
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeMulti(byte)')": [
                        154
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        279,
                        283,
                        291
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'forSeekableByteChannelsThrowsOnNullArg')": [
                        53
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'forSeekableByteChannelsReturnsIdentityForSingleElement')": [
                        65
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'closesAllAndThrowsExceptionIfCloseThrows')": [
                        110
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'makeMulti(byte)')": [
                        154
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        279,
                        283,
                        291
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        148
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionWhenTruncatingToIncorrectSize')": [
                        197
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        148
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldThrowExceptionWhenTruncatingToIncorrectSize')": [
                        197
                    ]
                }
            }
        }
    },
    "1a2f727881f38c9157da89853ac09c2faf456204": {
        "authored_data": "2021 Jul 19 12:36",
        "commit.message": "Remove redundant close() calls\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "df4bd32839b9d76babf2c12093c8437feb57b80a",
        "changes": {
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        219
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        240
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        170
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        182
                    ]
                }
            }
        }
    },
    "df4bd32839b9d76babf2c12093c8437feb57b80a": {
        "authored_data": "2021 Jul 19 12:34",
        "commit.message": "Replace while+throw with if+throw in SevenZFile\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "a491fe05a4bebe4540fa7f58b6dc6a6cbe60ea08",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFolder(ByteBuffer)')": [
                        1175
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFolder(ByteBuffer)')": [
                        1175
                    ]
                }
            }
        }
    },
    "a491fe05a4bebe4540fa7f58b6dc6a6cbe60ea08": {
        "authored_data": "2021 Jul 19 12:30",
        "commit.message": "Remove unnecessary toString() calls\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "147ea3af9973b4b67f11f4d17844b01fa803c487",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#Lister', 'list7z(File)')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingZipFile(File)')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingTarFile(File)')": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#Lister', 'list7z(File)')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingZipFile(File)')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingTarFile(File)')": [
                        115
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        146,
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        146
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        528
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        528
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/BHSDCodec.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#BHSDCodec', 'encode(int,int)')": [
                        289
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#BHSDCodec', 'encode(int,int)')": [
                        289
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/Pack200PackerAdapter.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#Pack200PackerAdapter', 'pack(JarFile,OutputStream)')": [
                        44
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Pack200PackerAdapter', 'pack(JarInputStream,OutputStream)')": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#Pack200PackerAdapter', 'pack(JarFile,OutputStream)')": [
                        44
                    ],
                    "('org.apache.commons.compress.harmony.pack200#Pack200PackerAdapter', 'pack(JarInputStream,OutputStream)')": [
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#Pack200UnpackerAdapter', 'unpack(InputStream,JarOutputStream)')": [
                        51
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#Pack200UnpackerAdapter', 'unpack(InputStream,JarOutputStream)')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        53
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/harmony/pack200/tests/RunCodecTest.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200.tests#RunCodecTest', 'testToString')": [
                        147,
                        148
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200.tests#RunCodecTest', 'testToString')": [
                        147
                    ]
                }
            }
        }
    },
    "147ea3af9973b4b67f11f4d17844b01fa803c487": {
        "authored_data": "2021 Jul 19 12:27",
        "commit.message": "Remove unnecessary semicolons\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "96b691b83b2d680485b5dbecb29f2b674943cc2d",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        1369
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        1369
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/harmony/unpack200/tests/SegmentConstantPoolTest.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200.tests#SegmentConstantPoolTest', None)": [
                        34,
                        40,
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200.tests#SegmentConstantPoolTest', None)": [
                        34,
                        40,
                        48
                    ]
                }
            }
        }
    },
    "96b691b83b2d680485b5dbecb29f2b674943cc2d": {
        "authored_data": "2021 Jul 19 12:25",
        "commit.message": "Use the 'L' suffix instead of 'l' for the long literals\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "8b330c9d9d3fb624e824718dfdc9c6309b076b96",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        2095,
                        2099,
                        2104,
                        2105
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        2095,
                        2099,
                        2104,
                        2105
                    ]
                }
            }
        }
    }
}