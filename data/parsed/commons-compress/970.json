{
    "ed9d8cfcf065d79dffe31810e04f1b9cd5fa42c3": {
        "authored_data": "2018 Aug 10 14:07",
        "commit.message": "unused import\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0c17da1e610e3d4367291cb2c9aac6ca83744675",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                }
            }
        }
    },
    "e7878dd85e83b8db2f2bb30cde64ead8459544cd": {
        "authored_data": "2018 Aug 10 13:53",
        "commit.message": "fix javadoc warnings\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "ba53647bf0fa16501445c7ec50d0ffa4a8288eff",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorOutputStream', None)": [
                        39,
                        53,
                        67,
                        79
                    ]
                }
            }
        }
    },
    "ba53647bf0fa16501445c7ec50d0ffa4a8288eff": {
        "authored_data": "2018 Aug 10 04:48",
        "commit.message": "COMPRESS-462 can't read from AR without opening an entry\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "a41ce6892cb0590b2e658704434ac0dbcb6834c8",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', None)": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        192,
                        193,
                        196,
                        197,
                        200,
                        201,
                        204,
                        205
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        85,
                        92,
                        103,
                        104,
                        105,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        123,
                        139,
                        141,
                        145,
                        161,
                        162,
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asLong(byte)')": [
                        190,
                        191
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte)')": [
                        194,
                        195
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,boolean)')": [
                        198,
                        199
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int)')": [
                        202,
                        203
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,boolean)')": [
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'read(byte,int,int)')": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        256,
                        257
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        325
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte)')": [
                        360,
                        361,
                        363
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', None)": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        210,
                        211,
                        214,
                        215,
                        218,
                        219,
                        222,
                        223,
                        378,
                        379,
                        380
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        96,
                        97,
                        104,
                        105,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        139,
                        140,
                        156,
                        158,
                        162,
                        178,
                        179,
                        180,
                        181,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asLong(byte,int,int)')": [
                        208,
                        209
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int)')": [
                        212,
                        213
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,boolean)')": [
                        216,
                        217
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,int)')": [
                        220,
                        221
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,int,int,boolean)')": [
                        224,
                        225
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'read(byte,int,int)')": [
                        264,
                        265,
                        266,
                        268,
                        269,
                        270,
                        271,
                        272,
                        275
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        343,
                        344
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'trackReadBytes(long)')": [
                        374,
                        375,
                        376,
                        377
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte,int,int)')": [
                        386,
                        387,
                        389,
                        390
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', None)": [
                        86,
                        95
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', None)": [
                        94
                    ]
                }
            }
        }
    },
    "a41ce6892cb0590b2e658704434ac0dbcb6834c8": {
        "authored_data": "2018 Aug 09 18:39",
        "commit.message": "COMPRESS-463 throw exception when detecting a truncated stored entry\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "64ed6dde03afbef6715fdfdeab5fc04be6192899",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        528
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        528,
                        529
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForStream')": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        424,
                        454,
                        455,
                        456,
                        457,
                        458,
                        489,
                        490,
                        491,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadThrowsAtEofForCorruptedStoredEntry')": [
                        459,
                        460,
                        461,
                        462,
                        463,
                        464,
                        465,
                        466,
                        467,
                        468,
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488
                    ]
                }
            }
        }
    },
    "64ed6dde03afbef6715fdfdeab5fc04be6192899": {
        "authored_data": "2018 Aug 09 18:29",
        "commit.message": "ensure archive streams really mean EOF if they say so\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0fe6ae319d50edd1389b6ecb5a6fd12f8091aea0",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        335
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        335,
                        336,
                        337
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'testSevenZArchiveCreation(SevenZMethod)')": [
                        61,
                        62,
                        63,
                        64,
                        82,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', None)": [
                        95
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        33,
                        34,
                        233
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', None)": [
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        51,
                        92,
                        93,
                        94,
                        113,
                        114,
                        115,
                        118,
                        119,
                        120,
                        123,
                        124,
                        125,
                        128,
                        129,
                        130,
                        133,
                        134,
                        135,
                        138,
                        139,
                        140,
                        145,
                        146,
                        147,
                        152,
                        153,
                        154,
                        161,
                        162,
                        163,
                        166,
                        167,
                        168,
                        171,
                        172,
                        173,
                        176,
                        177,
                        178,
                        181,
                        182,
                        183,
                        188,
                        189,
                        190,
                        195,
                        196,
                        197,
                        222,
                        228,
                        229,
                        230
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'setUp')": [
                        48,
                        49,
                        50
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'testSevenZArchiveCreation(SevenZMethod)')": [
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'createArchive(SevenZMethod)')": [
                        95
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingCopy')": [
                        116,
                        117
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingLZMA')": [
                        121,
                        122
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingLZMA2')": [
                        126,
                        127
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingBZIP2')": [
                        131,
                        132
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate')": [
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingAES')": [
                        141,
                        142,
                        143,
                        144
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(SevenZMethod)')": [
                        148,
                        149,
                        151
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(SevenZFile)')": [
                        155,
                        156,
                        157,
                        158,
                        159,
                        160
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingLZMA')": [
                        164,
                        165
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingLZMA2')": [
                        169,
                        170
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingBZIP2')": [
                        174,
                        175
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate')": [
                        179,
                        180
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingAES')": [
                        184,
                        185,
                        186,
                        187
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(SevenZMethod)')": [
                        191,
                        192,
                        193,
                        194
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(SevenZFile)')": [
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'readFully(SevenZFile)')": [
                        223,
                        224,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'assumeStrongCryptoIsAvailable')": [
                        231,
                        232
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        29,
                        101,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', None)": [
                        62,
                        63,
                        71,
                        72,
                        73,
                        74,
                        83,
                        84,
                        85,
                        86,
                        87,
                        92,
                        93,
                        94,
                        95
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'cantReadWithoutOpeningAnEntry')": [
                        88,
                        89,
                        90,
                        91
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'cantReadAfterClose')": [
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        29,
                        30,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', None)": [
                        86,
                        87,
                        95,
                        96,
                        97,
                        98
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        26,
                        27,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', None)": [
                        86,
                        87,
                        95,
                        96,
                        97,
                        98
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        27,
                        29,
                        93,
                        94,
                        95
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', None)": [
                        73,
                        81,
                        82,
                        83,
                        84
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        44
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', None)": [
                        353,
                        361,
                        362,
                        363,
                        364,
                        373,
                        374,
                        375
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        343,
                        346,
                        347,
                        348,
                        351,
                        352,
                        353,
                        356,
                        357,
                        358,
                        361,
                        362,
                        363,
                        366,
                        367,
                        368,
                        371,
                        372,
                        380,
                        381,
                        382,
                        383,
                        386,
                        387,
                        388,
                        391,
                        392,
                        393,
                        396,
                        397,
                        398,
                        401,
                        402,
                        403,
                        406,
                        407,
                        408,
                        411,
                        412,
                        421,
                        422,
                        423
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate')": [
                        344,
                        345
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingStore')": [
                        349,
                        350
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingUnshrink')": [
                        354,
                        355
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingExplode')": [
                        359,
                        360
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate64')": [
                        364,
                        365
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingBzip2')": [
                        369,
                        370
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate')": [
                        384,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingStore')": [
                        389,
                        390
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingUnshrink')": [
                        394,
                        395
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingExplode')": [
                        399,
                        400
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate64')": [
                        404,
                        405
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingBzip2')": [
                        409,
                        410
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', None)": [
                        619,
                        622,
                        623,
                        624,
                        627,
                        628,
                        629,
                        632,
                        633,
                        634,
                        637,
                        638,
                        639,
                        642,
                        643,
                        644,
                        647,
                        648,
                        656,
                        657,
                        658,
                        659,
                        660,
                        663,
                        664,
                        665,
                        668,
                        669,
                        670,
                        673,
                        674,
                        675,
                        678,
                        679,
                        680,
                        683,
                        684,
                        685,
                        688,
                        689,
                        698,
                        699,
                        700,
                        701
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate')": [
                        620,
                        621
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingStore')": [
                        625,
                        626
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingUnshrink')": [
                        630,
                        631
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingExplode')": [
                        635,
                        636
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate64')": [
                        640,
                        641
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofUsingBzip2')": [
                        645,
                        646
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate')": [
                        661,
                        662
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingStore')": [
                        666,
                        667
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingUnshrink')": [
                        671,
                        672
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingExplode')": [
                        676,
                        677
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingDeflate64')": [
                        681,
                        682
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofUsingBzip2')": [
                        686,
                        687
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(File)')": [
                        690,
                        691,
                        692,
                        693,
                        694,
                        695,
                        696,
                        697
                    ]
                }
            }
        }
    },
    "0fe6ae319d50edd1389b6ecb5a6fd12f8091aea0": {
        "authored_data": "2018 Aug 09 16:12",
        "commit.message": "verify the compressor streams really mean EOF when they say so\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "792da6735e532a6e7f2f2a017d999a8f7c30f2fe",
        "changes": {
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', None)": [
                        282,
                        283,
                        293,
                        294,
                        295,
                        296
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306
                    ],
                    "(None, None)": [
                        307,
                        308
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java": {
                "new": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', None)": [
                        80,
                        90,
                        91,
                        92,
                        93,
                        104,
                        105,
                        106
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "new": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', None)": [
                        201,
                        202,
                        205,
                        206,
                        207,
                        210,
                        211,
                        219,
                        220,
                        221,
                        222,
                        225,
                        226,
                        227,
                        230,
                        231
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'singleByteReadFromMemoryConsistentlyReturnsMinusOneAtEof')": [
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'singleByteReadFromTempFileConsistentlyReturnsMinusOneAtEof')": [
                        208,
                        209
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'singleByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'multiByteReadFromMemoryConsistentlyReturnsMinusOneAtEof')": [
                        223,
                        224
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'multiByteReadFromTempFileConsistentlyReturnsMinusOneAtEof')": [
                        228,
                        229
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'multiByteReadConsistentlyReturnsMinusOneAtEof(Pack200Strategy)')": [
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239
                    ],
                    "(None, None)": [
                        240,
                        241,
                        242
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'singleByteReadReturnsMinusOneAtEof')": [
                        126
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        126,
                        133,
                        134
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', None)": [
                        135,
                        136,
                        137,
                        138
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        25,
                        28,
                        29,
                        97,
                        98,
                        99
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', None)": [
                        73,
                        83,
                        84,
                        85,
                        86
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadReturnsMinusOneAtEof')": [
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        68,
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', None)": [
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        176,
                        177,
                        178
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', None)": [
                        156,
                        164,
                        165,
                        166,
                        167
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        66,
                        67
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', None)": [
                        42,
                        52,
                        53,
                        54,
                        55
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', None)": [
                        595,
                        605,
                        606,
                        607,
                        608,
                        619,
                        620,
                        621
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        596,
                        597,
                        598,
                        599,
                        600,
                        601,
                        602,
                        603,
                        604
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        609,
                        610,
                        611,
                        612,
                        613,
                        614,
                        615,
                        616,
                        617,
                        618
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', None)": [
                        192,
                        202,
                        203,
                        204,
                        205,
                        216,
                        217,
                        218
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        86,
                        87,
                        88
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', None)": [
                        43,
                        44,
                        47,
                        48,
                        49,
                        52,
                        53,
                        63,
                        64,
                        65,
                        66,
                        69,
                        70,
                        71,
                        74,
                        75
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofNoDecompressConcatenated')": [
                        45,
                        46
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEofDecompressConcatenated')": [
                        50,
                        51
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofNoDecompressConcatenated')": [
                        67,
                        68
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEofDecompressConcatenated')": [
                        72,
                        73
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof(boolean)')": [
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/z/ZCompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        21,
                        24,
                        25,
                        27,
                        30,
                        32,
                        91,
                        92
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', None)": [
                        67,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadReturnsMinusOneAtEof')": [
                        127
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'singleByteReadConsistentlyReturnsMinusOneAtEof')": [
                        127,
                        134,
                        135
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', None)": [
                        136,
                        137,
                        138,
                        139
                    ],
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', 'multiByteReadConsistentlyReturnsMinusOneAtEof')": [
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148
                    ]
                }
            }
        }
    }
}