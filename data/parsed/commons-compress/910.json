{
    "ead6fd6a505d199fe9d6bdbc466af201550fc31c": {
        "authored_data": "2019 May 30 18:06",
        "commit.message": "Camel-case name.",
        "commit.author.name": "Gary Gregory",
        "pcid": "98d393d41be3d76a2f0ff8216edf5217d57ccb75",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', None)": [
                        157,
                        158
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFilesystem(String)')": [
                        159,
                        160
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', None)": [
                        157,
                        158
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFilesystem(String)')": [
                        159,
                        160
                    ]
                }
            }
        }
    },
    "98d393d41be3d76a2f0ff8216edf5217d57ccb75": {
        "authored_data": "2019 May 30 17:51",
        "commit.message": "Javadoc: Use \"file system\" instead of \"filesystem\".",
        "commit.author.name": "Gary Gregory",
        "pcid": "31195ffa28f505163d0d66242c89ee467e882127",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java": {
                "old": {
                    "(None, None)": [
                        32
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipParameters.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', None)": [
                        99,
                        105,
                        110
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', None)": [
                        99,
                        105,
                        110
                    ]
                }
            }
        }
    },
    "31195ffa28f505163d0d66242c89ee467e882127": {
        "authored_data": "2019 May 23 13:00",
        "commit.message": "Capitalized the first word of the exception messages\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "f4a190f56aef8b9a09a5c8b4bafae7cf0000c2b2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        107,
                        111,
                        131,
                        141,
                        145
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        107,
                        111,
                        131,
                        141,
                        145
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'setSize(long)')": [
                        768
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'setSize(long)')": [
                        768
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(long)')": [
                        481
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(long)')": [
                        481
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        241
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeHeader(CpioArchiveEntry)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'closeArchiveEntry')": [
                        392
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'write(byte,int,int)')": [
                        431,
                        434
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        241
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeHeader(CpioArchiveEntry)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'closeArchiveEntry')": [
                        392
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'write(byte,int,int)')": [
                        431,
                        434
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        269,
                        312
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        269,
                        312
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/Archiver.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,SeekableByteChannel,File)')": [
                        121
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,SeekableByteChannel,File)')": [
                        121
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/Expander.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File)')": [
                        145
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ArchiveEntrySupplier,EntryWriter,File)')": [
                        247,
                        252,
                        257
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File)')": [
                        145
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(ArchiveEntrySupplier,EntryWriter,File)')": [
                        247,
                        252,
                        257
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        92
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'encode(OutputStream,Object)')": [
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'encode(OutputStream,Object)')": [
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readHeaders(byte)')": [
                        507
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readHeaders(byte)')": [
                        507
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'closeArchiveEntry')": [
                        421
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        449
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writeRecord(byte)')": [
                        562
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'closeArchiveEntry')": [
                        421
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        449
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writeRecord(byte)')": [
                        562
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        277
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        277
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        148,
                        172
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        148,
                        172
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        41,
                        56,
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        41,
                        56,
                        70
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'reparseCentralDirectoryData(boolean,boolean,boolean,boolean)')": [
                        235
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'reparseCentralDirectoryData(boolean,boolean,boolean,boolean)')": [
                        235
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64RequiredException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', None)": [
                        41,
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', None)": [
                        41,
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setSize(long)')": [
                        728
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setSize(long)')": [
                        728
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleSizesAndCrc(long,long,Zip64Mode)')": [
                        621,
                        629
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateSizeInformation(Zip64Mode)')": [
                        815,
                        820
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleSizesAndCrc(long,long,Zip64Mode)')": [
                        621,
                        629
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateSizeInformation(Zip64Mode)')": [
                        815,
                        820
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        701
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory64')": [
                        999
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtEndOfCentralDirectoryRecord')": [
                        1033
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        701
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory64')": [
                        999
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtEndOfCentralDirectoryRecord')": [
                        1033
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read')": [
                        146
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        168
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsR(BitInputStream,int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        664,
                        669
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupBlock')": [
                        765
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read')": [
                        146
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        168
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'initBlock')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsR(BitInputStream,int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        664,
                        669
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupBlock')": [
                        765
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'write(int)')": [
                        399
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'write(byte,int,int)')": [
                        636
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'write(int)')": [
                        399
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'write(byte,int,int)')": [
                        636
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expandFromList(byte,int,int)')": [
                        268
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', 'expandFromList(byte,int,int)')": [
                        268
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        245
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        245
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'prefill(byte)')": [
                        182
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'prefill(byte)')": [
                        182
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'prefill(byte)')": [
                        337
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', 'prefill(byte)')": [
                        337
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'readNextCode')": [
                        172
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'readNextCode')": [
                        172
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        243,
                        264
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readCrc')": [
                        274
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        296
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        243,
                        264
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readCrc')": [
                        274
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        296
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(InputStream,int)')": [
                        104
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(ByteSupplier,int)')": [
                        130
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'checkReadLength(int)')": [
                        258
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(InputStream,int)')": [
                        104
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'fromLittleEndian(ByteSupplier,int)')": [
                        130
                    ],
                    "('org.apache.commons.compress.utils#ByteUtils', 'checkReadLength(int)')": [
                        258
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', None)": [
                        238
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', None)": [
                        238
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ExpanderTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'fileCantEscapeDoubleDotPath')": [
                        127
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'fileCantEscapeDoubleDotPathWithSimilarSibling')": [
                        144
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'fileCantEscapeDoubleDotPath')": [
                        127
                    ],
                    "('org.apache.commons.compress.archivers.examples#ExpanderTest', 'fileCantEscapeDoubleDotPathWithSimilarSibling')": [
                        144
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testReparse')": [
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testReparse')": [
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParse')": [
                        93
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParse')": [
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEndInLengthBytes')": [
                        525
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'rejectsSkippableFrameWithPrematureEndInLengthBytes')": [
                        525
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testUnskippableChunk')": [
                        142
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testUnskippableChunk')": [
                        142
                    ]
                }
            }
        }
    },
    "f4a190f56aef8b9a09a5c8b4bafae7cf0000c2b2": {
        "authored_data": "2019 May 23 12:26",
        "commit.message": "Harmonized the exception thrown on zip entries using an unsupported compression method in ZipFile and ZipArchiveInputStream\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "e7f79a8f7538fe49758bc2e18fd6bca26c8adb08",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        56,
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        56,
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        608,
                        609
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        608
                    ]
                }
            }
        }
    },
    "e7f79a8f7538fe49758bc2e18fd6bca26c8adb08": {
        "authored_data": "2019 May 23 11:43",
        "commit.message": "Removed a redundant test in ExplodingInputStream\n",
        "commit.author.name": "Emmanuel Bourg",
        "pcid": "a016110177276f3673869474584ef088f26fe2c3",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'fillBuffer')": [
                        180
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'fillBuffer')": [
                        180
                    ]
                }
            }
        }
    }
}