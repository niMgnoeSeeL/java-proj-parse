{
    "5a190918e21e34c4690c5010ca86040dacd0d481": {
        "authored_data": "2019 Aug 18 15:57",
        "commit.message": "COMPRESS-485 bring back the old submit method - backwards compatibility\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "26ad28cdaeb46f5cd0344687116952db97857929",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        57,
                        168,
                        169,
                        176,
                        208,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'addArchiveEntry(ZipArchiveEntryRequestSupplier)')": [
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        159
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        181
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        258
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        57,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        186,
                        187,
                        194,
                        227,
                        251
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'addArchiveEntry(ZipArchiveEntryRequestSupplier)')": [
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        159,
                        160,
                        161,
                        162,
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submitStreamAwareCallable(Callable)')": [
                        177
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        199,
                        200
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        277
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi')": [
                        73,
                        74,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        140,
                        164
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmit')": [
                        73,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', None)": [
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApiUsingSubmitStreamAwareCallable')": [
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi(CallableConsumerSupplier)')": [
                        104,
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator,CallableConsumer)')": [
                        169,
                        170,
                        194
                    ],
                    "(None, None)": [
                        213
                    ]
                }
            }
        }
    },
    "26ad28cdaeb46f5cd0344687116952db97857929": {
        "authored_data": "2019 Aug 18 15:27",
        "commit.message": "COMPRESS-231 increase test coverage\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0cc082068c25419ea41133978dfb405bb058e48c",
        "changes": {
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "new": {
                    "(None, None)": [
                        24,
                        292,
                        293
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        108,
                        122,
                        123,
                        124,
                        129,
                        130,
                        131,
                        136,
                        137,
                        138,
                        143,
                        144,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'closesAllAndThrowsExceptionIfCloseThrows')": [
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantTruncate')": [
                        125,
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantWrite')": [
                        132,
                        133,
                        134,
                        135
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantPositionToANegativePosition')": [
                        139,
                        140,
                        141,
                        142
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'check(byte,SeekableByteChannel,int)')": [
                        208,
                        209
                    ]
                }
            }
        }
    },
    "0cc082068c25419ea41133978dfb405bb058e48c": {
        "authored_data": "2019 Aug 18 15:10",
        "commit.message": "COMPRESS-231 javadocs\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "8bdb913000d7cceb0b7ac966fd3d1583280182c3",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java": {
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', None)": [
                        196,
                        211
                    ]
                }
            }
        }
    },
    "8bdb913000d7cceb0b7ac966fd3d1583280182c3": {
        "authored_data": "2019 Aug 18 15:06",
        "commit.message": "COMPRESS-231 deal with edge case\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "7d4e6b213ff87ca61982a7c55a7869ba99fabcd0",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java": {
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'read(ByteBuffer)')": [
                        66,
                        67,
                        68
                    ]
                }
            }
        }
    },
    "7d4e6b213ff87ca61982a7c55a7869ba99fabcd0": {
        "authored_data": "2019 Aug 18 15:04",
        "commit.message": "whitespace\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "e959762ed200d9bc03fd858b8c96e35f95cada90",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', None)": [
                        146
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', None)": [
                        146
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        49,
                        55,
                        83,
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        49,
                        55,
                        83,
                        89
                    ]
                }
            }
        }
    },
    "d88aa2236a7cb4f46f0cf9bacf419c8cbebc0e2a": {
        "authored_data": "2019 Aug 18 12:33",
        "commit.message": "COMPRESS-479 revert binary backwards incompatible change\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "f5d0bb1e287038de05415ca65145d82166a7bf0f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraFieldBehavior)')": [
                        156
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        156
                    ]
                }
            }
        }
    },
    "f5d0bb1e287038de05415ca65145d82166a7bf0f": {
        "authored_data": "2019 Aug 18 10:41",
        "commit.message": "COMPRESS-483 throw exception if stored DD doesn't match what has been read\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "a9aabdd9ef5e822710734aafde1a90e4b619ce78",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        911
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        868,
                        869,
                        870,
                        871,
                        872,
                        873
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        917,
                        918,
                        919,
                        920,
                        922,
                        923,
                        924,
                        925
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', None)": [
                        569,
                        581,
                        582,
                        583,
                        584,
                        596,
                        597,
                        598
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsInconsistent')": [
                        570,
                        571,
                        572,
                        573,
                        574,
                        575,
                        576,
                        577,
                        578,
                        579,
                        580
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'throwsIfStoredDDIsDifferentFromLengthRead')": [
                        585,
                        586,
                        587,
                        588,
                        589,
                        590,
                        591,
                        592,
                        593,
                        594,
                        595
                    ]
                }
            }
        }
    }
}