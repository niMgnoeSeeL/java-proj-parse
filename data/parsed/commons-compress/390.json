{
    "9bc02b24a67db2783ca6817278e4b6b218677e26": {
        "authored_data": "2021 May 21 20:16",
        "commit.message": "simplify BoundedArchiveIS#read, add upper bounds check for offset\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "24788a9c0616cb160c29657db499e9690528e36e",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/BoundedArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BoundedArchiveInputStream', 'read(byte,int,int)')": [
                        70,
                        73,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        88
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BoundedArchiveInputStream', 'read(byte,int,int)')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        77,
                        81
                    ]
                }
            }
        }
    },
    "24788a9c0616cb160c29657db499e9690528e36e": {
        "authored_data": "2021 May 21 20:05",
        "commit.message": "looks as if we may forget flipping the buffer for sparse entries\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "03fba28c52f1c1f40960200515c5f915b7c1cec4",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        744,
                        745,
                        746
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarFile', None)": [
                        692,
                        745
                    ]
                }
            }
        }
    },
    "03fba28c52f1c1f40960200515c5f915b7c1cec4": {
        "authored_data": "2021 May 19 08:01",
        "commit.message": "fix build failure\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "b5a9e88cb6b03f9665ff67740aa09db6e53b7bcf",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "new": {
                    "(None, None)": [
                        33,
                        34
                    ]
                }
            }
        }
    },
    "f4b5586835e56373d6099c44a8be58a77efe5db4": {
        "authored_data": "2021 Feb 22 07:17",
        "commit.message": "COMPRESS-565 : add a new option in Zip64Mode\n\nAdd a new AlwaysWithCompatibility in Zip64Mode, this is a compromise for some libraries including 7z and Expand-Archive Powershell utility(and likely Excel)\n\nAnd we will encode LFH Offset in the Zip64 Extended Information Extra\nField if the Disk Number Start needs to be encoded, even through the LFH\nOffset itself doesn't need to be encoded.\n",
        "commit.author.name": "PeterAlfredLee",
        "pcid": "d15c285941351958a902265aeacdc151fa98c127",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64Mode.java": {
                "old": {
                    "(None, None)": [
                        46
                    ]
                },
                "new": {
                    "(None, None)": [
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isZip64Required(ZipArchiveEntry,Zip64Mode)')": [
                        752
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1342
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1421
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleZip64Extra(ZipArchiveEntry,long,boolean)')": [
                        1483,
                        1491,
                        1494
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isZip64Required(ZipArchiveEntry,Zip64Mode)')": [
                        752,
                        753
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)')": [
                        944
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1344,
                        1345
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1424,
                        1425
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleZip64Extra(ZipArchiveEntry,long,boolean)')": [
                        1487,
                        1488,
                        1496,
                        1497,
                        1498,
                        1499,
                        1500,
                        1501,
                        1502,
                        1505
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "new": {
                    "(None, None)": [
                        42,
                        2667
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        2342,
                        2376,
                        2377,
                        2378,
                        2650
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'testZip64ModeAlwaysWithCompatibility')": [
                        2343,
                        2344,
                        2345,
                        2346,
                        2347,
                        2348,
                        2349,
                        2350,
                        2351,
                        2352,
                        2353,
                        2354,
                        2355,
                        2356,
                        2357,
                        2358,
                        2359,
                        2360,
                        2361,
                        2362,
                        2363,
                        2364,
                        2365,
                        2366,
                        2367,
                        2368,
                        2369,
                        2370,
                        2371,
                        2372,
                        2373,
                        2374,
                        2375
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'buildZipWithZip64Mode(String,Zip64Mode,File)')": [
                        2651,
                        2652,
                        2653,
                        2654,
                        2655,
                        2656,
                        2657,
                        2658,
                        2659,
                        2660,
                        2661,
                        2662,
                        2663,
                        2664,
                        2665,
                        2666
                    ]
                }
            }
        }
    },
    "d15c285941351958a902265aeacdc151fa98c127": {
        "authored_data": "2021 May 18 19:29",
        "commit.message": "COMPRESS-567 more uncaught runtime exceptions\n\nCredit to OSS-Fuzz\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "8542c8119f44a8ae1999dde077096f68d882f36f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'processPaxHeader(String,String,Map)')": [
                        1395,
                        1401,
                        1404
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'processPaxHeader(String,String,Map)')": [
                        1395,
                        1396,
                        1397,
                        1398,
                        1399,
                        1405,
                        1406,
                        1407,
                        1408,
                        1409,
                        1412,
                        1413,
                        1414,
                        1415,
                        1416
                    ]
                }
            }
        }
    },
    "5761493cbaf7a7d608a3b68f4d61aaa822dbeb4f": {
        "authored_data": "2021 May 16 16:20",
        "commit.message": "COMPRESS-542 each folder requires at least one coder\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "bf5a5346ae04b9d2a5b0356ca75f11dcc8d94789",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'sanityCheckFolder(ByteBuffer,ArchiveStatistics)')": [
                        1086,
                        1087,
                        1088
                    ]
                }
            }
        }
    },
    "bf5a5346ae04b9d2a5b0356ca75f11dcc8d94789": {
        "authored_data": "2021 May 16 15:43",
        "commit.message": "COMPRESS-542 hit commit to quickly\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "60d551a748236d7f4651a4ae88d5a351f7c5754b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)')": [
                        946
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)')": [
                        946
                    ]
                }
            }
        }
    },
    "60d551a748236d7f4651a4ae88d5a351f7c5754b": {
        "authored_data": "2021 May 16 15:39",
        "commit.message": "COMPRESS-542 guard against integer overflow\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "23b758fbe071f58eb2625e50166351bdb5983f13",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)')": [
                        946,
                        947
                    ]
                }
            }
        }
    }
}