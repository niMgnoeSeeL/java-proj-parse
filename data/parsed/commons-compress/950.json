{
    "e8457776fe1b49d6208f21a51c988980b1e4e23b": {
        "authored_data": "2018 Nov 10 20:53",
        "commit.message": "this was supposed to be public\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "fd69d8ca2212d373a5a8f220530e8c0fa17ddf3b",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        154
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        154
                    ]
                }
            }
        }
    },
    "fd69d8ca2212d373a5a8f220530e8c0fa17ddf3b": {
        "authored_data": "2018 Nov 10 20:28",
        "commit.message": "COMPRESS-469 add lenient flag that allows accepting some broken tars\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "7a3889d47b76b248deb4ae6d3c71cf7cf48dc734",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        404
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1246
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding)')": [
                        1266
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean)')": [
                        1270,
                        1277,
                        1279,
                        1281,
                        1285,
                        1304,
                        1306
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424,
                        425,
                        426,
                        428,
                        1386,
                        1387
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1270
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding)')": [
                        1290
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean,boolean)')": [
                        1294,
                        1301,
                        1303,
                        1305,
                        1309,
                        1328,
                        1330
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseOctalOrBinary(byte,int,int,boolean)')": [
                        1377,
                        1378,
                        1379,
                        1380,
                        1381,
                        1382,
                        1383,
                        1384,
                        1385
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        283
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        83,
                        84,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        177
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        312
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "new": {
                    "('org.apache.commons.compress.archivers#TarTestCase', None)": [
                        333
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS178Lenient')": [
                        334,
                        335,
                        336,
                        337,
                        338
                    ],
                    "(None, None)": [
                        339,
                        340,
                        341
                    ]
                }
            }
        }
    },
    "7a3889d47b76b248deb4ae6d3c71cf7cf48dc734": {
        "authored_data": "2018 Oct 07 19:09",
        "commit.message": "make Sonar less unhappy\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "14242fe6bbfe3dcb455ccfeaf210d3fef1c0a72f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'detect(InputStream)')": [
                        554
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'detect(InputStream)')": [
                        554
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'closeEntry')": [
                        206
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'closeEntry')": [
                        206
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'encode(OutputStream,Object)')": [
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'encode(OutputStream,Object)')": [
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        40
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        1157
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1244
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        1157
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1244
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        264
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        322
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        264
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        322
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        69,
                        71,
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        69,
                        71,
                        73
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        298
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        298
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        1057
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1353
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        1057
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1353
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveEntryIterator,ArchiveOutputStream)')": [
                        146
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveEntryIterator,ArchiveOutputStream)')": [
                        146
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInput)')": [
                        271
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        312
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInput)')": [
                        271
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        312
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        55
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'internalIsLZMACompressionAvailable')": [
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        55
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'internalIsLZMACompressionAvailable')": [
                        102
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'markSupported')": [
                        218
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'markSupported')": [
                        218
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        59
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'internalIsXZCompressionAvailable')": [
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        59
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'internalIsXZCompressionAvailable')": [
                        111
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "(None, None)": [
                        239
                    ]
                },
                "new": {
                    "(None, None)": [
                        239
                    ]
                }
            }
        }
    },
    "14242fe6bbfe3dcb455ccfeaf210d3fef1c0a72f": {
        "authored_data": "2018 Oct 07 18:11",
        "commit.message": "COMPRESS-466 allow ZipFile to not parse local file headers\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "cfec567237c7300d0335f8ec5358e5dbfbbcdf00",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        220,
                        281,
                        286,
                        297
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        251,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        353,
                        364,
                        365,
                        366
                    ]
                }
            }
        }
    },
    "cfec567237c7300d0335f8ec5358e5dbfbbcdf00": {
        "authored_data": "2018 Oct 07 15:32",
        "commit.message": "COMPRESS-466 fill nameMap outside of the loop parsing LFHs\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "a8fc27c1d9a40474085464ad1f592c65ac81a906",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1067
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        298,
                        1068,
                        1069,
                        1070
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'fillNameMap')": [
                        1071,
                        1072,
                        1073,
                        1074
                    ]
                }
            }
        }
    },
    "a8fc27c1d9a40474085464ad1f592c65ac81a906": {
        "authored_data": "2018 Oct 07 15:17",
        "commit.message": "COMPRESS-466 mark stream as contiguous when reading ZIP's CD\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "1152309971ae0e31ced5365e81e5c80af8bf251c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1059
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        739,
                        740
                    ]
                }
            }
        }
    },
    "1152309971ae0e31ced5365e81e5c80af8bf251c": {
        "authored_data": "2018 Oct 07 15:06",
        "commit.message": "COMPRESS-466 extract logic that calculates data offset in ZipFile\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "6e1702e95e6a487b42b6642b9cd8f3d865151b8f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        483
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1048,
                        1049,
                        1050,
                        1051,
                        1052,
                        1053,
                        1054,
                        1055,
                        1056,
                        1061,
                        1062
                    ]
                },
                "new": {
                    "(None, None)": [
                        45
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getRawInputStream(ZipArchiveEntry)')": [
                        445,
                        446,
                        447
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        487
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        1052,
                        1053,
                        1054
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        1075,
                        1076,
                        1090,
                        1091
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setDataOffset(ZipArchiveEntry)')": [
                        1077,
                        1078,
                        1079,
                        1080,
                        1081,
                        1082,
                        1083,
                        1084,
                        1085,
                        1086,
                        1087,
                        1088,
                        1089
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getDataOffset(ZipArchiveEntry)')": [
                        1092,
                        1093,
                        1094,
                        1095,
                        1096,
                        1097,
                        1098
                    ]
                }
            }
        }
    },
    "6e1702e95e6a487b42b6642b9cd8f3d865151b8f": {
        "authored_data": "2018 Oct 03 12:33",
        "commit.message": "use createTempDirectory rather than custom implementation\n\ncloses #70\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "ac3d73153725fa1bce721055c4ac61423570d34c",
        "changes": {
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'mkdir(String)')": [
                        64,
                        65,
                        66,
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'mkdir(String)')": [
                        65
                    ]
                }
            }
        }
    },
    "ac3d73153725fa1bce721055c4ac61423570d34c": {
        "authored_data": "2018 Sep 21 15:50",
        "commit.message": "make Lister optionally use ZipFile\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0855aec562edfcc58d6da0f07835b05aea7eb324",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#Lister', 'usage')": [
                        93
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        28,
                        29
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'main(String)')": [
                        55,
                        56
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'listZipUsingZipFile(File)')": [
                        97,
                        98,
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.compress.archivers#Lister', None)": [
                        102,
                        103,
                        104,
                        105
                    ],
                    "('org.apache.commons.compress.archivers#Lister', 'usage')": [
                        107,
                        108
                    ]
                }
            }
        }
    }
}