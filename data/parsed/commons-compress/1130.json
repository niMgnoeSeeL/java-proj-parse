{
    "3c452f77969b3578c0f678a08f6fb0549cc27b2e": {
        "authored_data": "2018 Jan 21 13:32",
        "commit.message": "slightly reduce memory pressure\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "c1470f52ed67a82abcadb0333ea2620f11e475c5",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read')": [
                        54,
                        56,
                        59
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', None)": [
                        35
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read')": [
                        57,
                        60
                    ]
                }
            }
        }
    },
    "c1470f52ed67a82abcadb0333ea2620f11e475c5": {
        "authored_data": "2018 Jan 21 13:27",
        "commit.message": "remove magic value\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0e1e80c2ab0db3e66445b469cc7deeba8dc40864",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'bitsAvailable')": [
                        114
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'alignWithByteBoundary')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        135
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'ensureCache(int)')": [
                        183,
                        186
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'bitsAvailable')": [
                        114
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'alignWithByteBoundary')": [
                        122
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'processBitsGreater57(int)')": [
                        135
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'ensureCache(int)')": [
                        183,
                        186
                    ]
                }
            }
        }
    },
    "0e1e80c2ab0db3e66445b469cc7deeba8dc40864": {
        "authored_data": "2018 Jan 21 13:26",
        "commit.message": "whitespace\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "0367fb31efae4535e15f01f6c27ea814a0739b81",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        152
                    ]
                }
            }
        }
    },
    "0367fb31efae4535e15f01f6c27ea814a0739b81": {
        "authored_data": "2018 Jan 21 13:25",
        "commit.message": "make SonarQube less unhappy\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d5f61b4398e6572d974ee13d01f47f82744fb495",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        645,
                        646,
                        647
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        645,
                        646,
                        647
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        134,
                        135,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        166,
                        167
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        178,
                        205,
                        208,
                        209,
                        211,
                        215,
                        216,
                        217,
                        394,
                        402,
                        403,
                        407,
                        408,
                        409,
                        410,
                        414,
                        415,
                        416,
                        417
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'nextSymbol(BitInputStream,BinaryTreeNode)')": [
                        348
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'populateDynamicTables(BitInputStream,int,int)')": [
                        363,
                        364,
                        365,
                        366,
                        368,
                        374
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        134,
                        139,
                        145,
                        146,
                        151
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        156,
                        157,
                        167,
                        168,
                        185,
                        212,
                        213,
                        214,
                        217,
                        218,
                        220,
                        224,
                        226,
                        227,
                        405,
                        406,
                        414,
                        415,
                        419,
                        420,
                        421,
                        422,
                        426,
                        427,
                        428,
                        429
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'switchToUncompressedState')": [
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'readDynamicTables')": [
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'nextSymbol(BitInputStream,BinaryTreeNode)')": [
                        357
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'populateDynamicTables(BitInputStream,int,int)')": [
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        379,
                        385
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        93
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        93
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'internalIsZstdCompressionAvailable')": [
                        77
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdUtils', 'internalIsZstdCompressionAvailable')": [
                        77
                    ]
                }
            }
        }
    },
    "d5f61b4398e6572d974ee13d01f47f82744fb495": {
        "authored_data": "2018 Jan 21 12:33",
        "commit.message": "reading from the cache doesn't need to throw an exception\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "271e0a76d4e41171ace14bb802c990d4998dd621",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', None)": [
                        127
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'alignWithByteBoundary')": [
                        130,
                        133
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        92
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'alignWithByteBoundary')": [
                        121,
                        124
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', 'readCachedBits(int)')": [
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165
                    ],
                    "('org.apache.commons.compress.utils#BitInputStream', None)": [
                        166,
                        167
                    ]
                }
            }
        }
    },
    "271e0a76d4e41171ace14bb802c990d4998dd621": {
        "authored_data": "2018 Jan 21 12:28",
        "commit.message": "explicit tests for new BitInputStream methods\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d8e4e255d5857260b10edcd33884bf20610895db",
        "changes": {
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', None)": [
                        174,
                        180,
                        181,
                        182,
                        183,
                        191,
                        192,
                        193,
                        194,
                        198,
                        199,
                        200,
                        201,
                        206,
                        207,
                        208
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'alignWithByteBoundaryWhenAtBoundary')": [
                        175,
                        176,
                        177,
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'alignWithByteBoundaryWhenNotAtBoundary')": [
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'availableWithoutCache')": [
                        195,
                        196,
                        197
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'availableWithCache')": [
                        202,
                        203,
                        204,
                        205
                    ]
                }
            }
        }
    },
    "bfbe9966ab45dc4787fdbc55735241023d826d95": {
        "authored_data": "2018 Jan 16 19:15",
        "commit.message": "Revert to the original logic.\n",
        "commit.author.name": "shahab",
        "pcid": "bf0dd95b52e0627c10c072f8b05fbad3f86fda71",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        421,
                        422
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        421,
                        422,
                        423,
                        424,
                        425,
                        426
                    ]
                }
            }
        }
    },
    "bf0dd95b52e0627c10c072f8b05fbad3f86fda71": {
        "authored_data": "2018 Jan 16 19:11",
        "commit.message": "Add braces for the else block.\n",
        "commit.author.name": "shahab",
        "pcid": "f43590aaf5416ce79cb1aad770c83096ddf2a5c2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        183
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        183,
                        184
                    ],
                    "(None, None)": [
                        185
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        890
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        890,
                        891
                    ],
                    "(None, None)": [
                        892
                    ]
                }
            }
        }
    }
}