{
    "ebef905b2bd446da972b9c74cf2e76b59666ec0c": {
        "authored_data": "2015 Jan 08 01:36",
        "commit.message": "Remove duplicate field\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1650200 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Sebastian Bazley",
        "pcid": "b7af8b37f7609fe65ae4df93fe7bb4adf4bbb03a",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        1172,
                        1173
                    ]
                }
            }
        }
    },
    "b7af8b37f7609fe65ae4df93fe7bb4adf4bbb03a": {
        "authored_data": "2015 Jan 07 21:22",
        "commit.message": "Minor optimizations.\n\nExctrated use of calendar, since all operations involving the calendar classes\nare costly including getInstance.\n\n- Allocated array of correct size\n\nArguably these issues are really only irritations for anyone measuring the performance\nof commons-compress; in other words not all that significant in terms of real\nperformance gain, at least not the kind an end-user would notice.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1650170 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "eec10fcf0c795bdfacef4c9933585f65f953fd58",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(boolean)')": [
                        348
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(boolean)')": [
                        348
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        1039
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1212
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        1040
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        1173,
                        1174,
                        1175,
                        1176
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1217
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        282
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        282
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long,byte,int)')": [
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long,byte,int)')": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', None)": [
                        71,
                        72,
                        90
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(Calendar,long,byte,int)')": [
                        73
                    ]
                }
            }
        }
    },
    "eec10fcf0c795bdfacef4c9933585f65f953fd58": {
        "authored_data": "2015 Jan 07 21:14",
        "commit.message": "Writing central directory in chunks instead of one by one\n\nIncreased size of copybuf\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1650168 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "cbbeae7719943308494825574a0002ea649b3de3",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'finish')": [
                        434,
                        435,
                        436
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        884,
                        1146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralFileHeader(ZipArchiveEntry)')": [
                        1129,
                        1130,
                        1131,
                        1138,
                        1144,
                        1145
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1211
                    ]
                },
                "new": {
                    "(None, None)": [
                        20,
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'finish')": [
                        436,
                        437
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        445,
                        446,
                        904,
                        1148,
                        1149,
                        1170
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryInChunks')": [
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        458,
                        459,
                        460,
                        461,
                        462,
                        463
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralFileHeader(ZipArchiveEntry)')": [
                        1146,
                        1147
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1150,
                        1154,
                        1155,
                        1156,
                        1163,
                        1169
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1235
                    ]
                }
            }
        }
    },
    "cbbeae7719943308494825574a0002ea649b3de3": {
        "authored_data": "2015 Jan 07 21:11",
        "commit.message": "Modified ZipOutputStream to be able to avoid seeking and rewriting headers\nwhen operating through addRaw.\n\nThe basic idea is that an entry added through addRaw is fully known at the\ntime we call add, so we do not need to go back in the file to rewrite fields.\n\nAdding this third mode increases the pain of multiple code paths, and\nwe should probably consider a ground-up rewrite at some point.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1650166 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "9f41819098fee8877fa85835adbeec3acec19d07",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeArchiveEntry')": [
                        462
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        473,
                        478,
                        479,
                        485,
                        486,
                        491,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeCopiedEntry')": [
                        474,
                        477
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'doCloseEntry(long,long)')": [
                        480,
                        481,
                        482,
                        483,
                        484
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'doCloseCopiedEntry')": [
                        487,
                        490
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeEntry(boolean)')": [
                        493,
                        494
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addRawArchiveEntry(ZipArchiveEntry,InputStream)')": [
                        528,
                        530
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'checkIfNeedsZip64(Zip64Mode)')": [
                        593,
                        594,
                        595
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        685,
                        686,
                        691,
                        699
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry)')": [
                        945
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean)')": [
                        954,
                        955,
                        966,
                        982,
                        983,
                        984,
                        985,
                        986,
                        987,
                        988,
                        989,
                        990,
                        991,
                        992,
                        993,
                        994,
                        995,
                        996,
                        997,
                        998,
                        999,
                        1000,
                        1001,
                        1002
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeArchiveEntry')": [
                        462,
                        463,
                        464
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        475,
                        476,
                        477,
                        484,
                        485,
                        486,
                        513,
                        514,
                        515,
                        516,
                        605,
                        606,
                        609,
                        610,
                        676,
                        677,
                        678,
                        679,
                        680,
                        681,
                        682,
                        683,
                        684,
                        685,
                        686,
                        687,
                        688,
                        689,
                        973,
                        974
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeCopiedEntry(boolean)')": [
                        478,
                        483
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeEntry(boolean,boolean)')": [
                        487,
                        488
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addRawArchiveEntry(ZipArchiveEntry,InputStream)')": [
                        526,
                        527,
                        528,
                        529,
                        530,
                        531,
                        532,
                        533,
                        534,
                        535,
                        537
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'checkIfNeedsZip64(Zip64Mode)')": [
                        600
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isZip64Required(ZipArchiveEntry,Zip64Mode)')": [
                        607,
                        608
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isTooLageForZip32(ZipArchiveEntry)')": [
                        611,
                        612
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        675
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry,boolean)')": [
                        690,
                        714,
                        715,
                        716,
                        717,
                        718,
                        719,
                        722,
                        725,
                        733
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry)')": [
                        972
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        975,
                        983
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        992,
                        993,
                        1004,
                        1005,
                        1006,
                        1007,
                        1008,
                        1022,
                        1023,
                        1024,
                        1025,
                        1026,
                        1027,
                        1028,
                        1029,
                        1032,
                        1033,
                        1034,
                        1035,
                        1036,
                        1037,
                        1038,
                        1039,
                        1040,
                        1041,
                        1042,
                        1043,
                        1044,
                        1045,
                        1046
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawEntriesFromFile')": [
                        312,
                        315,
                        318
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createReferenceFile(File)')": [
                        351,
                        352
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawEntriesFromFile')": [
                        313,
                        316,
                        317,
                        318,
                        321,
                        322,
                        323,
                        332,
                        333,
                        334
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawZip64EntryFromFile')": [
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        363
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createReferenceFile(File,Zip64Mode,String)')": [
                        383,
                        384,
                        386
                    ]
                }
            }
        }
    },
    "9f41819098fee8877fa85835adbeec3acec19d07": {
        "authored_data": "2015 Jan 04 17:35",
        "commit.message": "Renamed method to getBytesWrittenForLastEntry\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1649374 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "0b33d56cf025e034927290ec9ee651ddc8acd495",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'addArchiveEntry(ZipArchiveEntry,InputStream,int)')": [
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'addArchiveEntry(ZipArchiveEntry,InputStream,int)')": [
                        92
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        49,
                        135
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'getBytesWritten')": [
                        139,
                        140
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        184,
                        192
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'reset')": [
                        200
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeCounted(byte,int,int)')": [
                        255
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        49,
                        135
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'getBytesWrittenForLastEntry')": [
                        139,
                        140
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        184,
                        192
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'reset')": [
                        200
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeCounted(byte,int,int)')": [
                        255
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'storedEntries')": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'deflatedEntries')": [
                        50
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'storedEntries')": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'deflatedEntries')": [
                        50
                    ]
                }
            }
        }
    },
    "0b33d56cf025e034927290ec9ee651ddc8acd495": {
        "authored_data": "2015 Jan 04 12:29",
        "commit.message": "was using the wrong count for locator\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1649322 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "6d04cbcb717845a38ee57e7ed0653fb9cc171e73",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1281
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1281
                    ]
                }
            }
        }
    },
    "6d04cbcb717845a38ee57e7ed0653fb9cc171e73": {
        "authored_data": "2015 Jan 04 12:25",
        "commit.message": "consistently use limit() - position() for length calculations\n\nI htink position() has always been zero but using limit() as size in\none place and limit() - position() in other is very confusing.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1649321 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "c4deb3fd4b81e9f174e771476cd19a0d3330fdc9",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'rewriteSizesAndCrc(boolean)')": [
                        623
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean)')": [
                        955,
                        1002,
                        1008
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1120,
                        1155,
                        1160,
                        1175,
                        1176,
                        1177,
                        1180,
                        1181,
                        1184
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1249,
                        1250
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'rewriteSizesAndCrc(boolean)')": [
                        621,
                        622,
                        625
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean)')": [
                        957,
                        958,
                        1005
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1122,
                        1123,
                        1124,
                        1159,
                        1164,
                        1179,
                        1180,
                        1181,
                        1184,
                        1187
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1252,
                        1253,
                        1254
                    ]
                }
            }
        }
    },
    "c4deb3fd4b81e9f174e771476cd19a0d3330fdc9": {
        "authored_data": "2015 Jan 04 10:34",
        "commit.message": "testcase demonstrating zip64 EOCDL corruption\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1649312 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "8a942e0d97363cbe094cd4b9a083bc9815ca02db",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        131,
                        132,
                        141,
                        142,
                        143,
                        144
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeAndRead5GBOfZerosUsingZipFile')": [
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write5GBZerosFile(String)')": [
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169
                    ]
                }
            }
        }
    },
    "8a942e0d97363cbe094cd4b9a083bc9815ca02db": {
        "authored_data": "2015 Jan 03 11:59",
        "commit.message": "Cleaned up close semantics further. Increased copy buffer size somewhat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1649189 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "af60df2bc3bd51c1a0f866b8106014be171b62e2",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        43,
                        160
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createDeferred(ScatterGatherBackingStoreSupplier)')": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        125
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        157,
                        158,
                        159
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        124,
                        125,
                        126,
                        127,
                        128,
                        129
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        85
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'addArchiveEntry(ZipArchiveEntry,InputStream,int)')": [
                        91
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        85
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        848
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'copyFromZipInputStream(InputStream)')": [
                        856,
                        858,
                        860
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        848
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'copyFromZipInputStream(InputStream)')": [
                        857,
                        859
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'putArchiveEntry')": [
                        39,
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'putArchiveEntry')": [
                        39,
                        40,
                        43,
                        44
                    ]
                }
            }
        }
    },
    "af60df2bc3bd51c1a0f866b8106014be171b62e2": {
        "authored_data": "2015 Jan 03 09:48",
        "commit.message": "Cleaned up close semantics of backing store, made this governed by ScatterZipOutputStream\n\nAlso added a way to provide a custom supplier\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1649181 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "dcd60860c586fe97572e1c6c0373074c0ec6b135",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        45,
                        72,
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        45,
                        72,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        153
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        46,
                        114,
                        115,
                        116,
                        117,
                        118,
                        121,
                        122
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'close')": [
                        119,
                        120
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'putArchiveEntry')": [
                        48
                    ]
                }
            }
        }
    }
}