{
    "d3aea33fd702ecc6f37fac348dea6b1625d4210c": {
        "authored_data": "2011 Aug 03 14:57",
        "commit.message": "Java5ify ZipFile\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1153521 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "cadc527d7d2a9841131597ba3a6116ead76480c0",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        65,
                        66,
                        75,
                        76,
                        77,
                        78,
                        83,
                        195,
                        376,
                        377,
                        378,
                        379,
                        718,
                        719,
                        720,
                        721,
                        724,
                        725,
                        726,
                        727,
                        728
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        270
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntry(String)')": [
                        283
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        307
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        380,
                        382
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        573,
                        575,
                        576,
                        577,
                        578,
                        598,
                        599,
                        600,
                        601,
                        607
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        76,
                        77,
                        78,
                        79,
                        80,
                        85,
                        86,
                        198,
                        199,
                        381,
                        382,
                        383,
                        718,
                        719,
                        720,
                        721,
                        724,
                        725
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        274,
                        275
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntry(String)')": [
                        288
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        312
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        384,
                        386,
                        387
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        578,
                        579,
                        581,
                        582,
                        607
                    ]
                }
            }
        }
    },
    "cadc527d7d2a9841131597ba3a6116ead76480c0": {
        "authored_data": "2011 Aug 03 14:33",
        "commit.message": "work around unexpected result from Inflater#getBytesRead\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1153507 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d48f106f8758056606e5d50d20f3893978d693a1",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "new": {
                    "(None, None)": [
                        38
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        122,
                        123
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500,
                        501,
                        502
                    ]
                }
            }
        }
    },
    "d48f106f8758056606e5d50d20f3893978d693a1": {
        "authored_data": "2011 Aug 03 13:36",
        "commit.message": "finalize deflater and inflater instances in ZIP streams.  COMPRESS-152\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1153483 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "04e132b74b62cac7bb2d171825d5975e4fbfc155",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'close')": [
                        367
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'finish')": [
                        360
                    ]
                }
            }
        }
    },
    "04e132b74b62cac7bb2d171825d5975e4fbfc155": {
        "authored_data": "2011 Aug 03 13:08",
        "commit.message": "separate state of stream from state of entry current being read from state of temporary buffer data is read into.  Document a few fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1153470 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "12f896a8129892d1921c630bfa049b843e53d02e",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        67,
                        68,
                        69,
                        72,
                        73,
                        74,
                        75,
                        76,
                        127
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        155,
                        159,
                        160,
                        166,
                        167,
                        171,
                        175,
                        179,
                        180,
                        201,
                        205,
                        208,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        220,
                        221,
                        222,
                        224,
                        225,
                        226,
                        227,
                        228
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        267,
                        268,
                        272,
                        273,
                        274,
                        275,
                        276,
                        283,
                        284,
                        287,
                        288,
                        289,
                        292,
                        293,
                        294,
                        295,
                        296,
                        298,
                        300,
                        301,
                        302,
                        303,
                        304,
                        311,
                        312,
                        324
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        431,
                        432,
                        433,
                        435,
                        438,
                        448,
                        451,
                        456,
                        460,
                        461,
                        462,
                        463,
                        464,
                        469,
                        470
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'fill')": [
                        480,
                        481,
                        482
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        506,
                        525,
                        526,
                        528,
                        529
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        572,
                        575,
                        589,
                        590,
                        591,
                        596,
                        606,
                        607,
                        619,
                        620
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        62,
                        63,
                        64,
                        67,
                        68,
                        69,
                        71,
                        72,
                        73,
                        74,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        89,
                        90,
                        91,
                        92,
                        94,
                        95,
                        96,
                        97,
                        98,
                        101,
                        102,
                        103,
                        104,
                        153,
                        669,
                        670,
                        671,
                        672,
                        673,
                        674,
                        675,
                        676,
                        677,
                        678,
                        679,
                        680,
                        681,
                        682,
                        683,
                        684,
                        685,
                        686,
                        687,
                        688,
                        689,
                        690,
                        691,
                        692,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        706,
                        707,
                        708,
                        709,
                        710,
                        711,
                        712,
                        713,
                        714,
                        715,
                        716,
                        717,
                        718,
                        719,
                        720,
                        721,
                        722,
                        723,
                        724,
                        725,
                        726
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        181,
                        185,
                        186,
                        192,
                        193,
                        197,
                        201,
                        205,
                        206,
                        227,
                        231,
                        234,
                        235,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        247,
                        248,
                        249,
                        251,
                        252,
                        253,
                        254,
                        255
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        294,
                        295,
                        299,
                        300,
                        301,
                        302,
                        303,
                        310,
                        311,
                        314,
                        315,
                        316,
                        319,
                        320,
                        321,
                        322,
                        323,
                        325,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        339,
                        340,
                        352
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        459,
                        460,
                        461,
                        462,
                        464,
                        465,
                        468,
                        478,
                        481,
                        486,
                        490,
                        491,
                        492,
                        493,
                        494,
                        499
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'fill')": [
                        509,
                        510,
                        511
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        535,
                        554,
                        555,
                        557,
                        558,
                        559
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        602,
                        605,
                        606,
                        620,
                        621,
                        622,
                        627,
                        637,
                        638,
                        650,
                        651
                    ],
                    "(None, None)": [
                        727,
                        728
                    ]
                }
            }
        }
    },
    "12f896a8129892d1921c630bfa049b843e53d02e": {
        "authored_data": "2011 Aug 03 12:06",
        "commit.message": "get rid of Deflater#getBytesWritten by self-counting\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1153460 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "1e708a040893a987b9d03bcfa422c5a79e09a2e6",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeArchiveEntry')": [
                        377,
                        378,
                        379,
                        385,
                        387,
                        388,
                        392,
                        396,
                        397,
                        407,
                        412,
                        415,
                        416,
                        417,
                        418
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeArchiveEntry')": [
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        390,
                        394,
                        407,
                        412,
                        415,
                        416
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'deflate')": [
                        699
                    ]
                }
            }
        }
    },
    "1e708a040893a987b9d03bcfa422c5a79e09a2e6": {
        "authored_data": "2011 Aug 03 09:55",
        "commit.message": "don't rely on archives to implement ZIP64 correctly when reading the data descriptor.  Works around a bug in java.util.ZipArchiveOutputStream of Java7, may be useful for other implementations as well.  COMPRESS-148\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1153415 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "53f15f17e6276993593aebe363bc8fb731e50862",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        460,
                        461,
                        462
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        509,
                        510,
                        512,
                        513,
                        515,
                        516,
                        517,
                        518,
                        519
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        596
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        460
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        517,
                        518,
                        519,
                        520,
                        521,
                        522,
                        523,
                        524,
                        526,
                        528,
                        529
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        606
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        632
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'pushback(byte,int,int)')": [
                        633,
                        634,
                        635,
                        636
                    ],
                    "(None, None)": [
                        637
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read5GBOfZerosGeneratedByJava7JarUsingInputStream')": [
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read5GBOfZerosImpl(File,String)')": [
                        1343
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', None)": [
                        1344,
                        1345
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read5GBOfZerosImpl(File,String,boolean)')": [
                        1346,
                        1347,
                        1348,
                        1370,
                        1371,
                        1372
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read5GBOfZerosGeneratedByJava7JarUsingInputStream')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read5GBOfZerosImpl(File,String)')": [
                        1360
                    ]
                }
            }
        }
    },
    "53f15f17e6276993593aebe363bc8fb731e50862": {
        "authored_data": "2011 Aug 03 05:13",
        "commit.message": "hard-code compressed sizes in tests so there is a baseline to test against when I stop using Deflater#getBytesWritten.  This assumes compressed sizes do not depend on platform or Java version, will verify the same later.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1153347 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2917696c19dd03782e0d96fac851e636156a337e",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', None)": [
                        489
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'writeBigDeflatedEntryKnownSizeToStream')": [
                        566,
                        577,
                        578,
                        579,
                        580,
                        594,
                        595,
                        596
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'writeBigDeflatedEntryToFile(boolean)')": [
                        733,
                        744,
                        745,
                        746,
                        747,
                        782,
                        792,
                        793,
                        794,
                        795
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'writeBigDeflatedEntryKnownSizeToStream')": [
                        565,
                        576,
                        577,
                        578,
                        579,
                        593,
                        596,
                        597,
                        598,
                        599,
                        645,
                        647
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'writeBigDeflatedEntryToFile(boolean)')": [
                        736,
                        747,
                        748,
                        749,
                        784,
                        794,
                        795,
                        796
                    ]
                }
            }
        }
    },
    "3466783d6e0c1f4ae6dc690a7ea808a9933cf004": {
        "authored_data": "2011 Aug 01 11:33",
        "commit.message": "three more archives with 100k files generated by different archivers.  The archives themselves are linked from COMPRESS-36\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1152744 13f79535-47bb-0310-9956-ffa450edef68\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "81af6235ee8311376d1c8618651763f7ce58e1ed",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read100KFilesUsingInputStream')": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', None)": [
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read100KFilesUsingInputStream')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', None)": [
                        65,
                        66,
                        69,
                        70,
                        73,
                        74,
                        1324,
                        1325,
                        1328,
                        1329,
                        1332,
                        1333,
                        1401,
                        1402,
                        1403
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read100KFilesGeneratedBy7ZIPUsingInputStream')": [
                        67,
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read100KFilesGeneratedByWinCFUsingInputStream')": [
                        71,
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read100KFilesGeneratedByJava7JarUsingInputStream')": [
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'get100KFileFileGeneratedBy7ZIP')": [
                        1322,
                        1323
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'get100KFileFileGeneratedByWinCF')": [
                        1326,
                        1327
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'get100KFileFileGeneratedByJava7Jar')": [
                        1330,
                        1331
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportTest', 'read100KFilesImpl(File)')": [
                        1382,
                        1383,
                        1384,
                        1385,
                        1386,
                        1387,
                        1388,
                        1389,
                        1390,
                        1391,
                        1392,
                        1393,
                        1394,
                        1395,
                        1396,
                        1397,
                        1398,
                        1399,
                        1400
                    ]
                }
            }
        }
    }
}