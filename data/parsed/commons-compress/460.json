{
    "65cbce6c54e11d7633483093e6b7e4d6c92dde64": {
        "authored_data": "2021 Feb 28 23:38",
        "commit.message": "Use String.replace() instead of replaceAll() when we don't need a Regex.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "7e5c4893364b77c3819e1057410e0ebd96d8e6f5",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'exceptionMessage(byte,int,int,int,byte)')": [
                        259
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'exceptionMessage(byte,int,int,int,byte)')": [
                        259
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        987,
                        988
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        987,
                        988
                    ]
                }
            }
        }
    },
    "7e5c4893364b77c3819e1057410e0ebd96d8e6f5": {
        "authored_data": "2021 Feb 28 14:51",
        "commit.message": "Remove use of redundant String.substring() parameter.\n\nRemove unused imports.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "32509ee94cef4d34ee6e1e82bd044331036ae273",
        "changes": {
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'testArchive')": [
                        144
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'testArchive')": [
                        144
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'testArchive')": [
                        143
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'testArchive')": [
                        143
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "old": {
                    "(None, None)": [
                        40
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        36,
                        39
                    ]
                }
            }
        }
    },
    "32509ee94cef4d34ee6e1e82bd044331036ae273": {
        "authored_data": "2021 Feb 28 10:41",
        "commit.message": "COMPRESS-567 use IOException rather than RuntimeExceptions\n\nMost of the time the parameters passed to these methods are directly\nread from archives or streams. Users of our classes expect\nIOExceptions for corrupt archives. Throwing IOException from our\ninternal classes avoids having to perform the same type of checks\nand throwing inside the calling code everywhere.\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "bcc009cb6b0eac4166ca472aa2293e11889075f9",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'createBoundedInputStream(long,long)')": [
                        1320,
                        1321,
                        1322,
                        1323
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', None)": [
                        238
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStream', None)": [
                        238
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'position(long)')": [
                        183
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'position(long)')": [
                        183
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'position(long)')": [
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', 'position(long)')": [
                        94
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannel', None)": [
                        116,
                        117
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', None)": [
                        31,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', None)": [
                        31,
                        38
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantPositionToANegativePosition')": [
                        142
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        377,
                        378,
                        379
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'throwsIllegalArgumentExceptionWhenPositionIsSetToANegativeValue')": [
                        380,
                        381
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'cantPositionToANegativePosition')": [
                        142
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', None)": [
                        377,
                        378,
                        379
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannelTest', 'throwsIOExceptionWhenPositionIsSetToANegativeValue')": [
                        380,
                        381
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', None)": [
                        187,
                        300,
                        301,
                        302
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'throwsIllegalArgumentExceptionWhenPositionIsSetToANegativeValue')": [
                        303
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', None)": [
                        187,
                        300,
                        301,
                        302
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'throwsIOExceptionWhenPositionIsSetToANegativeValue')": [
                        303
                    ]
                }
            }
        }
    },
    "fda4e34ff43f3c7a742292d858b60fc3b4bb1663": {
        "authored_data": "2021 Feb 25 11:20",
        "commit.message": "Remove empty loop in X0017_StrongEncryptionHeader\n\nAn empty loop in `X0017_StrongEncryptionHeader#parseCentralDirectoryFormat` can be made to run through 2^48 iterations, taking about 4 seconds on my machine, on a crafted input. Since it has no side effects, it can be safely removed.",
        "commit.author.name": "Fabian Meumertzheim",
        "pcid": "1b7528fbd6295a3958daf1b1114621ee5e40e83c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseCentralDirectoryFormat(byte,int,int)')": [
                        320,
                        321,
                        322
                    ],
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', None)": [
                        323,
                        324,
                        325
                    ]
                }
            }
        }
    },
    "309681f315008eb78bc063db623e02bbe8c8855c": {
        "authored_data": "2021 Feb 19 23:11",
        "commit.message": "COMPRESS-566 allow gzip buffer size to be configured\n\nAdd javadoc for getter method.",
        "commit.author.name": "Brett Okken",
        "pcid": "8797ec4eadc5ad4e0b278677979010ce6aa41f7b",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipParameters.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', None)": [
                        124,
                        125,
                        126,
                        127,
                        128,
                        129
                    ]
                }
            }
        }
    },
    "8797ec4eadc5ad4e0b278677979010ce6aa41f7b": {
        "authored_data": "2021 Feb 19 21:16",
        "commit.message": "COMPRESS-566 allow gzip buffer size to be configured",
        "commit.author.name": "BO8979",
        "pcid": "1b7528fbd6295a3958daf1b1114621ee5e40e83c",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', None)": [
                        56,
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', None)": [
                        56,
                        84
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipParameters.java": {
                "new": {
                    "(None, None)": [
                        22,
                        140
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', None)": [
                        37,
                        123,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'getBufferSize')": [
                        124,
                        125
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setBufferSize(int)')": [
                        135,
                        136,
                        137,
                        138,
                        139
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        206
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlagsFastestCompression')": [
                        226
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlagsBestCompression')": [
                        231
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlagsDefaultCompression')": [
                        236
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', None)": [
                        206,
                        219,
                        220,
                        221,
                        222,
                        223
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInvalidBufferSize')": [
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int,int)')": [
                        224,
                        234
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlagsFastestCompression')": [
                        245
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlagsBestCompression')": [
                        250
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlagsDefaultCompression')": [
                        255
                    ]
                }
            }
        }
    }
}