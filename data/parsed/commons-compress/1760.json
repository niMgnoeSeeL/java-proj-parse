{
    "ddb8f08c79b8568c9cba3af61fb5a613e0ccba22": {
        "authored_data": "2016 Apr 17 05:06",
        "commit.message": "COMPRESS-351 try to sanitize entry name in exception message\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2cc332cc20f1d988ce6b986ba63e6685709e9ecd",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        656
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        656,
                        657,
                        658,
                        659,
                        660,
                        661
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'firstUnprintableCharacter(String)')": [
                        991,
                        992,
                        993,
                        994,
                        995,
                        996,
                        997,
                        998,
                        999
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        1000,
                        1001
                    ]
                }
            }
        }
    },
    "2cc332cc20f1d988ce6b986ba63e6685709e9ecd": {
        "authored_data": "2016 Apr 09 17:13",
        "commit.message": "Fix Javadoc typo.",
        "commit.author.name": "ggregory",
        "pcid": "3f2c760a4eb82d880e62a03cb9450d9dcf2793f7",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        116
                    ]
                }
            }
        }
    },
    "3f2c760a4eb82d880e62a03cb9450d9dcf2793f7": {
        "authored_data": "2016 Apr 09 17:10",
        "commit.message": "Add final modifier to local variables.",
        "commit.author.name": "ggregory",
        "pcid": "bf85a64aaee3abee6f25f031862561162a613dd9",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'read')": [
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'read')": [
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveOutputStream(String,OutputStream)')": [
                        278
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        375,
                        384
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveOutputStream(String,OutputStream)')": [
                        278
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'createArchiveInputStream(InputStream)')": [
                        375,
                        384
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#Lister', 'main(String)')": [
                        43,
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#Lister', 'main(String)')": [
                        43,
                        47
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        180
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        180
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        115,
                        149,
                        156
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,boolean)')": [
                        206
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        345,
                        347,
                        348
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte)')": [
                        384,
                        386
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getNextArEntry')": [
                        115,
                        149,
                        156
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,boolean)')": [
                        206
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        345,
                        347,
                        348
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte)')": [
                        384,
                        386
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeArchiveHeader')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeArchiveHeader')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        92
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'getLastModifiedDate')": [
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveEntry', 'getLastModifiedDate')": [
                        94
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', None)": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'read8(DataInputStream)')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readLocalFileHeader')": [
                        251
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', None)": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'read8(DataInputStream)')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readLocalFileHeader')": [
                        251
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#LocalFileHeader', 'toString')": [
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#LocalFileHeader', 'toString')": [
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount')": [
                        477
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getDataPadCount')": [
                        491,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        887
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getHeaderPadCount')": [
                        477
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'getDataPadCount')": [
                        491,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        887
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        248
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        318,
                        324
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readFully(byte,int,int)')": [
                        337
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readBinaryLong(int,boolean)')": [
                        347
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readAsciiLong(int,int)')": [
                        354
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        369,
                        382,
                        384
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldAsciiEntry')": [
                        395,
                        408
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        421,
                        434
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readCString(int)')": [
                        448
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(long)')": [
                        471
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skipRemainderOfLastBlock')": [
                        498,
                        502
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        248
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        318,
                        324
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readFully(byte,int,int)')": [
                        337
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readBinaryLong(int,boolean)')": [
                        347
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readAsciiLong(int,int)')": [
                        354
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readNewEntry(boolean)')": [
                        369,
                        382,
                        384
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldAsciiEntry')": [
                        395,
                        408
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readOldBinaryEntry(boolean)')": [
                        421,
                        434
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readCString(int)')": [
                        448
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(long)')": [
                        471
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skipRemainderOfLastBlock')": [
                        498,
                        502
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        225
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeHeader(CpioArchiveEntry)')": [
                        266
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'finish')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'pad(int)')": [
                        496
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeBinaryLong(long,int,boolean)')": [
                        504
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        511,
                        522,
                        530
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(String)')": [
                        541
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        225
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeHeader(CpioArchiveEntry)')": [
                        266
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'finish')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'pad(int)')": [
                        496
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeBinaryLong(long,int,boolean)')": [
                        504
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeAsciiLong(long,int,int)')": [
                        511,
                        522,
                        530
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeCString(String)')": [
                        541
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'byteArray2long(byte,boolean)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'long2byteArray(long,int,boolean)')": [
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'byteArray2long(byte,boolean)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'long2byteArray(long,int,boolean)')": [
                        89
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        57,
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        57,
                        82
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        410
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'parse(byte)')": [
                        440,
                        441,
                        455
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        795,
                        826,
                        827,
                        828
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        410
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'parse(byte)')": [
                        440,
                        441,
                        455
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        795,
                        826,
                        827,
                        828
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        111,
                        129,
                        134
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readCLRI')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readBITS')": [
                        199
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readDirectoryEntry(DumpArchiveEntry)')": [
                        341,
                        355,
                        358,
                        359,
                        360,
                        367,
                        379,
                        380,
                        392,
                        397
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'getPath(DumpArchiveEntry)')": [
                        418,
                        443
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'read(byte,int,int)')": [
                        483,
                        498,
                        509
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        111,
                        129,
                        134
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readCLRI')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readBITS')": [
                        199
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'readDirectoryEntry(DumpArchiveEntry)')": [
                        341,
                        355,
                        358,
                        359,
                        360,
                        367,
                        379,
                        380,
                        392,
                        397
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'getPath(DumpArchiveEntry)')": [
                        418,
                        443
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'read(byte,int,int)')": [
                        483,
                        498,
                        509
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'equals(Object)')": [
                        319
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'equals(Object)')": [
                        319
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'verify(byte)')": [
                        58,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'decode(ZipEncoding,byte,int,int)')": [
                        141
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'verify(byte)')": [
                        58,
                        65
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'decode(ZipEncoding,byte,int,int)')": [
                        141
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'resetBlockSize(int,boolean)')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        226
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readRecord')": [
                        239
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        274,
                        275,
                        283,
                        285,
                        297,
                        305
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readFully(byte,int,int)')": [
                        339
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'resetBlockSize(int,boolean)')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'peek')": [
                        226
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readRecord')": [
                        239
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        274,
                        275,
                        283,
                        285,
                        297,
                        305
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readFully(byte,int,int)')": [
                        339
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveEntry', 'getCertificates')": [
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveEntry', 'getCertificates')": [
                        78
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveInputStream', 'getNextJarEntry')": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveInputStream', 'getNextJarEntry')": [
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        70,
                        96
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        70,
                        96
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        52,
                        54,
                        71,
                        81,
                        85,
                        90,
                        91
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'main(String)')": [
                        124,
                        126,
                        130
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        52,
                        54,
                        71,
                        81,
                        85,
                        90,
                        91
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'main(String)')": [
                        124,
                        126,
                        130
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'canAcceptOptions(Object)')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'canAcceptOptions(Object)')": [
                        42
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(String,InputStream,long,Coder,byte)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addEncoder(OutputStream,SevenZMethod,Object)')": [
                        83
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        106,
                        129,
                        187,
                        232,
                        262
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(String,InputStream,long,Coder,byte)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addEncoder(OutputStream,SevenZMethod,Object)')": [
                        83
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        106,
                        129,
                        187,
                        232,
                        262
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'encode(OutputStream,Object)')": [
                        40,
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'encode(OutputStream,Object)')": [
                        40,
                        43
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', 'getOrderedCoders')": [
                        55,
                        59
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', 'getOrderedCoders')": [
                        55,
                        59
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        38,
                        40
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'encode(OutputStream,Object)')": [
                        48,
                        49
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptionsAsProperties(Object)')": [
                        55,
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptions(Object)')": [
                        93
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        38,
                        40
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'encode(OutputStream,Object)')": [
                        48,
                        49
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptionsAsProperties(Object)')": [
                        55,
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptions(Object)')": [
                        93
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setContentMethods(Iterable)')": [
                        458,
                        459
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setContentMethods(Iterable)')": [
                        458,
                        459
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFolder(DataInput)')": [
                        513
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(DataInput,Archive)')": [
                        626
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        871,
                        876
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getCurrentStream')": [
                        910
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readUint64(DataInput)')": [
                        946,
                        953
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipBytesFully(DataInput,long)')": [
                        989,
                        997
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFolder(DataInput)')": [
                        513
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(DataInput,Archive)')": [
                        626
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        871,
                        876
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getCurrentStream')": [
                        910
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readUint64(DataInput)')": [
                        946,
                        953
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipBytesFully(DataInput,long)')": [
                        989,
                        997
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java": {
                "old": {
                    "(None, None)": [
                        95,
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        95,
                        101
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'closeArchiveEntry')": [
                        169
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'setupFileOutputStream')": [
                        283,
                        285,
                        287
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'getContentMethods(SevenZArchiveEntry)')": [
                        320
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeUnpackInfo(DataOutput)')": [
                        374,
                        383,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFolder(DataOutput,SevenZArchiveEntry)')": [
                        405,
                        407
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeSingleCodec(SevenZMethodConfiguration,OutputStream)')": [
                        421,
                        422
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileEmptyFiles(DataOutput)')": [
                        496,
                        498
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileAntiItems(DataOutput)')": [
                        519,
                        521
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'reverse(Iterable)')": [
                        733,
                        734
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'closeArchiveEntry')": [
                        169
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'setupFileOutputStream')": [
                        283,
                        285,
                        287
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'getContentMethods(SevenZArchiveEntry)')": [
                        320
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeUnpackInfo(DataOutput)')": [
                        374,
                        383,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFolder(DataOutput,SevenZArchiveEntry)')": [
                        405,
                        407
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeSingleCodec(SevenZMethodConfiguration,OutputStream)')": [
                        421,
                        422
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileEmptyFiles(DataOutput)')": [
                        496,
                        498
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileAntiItems(DataOutput)')": [
                        519,
                        521
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'reverse(Iterable)')": [
                        733,
                        734
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        262,
                        319,
                        326
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        953,
                        957
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        976,
                        979
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte,ZipEncoding,boolean)')": [
                        1012,
                        1036
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1063,
                        1066
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean)')": [
                        1127,
                        1143,
                        1153
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'normalizeFileName(String,boolean)')": [
                        1174,
                        1183,
                        1184,
                        1193
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        262,
                        319,
                        326
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        953,
                        957
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        976,
                        979
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte,ZipEncoding,boolean)')": [
                        1012,
                        1036
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1063,
                        1066
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean)')": [
                        1127,
                        1143,
                        1153
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'normalizeFileName(String,boolean)')": [
                        1174,
                        1183,
                        1184,
                        1193
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        275,
                        285,
                        293,
                        304
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skipRecordPadding')": [
                        343,
                        344,
                        345
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getLongNameData')": [
                        358,
                        376
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readRecord')": [
                        427,
                        428,
                        429
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'paxHeaders')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream)')": [
                        454,
                        464,
                        468,
                        474,
                        475,
                        484
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'applyPaxHeadersToCurrentEntry(Map)')": [
                        523,
                        524,
                        525
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readOldGNUSparse')": [
                        572
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'tryToConsumeSecondEOFRecord')": [
                        613
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        677
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'consumeRemainderOfLastBlock')": [
                        710,
                        712
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        275,
                        285,
                        293,
                        304
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'skipRecordPadding')": [
                        343,
                        344,
                        345
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getLongNameData')": [
                        358,
                        376
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readRecord')": [
                        427,
                        428,
                        429
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'paxHeaders')": [
                        444
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream)')": [
                        454,
                        464,
                        468,
                        474,
                        475,
                        484
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'applyPaxHeadersToCurrentEntry(Map)')": [
                        523,
                        524,
                        525
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'readOldGNUSparse')": [
                        572
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'tryToConsumeSecondEOFRecord')": [
                        613
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        677
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'consumeRemainderOfLastBlock')": [
                        710,
                        712
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        277,
                        278,
                        280,
                        284
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        398,
                        437
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writePaxHeaders(TarArchiveEntry,String,Map)')": [
                        456,
                        460,
                        461,
                        462,
                        463,
                        481
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'stripTo7Bits(String)')": [
                        490,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'padAsNeeded')": [
                        576
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        678
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'transferModTime(TarArchiveEntry,TarArchiveEntry)')": [
                        697
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        277,
                        278,
                        280,
                        284
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        398,
                        437
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writePaxHeaders(TarArchiveEntry,String,Map)')": [
                        456,
                        460,
                        461,
                        462,
                        463,
                        481
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'stripTo7Bits(String)')": [
                        490,
                        492
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'padAsNeeded')": [
                        576
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        678
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'transferModTime(TarArchiveEntry,TarArchiveEntry)')": [
                        697
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        54,
                        66,
                        67,
                        68
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseBinaryBigInteger(byte,int,int,boolean)')": [
                        205
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        265,
                        268
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int,ZipEncoding)')": [
                        300
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        325,
                        329
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongOctalBytes(long,byte,int,int)')": [
                        449
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatBigIntegerBinary(long,byte,int,int,boolean)')": [
                        519
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'computeCheckSum(byte)')": [
                        564
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'verifyCheckSum(byte)')": [
                        597
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        54,
                        66,
                        67,
                        68
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseBinaryBigInteger(byte,int,int,boolean)')": [
                        205
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        265,
                        268
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int,ZipEncoding)')": [
                        300
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        325,
                        329
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongOctalBytes(long,byte,int,int)')": [
                        449
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatBigIntegerBinary(long,byte,int,int,boolean)')": [
                        519
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'computeCheckSum(byte)')": [
                        564
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'verifyCheckSum(byte)')": [
                        597
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        52,
                        58
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        169
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        52,
                        58
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        169
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'getLocalFileDataData')": [
                        130,
                        133,
                        148,
                        149,
                        150
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        270,
                        271,
                        275,
                        283,
                        285
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'clone')": [
                        329,
                        332
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'getLocalFileDataData')": [
                        130,
                        133,
                        148,
                        149,
                        150
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        270,
                        271,
                        275,
                        283,
                        285
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'clone')": [
                        329,
                        332
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'addLeaf(int,int,int,int)')": [
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'read(BitStream)')": [
                        88,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        112,
                        117,
                        123,
                        125,
                        127,
                        128,
                        138,
                        144,
                        166,
                        178,
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'addLeaf(int,int,int,int)')": [
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'read(BitStream)')": [
                        88,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        112,
                        117,
                        123,
                        125,
                        127,
                        128,
                        138,
                        144,
                        166,
                        178,
                        181
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'get')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'copy(int,int)')": [
                        81,
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'get')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'copy(int,int)')": [
                        81,
                        82
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'fillBuffer')": [
                        120,
                        139,
                        140,
                        141,
                        146
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', 'fillBuffer')": [
                        120,
                        139,
                        140,
                        141,
                        146
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        66,
                        68,
                        70,
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'createExtraField(ZipShort)')": [
                        87,
                        91
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        138,
                        142,
                        143,
                        154,
                        176,
                        184,
                        186,
                        192
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeLocalFileDataData(ZipExtraField)')": [
                        204,
                        208,
                        212,
                        220,
                        227
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeCentralDirectoryData(ZipExtraField)')": [
                        243,
                        247,
                        250,
                        258,
                        265
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        66,
                        68,
                        70,
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'createExtraField(ZipShort)')": [
                        87,
                        91
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        138,
                        142,
                        143,
                        154,
                        176,
                        184,
                        186,
                        192
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeLocalFileDataData(ZipExtraField)')": [
                        204,
                        208,
                        212,
                        220,
                        227
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeCentralDirectoryData(ZipExtraField)')": [
                        243,
                        247,
                        250,
                        258,
                        265
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'encode')": [
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'parse(byte,int)')": [
                        206
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'equals(Object)')": [
                        229
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'clone')": [
                        240
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'encode')": [
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'parse(byte,int)')": [
                        206
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'equals(Object)')": [
                        229
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'clone')": [
                        240
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'canEncode(String)')": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encode(String)')": [
                        73,
                        78,
                        83
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'canEncode(String)')": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encode(String)')": [
                        73,
                        78,
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromLocalFileData(byte,int,int)')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        189
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', None)": [
                        219,
                        220,
                        274,
                        275
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromLocalFileData(byte,int,int)')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        189
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', None)": [
                        219,
                        220,
                        274,
                        275
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        69,
                        85,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createDeferred(ScatterGatherBackingStoreSupplier)')": [
                        76,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        200,
                        210
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        69,
                        85,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createDeferred(ScatterGatherBackingStoreSupplier)')": [
                        76,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        200,
                        210
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'writeTo(ZipArchiveOutputStream)')": [
                        113,
                        114
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File,int)')": [
                        152,
                        153
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'writeTo(ZipArchiveOutputStream)')": [
                        113,
                        114
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File,int)')": [
                        152,
                        153
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', None)": [
                        76,
                        107,
                        112
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncodeChar(char)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'pushEncodedChar(ByteBuffer,char)')": [
                        166
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encodeHighChar(char)')": [
                        188,
                        189,
                        190,
                        207
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncode(String)')": [
                        225
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encode(String)')": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'decode(byte)')": [
                        269
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', None)": [
                        76,
                        107,
                        112
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncodeChar(char)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'pushEncodedChar(ByteBuffer,char)')": [
                        166
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encodeHighChar(char)')": [
                        188,
                        189,
                        190,
                        207
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncode(String)')": [
                        225
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encode(String)')": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'decode(byte)')": [
                        269
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'deflate')": [
                        248
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        188
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'deflate')": [
                        248
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        133
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        133
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnshrinkingInputStream', 'addEntry(int,byte)')": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnshrinkingInputStream', 'addEntry(int,byte)')": [
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'getLocalFileDataData')": [
                        122
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'parseFromLocalFileData(byte,int,int)')": [
                        165,
                        171
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'toString')": [
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        326
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'readTimeAttr(byte,int,int)')": [
                        364
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'zipToDate(ZipEightByteInteger)')": [
                        390
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'getLocalFileDataData')": [
                        122
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'parseFromLocalFileData(byte,int,int)')": [
                        165,
                        171
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'toString')": [
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        326
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'readTimeAttr(byte,int,int)')": [
                        364
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'zipToDate(ZipEightByteInteger)')": [
                        390
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFileFormat(byte,int,int)')": [
                        331,
                        340,
                        347,
                        355,
                        361
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFileFormat(byte,int,int)')": [
                        331,
                        340,
                        347,
                        355,
                        361
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'getLocalFileDataData')": [
                        174
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'getCentralDirectoryData')": [
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'toString')": [
                        538,
                        542,
                        546,
                        550
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        564
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'getLocalFileDataData')": [
                        174
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'getCentralDirectoryData')": [
                        203,
                        204
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'toString')": [
                        538,
                        542,
                        546,
                        550
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        564
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getLocalFileDataLength')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getLocalFileDataData')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'parseFromLocalFileData(byte,int,int)')": [
                        216,
                        217,
                        222,
                        223
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'equals(Object)')": [
                        268
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'trimLeadingZeroesForceMinLength(byte)')": [
                        301,
                        348,
                        349
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getLocalFileDataLength')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'getLocalFileDataData')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'parseFromLocalFileData(byte,int,int)')": [
                        216,
                        217,
                        222,
                        223
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'equals(Object)')": [
                        268
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'trimLeadingZeroesForceMinLength(byte)')": [
                        301,
                        348,
                        349
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'getLocalFileDataData')": [
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'getCentralDirectoryData')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'reparseCentralDirectoryData(boolean,boolean,boolean,boolean)')": [
                        230
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'getLocalFileDataData')": [
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'getCentralDirectoryData')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'reparseCentralDirectoryData(boolean,boolean,boolean,boolean)')": [
                        230
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        118,
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'clone')": [
                        184
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtraFields(ZipExtraField)')": [
                        324,
                        325
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField,int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addAsFirstExtraField(ZipExtraField)')": [
                        452,
                        453
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'removeExtraField(ZipShort)')": [
                        472,
                        473
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraField(ZipShort)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        537,
                        541
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCentralDirectoryExtra(byte)')": [
                        564,
                        568
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getLocalFileDataExtra')": [
                        578
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getRawName')": [
                        674
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        726,
                        737,
                        740
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'equals(Object)')": [
                        773,
                        774,
                        775
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        118,
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'clone')": [
                        184
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtraFields(ZipExtraField)')": [
                        324,
                        325
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField,int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addAsFirstExtraField(ZipExtraField)')": [
                        452,
                        453
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'removeExtraField(ZipShort)')": [
                        472,
                        473
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraField(ZipShort)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        537,
                        541
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCentralDirectoryExtra(byte)')": [
                        564,
                        568
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getLocalFileDataExtra')": [
                        578
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getRawName')": [
                        674
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        726,
                        737,
                        740
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'equals(Object)')": [
                        773,
                        774,
                        775
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        238,
                        242,
                        254,
                        269,
                        287,
                        291,
                        294,
                        298
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFirstLocalFileHeader(byte)')": [
                        332,
                        340
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'processZip64Extra(ZipLong,ZipLong)')": [
                        353
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        384
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        446,
                        453
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDeflated(byte,int,int)')": [
                        477
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFromInflater(byte,int,int)')": [
                        500,
                        511
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skip(long)')": [
                        550,
                        551
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        624,
                        629
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        654
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'fill')": [
                        692
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFully(byte)')": [
                        702
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        731
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        774,
                        779,
                        782,
                        800
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        955,
                        956
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readOneByte')": [
                        975
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        238,
                        242,
                        254,
                        269,
                        287,
                        291,
                        294,
                        298
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFirstLocalFileHeader(byte)')": [
                        332,
                        340
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'processZip64Extra(ZipLong,ZipLong)')": [
                        353
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        384
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        446,
                        453
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDeflated(byte,int,int)')": [
                        477
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFromInflater(byte,int,int)')": [
                        500,
                        511
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skip(long)')": [
                        550,
                        551
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'closeEntry')": [
                        624,
                        629
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        654
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'fill')": [
                        692
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFully(byte)')": [
                        702
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDataDescriptor')": [
                        731
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        774,
                        779,
                        782,
                        800
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        955,
                        956
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readOneByte')": [
                        975
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        288
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryInChunks')": [
                        454,
                        455,
                        457
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeArchiveEntry')": [
                        481,
                        482
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeCopiedEntry(boolean)')": [
                        503,
                        504
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addRawArchiveEntry(ZipArchiveEntry,InputStream)')": [
                        546,
                        553
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'rewriteSizesAndCrc(boolean)')": [
                        643,
                        656,
                        657
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry,boolean)')": [
                        731
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        870
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'write(byte,int,int)')": [
                        891
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        994,
                        995,
                        1002
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        1012,
                        1014,
                        1015,
                        1028
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)')": [
                        1094,
                        1097,
                        1101
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralFileHeader(ZipArchiveEntry)')": [
                        1141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1177,
                        1185,
                        1188,
                        1189,
                        1250,
                        1253
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleZip64Extra(ZipArchiveEntry,long,boolean)')": [
                        1267
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1300,
                        1311,
                        1321,
                        1322
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1349,
                        1374
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getGeneralPurposeBits(int,boolean)')": [
                        1419
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getEntryEncoding(ZipArchiveEntry)')": [
                        1525
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        288
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryInChunks')": [
                        454,
                        455,
                        457
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeArchiveEntry')": [
                        481,
                        482
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeCopiedEntry(boolean)')": [
                        503,
                        504
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addRawArchiveEntry(ZipArchiveEntry,InputStream)')": [
                        546,
                        553
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'rewriteSizesAndCrc(boolean)')": [
                        643,
                        656,
                        657
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry,boolean)')": [
                        731
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        870
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'write(byte,int,int)')": [
                        891
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        994,
                        995,
                        1002
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        1012,
                        1014,
                        1015,
                        1028
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)')": [
                        1094,
                        1097,
                        1101
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralFileHeader(ZipArchiveEntry)')": [
                        1141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1177,
                        1185,
                        1188,
                        1189,
                        1250,
                        1253
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleZip64Extra(ZipArchiveEntry,long,boolean)')": [
                        1267
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1300,
                        1311,
                        1321,
                        1322
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1349,
                        1374
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getGeneralPurposeBits(int,boolean)')": [
                        1419
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getEntryEncoding(ZipArchiveEntry)')": [
                        1525
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getBytes(BigInteger)')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getValue(byte,int)')": [
                        185
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getBytes(BigInteger)')": [
                        142,
                        143
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getValue(byte,int)')": [
                        185
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', None)": [
                        71,
                        74,
                        98,
                        106,
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'growBuffer(ByteBuffer,int)')": [
                        156,
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'getZipEncoding(String)')": [
                        221,
                        229,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'isUTF8(String)')": [
                        251
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', None)": [
                        71,
                        74,
                        98,
                        106,
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'growBuffer(ByteBuffer,int)')": [
                        156,
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'getZipEncoding(String)')": [
                        221,
                        229,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'isUTF8(String)')": [
                        251
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        217,
                        1101,
                        1102,
                        1109,
                        1140
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        284
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntry(String)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntries(String)')": [
                        316
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getRawInputStream(ZipArchiveEntry)')": [
                        366,
                        367
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)')": [
                        383,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        406,
                        408,
                        409
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getUnixSymlink(ZipArchiveEntry)')": [
                        472
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        539
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        574,
                        575,
                        576,
                        577,
                        598,
                        611,
                        614,
                        617,
                        620,
                        629,
                        638,
                        644
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,OffsetEntry,int)')": [
                        669,
                        673,
                        674,
                        675
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory')": [
                        803
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtEndOfCentralDirectoryRecord')": [
                        868
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'skipBytes(int)')": [
                        922
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        955,
                        958,
                        959,
                        960,
                        963,
                        965,
                        968,
                        975,
                        982,
                        987
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        217,
                        1101,
                        1102,
                        1109,
                        1140
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder')": [
                        284
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntry(String)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntries(String)')": [
                        316
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getRawInputStream(ZipArchiveEntry)')": [
                        366,
                        367
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)')": [
                        383,
                        385
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        406,
                        408,
                        409
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getUnixSymlink(ZipArchiveEntry)')": [
                        472
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'populateFromCentralDirectory')": [
                        539
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        574,
                        575,
                        576,
                        577,
                        598,
                        611,
                        614,
                        617,
                        620,
                        629,
                        638,
                        644
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,OffsetEntry,int)')": [
                        669,
                        673,
                        674,
                        675
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtCentralDirectory')": [
                        803
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'positionAtEndOfCentralDirectoryRecord')": [
                        868
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'skipBytes(int)')": [
                        922
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        955,
                        958,
                        959,
                        960,
                        963,
                        965,
                        968,
                        975,
                        982,
                        987
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getBytes(long)')": [
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'clone')": [
                        210
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getBytes(long)')": [
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'clone')": [
                        210
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java": {
                "old": {
                    "(None, None)": [
                        176,
                        177
                    ]
                },
                "new": {
                    "(None, None)": [
                        176,
                        177
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes(int)')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'clone')": [
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes(int)')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'clone')": [
                        152
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long)')": [
                        54
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(Calendar,long,byte,int)')": [
                        76,
                        81,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'reverse(byte)')": [
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'fromDosTime(ZipLong)')": [
                        203
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'dosToJavaTime(long)')": [
                        214
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'setNameAndCommentFromExtraFields(ZipArchiveEntry,byte,byte)')": [
                        235,
                        237,
                        238,
                        245,
                        247
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte)')": [
                        266,
                        268,
                        274
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'copy(byte)')": [
                        292
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        348
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long)')": [
                        54
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(Calendar,long,byte,int)')": [
                        76,
                        81,
                        82
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'reverse(byte)')": [
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'fromDosTime(ZipLong)')": [
                        203
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'dosToJavaTime(long)')": [
                        214
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'setNameAndCommentFromExtraFields(ZipArchiveEntry,byte,byte)')": [
                        235,
                        237,
                        238,
                        245,
                        247
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte)')": [
                        266,
                        268,
                        274
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'copy(byte)')": [
                        292
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        348
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSet.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSet', 'addAddition(Change)')": [
                        100,
                        101,
                        104
                    ],
                    "('org.apache.commons.compress.changes#ChangeSet', 'addDeletion(Change)')": [
                        133,
                        136,
                        137,
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSet', 'addAddition(Change)')": [
                        100,
                        101,
                        104
                    ],
                    "('org.apache.commons.compress.changes#ChangeSet', 'addDeletion(Change)')": [
                        133,
                        136,
                        137,
                        140
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveEntryIterator,ArchiveOutputStream)')": [
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        129,
                        132,
                        133,
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'isDeletedLater(Set,ArchiveEntry)')": [
                        188,
                        191,
                        193
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveEntryIterator,ArchiveOutputStream)')": [
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        129,
                        132,
                        133,
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'isDeletedLater(Set,ArchiveEntry)')": [
                        188,
                        191,
                        193
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorInputStream(InputStream)')": [
                        217,
                        254
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorInputStream(String,InputStream)')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorOutputStream(String,OutputStream)')": [
                        366
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorInputStream(InputStream)')": [
                        217,
                        254
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorInputStream(String,InputStream)')": [
                        318
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorOutputStream(String,OutputStream)')": [
                        366
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#FileNameUtil', None)": [
                        96,
                        97,
                        105,
                        106
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getUncompressedFilename(String)')": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getCompressedFilename(String)')": [
                        187
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FileNameUtil', None)": [
                        96,
                        97,
                        105,
                        106
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getUncompressedFilename(String)')": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getCompressedFilename(String)')": [
                        187
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read')": [
                        140
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        180
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'init(boolean)')": [
                        235,
                        239,
                        240,
                        248
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'close')": [
                        355
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsR(int)')": [
                        375
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartA')": [
                        838
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartC')": [
                        908
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read')": [
                        140
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        180
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'init(boolean)')": [
                        235,
                        239,
                        240,
                        248
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'close')": [
                        355
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsR(int)')": [
                        375
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartA')": [
                        838
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'setupNoRandPartC')": [
                        908
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'hbMakeCodeLengths(byte,int,Data,int,int)')": [
                        171,
                        180,
                        210
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'close')": [
                        499
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'flush')": [
                        507
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'initBlock')": [
                        540
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'write(byte,int,int)')": [
                        632
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'bsFinishedWithStream')": [
                        679
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues')": [
                        717
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues1(int,int)')": [
                        811
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues2(int,int)')": [
                        912,
                        925
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues3(int,int)')": [
                        936,
                        937
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues6(int,int)')": [
                        1050,
                        1063
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'generateMTFValues')": [
                        1210
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'hbMakeCodeLengths(byte,int,Data,int,int)')": [
                        171,
                        180,
                        210
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'close')": [
                        499
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'flush')": [
                        507
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'initBlock')": [
                        540
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'write(byte,int,int)')": [
                        632
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'bsFinishedWithStream')": [
                        679
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues')": [
                        717
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues1(int,int)')": [
                        811
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues2(int,int)')": [
                        912,
                        925
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues3(int,int)')": [
                        936,
                        937
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues6(int,int)')": [
                        1050,
                        1063
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'generateMTFValues')": [
                        1210
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', None)": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', None)": [
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSimpleSort(int,int,int,int)')": [
                        278,
                        279,
                        289,
                        290
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fswap(int,int,int)')": [
                        304
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackQSort3(int,int,int,int)')": [
                        353,
                        369
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSort(int,byte,int)')": [
                        499
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'vswap(int,int,int,int)')": [
                        786
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSimpleSort(int,int,int,int)')": [
                        278,
                        279,
                        289,
                        290
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fswap(int,int,int)')": [
                        304
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackQSort3(int,int,int,int)')": [
                        353,
                        369,
                        370
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSort(int,byte,int)')": [
                        500
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'vswap(int,int,int,int)')": [
                        787
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'updateCRC(int,int)')": [
                        125
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'updateCRC(int,int)')": [
                        125
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'read')": [
                        69
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'read(byte,int,int)')": [
                        77
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'read')": [
                        69
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'read(byte,int,int)')": [
                        77
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        152,
                        153,
                        168,
                        169,
                        175
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInputStream)')": [
                        237
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        287,
                        305,
                        312,
                        315,
                        323
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        152,
                        153,
                        168,
                        169,
                        175
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInputStream)')": [
                        237
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        287,
                        305,
                        312,
                        315,
                        323
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        89,
                        90,
                        91,
                        92,
                        100
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeTrailer')": [
                        125
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'deflate')": [
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        89,
                        90,
                        91,
                        92,
                        100
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeTrailer')": [
                        125
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'deflate')": [
                        170
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', None)": [
                        37
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'read')": [
                        54
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'read(byte,int,int)')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'read')": [
                        54
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'read(byte,int,int)')": [
                        62
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        48,
                        55
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'internalIsLZMACompressionAvailable')": [
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', None)": [
                        48,
                        55
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'internalIsLZMACompressionAvailable')": [
                        102
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'read')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'read(byte,int,int)')": [
                        75
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'readFromStack(byte,int,int)')": [
                        195,
                        197
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'read')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'read(byte,int,int)')": [
                        75
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'readFromStack(byte,int,int)')": [
                        195,
                        197
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', None)": [
                        174,
                        175
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'markSupported')": [
                        218
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'mark(int)')": [
                        227
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', None)": [
                        174,
                        175
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'markSupported')": [
                        218
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'mark(int)')": [
                        227
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'finish')": [
                        129
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'finish')": [
                        129
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        134,
                        140,
                        147
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        134,
                        140,
                        147
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOnce(byte,int,int)')": [
                        135,
                        145
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        163,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readCrc')": [
                        198,
                        199
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        233,
                        234
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readStreamIdentifier')": [
                        242,
                        243
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOneByte')": [
                        251
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOnce(byte,int,int)')": [
                        135,
                        145
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        163,
                        184
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readCrc')": [
                        198,
                        199
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        233,
                        234
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readStreamIdentifier')": [
                        242,
                        243
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOneByte')": [
                        251
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'getValue')": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'getValue')": [
                        47
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        137
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'expandLiteral(int)')": [
                        310
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'expandCopy(long,int)')": [
                        343,
                        346,
                        356
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'readOneByte')": [
                        385
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        137
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'expandLiteral(int)')": [
                        310
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'expandCopy(long,int)')": [
                        343,
                        346,
                        356
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'readOneByte')": [
                        385
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read(byte,int,int)')": [
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read(byte,int,int)')": [
                        111
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        51,
                        59
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'internalIsXZCompressionAvailable')": [
                        111
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', None)": [
                        51,
                        59
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'internalIsXZCompressionAvailable')": [
                        111
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', None)": [
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'readNextCode')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'addEntry(int,byte)')": [
                        101
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', None)": [
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'readNextCode')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'addEntry(int,byte)')": [
                        101
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toString(ArchiveEntry)')": [
                        47,
                        49
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        74
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        101
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        115
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        131
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isEqual(byte,int,int,byte,int,int,boolean)')": [
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toString(ArchiveEntry)')": [
                        47,
                        49
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        74
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        101
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        115
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        131
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isEqual(byte,int,int,byte,int,int,boolean)')": [
                        152
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read')": [
                        55
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte,int,int)')": [
                        85
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read')": [
                        55
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte,int,int)')": [
                        85
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/CountingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read')": [
                        39
                    ],
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read(byte,int,int)')": [
                        51
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read')": [
                        39
                    ],
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read(byte,int,int)')": [
                        51
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtils', 'skip(InputStream,long)')": [
                        101,
                        103,
                        111
                    ],
                    "(None, None)": [
                        202
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtils', 'skip(InputStream,long)')": [
                        101,
                        103,
                        111
                    ],
                    "(None, None)": [
                        202
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'mkdir(String)')": [
                        64
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        71,
                        78
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'rmdir(File)')": [
                        96,
                        98,
                        103
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'tryHardToDelete(File)')": [
                        133
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'addArchiveEntry(ArchiveOutputStream,String,File)')": [
                        214
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        320,
                        326,
                        333
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDirAndFile')": [
                        384,
                        385,
                        387
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDir')": [
                        397
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        406
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'mkdir(String)')": [
                        64
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        71,
                        78
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'rmdir(File)')": [
                        96,
                        98,
                        103
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'tryHardToDelete(File)')": [
                        133
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'addArchiveEntry(ArchiveOutputStream,String,File)')": [
                        214
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        320,
                        326,
                        333
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDirAndFile')": [
                        384,
                        385,
                        387
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDir')": [
                        397
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        406
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveReadTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveReadTest', 'setUpFileList')": [
                        63,
                        65
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'data')": [
                        78,
                        79
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'testArchive')": [
                        103,
                        105
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveReadTest', 'setUpFileList')": [
                        63,
                        65
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'data')": [
                        78,
                        79
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'testArchive')": [
                        100,
                        104,
                        106
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testCompareBA')": [
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testCompareAscii')": [
                        55,
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testCompareBA')": [
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'testCompareAscii')": [
                        55,
                        56
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ChainingTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarGzip')": [
                        37
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarBzip2')": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarGzip')": [
                        37
                    ],
                    "('org.apache.commons.compress#ChainingTestCase', 'testTarBzip2')": [
                        47
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#DetectArchiverTestCase', None)": [
                        46
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'checkEmptyArchive(String)')": [
                        133,
                        140
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#DetectArchiverTestCase', None)": [
                        46
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'checkEmptyArchive(String)')": [
                        133,
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/IOMethodsTest.java": {
                "old": {
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteAr')": [
                        57
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteCpio')": [
                        63
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteJar')": [
                        69
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteTar')": [
                        75
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteZip')": [
                        82
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareWrites(String,ArchiveEntry)')": [
                        112,
                        113,
                        114,
                        115,
                        117,
                        119,
                        121
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareReads(String)')": [
                        143,
                        144,
                        145,
                        146,
                        149,
                        150,
                        154,
                        155,
                        160,
                        161,
                        166,
                        167
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteAr')": [
                        57
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteCpio')": [
                        63
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteJar')": [
                        69
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteTar')": [
                        75
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'testWriteZip')": [
                        82
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareWrites(String,ArchiveEntry)')": [
                        112,
                        113,
                        114,
                        115,
                        117,
                        119,
                        121
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareReads(String)')": [
                        143,
                        144,
                        145,
                        146,
                        149,
                        150,
                        154,
                        155,
                        160,
                        161,
                        166,
                        167
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestDirectoryEntryFromFile')": [
                        195,
                        203,
                        204,
                        210
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestExplicitDirectoryEntry')": [
                        237,
                        245,
                        246,
                        253
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromFile')": [
                        277,
                        286,
                        288,
                        299
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testExplicitFileEntry')": [
                        327,
                        336,
                        340,
                        351
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testArUnarchive')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestDirectoryEntryFromFile')": [
                        195,
                        203,
                        204,
                        210
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'XtestExplicitDirectoryEntry')": [
                        237,
                        245,
                        246,
                        253
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testFileEntryFromFile')": [
                        277,
                        286,
                        288,
                        299
                    ],
                    "('org.apache.commons.compress.archivers#ArTestCase', 'testExplicitFileEntry')": [
                        327,
                        336,
                        340,
                        351
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'testFinish')": [
                        43,
                        50,
                        59,
                        68,
                        77
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', None)": [
                        86,
                        107
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'testOptionalFinish')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        138,
                        139,
                        156,
                        169,
                        174,
                        180
                    ],
                    "(None, None)": [
                        187
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'testFinish')": [
                        43,
                        50,
                        59,
                        68,
                        77
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', None)": [
                        86,
                        107
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'testOptionalFinish')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        138,
                        139,
                        156,
                        169,
                        174,
                        180
                    ],
                    "(None, None)": [
                        187
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'shortTextFilesAreNoTARs')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'aiffFilesAreNoTARs')": [
                        66,
                        68,
                        72
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testCOMPRESS209')": [
                        84,
                        86,
                        90
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detectsAndThrowsFor7z')": [
                        121,
                        123,
                        127
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'skipsPK00Prefix')": [
                        144,
                        146,
                        148
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        186,
                        236,
                        238,
                        245,
                        247
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getFactory(String)')": [
                        210
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStreamAutodetect')": [
                        295,
                        296
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStream')": [
                        312,
                        313
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingOutputStream')": [
                        329,
                        331
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        353,
                        357,
                        360,
                        365,
                        376
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'shortTextFilesAreNoTARs')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'aiffFilesAreNoTARs')": [
                        66,
                        68,
                        72
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testCOMPRESS209')": [
                        84,
                        86,
                        90
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detectsAndThrowsFor7z')": [
                        121,
                        123,
                        127
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'skipsPK00Prefix')": [
                        144,
                        146,
                        148
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        186,
                        236,
                        238,
                        245,
                        247
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getFactory(String)')": [
                        210
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStreamAutodetect')": [
                        295,
                        296
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingInputStream')": [
                        312,
                        313
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testEncodingOutputStream')": [
                        329,
                        331
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        353,
                        357,
                        360,
                        365,
                        376
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        95,
                        98
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testDirectoryEntryFromFile')": [
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitDirectoryEntry')": [
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        175
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testFileEntryFromFile')": [
                        199,
                        208,
                        209,
                        210,
                        221
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitFileEntry')": [
                        248,
                        257,
                        262,
                        273
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        95,
                        98
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testDirectoryEntryFromFile')": [
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitDirectoryEntry')": [
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        175
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testFileEntryFromFile')": [
                        199,
                        208,
                        209,
                        210,
                        221
                    ],
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testExplicitFileEntry')": [
                        248,
                        257,
                        262,
                        273
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'unarchiveAll(File)')": [
                        58
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'unarchiveAll(File)')": [
                        58
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenArchiverNameIsNull_1')": [
                        38,
                        40
                    ],
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenInputStreamIsNull')": [
                        50,
                        52
                    ],
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenArchiverNameIsNull_2')": [
                        62,
                        64
                    ],
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenOutputStreamIsNull')": [
                        74,
                        76
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenArchiverNameIsNull_1')": [
                        38,
                        40
                    ],
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenInputStreamIsNull')": [
                        50,
                        52
                    ],
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenArchiverNameIsNull_2')": [
                        62,
                        64
                    ],
                    "('org.apache.commons.compress.archivers#ExceptionMessageTest', 'testMessageWhenOutputStreamIsNull')": [
                        74,
                        76
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/JarTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarUnarchiveAll')": [
                        96,
                        103
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#JarTestCase', 'testJarUnarchiveAll')": [
                        96,
                        103
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'setUpFileList')": [
                        70,
                        72
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'getExpectedString(ArchiveEntry)')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'testArchive')": [
                        112,
                        117,
                        127,
                        136,
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', 'setUpFileList')": [
                        70,
                        72
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'getExpectedString(ArchiveEntry)')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'testArchive')": [
                        111,
                        113,
                        118,
                        128,
                        137,
                        152
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'setUpFileList')": [
                        70,
                        72
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'getExpectedString(ArchiveEntry)')": [
                        101
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'testArchive')": [
                        113,
                        118,
                        128,
                        137,
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'setUpFileList')": [
                        70,
                        72
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'getExpectedString(ArchiveEntry)')": [
                        101
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'testArchive')": [
                        112,
                        114,
                        119,
                        129,
                        138,
                        153
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        62,
                        63,
                        79,
                        89,
                        104
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryEntryFromFile')": [
                        140,
                        148,
                        149,
                        155
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitDirectoryEntry')": [
                        180,
                        188,
                        189,
                        196
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testFileEntryFromFile')": [
                        220,
                        229,
                        231,
                        242
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitFileEntry')": [
                        269,
                        278,
                        282,
                        293
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS178')": [
                        326,
                        327
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        62,
                        63,
                        79,
                        89,
                        104
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testDirectoryEntryFromFile')": [
                        140,
                        148,
                        149,
                        155
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitDirectoryEntry')": [
                        180,
                        188,
                        189,
                        196
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testFileEntryFromFile')": [
                        220,
                        229,
                        231,
                        242
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testExplicitFileEntry')": [
                        269,
                        278,
                        282,
                        293
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testCOMPRESS178')": [
                        326,
                        327
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        80,
                        90,
                        92
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        138,
                        139
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSupportedCompressionMethod')": [
                        162,
                        163
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        180,
                        183,
                        189
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        211,
                        222
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testDirectoryEntryFromFile')": [
                        244,
                        252,
                        253,
                        259
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testExplicitDirectoryEntry')": [
                        280,
                        288,
                        289,
                        296
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawEntriesFromFile')": [
                        326,
                        327,
                        328,
                        329,
                        330,
                        334,
                        335,
                        339,
                        340,
                        341,
                        342
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawZip64EntryFromFile')": [
                        358,
                        359,
                        360,
                        365,
                        366,
                        370,
                        371,
                        372
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testUnixModeInAddRaw')": [
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        394,
                        395
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createReferenceFile(File,Zip64Mode,String)')": [
                        401,
                        402
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'assertSameFileContents(File,File)')": [
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        432,
                        433,
                        445,
                        446
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createArchiveEntry(String,ZipArchiveOutputStream,String)')": [
                        461
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testFileEntryFromFile')": [
                        470,
                        479,
                        481,
                        492
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testExplicitFileEntry')": [
                        515,
                        524,
                        528,
                        539
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        80,
                        90,
                        92
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        138,
                        139
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSupportedCompressionMethod')": [
                        162,
                        163
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        180,
                        183,
                        189
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        211,
                        222
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testDirectoryEntryFromFile')": [
                        244,
                        252,
                        253,
                        259
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testExplicitDirectoryEntry')": [
                        280,
                        288,
                        289,
                        296
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawEntriesFromFile')": [
                        326,
                        327,
                        328,
                        329,
                        330,
                        334,
                        335,
                        339,
                        340,
                        341,
                        342
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testCopyRawZip64EntryFromFile')": [
                        358,
                        359,
                        360,
                        365,
                        366,
                        370,
                        371,
                        372
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testUnixModeInAddRaw')": [
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        394,
                        395
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createReferenceFile(File,Zip64Mode,String)')": [
                        401,
                        402
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'assertSameFileContents(File,File)')": [
                        422,
                        423,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        432,
                        433,
                        445,
                        446
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createArchiveEntry(String,ZipArchiveOutputStream,String)')": [
                        461
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testFileEntryFromFile')": [
                        470,
                        479,
                        481,
                        492
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testExplicitFileEntry')": [
                        515,
                        524,
                        528,
                        539
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        44,
                        51,
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        44,
                        51,
                        57
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        40,
                        44
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        55,
                        60,
                        72
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        40,
                        44
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        55,
                        60,
                        72
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testArjUnarchive')": [
                        35,
                        41,
                        44
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesDosVersion')": [
                        59,
                        60,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesUnixVersion')": [
                        73,
                        74,
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testArjUnarchive')": [
                        35,
                        41,
                        44
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesDosVersion')": [
                        59,
                        60,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStreamTest', 'testReadingOfAttributesUnixVersion')": [
                        73,
                        74,
                        78
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchive')": [
                        32,
                        38,
                        41
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchiveCreatedByRedlineRpm')": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchive')": [
                        32,
                        38,
                        41
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStreamTest', 'testCpioUnarchiveCreatedByRedlineRpm')": [
                        55
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStreamTest', 'testWriteOldBinary')": [
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStreamTest', 'testWriteOldBinary')": [
                        61
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntryTest', 'publicNameAddsTrailingSlashForDirectories')": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntryTest', 'publicNameRemovesLeadingDotSlash')": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntryTest', 'publicNameAddsTrailingSlashForDirectories')": [
                        28
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntryTest', 'publicNameRemovesLeadingDotSlash')": [
                        38
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchive')": [
                        34,
                        38
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchiveButBigEnough')": [
                        48,
                        52
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testConsumesArchiveCompletely')": [
                        62,
                        64,
                        68,
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchive')": [
                        34,
                        38
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchiveButBigEnough')": [
                        48,
                        52
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testConsumesArchiveCompletely')": [
                        62,
                        64,
                        68,
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStreamTest', 'testJarMarker')": [
                        38,
                        68
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStreamTest', 'testJarMarker')": [
                        38,
                        68
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.memory#MemoryArchiveInputStream', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.memory#MemoryArchiveInputStream', None)": [
                        37
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomlySkippingEntries')": [
                        46,
                        56,
                        73,
                        74,
                        85
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readFully(SevenZFile)')": [
                        96,
                        97
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testAllEmptyFilesArchive')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testEncryptedArchiveRequiresPassword')": [
                        151,
                        152
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testCompressedHeaderWithNonDefaultDictionarySize')": [
                        167
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackLZMA2DictSize')": [
                        196,
                        197,
                        200,
                        209,
                        210,
                        211,
                        212
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackDeltaDistance')": [
                        222,
                        223,
                        227,
                        236,
                        237,
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'getEntriesOfUnarchiveTest')": [
                        249,
                        250,
                        251,
                        252
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod,byte)')": [
                        264,
                        272,
                        275
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        287,
                        288,
                        289,
                        291,
                        294
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomlySkippingEntries')": [
                        46,
                        56,
                        73,
                        74,
                        85
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readFully(SevenZFile)')": [
                        96,
                        97
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testAllEmptyFilesArchive')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testEncryptedArchiveRequiresPassword')": [
                        151,
                        152
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testCompressedHeaderWithNonDefaultDictionarySize')": [
                        167
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackLZMA2DictSize')": [
                        196,
                        197,
                        200,
                        209,
                        210,
                        211,
                        212
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackDeltaDistance')": [
                        222,
                        223,
                        227,
                        236,
                        237,
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'getEntriesOfUnarchiveTest')": [
                        249,
                        250,
                        251,
                        252
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod,byte)')": [
                        264,
                        272,
                        275
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        287,
                        288,
                        289,
                        291,
                        294
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesAndEmptyFiles')": [
                        59,
                        60,
                        62,
                        63,
                        64,
                        139
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesOnly')": [
                        155,
                        156,
                        157,
                        168
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCantFinishTwice')": [
                        184,
                        189
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testStackOfContentCompressions')": [
                        310
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testLzma2WithOptionsConfiguration')": [
                        345
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testArchiveWithMixedMethods')": [
                        353,
                        361
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCompress252(int,int)')": [
                        374,
                        379
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyCompress252(File,int,int)')": [
                        394
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addDir(SevenZOutputFile)')": [
                        414
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyDir(SevenZFile)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addFile(SevenZOutputFile,int,boolean,Iterable)')": [
                        433
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int,Iterable)')": [
                        447
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testRoundTrip(SevenZMethod)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testFilterRoundTrip(SevenZMethodConfiguration)')": [
                        474
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'createAndReadBack(File,Iterable)')": [
                        481,
                        489
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'assertContentMethodsEquals(Iterable,Iterable)')": [
                        500,
                        501,
                        504,
                        505
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesAndEmptyFiles')": [
                        59,
                        60,
                        62,
                        63,
                        64,
                        139
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesOnly')": [
                        155,
                        156,
                        157,
                        168
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCantFinishTwice')": [
                        184,
                        189
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testStackOfContentCompressions')": [
                        310
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testLzma2WithOptionsConfiguration')": [
                        345
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testArchiveWithMixedMethods')": [
                        353,
                        361
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCompress252(int,int)')": [
                        374,
                        379
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyCompress252(File,int,int)')": [
                        394
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addDir(SevenZOutputFile)')": [
                        414
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyDir(SevenZFile)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addFile(SevenZOutputFile,int,boolean,Iterable)')": [
                        433
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int,Iterable)')": [
                        447
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testRoundTrip(SevenZMethod)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testFilterRoundTrip(SevenZMethodConfiguration)')": [
                        474
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'createAndReadBack(File,Iterable)')": [
                        481,
                        489
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'assertContentMethodsEquals(Iterable,Iterable)')": [
                        500,
                        501,
                        504,
                        505
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileHeadersOfArchiveBiggerThan8GByte')": [
                        55
                    ],
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        80,
                        85,
                        87,
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileHeadersOfArchiveBiggerThan8GByte')": [
                        55
                    ],
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        80,
                        85,
                        87,
                        92
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        33,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testPaxGNU')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        67
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testOldGNU')": [
                        33,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'testPaxGNU')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        67
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testFileSystemRoot')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testTarFileWithFSRoot')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testMaxFileSize')": [
                        112,
                        118
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinkFlagConstructor')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinkFlagConstructorWithFileFlag')": [
                        133
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinkFlagConstructorWithPreserve')": [
                        140
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'readMagic(TarArchiveEntry)')": [
                        155
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testFileSystemRoot')": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testTarFileWithFSRoot')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testMaxFileSize')": [
                        112,
                        118
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinkFlagConstructor')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinkFlagConstructorWithFileFlag')": [
                        133
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'testLinkFlagConstructorWithPreserve')": [
                        140
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'readMagic(TarArchiveEntry)')": [
                        155
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readSimplePaxHeader')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        76
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readNonAsciiPaxHeader')": [
                        97,
                        98,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        142,
                        144
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testCompress197')": [
                        158,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldUseSpecifiedEncodingWhenReadingGNULongNames')": [
                        174,
                        175,
                        176,
                        179,
                        188,
                        189,
                        190
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldConsumeArchiveCompletely')": [
                        199,
                        201,
                        205,
                        208
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readsArchiveCompletely_COMPRESS245')": [
                        216,
                        219,
                        220,
                        229
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldThrowAnExceptionOnTruncatedEntries')": [
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadBigGid')": [
                        263,
                        264,
                        273,
                        274,
                        275
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadGNULongNameEntryWithWrongName')": [
                        287,
                        288,
                        289
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readSimplePaxHeader')": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        76
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readNonAsciiPaxHeader')": [
                        97,
                        98,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        142,
                        144
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testCompress197')": [
                        158,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldUseSpecifiedEncodingWhenReadingGNULongNames')": [
                        174,
                        175,
                        176,
                        179,
                        188,
                        189,
                        190
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldConsumeArchiveCompletely')": [
                        199,
                        201,
                        205,
                        208
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readsArchiveCompletely_COMPRESS245')": [
                        216,
                        219,
                        220,
                        229
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldThrowAnExceptionOnTruncatedEntries')": [
                        238,
                        239
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadBigGid')": [
                        263,
                        264,
                        273,
                        274,
                        275
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadGNULongNameEntryWithWrongName')": [
                        287,
                        288,
                        289
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testCount')": [
                        49,
                        51,
                        52,
                        53,
                        56,
                        57,
                        60,
                        61
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testMaxFileSizeError')": [
                        77
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', None)": [
                        87,
                        415,
                        541
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberStarMode')": [
                        93,
                        95,
                        96,
                        101,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberPosixMode')": [
                        119,
                        121,
                        122,
                        127,
                        135,
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        147,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        161,
                        166
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        180,
                        185
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'writePaxHeader(Map)')": [
                        198,
                        199,
                        203
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNamePosixMode')": [
                        215,
                        218,
                        221,
                        222,
                        227,
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryStarMode')": [
                        240,
                        243,
                        244,
                        249,
                        256,
                        257,
                        258,
                        259
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryPosixMode')": [
                        271,
                        274,
                        275,
                        280,
                        289,
                        290,
                        291,
                        292
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryError')": [
                        304,
                        307,
                        312
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiPathNamePaxHeader')": [
                        319,
                        320,
                        322,
                        323,
                        329,
                        332,
                        333,
                        334
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiLinkPathNamePaxHeader')": [
                        341,
                        342,
                        345,
                        346,
                        352,
                        355,
                        356,
                        357
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testRoundtripWith67CharFileName(int)')": [
                        379,
                        382,
                        384,
                        385,
                        391,
                        392,
                        393,
                        394
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryNameErrorMode')": [
                        401,
                        406,
                        407,
                        408
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryNameTruncateMode')": [
                        422,
                        425,
                        426,
                        427,
                        432,
                        433,
                        434,
                        435
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryName(int)')": [
                        458,
                        461,
                        462,
                        463,
                        468,
                        469,
                        470,
                        471
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiDirectoryNamePosixMode')": [
                        482,
                        483,
                        484,
                        485,
                        490,
                        491,
                        492,
                        493
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiNameWithUnfortunateNamePosixMode')": [
                        504,
                        505,
                        506,
                        507,
                        512,
                        513,
                        514,
                        515
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkNameErrorMode')": [
                        526,
                        529,
                        533,
                        534
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkNameTruncateMode')": [
                        548,
                        551,
                        554,
                        555,
                        561,
                        562,
                        563
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkName(int)')": [
                        588,
                        591,
                        594,
                        595,
                        601,
                        602,
                        603
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPadsOutputToFullBlockLength')": [
                        612,
                        614,
                        615,
                        616,
                        617,
                        619
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testLongNameMd5Hash')": [
                        639,
                        642,
                        643,
                        649,
                        651,
                        658,
                        659
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'createTarArchiveContainingOneDirectory(String,Date)')": [
                        667,
                        668,
                        670
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testCount')": [
                        49,
                        51,
                        52,
                        53,
                        56,
                        57,
                        60,
                        61
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testMaxFileSizeError')": [
                        77
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', None)": [
                        87,
                        415,
                        541
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberStarMode')": [
                        93,
                        95,
                        96,
                        101,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberPosixMode')": [
                        119,
                        121,
                        122,
                        127,
                        135,
                        136,
                        137
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        147,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        161,
                        166
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        180,
                        185
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'writePaxHeader(Map)')": [
                        198,
                        199,
                        203
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNamePosixMode')": [
                        215,
                        218,
                        221,
                        222,
                        227,
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryStarMode')": [
                        240,
                        243,
                        244,
                        249,
                        256,
                        257,
                        258,
                        259
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryPosixMode')": [
                        271,
                        274,
                        275,
                        280,
                        289,
                        290,
                        291,
                        292
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryError')": [
                        304,
                        307,
                        312
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiPathNamePaxHeader')": [
                        319,
                        320,
                        322,
                        323,
                        329,
                        332,
                        333,
                        334
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiLinkPathNamePaxHeader')": [
                        341,
                        342,
                        345,
                        346,
                        352,
                        355,
                        356,
                        357
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testRoundtripWith67CharFileName(int)')": [
                        379,
                        382,
                        384,
                        385,
                        391,
                        392,
                        393,
                        394
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryNameErrorMode')": [
                        401,
                        406,
                        407,
                        408
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryNameTruncateMode')": [
                        422,
                        425,
                        426,
                        427,
                        432,
                        433,
                        434,
                        435
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryName(int)')": [
                        458,
                        461,
                        462,
                        463,
                        468,
                        469,
                        470,
                        471
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiDirectoryNamePosixMode')": [
                        482,
                        483,
                        484,
                        485,
                        490,
                        491,
                        492,
                        493
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiNameWithUnfortunateNamePosixMode')": [
                        504,
                        505,
                        506,
                        507,
                        512,
                        513,
                        514,
                        515
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkNameErrorMode')": [
                        526,
                        529,
                        533,
                        534
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkNameTruncateMode')": [
                        548,
                        551,
                        554,
                        555,
                        561,
                        562,
                        563
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkName(int)')": [
                        588,
                        591,
                        594,
                        595,
                        601,
                        602,
                        603
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPadsOutputToFullBlockLength')": [
                        612,
                        614,
                        615,
                        616,
                        617,
                        619
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testLongNameMd5Hash')": [
                        639,
                        642,
                        643,
                        649,
                        651,
                        658,
                        659
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'createTarArchiveContainingOneDirectory(String,Date)')": [
                        667,
                        668,
                        670
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        42,
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'log(TarArchiveEntry)')": [
                        67
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        42,
                        46
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'log(TarArchiveEntry)')": [
                        67
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testName')": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        85,
                        91,
                        97,
                        103
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', None)": [
                        109,
                        198
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkRoundTripOctal(long,int)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkRoundTripOctalOrBinary(long,int)')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testTrailers')": [
                        169
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        192
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundEncoding')": [
                        213,
                        214,
                        215,
                        216
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkName(String)')": [
                        221,
                        222
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary8Byte')": [
                        228
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary12Byte')": [
                        237
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testWriteNegativeBinary8Byte')": [
                        248
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testVerifyHeaderCheckSum')": [
                        258,
                        288,
                        329
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalCompress330')": [
                        363,
                        364
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testName')": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        85,
                        91,
                        97,
                        103
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', None)": [
                        109,
                        198
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkRoundTripOctal(long,int)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkRoundTripOctalOrBinary(long,int)')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testTrailers')": [
                        169
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        192
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundEncoding')": [
                        213,
                        214,
                        215,
                        216
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkName(String)')": [
                        221,
                        222
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary8Byte')": [
                        228
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testReadNegativeBinary12Byte')": [
                        237
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testWriteNegativeBinary8Byte')": [
                        248
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testVerifyHeaderCheckSum')": [
                        258,
                        288,
                        329
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalCompress330')": [
                        363,
                        364
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testModes')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testContent')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testReparse')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testClone')": [
                        146,
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testModes')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testContent')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testReparse')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraFieldTest', 'testClone')": [
                        146,
                        152
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTreeTest', 'testDecode')": [
                        34,
                        36,
                        40
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTreeTest', 'testDecode')": [
                        34,
                        36,
                        40
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testEmptyStream')": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testStream')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testNextByteFromEmptyStream')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testReadAlignedBytes')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testNextByte')": [
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testEmptyStream')": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testStream')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testNextByteFromEmptyStream')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testReadAlignedBytes')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.zip#BitStreamTest', 'testNextByte')": [
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testPutAndGet')": [
                        30,
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testCopy')": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testPutAndGet')": [
                        30,
                        31
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBufferTest', 'testCopy')": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaZipFile')": [
                        35,
                        39,
                        46
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        58,
                        62,
                        68,
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaZipFile')": [
                        35,
                        39,
                        46
                    ],
                    "('org.apache.commons.compress.archivers.zip#EncryptedArchiveTest', 'testReadPasswordEncryptedEntryViaStream')": [
                        58,
                        62,
                        68,
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testArchiveWithImplodeCompression(String,String)')": [
                        38,
                        39,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testZipStreamWithImplodeCompression(String,String)')": [
                        70,
                        71,
                        76,
                        78,
                        79
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testArchiveWithImplodeCompression(String,String)')": [
                        38,
                        39,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testZipStreamWithImplodeCompression(String,String)')": [
                        70,
                        71,
                        76,
                        78,
                        79
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'setUp')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParse')": [
                        75,
                        84,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParseWithRead')": [
                        110
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParseWithSkip')": [
                        141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testMerge')": [
                        156,
                        163,
                        164,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testMergeWithUnparseableData')": [
                        183,
                        184,
                        186,
                        193,
                        194,
                        200
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'setUp')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParse')": [
                        75,
                        84,
                        89
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParseWithRead')": [
                        110
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testParseWithSkip')": [
                        141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testMerge')": [
                        156,
                        163,
                        164,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtilsTest', 'testMergeWithUnparseableData')": [
                        183,
                        184,
                        186,
                        193,
                        194,
                        200
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDefaults')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDataDescriptor')": [
                        66,
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testLanguageEncodingFlag')": [
                        75,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testEncryption')": [
                        84,
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testStrongEncryption')": [
                        95
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testClone')": [
                        106
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDefaults')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testDataDescriptor')": [
                        66,
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testLanguageEncodingFlag')": [
                        75,
                        77
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testEncryption')": [
                        84,
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testStrongEncryption')": [
                        95
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBitTest', 'testClone')": [
                        106
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        50,
                        51,
                        57,
                        60,
                        66,
                        76,
                        78,
                        80,
                        83
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'parse(String)')": [
                        119
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        50,
                        51,
                        57,
                        60,
                        66,
                        76,
                        78,
                        80,
                        83
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'parse(String)')": [
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForStream')": [
                        71,
                        79,
                        84,
                        86,
                        95,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        117
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForStream')": [
                        71,
                        79,
                        84,
                        86,
                        95,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#Maven221MultiVolumeTest', 'testRead7ZipMultiVolumeArchiveForFile')": [
                        117
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'concurrent')": [
                        60,
                        62,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi')": [
                        76,
                        78,
                        80,
                        87,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'removeEntriesFoundInZipFile(File,Map)')": [
                        99,
                        100,
                        102,
                        103,
                        104,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        112,
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        127,
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'createZipArchiveEntry(Map,int,byte)')": [
                        143
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'concurrent')": [
                        60,
                        62,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'callableApi')": [
                        76,
                        78,
                        80,
                        87,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'removeEntriesFoundInZipFile(File,Map)')": [
                        99,
                        100,
                        102,
                        103,
                        104,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        112,
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        127,
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'createZipArchiveEntry(Map,int,byte)')": [
                        143
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'testSample')": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        44,
                        45,
                        47,
                        55
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'checkFile(File)')": [
                        61,
                        62,
                        64,
                        65,
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'testSample')": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        44,
                        45,
                        47,
                        55
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'checkFile(File)')": [
                        61,
                        62,
                        64,
                        65,
                        66
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'putArchiveEntry')": [
                        49,
                        53,
                        58,
                        60,
                        64,
                        69
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStreamTest', 'putArchiveEntry')": [
                        49,
                        53,
                        58,
                        60,
                        64,
                        69
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'storedEntries')": [
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'deflatedEntries')": [
                        46,
                        47,
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'storedEntries')": [
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressorTest', 'deflatedEntries')": [
                        46,
                        47,
                        54
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchive')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        113
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        134
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertCanRead(ZipFile,String)')": [
                        147,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        160
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testZipFileReadsUnicodeFields')": [
                        177,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testZipArchiveInputStreamReadsUnicodeFields')": [
                        198
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromZipFile')": [
                        216
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        229
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFileRoundtrip(String,boolean,boolean)')": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        261,
                        278,
                        295,
                        313
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', None)": [
                        331
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFile(File,String)')": [
                        342,
                        344
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        371,
                        374,
                        375,
                        376,
                        377
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testUtf8Interoperability')": [
                        389,
                        390
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertRawNameOfAcsiiTxt(ZipArchiveEntry)')": [
                        398
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchive')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRead7ZipArchiveForStream')": [
                        113
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchive')": [
                        134
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertCanRead(ZipFile,String)')": [
                        147,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testReadWinZipArchiveForStream')": [
                        160
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testZipFileReadsUnicodeFields')": [
                        177,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testZipArchiveInputStreamReadsUnicodeFields')": [
                        198
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromZipFile')": [
                        216
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testRawNameReadFromStream')": [
                        229
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFileRoundtrip(String,boolean,boolean)')": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        261,
                        278,
                        295,
                        313
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', None)": [
                        331
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFile(File,String)')": [
                        342,
                        344
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        371,
                        374,
                        375,
                        376,
                        377
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testUtf8Interoperability')": [
                        389,
                        390
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertRawNameOfAcsiiTxt(ZipArchiveEntry)')": [
                        398
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFSTest', 'simpleRountrip')": [
                        30,
                        35,
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFSTest', 'simpleRountrip')": [
                        30,
                        35,
                        37
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testSampleFile')": [
                        110,
                        115,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        135,
                        136,
                        140
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testGettersSetters')": [
                        232,
                        239,
                        240,
                        247
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testWriteReadRoundtrip')": [
                        426,
                        428,
                        432,
                        445,
                        446,
                        447
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'adjustFromGMTToExpectedOffset(Date)')": [
                        551
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testSampleFile')": [
                        110,
                        115,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        135,
                        136,
                        140
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testGettersSetters')": [
                        232,
                        239,
                        240,
                        247
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'testWriteReadRoundtrip')": [
                        426,
                        428,
                        432,
                        445,
                        446,
                        447
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'adjustFromGMTToExpectedOffset(Date)')": [
                        551
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testSampleFile')": [
                        49,
                        54,
                        60,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testMisc')": [
                        100
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testSampleFile')": [
                        49,
                        54,
                        60,
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'testMisc')": [
                        100
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDOnlySizes')": [
                        42,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDSizeAndOffset')": [
                        52,
                        55
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDSizeOffsetAndDisk')": [
                        63,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDSizeAndDisk')": [
                        75,
                        78
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesOnly')": [
                        86,
                        87,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesAndOffset')": [
                        100,
                        101,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesOffsetAndDisk')": [
                        115,
                        116,
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesAndDisk')": [
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadCDSizesOffsetAndDisk')": [
                        146,
                        147,
                        148
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadCDSizesAndOffset')": [
                        162,
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadCDSomethingAndDisk')": [
                        177,
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReparseCDSingleEightByteData')": [
                        191,
                        192,
                        193
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDOnlySizes')": [
                        42,
                        45
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDSizeAndOffset')": [
                        52,
                        55
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDSizeOffsetAndDisk')": [
                        63,
                        66
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testWriteCDSizeAndDisk')": [
                        75,
                        78
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesOnly')": [
                        86,
                        87,
                        88
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesAndOffset')": [
                        100,
                        101,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesOffsetAndDisk')": [
                        115,
                        116,
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadLFHSizesAndDisk')": [
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadCDSizesOffsetAndDisk')": [
                        146,
                        147,
                        148
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadCDSizesAndOffset')": [
                        162,
                        163,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReadCDSomethingAndDisk')": [
                        177,
                        178,
                        179
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'testReparseCDSingleEightByteData')": [
                        191,
                        192,
                        193
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write5GBZerosFile(String)')": [
                        146,
                        147,
                        150,
                        151,
                        161
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFiles(Zip64Mode)')": [
                        214,
                        223,
                        239,
                        242,
                        245,
                        264,
                        286,
                        288,
                        293
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        332,
                        499
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        386,
                        400,
                        416,
                        438,
                        448,
                        452
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        533,
                        536,
                        545
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        585,
                        586,
                        599,
                        647
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryModeNever(boolean)')": [
                        766,
                        767,
                        779
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        826,
                        827,
                        839,
                        844,
                        890
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryUnknownSizeToStream(Zip64Mode)')": [
                        1013,
                        1014,
                        1022
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1069,
                        1070,
                        1084
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryKnownSizeToStreamModeNever')": [
                        1241,
                        1248
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFileModeNever(boolean)')": [
                        1274,
                        1275,
                        1288
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntry(boolean,Zip64Mode)')": [
                        1331,
                        1332,
                        1343,
                        1397,
                        1432
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1508,
                        1509,
                        1520
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        1673,
                        1674,
                        1684,
                        1688,
                        1708
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1844,
                        1845,
                        1855,
                        1859,
                        1879
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        2029,
                        2030,
                        2040,
                        2120,
                        2134
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2202,
                        2203,
                        2213
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean)')": [
                        2355,
                        2357,
                        2362
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getTempFile(String)')": [
                        2424
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2431,
                        2440,
                        2442,
                        2448
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosUsingZipFileImpl(File,String)')": [
                        2470,
                        2478,
                        2480,
                        2482,
                        2488
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2504
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesUsingZipFileImpl(File)')": [
                        2531,
                        2532
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory(RandomAccessFile)')": [
                        2548,
                        2556,
                        2559
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory32(RandomAccessFile,long)')": [
                        2568
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFilesToStream(ZipArchiveOutputStream)')": [
                        2577
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchiveToStream(ZipArchiveOutputStream)')": [
                        2588
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write5GBZerosFile(String)')": [
                        146,
                        147,
                        150,
                        151,
                        161
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFiles(Zip64Mode)')": [
                        214,
                        223,
                        239,
                        242,
                        245,
                        264,
                        286,
                        288,
                        293
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        332,
                        499
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        386,
                        400,
                        416,
                        438,
                        448,
                        452
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        533,
                        536,
                        545
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        585,
                        586,
                        599,
                        647
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryModeNever(boolean)')": [
                        766,
                        767,
                        779
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        826,
                        827,
                        839,
                        844,
                        890
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryUnknownSizeToStream(Zip64Mode)')": [
                        1013,
                        1014,
                        1022
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1069,
                        1070,
                        1084
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryKnownSizeToStreamModeNever')": [
                        1241,
                        1248
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFileModeNever(boolean)')": [
                        1274,
                        1275,
                        1288
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntry(boolean,Zip64Mode)')": [
                        1331,
                        1332,
                        1343,
                        1397,
                        1432
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1508,
                        1509,
                        1520
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        1673,
                        1674,
                        1684,
                        1688,
                        1708
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1844,
                        1845,
                        1855,
                        1859,
                        1879
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        2029,
                        2030,
                        2040,
                        2120,
                        2134
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2202,
                        2203,
                        2213
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean)')": [
                        2355,
                        2357,
                        2362
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getTempFile(String)')": [
                        2424
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2431,
                        2440,
                        2442,
                        2448
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosUsingZipFileImpl(File,String)')": [
                        2470,
                        2478,
                        2480,
                        2482,
                        2488
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2504
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesUsingZipFileImpl(File)')": [
                        2531,
                        2532
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory(RandomAccessFile)')": [
                        2548,
                        2556,
                        2559
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory32(RandomAccessFile,long)')": [
                        2568
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFilesToStream(ZipArchiveOutputStream)')": [
                        2577
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchiveToStream(ZipArchiveOutputStream)')": [
                        2588
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFields')": [
                        39,
                        42,
                        46,
                        48,
                        54,
                        59,
                        66,
                        74
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', None)": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFieldMerging')": [
                        93,
                        96,
                        100,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testAddAsFirstExtraField')": [
                        140,
                        143,
                        147,
                        149,
                        150,
                        151,
                        156,
                        163
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        212,
                        214
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNotEquals')": [
                        240,
                        241
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNullCommentEqualsEmptyComment')": [
                        251,
                        252,
                        253
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCopyConstructor')": [
                        264,
                        268
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFields')": [
                        39,
                        42,
                        46,
                        48,
                        54,
                        59,
                        66,
                        74
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', None)": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testExtraFieldMerging')": [
                        93,
                        96,
                        100,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testAddAsFirstExtraField')": [
                        140,
                        143,
                        147,
                        149,
                        150,
                        151,
                        156,
                        163
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCompressionMethod')": [
                        212,
                        214
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNotEquals')": [
                        240,
                        241
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testNullCommentEqualsEmptyComment')": [
                        251,
                        252,
                        253
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryTest', 'testCopyConstructor')": [
                        264,
                        268
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properUseOfInflater')": [
                        65
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'shouldConsumeArchiveCompletely')": [
                        85,
                        87,
                        91,
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnshrinkEntry')": [
                        129
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testReadingOfFirstStoredEntry')": [
                        162,
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnzipBZip2CompressedEntry')": [
                        176,
                        179,
                        181
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'properUseOfInflater')": [
                        65
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'shouldConsumeArchiveCompletely')": [
                        85,
                        87,
                        91,
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnshrinkEntry')": [
                        129
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testReadingOfFirstStoredEntry')": [
                        162,
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnzipBZip2CompressedEntry')": [
                        176,
                        179,
                        181
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongToBytes')": [
                        38,
                        39
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongFromBytes')": [
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testBIToBytes')": [
                        66,
                        69
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testBIFromBytes')": [
                        86,
                        87
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testEquals')": [
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testSign')": [
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongToBytes')": [
                        38,
                        39
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testLongFromBytes')": [
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testBIToBytes')": [
                        66,
                        69
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testBIFromBytes')": [
                        86,
                        87
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testEquals')": [
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteIntegerTest', 'testSign')": [
                        118
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testNioCp1252Encoding')": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'assertEquals(byte,ByteBuffer)')": [
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'doSimpleEncodingTest(String,byte)')": [
                        129,
                        139,
                        143
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'testNioCp1252Encoding')": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'assertEquals(byte,ByteBuffer)')": [
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'doSimpleEncodingTest(String,byte)')": [
                        129,
                        139,
                        143
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testCDOrder')": [
                        51
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testPhysicalOrder')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testDoubleClose')": [
                        112
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfStoredEntry')": [
                        119,
                        125,
                        141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testWinzipBackSlashWorkaround')": [
                        160
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSkipsPK00Prefix')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnixSymlinkSampleFile')": [
                        201,
                        202,
                        203,
                        204,
                        206,
                        207,
                        209,
                        210
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testDuplicateEntry')": [
                        224,
                        225,
                        226,
                        227,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testExcessDataInZip64ExtraField')": [
                        244,
                        248
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfFirstStoredEntry')": [
                        280,
                        281,
                        282
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnzipBZip2CompressedEntry')": [
                        290,
                        291,
                        292,
                        294
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readOrderTest')": [
                        310
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertEntryName(ArrayList,int,String)')": [
                        317
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testCDOrder')": [
                        51
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testPhysicalOrder')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testDoubleClose')": [
                        112
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfStoredEntry')": [
                        119,
                        125,
                        141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testWinzipBackSlashWorkaround')": [
                        160
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testSkipsPK00Prefix')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnixSymlinkSampleFile')": [
                        201,
                        202,
                        203,
                        204,
                        206,
                        207,
                        209,
                        210
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testDuplicateEntry')": [
                        224,
                        225,
                        226,
                        227,
                        232
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testExcessDataInZip64ExtraField')": [
                        244,
                        248
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testReadingOfFirstStoredEntry')": [
                        280,
                        281,
                        282
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnzipBZip2CompressedEntry')": [
                        290,
                        291,
                        292,
                        294
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'readOrderTest')": [
                        310
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertEntryName(ArrayList,int,String)')": [
                        317
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testToBytes')": [
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testPut')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testFromBytes')": [
                        63,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testEquals')": [
                        73,
                        74,
                        75
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testSign')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testClone')": [
                        99,
                        100
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testToBytes')": [
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testPut')": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testFromBytes')": [
                        63,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testEquals')": [
                        73,
                        74,
                        75
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testSign')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLongTest', 'testClone')": [
                        99,
                        100
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testToBytes')": [
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testPut')": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testFromBytes')": [
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testEquals')": [
                        71,
                        72,
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testSign')": [
                        91
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testClone')": [
                        97,
                        98
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testToBytes')": [
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testPut')": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testFromBytes')": [
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testEquals')": [
                        71,
                        72,
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testSign')": [
                        91
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShortTest', 'testClone')": [
                        97,
                        98
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'setUp')": [
                        40,
                        42,
                        43,
                        44,
                        51
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testZipLong')": [
                        61
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testMinTime')": [
                        77,
                        78,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testOutsideCalendar')": [
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testInsideCalendar')": [
                        95,
                        96,
                        97
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testReverse')": [
                        106,
                        114,
                        125
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testBigToLong')": [
                        133,
                        134,
                        135,
                        141,
                        145,
                        146,
                        147,
                        148,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', None)": [
                        153,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testLongToBig')": [
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testSignedByteToUnsignedInt')": [
                        192
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testUnsignedIntToSignedByte')": [
                        205,
                        216
                    ],
                    "(None, None)": [
                        223
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'setUp')": [
                        40,
                        42,
                        43,
                        44,
                        51
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testZipLong')": [
                        61
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testMinTime')": [
                        77,
                        78,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testOutsideCalendar')": [
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testInsideCalendar')": [
                        95,
                        96,
                        97
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testReverse')": [
                        106,
                        114,
                        125
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testBigToLong')": [
                        133,
                        134,
                        135,
                        141,
                        145,
                        146,
                        147,
                        148,
                        149
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', None)": [
                        153,
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testLongToBig')": [
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testSignedByteToUnsignedInt')": [
                        192
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtilTest', 'testUnsignedIntToSignedByte')": [
                        205,
                        216
                    ],
                    "(None, None)": [
                        223
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDeleteDir(String)')": [
                        53,
                        55
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDelete(String)')": [
                        64,
                        66
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwice')": [
                        88,
                        89,
                        90,
                        91,
                        96
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwiceWithoutReplace')": [
                        123,
                        124,
                        125,
                        126,
                        131
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir')": [
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        171
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir2')": [
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        213
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir3')": [
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        255
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile')": [
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        298
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile2')": [
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        341
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAddSame')": [
                        367,
                        368,
                        369,
                        370,
                        371,
                        382,
                        388,
                        392,
                        413,
                        416
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testChangeSetResults')": [
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        458,
                        462,
                        463
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAdd')": [
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        522,
                        526
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZip')": [
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        566,
                        573
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZipUsingZipFilePerform')": [
                        597,
                        601,
                        609,
                        612,
                        619
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteAdd')": [
                        643,
                        644,
                        645,
                        646,
                        647,
                        648,
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        659,
                        666
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddDelete')": [
                        692,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        710,
                        717
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromZip')": [
                        745,
                        757,
                        758,
                        759,
                        760,
                        761,
                        762,
                        763,
                        764,
                        765,
                        766,
                        767,
                        768,
                        769
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromTar')": [
                        786,
                        797,
                        798,
                        799,
                        800,
                        801,
                        802,
                        803,
                        804,
                        805,
                        806,
                        807,
                        808
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromJar')": [
                        824,
                        838,
                        839,
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        846,
                        847,
                        848,
                        849
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToTar')": [
                        860,
                        885,
                        886,
                        887,
                        888,
                        889,
                        890,
                        891,
                        892,
                        893,
                        894,
                        895,
                        896
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToJar')": [
                        914,
                        921,
                        932,
                        933,
                        934,
                        935,
                        936,
                        937,
                        938,
                        939,
                        940,
                        941,
                        942,
                        943
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAr')": [
                        960,
                        971,
                        972,
                        973,
                        974,
                        975,
                        976,
                        977,
                        978,
                        979,
                        980,
                        981,
                        982,
                        983
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToAr')": [
                        999,
                        1017,
                        1018,
                        1019,
                        1020,
                        1021,
                        1022,
                        1023,
                        1024,
                        1025,
                        1026,
                        1027,
                        1028
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddToEmptyArchive')": [
                        1068,
                        1073,
                        1074,
                        1075,
                        1085,
                        1088
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddToOneFileArchive')": [
                        1114,
                        1119,
                        1120,
                        1121,
                        1133,
                        1137
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteToOneFileArchive')": [
                        1163,
                        1168,
                        1169,
                        1170,
                        1179,
                        1186
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceTrue')": [
                        1213,
                        1214,
                        1215,
                        1216,
                        1217,
                        1218,
                        1219,
                        1220,
                        1221,
                        1222,
                        1223,
                        1224,
                        1225,
                        1226,
                        1229,
                        1232,
                        1233
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceFalse')": [
                        1258,
                        1259,
                        1260,
                        1261,
                        1262,
                        1263,
                        1264,
                        1265,
                        1266,
                        1267,
                        1268,
                        1269,
                        1270,
                        1271,
                        1274,
                        1277,
                        1278
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDeleteDir(String)')": [
                        53,
                        55
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDelete(String)')": [
                        64,
                        66
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwice')": [
                        88,
                        89,
                        90,
                        91,
                        96
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddChangeTwiceWithoutReplace')": [
                        123,
                        124,
                        125,
                        126,
                        131
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir')": [
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        171
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir2')": [
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        213
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteDir3')": [
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        255
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile')": [
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        298
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFile2')": [
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        341
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAddSame')": [
                        367,
                        368,
                        369,
                        370,
                        371,
                        382,
                        388,
                        392,
                        413,
                        416
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testChangeSetResults')": [
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        449,
                        450,
                        451,
                        452,
                        458,
                        462,
                        463
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeletePlusAdd')": [
                        503,
                        504,
                        505,
                        506,
                        507,
                        508,
                        509,
                        510,
                        511,
                        512,
                        513,
                        514,
                        515,
                        516,
                        522,
                        526
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZip')": [
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        556,
                        557,
                        558,
                        559,
                        560,
                        561,
                        562,
                        563,
                        566,
                        573
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToZipUsingZipFilePerform')": [
                        597,
                        601,
                        609,
                        612,
                        619
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteAdd')": [
                        643,
                        644,
                        645,
                        646,
                        647,
                        648,
                        649,
                        650,
                        651,
                        652,
                        653,
                        654,
                        655,
                        656,
                        659,
                        666
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddDelete')": [
                        692,
                        693,
                        694,
                        695,
                        696,
                        697,
                        698,
                        699,
                        700,
                        701,
                        702,
                        703,
                        704,
                        705,
                        710,
                        717
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromZip')": [
                        745,
                        757,
                        758,
                        759,
                        760,
                        761,
                        762,
                        763,
                        764,
                        765,
                        766,
                        767,
                        768,
                        769
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromTar')": [
                        786,
                        797,
                        798,
                        799,
                        800,
                        801,
                        802,
                        803,
                        804,
                        805,
                        806,
                        807,
                        808
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromJar')": [
                        824,
                        838,
                        839,
                        840,
                        841,
                        842,
                        843,
                        844,
                        845,
                        846,
                        847,
                        848,
                        849
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToTar')": [
                        860,
                        885,
                        886,
                        887,
                        888,
                        889,
                        890,
                        891,
                        892,
                        893,
                        894,
                        895,
                        896
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToJar')": [
                        914,
                        921,
                        932,
                        933,
                        934,
                        935,
                        936,
                        937,
                        938,
                        939,
                        940,
                        941,
                        942,
                        943
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAr')": [
                        960,
                        971,
                        972,
                        973,
                        974,
                        975,
                        976,
                        977,
                        978,
                        979,
                        980,
                        981,
                        982,
                        983
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToAr')": [
                        999,
                        1017,
                        1018,
                        1019,
                        1020,
                        1021,
                        1022,
                        1023,
                        1024,
                        1025,
                        1026,
                        1027,
                        1028
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddToEmptyArchive')": [
                        1068,
                        1073,
                        1074,
                        1075,
                        1085,
                        1088
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteAddToOneFileArchive')": [
                        1114,
                        1119,
                        1120,
                        1121,
                        1133,
                        1137
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddDeleteToOneFileArchive')": [
                        1163,
                        1168,
                        1169,
                        1170,
                        1179,
                        1186
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceTrue')": [
                        1213,
                        1214,
                        1215,
                        1216,
                        1217,
                        1218,
                        1219,
                        1220,
                        1221,
                        1222,
                        1223,
                        1224,
                        1225,
                        1226,
                        1229,
                        1232,
                        1233
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testAddAllreadyExistingWithReplaceFalse')": [
                        1258,
                        1259,
                        1260,
                        1261,
                        1262,
                        1263,
                        1264,
                        1265,
                        1266,
                        1267,
                        1268,
                        1269,
                        1270,
                        1271,
                        1274,
                        1277,
                        1278
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzipCreation')": [
                        44,
                        56
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzip2Unarchive')": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzipCreation')": [
                        44,
                        56
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testBzip2Unarchive')": [
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateCreation')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        122
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateCreation')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        122
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetection')": [
                        92,
                        96,
                        100,
                        104,
                        108
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', None)": [
                        115,
                        141
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testOverride')": [
                        132
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testMutiples')": [
                        149,
                        153,
                        155
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testDetection')": [
                        92,
                        96,
                        100,
                        104,
                        108
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', None)": [
                        115,
                        141
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testOverride')": [
                        132
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'testMutiples')": [
                        149,
                        153,
                        155
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        95
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        95
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testCorruptedInput')": [
                        138,
                        147
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        166,
                        174,
                        175,
                        176,
                        182,
                        187,
                        188
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        195,
                        203,
                        204,
                        205,
                        211,
                        216,
                        217
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInvalidCompressionLevel')": [
                        224,
                        228
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', None)": [
                        235,
                        283
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        241,
                        249,
                        250,
                        251,
                        253
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testOverWrite')": [
                        278
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testMetadataRoundTrip')": [
                        290,
                        292,
                        298,
                        299,
                        307,
                        310
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testCorruptedInput')": [
                        138,
                        147
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        166,
                        174,
                        175,
                        176,
                        182,
                        187,
                        188
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        195,
                        203,
                        204,
                        205,
                        211,
                        216,
                        217
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInvalidCompressionLevel')": [
                        224,
                        228
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', None)": [
                        235,
                        283
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        241,
                        249,
                        250,
                        251,
                        253
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testOverWrite')": [
                        278
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testMetadataRoundTrip')": [
                        290,
                        292,
                        298,
                        299,
                        307,
                        310
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        80,
                        87
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        139
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testGoodSignature')": [
                        153
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testBadSignature')": [
                        165
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testShortSignature')": [
                        177
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        187,
                        198
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        215
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        80,
                        87
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        139
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testGoodSignature')": [
                        153
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testBadSignature')": [
                        165
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testShortSignature')": [
                        177
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        187,
                        198
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        215
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/XZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZCreation')": [
                        39
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZCreation')": [
                        39
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        34
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'readOfLength0ShouldReturn0')": [
                        48,
                        54,
                        55,
                        63,
                        64,
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        34
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'readOfLength0ShouldReturn0')": [
                        48,
                        54,
                        55,
                        63,
                        64,
                        65
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture')": [
                        82
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixtureMainSort')": [
                        90
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixtureFallbackSort')": [
                        97
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture2')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture2MainSort')": [
                        112
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture2FallbackSort')": [
                        119
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testFallbackSort')": [
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'setUpFixture(byte)')": [
                        150
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture')": [
                        82
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixtureMainSort')": [
                        90
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixtureFallbackSort')": [
                        97
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture2')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture2MainSort')": [
                        112
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testSortFixture2FallbackSort')": [
                        119
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'testFallbackSort')": [
                        126,
                        127,
                        128
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'setUpFixture(byte)')": [
                        150
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'initializeTestData')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'initializeChannel')": [
                        63
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'testTruncatedData')": [
                        78
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', None)": [
                        100
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'makeBZ2C(InputStream)')": [
                        106,
                        107
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'copyOfRange(byte,int,int)')": [
                        115,
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'initializeTestData')": [
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'initializeChannel')": [
                        63
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'testTruncatedData')": [
                        78
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', None)": [
                        100
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'makeBZ2C(InputStream)')": [
                        106,
                        107
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'copyOfRange(byte,int,int)')": [
                        115,
                        116
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'availableShouldReturnNonZero')": [
                        38
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        66
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadReturnsMinusOneAtEof')": [
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'availableShouldReturnNonZero')": [
                        38
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        66
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadReturnsMinusOneAtEof')": [
                        81
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStreamTest', 'canReadASingleByteFlushAndFinish')": [
                        31,
                        32
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStreamTest', 'canReadASingleByteFlushAndFinish')": [
                        31,
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateParametersTest', 'shouldBeAbleToSetCompressionLevel')": [
                        28
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateParametersTest', 'shouldNotBeAbleToSetCompressionLevelToANegativeValue')": [
                        35
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateParametersTest', 'shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue')": [
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateParametersTest', 'shouldBeAbleToSetCompressionLevel')": [
                        28
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateParametersTest', 'shouldNotBeAbleToSetCompressionLevelToANegativeValue')": [
                        35
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateParametersTest', 'shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue')": [
                        41
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testMatches')": [
                        69
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtilsTestCase', 'testMatches')": [
                        69
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        50,
                        57
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalizeInPlace')": [
                        98,
                        105
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        50,
                        57
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalizeInPlace')": [
                        98,
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testMatches')": [
                        41,
                        43
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testLoremIpsum')": [
                        95
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testRemainingChunkTypes')": [
                        110,
                        112
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testAvailable')": [
                        134
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testUnskippableChunk')": [
                        152,
                        157,
                        162
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testMatches')": [
                        41,
                        43
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testLoremIpsum')": [
                        95
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testRemainingChunkTypes')": [
                        110,
                        112
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testAvailable')": [
                        134
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testUnskippableChunk')": [
                        152,
                        157,
                        162
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'redundantTestOfAlmostDeprecatedMatchesMethod')": [
                        27
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStreamTest', 'redundantTestOfAlmostDeprecatedMatchesMethod')": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testMatches')": [
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtilsTestCase', 'testMatches')": [
                        73
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfANegativeAmountOfBits')": [
                        33
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfMoreThan63BitsAtATime')": [
                        40
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInLittleEndian')": [
                        47
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInBigEndian')": [
                        54
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInLittleEndian')": [
                        61
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInBigEndian')": [
                        68
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInLittleEndian')": [
                        76
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInBigEndian')": [
                        83
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInLittleEndian')": [
                        91
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInBigEndian')": [
                        98
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testClearBitCache')": [
                        106
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testEOF')": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfANegativeAmountOfBits')": [
                        33
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfMoreThan63BitsAtATime')": [
                        40
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInLittleEndian')": [
                        47
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInBigEndian')": [
                        54
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInLittleEndian')": [
                        61
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInBigEndian')": [
                        68
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInLittleEndian')": [
                        76
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInBigEndian')": [
                        83
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInLittleEndian')": [
                        91
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInBigEndian')": [
                        98
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testClearBitCache')": [
                        106
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testEOF')": [
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CountingStreamTest', 'output')": [
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.utils#CountingStreamTest', 'input')": [
                        55,
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CountingStreamTest', 'output')": [
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.utils#CountingStreamTest', 'input')": [
                        55,
                        57
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skip(StreamWrapper)')": [
                        81,
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skip(StreamWrapper)')": [
                        81,
                        84
                    ]
                }
            }
        }
    },
    "478bef366f84544eb4ac89553eeb7d57680fc521": {
        "authored_data": "2016 Apr 09 17:06",
        "commit.message": "Add final modifier to method parameters.",
        "commit.author.name": "ggregory",
        "pcid": "9cc0604f7fdab2b23ead5f72a93feb2196660736",
        "changes": {
            "src/main/java/org/apache/commons/compress/PasswordRequiredException.java": {
                "old": {
                    "('org.apache.commons.compress#PasswordRequiredException', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#PasswordRequiredException', None)": [
                        37
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveException', None)": [
                        36,
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveException', None)": [
                        36,
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'count(int)')": [
                        91
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'count(long)')": [
                        102
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'pushedBackBytes(long)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'count(int)')": [
                        91
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'count(long)')": [
                        102
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'pushedBackBytes(long)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        151
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'write(int)')": [
                        107
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'count(int)')": [
                        118
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'count(long)')": [
                        129
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'write(int)')": [
                        107
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'count(int)')": [
                        118
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'count(long)')": [
                        129
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', None)": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'setEntryEncoding(String)')": [
                        174
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', None)": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactory', 'setEntryEncoding(String)')": [
                        174
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#Lister', 'main(String)')": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#Lister', 'main(String)')": [
                        37
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/StreamingNotSupportedException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#StreamingNotSupportedException', None)": [
                        37
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#StreamingNotSupportedException', None)": [
                        37
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', None)": [
                        84,
                        99,
                        100,
                        114
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        173
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', None)": [
                        84,
                        99,
                        100,
                        114
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveEntry', 'equals(Object)')": [
                        173
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getExtendedName(int)')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asLong(byte)')": [
                        189
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte)')": [
                        193
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,boolean)')": [
                        197
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int)')": [
                        201
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,boolean)')": [
                        205
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'read(byte,int,int)')": [
                        244
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'matches(byte,int)')": [
                        270
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'isBSDLongName(String)')": [
                        332
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        344
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'isGNUStringTable(String)')": [
                        374
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte)')": [
                        383
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'isGNULongName(String)')": [
                        402
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getExtendedName(int)')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asLong(byte)')": [
                        189
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte)')": [
                        193
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,boolean)')": [
                        197
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int)')": [
                        201
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'asInt(byte,int,boolean)')": [
                        205
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'read(byte,int,int)')": [
                        244
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'matches(byte,int)')": [
                        270
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'isBSDLongName(String)')": [
                        332
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'getBSDLongName(String)')": [
                        344
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'isGNUStringTable(String)')": [
                        374
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'readGNUStringTable(byte)')": [
                        383
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'isGNULongName(String)')": [
                        402
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'setLongFileMode(int)')": [
                        62
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(byte,int,int)')": [
                        198
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        217
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'setLongFileMode(int)')": [
                        62
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(byte,int,int)')": [
                        198
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        217
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readFully(DataInputStream,byte)')": [
                        122
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readExtraData(int,DataInputStream,LocalFileHeader)')": [
                        269,
                        270
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        338
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readFully(DataInputStream,byte)')": [
                        122
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'readExtraData(int,DataInputStream,LocalFileHeader)')": [
                        269,
                        270
                    ],
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        338
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        312,
                        337,
                        338
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        880
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', None)": [
                        312,
                        337,
                        338
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveEntry', 'equals(Object)')": [
                        880
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        122,
                        137,
                        153
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(int)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'matches(byte,int)')": [
                        526
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        122,
                        137,
                        153
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'skip(int)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'matches(byte,int)')": [
                        526
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        189
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        220
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'pad(int)')": [
                        494
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        554
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', None)": [
                        189
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        220
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'pad(int)')": [
                        494
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        554
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'fileType(long)')": [
                        31
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'fileType(long)')": [
                        31
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#Dirent', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#Dirent', None)": [
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        52,
                        56,
                        77,
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveConstants', None)": [
                        52,
                        56,
                        77,
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        222,
                        235,
                        236,
                        545,
                        557,
                        788,
                        792,
                        821,
                        825
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setSimpleName(String)')": [
                        256
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setNlink(int)')": [
                        280
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setCreationTime(Date)')": [
                        296
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setGeneration(int)')": [
                        312
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setDeleted(boolean)')": [
                        328
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setOffset(long)')": [
                        344
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setVolume(int)')": [
                        360
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'isSparseRecord(int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        403
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'parse(byte)')": [
                        439
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'update(byte)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setType(TYPE)')": [
                        666
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setMode(int)')": [
                        682
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setSize(long)')": [
                        715
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setLastModifiedDate(Date)')": [
                        723
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setAccessTime(Date)')": [
                        739
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setUserId(int)')": [
                        755
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setGroupId(int)')": [
                        771
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', None)": [
                        222,
                        235,
                        236,
                        545,
                        557,
                        788,
                        792,
                        821,
                        825
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setSimpleName(String)')": [
                        256
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setNlink(int)')": [
                        280
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setCreationTime(Date)')": [
                        296
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setGeneration(int)')": [
                        312
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setDeleted(boolean)')": [
                        328
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setOffset(long)')": [
                        344
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setVolume(int)')": [
                        360
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'isSparseRecord(int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'equals(Object)')": [
                        403
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'parse(byte)')": [
                        439
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'update(byte)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setType(TYPE)')": [
                        666
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setMode(int)')": [
                        682
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setSize(long)')": [
                        715
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setLastModifiedDate(Date)')": [
                        723
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setAccessTime(Date)')": [
                        739
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setUserId(int)')": [
                        755
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveEntry', 'setGroupId(int)')": [
                        771
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveException', None)": [
                        33,
                        37,
                        41
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveException', None)": [
                        33,
                        37,
                        41
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        89,
                        102,
                        142
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'getPath(DumpArchiveEntry)')": [
                        415
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'read(byte,int,int)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'matches(byte,int)')": [
                        545
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', None)": [
                        89,
                        102,
                        142
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'getPath(DumpArchiveEntry)')": [
                        415
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'read(byte,int,int)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'matches(byte,int)')": [
                        545
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', None)": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setDumpDate(Date)')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setPreviousDumpDate(Date)')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setVolume(int)')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setLevel(int)')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setLabel(String)')": [
                        143
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFilesystem(String)')": [
                        159
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setDevname(String)')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setHostname(String)')": [
                        191
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFlags(int)')": [
                        207
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFirstRecord(int)')": [
                        223
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setNTRec(int)')": [
                        240
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'equals(Object)')": [
                        310
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', None)": [
                        46
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setDumpDate(Date)')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setPreviousDumpDate(Date)')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setVolume(int)')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setLevel(int)')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setLabel(String)')": [
                        143
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFilesystem(String)')": [
                        159
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setDevname(String)')": [
                        175
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setHostname(String)')": [
                        191
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFlags(int)')": [
                        207
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setFirstRecord(int)')": [
                        223
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'setNTRec(int)')": [
                        240
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveSummary', 'equals(Object)')": [
                        310
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'calculateChecksum(byte)')": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'verify(byte)')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'getIno(byte)')": [
                        79
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert64(byte,int)')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert32(byte,int)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert16(byte,int)')": [
                        128
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'decode(ZipEncoding,byte,int,int)')": [
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'calculateChecksum(byte)')": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'verify(byte)')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'getIno(byte)')": [
                        79
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert64(byte,int)')": [
                        90
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert32(byte,int)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'convert16(byte,int)')": [
                        128
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveUtil', 'decode(ZipEncoding,byte,int,int)')": [
                        139
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/InvalidFormatException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#InvalidFormatException', None)": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#InvalidFormatException', None)": [
                        34
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'resetBlockSize(int,boolean)')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        116
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        162
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        257
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readFully(byte,int,int)')": [
                        337
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', None)": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'resetBlockSize(int,boolean)')": [
                        67
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        116
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        162
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readBlock(boolean)')": [
                        257
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'readFully(byte,int,int)')": [
                        337
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#UnsupportedCompressionAlgorithmException', None)": [
                        34
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#UnsupportedCompressionAlgorithmException', None)": [
                        34
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveEntry', None)": [
                        39,
                        43,
                        47,
                        51
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveEntry', None)": [
                        39,
                        43,
                        47,
                        51
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveInputStream', 'matches(byte,int)')": [
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveInputStream', 'matches(byte,int)')": [
                        75
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.jar#JarArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        58
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        34,
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        34,
                        118
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Archive.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Archive', 'lengthOf(long)')": [
                        48
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Archive', 'lengthOf(Object)')": [
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Archive', 'lengthOf(long)')": [
                        48
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Archive', 'lengthOf(Object)')": [
                        52
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedRandomAccessFileInputStream', 'read(byte,int,int)')": [
                        44
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedRandomAccessFileInputStream', 'read(byte,int,int)')": [
                        44
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        31,
                        51,
                        69,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'main(String)')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'grabMode(String)')": [
                        145
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        31,
                        51,
                        69,
                        109
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'main(String)')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'grabMode(String)')": [
                        145
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', None)": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'canAcceptOptions(Object)')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsAsProperties(Object)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsFromCoder(Coder,InputStream)')": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'numberOptionOrDefault(Object,int)')": [
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', None)": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'canAcceptOptions(Object)')": [
                        41
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsAsProperties(Object)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'getOptionsFromCoder(Coder,InputStream)')": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CoderBase', 'numberOptionOrDefault(Object,int)')": [
                        82
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'findByMethod(SevenZMethod)')": [
                        66
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(String,InputStream,long,Coder,byte)')": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addEncoder(OutputStream,SevenZMethod,Object)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        92,
                        93,
                        104,
                        105,
                        120,
                        125,
                        126,
                        154,
                        167,
                        172,
                        193,
                        198,
                        203,
                        225,
                        247,
                        262
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'findByMethod(SevenZMethod)')": [
                        66
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addDecoder(String,InputStream,long,Coder,byte)')": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', 'addEncoder(OutputStream,SevenZMethod,Object)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        92,
                        93,
                        104,
                        105,
                        120,
                        125,
                        126,
                        154,
                        167,
                        172,
                        193,
                        198,
                        203,
                        225,
                        247,
                        262
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'getOptionsAsProperties(Object)')": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'getOptionsFromCoder(Coder)')": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'getOptionsAsProperties(Object)')": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        56
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#DeltaDecoder', 'getOptionsFromCoder(Coder)')": [
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', 'getUnpackSizeForCoder(Coder)')": [
                        95
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Folder', 'getUnpackSizeForCoder(Coder)')": [
                        95
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptionsAsProperties(Object)')": [
                        54
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getDictSize(Object)')": [
                        68
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getDictionarySize(Coder)')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptions(Object)')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'numberOptionOrDefault(Object)')": [
                        98
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptionsAsProperties(Object)')": [
                        54
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptionsFromCoder(Coder,InputStream)')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getDictSize(Object)')": [
                        68
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getDictionarySize(Coder)')": [
                        75
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'getOptions(Object)')": [
                        89
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#LZMA2Decoder', 'numberOptionOrDefault(Object)')": [
                        98
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setName(String)')": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasStream(boolean)')": [
                        86
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setDirectory(boolean)')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setAntiItem(boolean)')": [
                        123
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasCreationDate(boolean)')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCreationDate(long)')": [
                        162
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCreationDate(Date)')": [
                        170
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasLastModifiedDate(boolean)')": [
                        190
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setLastModifiedDate(long)')": [
                        214
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setLastModifiedDate(Date)')": [
                        222
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasAccessDate(boolean)')": [
                        241
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setAccessDate(long)')": [
                        264
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setAccessDate(Date)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasWindowsAttributes(boolean)')": [
                        291
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setWindowsAttributes(int)')": [
                        307
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasCrc(boolean)')": [
                        325
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCrc(int)')": [
                        345
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCrcValue(long)')": [
                        363
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCompressedCrc(int)')": [
                        383
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCompressedCrcValue(long)')": [
                        401
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setSize(long)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCompressedSize(long)')": [
                        438
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setContentMethods(Iterable)')": [
                        456
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setName(String)')": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasStream(boolean)')": [
                        86
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setDirectory(boolean)')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setAntiItem(boolean)')": [
                        123
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasCreationDate(boolean)')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCreationDate(long)')": [
                        162
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCreationDate(Date)')": [
                        170
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasLastModifiedDate(boolean)')": [
                        190
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setLastModifiedDate(long)')": [
                        214
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setLastModifiedDate(Date)')": [
                        222
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasAccessDate(boolean)')": [
                        241
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setAccessDate(long)')": [
                        264
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setAccessDate(Date)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasWindowsAttributes(boolean)')": [
                        291
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setWindowsAttributes(int)')": [
                        307
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setHasCrc(boolean)')": [
                        325
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCrc(int)')": [
                        345
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCrcValue(long)')": [
                        363
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCompressedCrc(int)')": [
                        383
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCompressedCrcValue(long)')": [
                        401
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setSize(long)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setCompressedSize(long)')": [
                        438
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZArchiveEntry', 'setContentMethods(Iterable)')": [
                        456
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readHeaders(byte)')": [
                        178
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(DataInputStream,Archive,byte)')": [
                        286
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        865
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read(byte)')": [
                        926
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read(byte,int,int)')": [
                        940
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'matches(byte,int)')": [
                        970
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipBytesFully(DataInput,long)')": [
                        983
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readHeaders(byte)')": [
                        178
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(DataInputStream,Archive,byte)')": [
                        286
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        865
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read(byte)')": [
                        926
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read(byte,int,int)')": [
                        940
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'matches(byte,int)')": [
                        970
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'skipBytesFully(DataInput,long)')": [
                        983
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java": {
                "old": {
                    "(None, None)": [
                        90,
                        100
                    ]
                },
                "new": {
                    "(None, None)": [
                        90,
                        100
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZMethodConfiguration', None)": [
                        46,
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZMethodConfiguration', None)": [
                        46,
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'setContentCompression(SevenZMethod)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'setContentMethods(Iterable)')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'getContentMethods(SevenZArchiveEntry)')": [
                        319
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFolder(DataOutput,SevenZArchiveEntry)')": [
                        404
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeSingleCodec(SevenZMethodConfiguration,OutputStream)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'reverse(Iterable)')": [
                        732
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'setContentCompression(SevenZMethod)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'setContentMethods(Iterable)')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'getContentMethods(SevenZArchiveEntry)')": [
                        319
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFolder(DataOutput,SevenZArchiveEntry)')": [
                        404
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeSingleCodec(SevenZMethodConfiguration,OutputStream)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'reverse(Iterable)')": [
                        732
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        242,
                        256,
                        277,
                        291,
                        307,
                        318,
                        350,
                        365
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'equals(TarArchiveEntry)')": [
                        378
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'equals(Object)')": [
                        390
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isDescendent(TarArchiveEntry)')": [
                        415
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setName(String)')": [
                        434
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setMode(int)')": [
                        443
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setLinkName(String)')": [
                        463
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setUserId(int)')": [
                        484
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setUserId(long)')": [
                        504
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setGroupId(int)')": [
                        525
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setGroupId(long)')": [
                        545
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setUserName(String)')": [
                        563
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setGroupName(String)')": [
                        581
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setIds(int,int)')": [
                        591
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setNames(String,String)')": [
                        602
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setModTime(long)')": [
                        613
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setModTime(Date)')": [
                        622
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setSize(long)')": [
                        685
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setDevMajor(int)')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setDevMinor(int)')": [
                        734
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        973
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte,ZipEncoding,boolean)')": [
                        997,
                        998
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeaderField(long,byte,int,int,boolean)')": [
                        1041,
                        1042
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1060
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding)')": [
                        1083
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean)')": [
                        1088
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'normalizeFileName(String,boolean)')": [
                        1173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'evaluateType(byte)')": [
                        1217
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'fillGNUSparse0xData(Map)')": [
                        1231
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'fillGNUSparse1xData(Map)')": [
                        1240
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'fillStarSparseData(Map)')": [
                        1246
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        242,
                        256,
                        277,
                        291,
                        307,
                        318,
                        350,
                        365
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'equals(TarArchiveEntry)')": [
                        378
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'equals(Object)')": [
                        390
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'isDescendent(TarArchiveEntry)')": [
                        415
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setName(String)')": [
                        434
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setMode(int)')": [
                        443
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setLinkName(String)')": [
                        463
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setUserId(int)')": [
                        484
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setUserId(long)')": [
                        504
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setGroupId(int)')": [
                        525
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setGroupId(long)')": [
                        545
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setUserName(String)')": [
                        563
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setGroupName(String)')": [
                        581
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setIds(int,int)')": [
                        591
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setNames(String,String)')": [
                        602
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setModTime(long)')": [
                        613
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setModTime(Date)')": [
                        622
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setSize(long)')": [
                        685
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setDevMajor(int)')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'setDevMinor(int)')": [
                        734
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte)')": [
                        973
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeader(byte,ZipEncoding,boolean)')": [
                        997,
                        998
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'writeEntryHeaderField(long,byte,int,int,boolean)')": [
                        1041,
                        1042
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte)')": [
                        1060
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding)')": [
                        1083
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'parseTarHeader(byte,ZipEncoding,boolean)')": [
                        1088
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'normalizeFileName(String,boolean)')": [
                        1173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'evaluateType(byte)')": [
                        1217
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'fillGNUSparse0xData(Map)')": [
                        1231
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'fillGNUSparse1xData(Map)')": [
                        1240
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'fillStarSparseData(Map)')": [
                        1246
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        88,
                        98,
                        108,
                        119,
                        120,
                        130,
                        142,
                        143
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'mark(int)')": [
                        239
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'isEOFRecord(byte)')": [
                        417
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream)')": [
                        454
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'applyPaxHeadersToCurrentEntry(Map)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'read(byte,int,int)')": [
                        643
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        677
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'setCurrentEntry(TarArchiveEntry)')": [
                        694
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'setAtEOF(boolean)')": [
                        702
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'matches(byte,int)')": [
                        728
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', None)": [
                        88,
                        98,
                        108,
                        119,
                        120,
                        130,
                        142,
                        143
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'mark(int)')": [
                        239
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'isEOFRecord(byte)')": [
                        417
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream)')": [
                        454
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'applyPaxHeadersToCurrentEntry(Map)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'read(byte,int,int)')": [
                        643
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        677
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'setCurrentEntry(TarArchiveEntry)')": [
                        694
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'setAtEOF(boolean)')": [
                        702
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'matches(byte,int)')": [
                        728
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        100,
                        110,
                        119,
                        130,
                        131,
                        141,
                        153,
                        154
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'setLongFileMode(int)')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'setBigNumberMode(int)')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'setAddPaxHeadersForNonAsciiNames(boolean)')": [
                        194
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        273
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        377
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writePaxHeaders(TarArchiveEntry,String,Map)')": [
                        449,
                        450,
                        451
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'stripTo7Bits(String)')": [
                        488
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'shouldBeReplaced(char)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        527
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writeRecord(byte)')": [
                        541
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writeRecord(byte,int)')": [
                        562
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'addPaxHeadersForBigNumbers(Map,TarArchiveEntry)')": [
                        584,
                        585
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'addPaxHeaderForBigNumber(Map,String,long,long)')": [
                        604,
                        605,
                        606
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumbers(TarArchiveEntry)')": [
                        612
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long)')": [
                        626
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumberWithPosixMessage(String,long,long)')": [
                        630
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        634
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        664,
                        665,
                        666
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'transferModTime(TarArchiveEntry,TarArchiveEntry)')": [
                        695
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        100,
                        110,
                        119,
                        130,
                        131,
                        141,
                        153,
                        154
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'setLongFileMode(int)')": [
                        173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'setBigNumberMode(int)')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'setAddPaxHeadersForNonAsciiNames(boolean)')": [
                        194
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        273
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'write(byte,int,int)')": [
                        377
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writePaxHeaders(TarArchiveEntry,String,Map)')": [
                        449,
                        450,
                        451
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'stripTo7Bits(String)')": [
                        488
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'shouldBeReplaced(char)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        527
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writeRecord(byte)')": [
                        541
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'writeRecord(byte,int)')": [
                        562
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'addPaxHeadersForBigNumbers(Map,TarArchiveEntry)')": [
                        584,
                        585
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'addPaxHeaderForBigNumber(Map,String,long,long)')": [
                        604,
                        605,
                        606
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumbers(TarArchiveEntry)')": [
                        612
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long)')": [
                        626
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumberWithPosixMessage(String,long,long)')": [
                        630
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'failForBigNumber(String,long,long,String)')": [
                        634
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'handleLongName(TarArchiveEntry,String,Map,String,byte,String)')": [
                        664,
                        665,
                        666
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'transferModTime(TarArchiveEntry,TarArchiveEntry)')": [
                        695
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveSparseEntry', None)": [
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveSparseEntry', None)": [
                        54
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        49,
                        52,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'exceptionMessage(byte,int,int,int,byte)')": [
                        236,
                        237
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        262
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int,ZipEncoding)')": [
                        288
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        322
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int,ZipEncoding)')": [
                        354
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatUnsignedOctalString(long,byte,int,int)')": [
                        383
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatOctalBytes(long,byte,int,int)')": [
                        422
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongOctalBytes(long,byte,int,int)')": [
                        447
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongOctalOrBinaryBytes(long,byte,int,int)')": [
                        475
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongBinary(long,byte,int,int,boolean)')": [
                        494
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatBigIntegerBinary(long,byte,int,int,boolean)')": [
                        515
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatCheckSumOctalBytes(long,byte,int,int)')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'verifyCheckSum(byte)')": [
                        596
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtils', None)": [
                        49,
                        52,
                        64
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'exceptionMessage(byte,int,int,int,byte)')": [
                        236,
                        237
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int)')": [
                        262
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'parseName(byte,int,int,ZipEncoding)')": [
                        288
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int)')": [
                        322
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatNameBytes(String,byte,int,int,ZipEncoding)')": [
                        354
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatUnsignedOctalString(long,byte,int,int)')": [
                        383
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatOctalBytes(long,byte,int,int)')": [
                        422
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongOctalBytes(long,byte,int,int)')": [
                        447
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongOctalOrBinaryBytes(long,byte,int,int)')": [
                        475
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatLongBinary(long,byte,int,int,boolean)')": [
                        494
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatBigIntegerBinary(long,byte,int,int,boolean)')": [
                        515
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'formatCheckSumOctalBytes(long,byte,int,int)')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtils', 'verifyCheckSum(byte)')": [
                        596
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        51,
                        71
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'setNameCRC32(long)')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'setUnicodeName(byte)')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        162
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        187,
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        51,
                        71
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'setNameCRC32(long)')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'setUnicodeName(byte)')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        162
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        187,
                        188
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setUserId(int)')": [
                        169
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setGroupId(int)')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setLinkedFile(String)')": [
                        203
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setMode(int)')": [
                        230
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setDirectory(boolean)')": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        267
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        305,
                        306
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'getMode(int)')": [
                        316
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setUserId(int)')": [
                        169
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setGroupId(int)')": [
                        185
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setLinkedFile(String)')": [
                        203
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setMode(int)')": [
                        230
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'setDirectory(boolean)')": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        267
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        305,
                        306
                    ],
                    "('org.apache.commons.compress.archivers.zip#AsiExtraField', 'getMode(int)')": [
                        316
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', None)": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'addLeaf(int,int,int,int)')": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'read(BitStream)')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        110
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', None)": [
                        47
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'addLeaf(int,int,int,int)')": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'read(BitStream)')": [
                        84
                    ],
                    "('org.apache.commons.compress.archivers.zip#BinaryTree', 'decode(InputStream,int)')": [
                        110
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/BitStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#BitStream', None)": [
                        35
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#BitStream', None)": [
                        35
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', None)": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'put(int)')": [
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'copy(int,int)')": [
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', None)": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'put(int)')": [
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#CircularBuffer', 'copy(int,int)')": [
                        80
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', None)": [
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodingInputStream', None)": [
                        73
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'createExtraField(ZipShort)')": [
                        85
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte)')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean)')": [
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeLocalFileDataData(ZipExtraField)')": [
                        201
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeCentralDirectoryData(ZipExtraField)')": [
                        240
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        315
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'register(Class)')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'createExtraField(ZipShort)')": [
                        85
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte)')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean)')": [
                        117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        135,
                        136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeLocalFileDataData(ZipExtraField)')": [
                        201
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'mergeCentralDirectoryData(ZipExtraField)')": [
                        240
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', None)": [
                        315
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/FallbackZipEncoding.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', None)": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'canEncode(String)')": [
                        69
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'encode(String)')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'decode(byte)')": [
                        90
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', None)": [
                        60
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'canEncode(String)')": [
                        69
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'encode(String)')": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.zip#FallbackZipEncoding', 'decode(byte)')": [
                        90
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useUTF8ForNames(boolean)')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useDataDescriptor(boolean)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useEncryption(boolean)')": [
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useStrongEncryption(boolean)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'encode(byte,int)')": [
                        186
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'equals(Object)')": [
                        225
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useUTF8ForNames(boolean)')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useDataDescriptor(boolean)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useEncryption(boolean)')": [
                        130
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'useStrongEncryption(boolean)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'encode(byte,int)')": [
                        186
                    ],
                    "('org.apache.commons.compress.archivers.zip#GeneralPurposeBit', 'equals(Object)')": [
                        225
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/JarMarker.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'parseFromLocalFileData(byte,int,int)')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        117,
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'parseFromLocalFileData(byte,int,int)')": [
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#JarMarker', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        117,
                        118
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', None)": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'canEncode(String)')": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encode(String)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'decode(byte)')": [
                        120
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', None)": [
                        50
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'canEncode(String)')": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'encode(String)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#NioZipEncoding', 'decode(byte)')": [
                        120
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', None)": [
                        80,
                        229,
                        249,
                        284,
                        304
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'setLocalFileDataData(byte)')": [
                        101
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'setCentralDirectoryData(byte)')": [
                        131
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromLocalFileData(byte,int,int)')": [
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', None)": [
                        80,
                        229,
                        249,
                        284,
                        304
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'setLocalFileDataData(byte)')": [
                        101
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'setCentralDirectoryData(byte)')": [
                        131
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromLocalFileData(byte,int,int)')": [
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#PKWareExtraHeader', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        188
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createDeferred(ScatterGatherBackingStoreSupplier)')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        108,
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        168
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createDeferred(ScatterGatherBackingStoreSupplier)')": [
                        74
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        108,
                        119,
                        120
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'submit(Callable)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'createCallable(ZipArchiveEntry,InputStreamSupplier)')": [
                        168
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        196
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterStatistics.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterStatistics', None)": [
                        30
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterStatistics', None)": [
                        30
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        59,
                        82,
                        83
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'addArchiveEntry(ZipArchiveEntryRequest)')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'writeTo(ZipArchiveOutputStream)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File)')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File,int)')": [
                        151
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        59,
                        82,
                        83
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'addArchiveEntry(ZipArchiveEntryRequest)')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'writeTo(ZipArchiveOutputStream)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File)')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File,int)')": [
                        151
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', None)": [
                        57,
                        63,
                        74,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'decodeByte(byte)')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncodeChar(char)')": [
                        140
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'pushEncodedChar(ByteBuffer,char)')": [
                        159
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encodeHighChar(char)')": [
                        180
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncode(String)')": [
                        221
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encode(String)')": [
                        240
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'decode(byte)')": [
                        268
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', None)": [
                        57,
                        63,
                        74,
                        105
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'decodeByte(byte)')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncodeChar(char)')": [
                        140
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'pushEncodedChar(ByteBuffer,char)')": [
                        159
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encodeHighChar(char)')": [
                        180
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'canEncode(String)')": [
                        221
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'encode(String)')": [
                        240
                    ],
                    "('org.apache.commons.compress.archivers.zip#Simple8BitZipEncoding', 'decode(byte)')": [
                        268
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        61,
                        269,
                        275,
                        284,
                        290,
                        299,
                        305
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(OutputStream,Deflater)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(OutputStream)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(DataOutput,Deflater)')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(int,ScatterGatherBackingStore)')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(ScatterGatherBackingStore)')": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'deflate(InputStream,int)')": [
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        187
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeDeflated(byte,int,int)')": [
                        219
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeCounted(byte)')": [
                        254
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeCounted(byte,int,int)')": [
                        258
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        61,
                        269,
                        275,
                        284,
                        290,
                        299,
                        305
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(OutputStream,Deflater)')": [
                        72
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(OutputStream)')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(DataOutput,Deflater)')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(int,ScatterGatherBackingStore)')": [
                        104
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'create(ScatterGatherBackingStore)')": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'deflate(InputStream,int)')": [
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'write(byte,int,int,int)')": [
                        187
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeDeflated(byte,int,int)')": [
                        219
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeCounted(byte)')": [
                        254
                    ],
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', 'writeCounted(byte,int,int)')": [
                        258
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnicodeCommentExtraField', None)": [
                        49,
                        50,
                        61
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnicodeCommentExtraField', None)": [
                        49,
                        50,
                        61
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnicodePathExtraField', None)": [
                        49,
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnicodePathExtraField', None)": [
                        49,
                        60
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnparseableExtraFieldData', 'parseFromLocalFileData(byte,int,int)')": [
                        98
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnparseableExtraFieldData', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        111,
                        112
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnparseableExtraFieldData', 'parseFromLocalFileData(byte,int,int)')": [
                        98
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnparseableExtraFieldData', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        111,
                        112
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'setHeaderId(ZipShort)')": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'setLocalFileDataData(byte)')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'setCentralDirectoryData(byte)')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        132
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        145,
                        146
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'setHeaderId(ZipShort)')": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'setLocalFileDataData(byte)')": [
                        64
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'setCentralDirectoryData(byte)')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        132
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnrecognizedExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        145,
                        146
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnshrinkingInputStream', None)": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnshrinkingInputStream', 'addEntry(int,byte)')": [
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnshrinkingInputStream', None)": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#UnshrinkingInputStream', 'addEntry(int,byte)')": [
                        49
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        39,
                        40,
                        54,
                        55,
                        69,
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnsupportedZipFeatureException', None)": [
                        39,
                        40,
                        54,
                        55,
                        69,
                        116
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'parseFromLocalFileData(byte,int,int)')": [
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setModifyTime(ZipEightByteInteger)')": [
                        252
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setAccessTime(ZipEightByteInteger)')": [
                        262
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setCreateTime(ZipEightByteInteger)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setModifyJavaTime(Date)')": [
                        281
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setAccessJavaTime(Date)')": [
                        289
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setCreateJavaTime(Date)')": [
                        304
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        324
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'readTimeAttr(byte,int,int)')": [
                        362
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'zipToDate(ZipEightByteInteger)')": [
                        388
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'parseFromLocalFileData(byte,int,int)')": [
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        182
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setModifyTime(ZipEightByteInteger)')": [
                        252
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setAccessTime(ZipEightByteInteger)')": [
                        262
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setCreateTime(ZipEightByteInteger)')": [
                        272
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setModifyJavaTime(Date)')": [
                        281
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setAccessJavaTime(Date)')": [
                        289
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'setCreateJavaTime(Date)')": [
                        304
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'equals(Object)')": [
                        324
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'readTimeAttr(byte,int,int)')": [
                        362
                    ],
                    "('org.apache.commons.compress.archivers.zip#X000A_NTFS', 'zipToDate(ZipEightByteInteger)')": [
                        388
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X0015_CertificateIdForFile', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X0015_CertificateIdForFile', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        70
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X0016_CertificateIdForCentralDirectory', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X0016_CertificateIdForCentralDirectory', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        71
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseCentralDirectoryFormat(byte,int,int)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFileFormat(byte,int,int)')": [
                        330
                    ],
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFromLocalFileData(byte,int,int)')": [
                        372
                    ],
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        378
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseCentralDirectoryFormat(byte,int,int)')": [
                        302
                    ],
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFileFormat(byte,int,int)')": [
                        330
                    ],
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFromLocalFileData(byte,int,int)')": [
                        372
                    ],
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        378
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'parseFromLocalFileData(byte,int,int)')": [
                        222
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        250
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setFlags(byte)')": [
                        281
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setModifyTime(ZipLong)')": [
                        418
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setAccessTime(ZipLong)')": [
                        437
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setCreateTime(ZipLong)')": [
                        456
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setModifyJavaTime(Date)')": [
                        476
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setAccessJavaTime(Date)')": [
                        491
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setCreateJavaTime(Date)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        562
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'parseFromLocalFileData(byte,int,int)')": [
                        222
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        250
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setFlags(byte)')": [
                        281
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setModifyTime(ZipLong)')": [
                        418
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setAccessTime(ZipLong)')": [
                        437
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setCreateTime(ZipLong)')": [
                        456
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setModifyJavaTime(Date)')": [
                        476
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setAccessJavaTime(Date)')": [
                        491
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'setCreateJavaTime(Date)')": [
                        506
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestamp', 'equals(Object)')": [
                        562
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'setUID(long)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'setGID(long)')": [
                        123
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'parseFromLocalFileData(byte,int,int)')": [
                        212
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        234
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'equals(Object)')": [
                        266
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'trimLeadingZeroesForceMinLength(byte)')": [
                        295
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'setUID(long)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'setGID(long)')": [
                        123
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'parseFromLocalFileData(byte,int,int)')": [
                        212
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        234
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'equals(Object)')": [
                        266
                    ],
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnix', 'trimLeadingZeroesForceMinLength(byte)')": [
                        295
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', None)": [
                        81,
                        82,
                        96,
                        97,
                        98,
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        153
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        183,
                        184
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'reparseCentralDirectoryData(boolean,boolean,boolean,boolean)')": [
                        224,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setSize(ZipEightByteInteger)')": [
                        276
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setCompressedSize(ZipEightByteInteger)')": [
                        292
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setRelativeHeaderOffset(ZipEightByteInteger)')": [
                        308
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setDiskStartNumber(ZipLong)')": [
                        324
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'addSizes(byte)')": [
                        328
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', None)": [
                        81,
                        82,
                        96,
                        97,
                        98,
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'parseFromLocalFileData(byte,int,int)')": [
                        153
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'parseFromCentralDirectoryData(byte,int,int)')": [
                        183,
                        184
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'reparseCentralDirectoryData(boolean,boolean,boolean,boolean)')": [
                        224,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setSize(ZipEightByteInteger)')": [
                        276
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setCompressedSize(ZipEightByteInteger)')": [
                        292
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setRelativeHeaderOffset(ZipEightByteInteger)')": [
                        308
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'setDiskStartNumber(ZipLong)')": [
                        324
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraField', 'addSizes(byte)')": [
                        328
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/Zip64RequiredException.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', 'getEntryTooBigMessage(ZipArchiveEntry)')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', None)": [
                        46
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', 'getEntryTooBigMessage(ZipArchiveEntry)')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64RequiredException', None)": [
                        46
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        101,
                        115,
                        140,
                        168
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setMethod(int)')": [
                        213
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setInternalAttributes(int)')": [
                        238
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExternalAttributes(long)')": [
                        259
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setUnixMode(int)')": [
                        268
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setPlatform(int)')": [
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtraFields(ZipExtraField)')": [
                        323
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(boolean)')": [
                        359
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField)')": [
                        388
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField,int)')": [
                        392
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addExtraField(ZipExtraField)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addAsFirstExtraField(ZipExtraField)')": [
                        445
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'removeExtraField(ZipShort)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraField(ZipShort)')": [
                        504
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        535
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCentralDirectoryExtra(byte)')": [
                        562
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setSize(long)')": [
                        641
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setName(String,byte)')": [
                        657
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setGeneralPurposeBit(GeneralPurposeBit)')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        721
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'equals(Object)')": [
                        766
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setVersionMadeBy(int)')": [
                        812
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setVersionRequired(int)')": [
                        821
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setRawFlag(int)')": [
                        857
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        101,
                        115,
                        140,
                        168
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setMethod(int)')": [
                        213
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setInternalAttributes(int)')": [
                        238
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExternalAttributes(long)')": [
                        259
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setUnixMode(int)')": [
                        268
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setPlatform(int)')": [
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtraFields(ZipExtraField)')": [
                        323
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraFields(boolean)')": [
                        359
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField)')": [
                        388
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'copyOf(ZipExtraField,int)')": [
                        392
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addExtraField(ZipExtraField)')": [
                        420
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'addAsFirstExtraField(ZipExtraField)')": [
                        445
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'removeExtraField(ZipShort)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'getExtraField(ZipShort)')": [
                        504
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setExtra(byte)')": [
                        535
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setCentralDirectoryExtra(byte)')": [
                        562
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setSize(long)')": [
                        641
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setName(String,byte)')": [
                        657
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setGeneralPurposeBit(GeneralPurposeBit)')": [
                        709
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'mergeExtraFields(ZipExtraField,boolean)')": [
                        721
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'equals(Object)')": [
                        766
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setVersionMadeBy(int)')": [
                        812
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setVersionRequired(int)')": [
                        821
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', 'setRawFlag(int)')": [
                        857
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryRequest', None)": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryRequest', 'createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)')": [
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryRequest', None)": [
                        40
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntryRequest', 'createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)')": [
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        166,
                        177,
                        189,
                        204,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFirstLocalFileHeader(byte)')": [
                        330
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'processZip64Extra(ZipLong,ZipLong)')": [
                        352
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        382
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        437
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDeflated(byte,int,int)')": [
                        476
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFromInflater(byte,int,int)')": [
                        496
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skip(long)')": [
                        546
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'matches(byte,int)')": [
                        571
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'checksig(byte,byte)')": [
                        582
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFully(byte)')": [
                        701
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'supportsDataDescriptorFor(ZipArchiveEntry)')": [
                        749
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'bufferContainsSignature(ByteArrayOutputStream,int,int,int)')": [
                        816
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'cacheBytesRead(ByteArrayOutputStream,int,int,int)')": [
                        857
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'pushback(byte,int,int)')": [
                        869
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        951
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'isFirstByteOfEocdSig(int)')": [
                        982
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        166,
                        177,
                        189,
                        204,
                        205,
                        206,
                        207
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFirstLocalFileHeader(byte)')": [
                        330
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'processZip64Extra(ZipLong,ZipLong)')": [
                        352
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'canReadEntryData(ArchiveEntry)')": [
                        382
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        437
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readDeflated(byte,int,int)')": [
                        476
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFromInflater(byte,int,int)')": [
                        496
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'skip(long)')": [
                        546
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'matches(byte,int)')": [
                        571
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'checksig(byte,byte)')": [
                        582
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFully(byte)')": [
                        701
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'supportsDataDescriptorFor(ZipArchiveEntry)')": [
                        749
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'bufferContainsSignature(ByteArrayOutputStream,int,int,int)')": [
                        816
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'cacheBytesRead(ByteArrayOutputStream,int,int,int)')": [
                        857
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'pushback(byte,int,int)')": [
                        869
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        951
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'isFirstByteOfEocdSig(int)')": [
                        982
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        269,
                        282,
                        1571,
                        1585
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setUseLanguageEncodingFlag(boolean)')": [
                        347
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy)')": [
                        358
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setFallbackToUTF8(boolean)')": [
                        372
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setUseZip64(Zip64Mode)')": [
                        421
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeCopiedEntry(boolean)')": [
                        500
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeEntry(boolean,boolean)')": [
                        508
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addRawArchiveEntry(ZipArchiveEntry,InputStream)')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleSizesAndCrc(long,long,Zip64Mode)')": [
                        576,
                        577
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'checkIfNeedsZip64(Zip64Mode)')": [
                        619
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isZip64Required(ZipArchiveEntry,Zip64Mode)')": [
                        628
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isTooLageForZip32(ZipArchiveEntry)')": [
                        632
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'rewriteSizesAndCrc(boolean)')": [
                        641
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        696
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry,boolean)')": [
                        712
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setDefaults(ZipArchiveEntry)')": [
                        762
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateSizeInformation(Zip64Mode)')": [
                        778
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)')": [
                        816
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setComment(String)')": [
                        828
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setLevel(int)')": [
                        840
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setMethod(int)')": [
                        856
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        868
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'write(byte,int,int)')": [
                        886
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCounted(byte)')": [
                        900
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'copyFromZipInputStream(InputStream)')": [
                        904
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry)')": [
                        989
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        993
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        1010,
                        1011
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)')": [
                        1082,
                        1083
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeDataDescriptor(ZipArchiveEntry)')": [
                        1117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralFileHeader(ZipArchiveEntry)')": [
                        1140
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1145
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1175,
                        1176
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleZip64Extra(ZipArchiveEntry,long,boolean)')": [
                        1264,
                        1265
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeOut(byte)')": [
                        1400
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeOut(byte,int,int)')": [
                        1412
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isDeflatedToOutputStream(int)')": [
                        1438
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        1455
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getZip64Extra(ZipArchiveEntry)')": [
                        1470
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'hasZip64Extra(ZipArchiveEntry)')": [
                        1501
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getEffectiveZip64Mode(ZipArchiveEntry)')": [
                        1514
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getEntryEncoding(ZipArchiveEntry)')": [
                        1524
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getName(ZipArchiveEntry)')": [
                        1530
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        269,
                        282,
                        1571,
                        1585
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setUseLanguageEncodingFlag(boolean)')": [
                        347
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy)')": [
                        358
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setFallbackToUTF8(boolean)')": [
                        372
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setUseZip64(Zip64Mode)')": [
                        421
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeCopiedEntry(boolean)')": [
                        500
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'closeEntry(boolean,boolean)')": [
                        508
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addRawArchiveEntry(ZipArchiveEntry,InputStream)')": [
                        544
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleSizesAndCrc(long,long,Zip64Mode)')": [
                        576,
                        577
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'checkIfNeedsZip64(Zip64Mode)')": [
                        619
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isZip64Required(ZipArchiveEntry,Zip64Mode)')": [
                        628
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isTooLageForZip32(ZipArchiveEntry)')": [
                        632
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'rewriteSizesAndCrc(boolean)')": [
                        641
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        696
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'putArchiveEntry(ArchiveEntry,boolean)')": [
                        712
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setDefaults(ZipArchiveEntry)')": [
                        762
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateSizeInformation(Zip64Mode)')": [
                        778
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)')": [
                        816
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setComment(String)')": [
                        828
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setLevel(int)')": [
                        840
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'setMethod(int)')": [
                        856
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'canWriteEntryData(ArchiveEntry)')": [
                        868
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'write(byte,int,int)')": [
                        886
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCounted(byte)')": [
                        900
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'copyFromZipInputStream(InputStream)')": [
                        904
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry)')": [
                        989
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        993
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)')": [
                        1010,
                        1011
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)')": [
                        1082,
                        1083
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeDataDescriptor(ZipArchiveEntry)')": [
                        1117
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralFileHeader(ZipArchiveEntry)')": [
                        1140
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry)')": [
                        1145
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)')": [
                        1175,
                        1176
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'handleZip64Extra(ZipArchiveEntry,long,boolean)')": [
                        1264,
                        1265
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeOut(byte)')": [
                        1400
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeOut(byte,int,int)')": [
                        1412
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'isDeflatedToOutputStream(int)')": [
                        1438
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createArchiveEntry(File,String)')": [
                        1455
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getZip64Extra(ZipArchiveEntry)')": [
                        1470
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'hasZip64Extra(ZipArchiveEntry)')": [
                        1501
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getEffectiveZip64Mode(ZipArchiveEntry)')": [
                        1514
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getEntryEncoding(ZipArchiveEntry)')": [
                        1524
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getName(ZipArchiveEntry)')": [
                        1530
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', None)": [
                        74,
                        82,
                        90,
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getBytes(long)')": [
                        132
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getBytes(BigInteger)')": [
                        141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getLongValue(byte,int)')": [
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getValue(byte,int)')": [
                        176
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getLongValue(byte)')": [
                        195
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getValue(byte)')": [
                        204
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'equals(Object)')": [
                        214
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', None)": [
                        74,
                        82,
                        90,
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getBytes(long)')": [
                        132
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getBytes(BigInteger)')": [
                        141
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getLongValue(byte,int)')": [
                        165
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getValue(byte,int)')": [
                        176
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getLongValue(byte)')": [
                        195
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'getValue(byte)')": [
                        204
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'equals(Object)')": [
                        214
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', None)": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'growBuffer(ByteBuffer,int)')": [
                        152
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'appendSurrogate(ByteBuffer,char)')": [
                        181
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'getZipEncoding(String)')": [
                        210
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', None)": [
                        52
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'growBuffer(ByteBuffer,int)')": [
                        152
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'appendSurrogate(ByteBuffer,char)')": [
                        181
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingHelper', 'getZipEncoding(String)')": [
                        210
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        153,
                        164,
                        178,
                        192,
                        208,
                        1017,
                        1038,
                        1079,
                        1096,
                        1122,
                        1137
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'closeQuietly(ZipFile)')": [
                        257
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntry(String)')": [
                        301
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntries(String)')": [
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder(String)')": [
                        330
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'canReadEntryData(ZipArchiveEntry)')": [
                        348
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getRawInputStream(ZipArchiveEntry)')": [
                        362
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)')": [
                        381
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        400
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getUnixSymlink(ZipArchiveEntry)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        570
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,OffsetEntry,int)')": [
                        665,
                        666,
                        667
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        880,
                        881,
                        882
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        952
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        153,
                        164,
                        178,
                        192,
                        208,
                        1017,
                        1038,
                        1079,
                        1096,
                        1122,
                        1137
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'closeQuietly(ZipFile)')": [
                        257
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntry(String)')": [
                        301
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntries(String)')": [
                        315
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getEntriesInPhysicalOrder(String)')": [
                        330
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'canReadEntryData(ZipArchiveEntry)')": [
                        348
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getRawInputStream(ZipArchiveEntry)')": [
                        362
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)')": [
                        381
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getInputStream(ZipArchiveEntry)')": [
                        400
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'getUnixSymlink(ZipArchiveEntry)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'readCentralDirectoryEntry(Map)')": [
                        570
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,OffsetEntry,int)')": [
                        665,
                        666,
                        667
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'tryToLocateSignature(long,long,byte)')": [
                        880,
                        881,
                        882
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', 'resolveLocalFileHeaderData(Map)')": [
                        952
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', None)": [
                        93,
                        101,
                        110
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getBytes(long)')": [
                        135
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(long,byte,int)')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(byte,int)')": [
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getValue(byte,int)')": [
                        167
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getValue(byte)')": [
                        180
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'equals(Object)')": [
                        190
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', None)": [
                        93,
                        101,
                        110
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getBytes(long)')": [
                        135
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(long,byte,int)')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'putLong(byte,int)')": [
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getValue(byte,int)')": [
                        167
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'getValue(byte)')": [
                        180
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'equals(Object)')": [
                        190
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java": {
                "old": {
                    "(None, None)": [
                        190,
                        213
                    ]
                },
                "new": {
                    "(None, None)": [
                        190,
                        213
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', None)": [
                        41,
                        49,
                        58
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes(int)')": [
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'putShort(int,byte,int)')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getValue(byte,int)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getValue(byte)')": [
                        122
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'equals(Object)')": [
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', None)": [
                        41,
                        49,
                        58
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getBytes(int)')": [
                        86
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'putShort(int,byte,int)')": [
                        100
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getValue(byte,int)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'getValue(byte)')": [
                        122
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'equals(Object)')": [
                        132
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(Date)')": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long,byte,int)')": [
                        69
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(Calendar,long,byte,int)')": [
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'adjustToLong(int)')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'bigToLong(BigInteger)')": [
                        134
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'signedByteToUnsignedInt(byte)')": [
                        171
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'unsignedIntToSignedByte(int)')": [
                        186
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'fromDosTime(ZipLong)')": [
                        202
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'dosToJavaTime(long)')": [
                        213
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'setNameAndCommentFromExtraFields(ZipArchiveEntry,byte,byte)')": [
                        232,
                        233,
                        234
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte)')": [
                        263,
                        264
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'copy(byte)')": [
                        290
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'copy(byte,byte,int)')": [
                        298
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'canHandleEntryData(ZipArchiveEntry)')": [
                        308
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'supportsEncryptionOf(ZipArchiveEntry)')": [
                        318
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'supportsMethodOf(ZipArchiveEntry)')": [
                        328
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        340
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(Date)')": [
                        42
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long)')": [
                        53
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(long,byte,int)')": [
                        69
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'toDosTime(Calendar,long,byte,int)')": [
                        73
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'adjustToLong(int)')": [
                        99
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'bigToLong(BigInteger)')": [
                        134
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'signedByteToUnsignedInt(byte)')": [
                        171
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'unsignedIntToSignedByte(int)')": [
                        186
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'fromDosTime(ZipLong)')": [
                        202
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'dosToJavaTime(long)')": [
                        213
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'setNameAndCommentFromExtraFields(ZipArchiveEntry,byte,byte)')": [
                        232,
                        233,
                        234
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte)')": [
                        263,
                        264
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'copy(byte)')": [
                        290
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'copy(byte,byte,int)')": [
                        298
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'canHandleEntryData(ZipArchiveEntry)')": [
                        308
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'supportsEncryptionOf(ZipArchiveEntry)')": [
                        318
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'supportsMethodOf(ZipArchiveEntry)')": [
                        328
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipUtil', 'checkRequestedFeatures(ZipArchiveEntry)')": [
                        340
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/Change.java": {
                "old": {
                    "('org.apache.commons.compress.changes#Change', None)": [
                        49,
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#Change', None)": [
                        49,
                        66
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSet.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSet', 'addAddition(Change)')": [
                        93
                    ],
                    "('org.apache.commons.compress.changes#ChangeSet', 'addDeletion(Change)')": [
                        127
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSet', 'addAddition(Change)')": [
                        93
                    ],
                    "('org.apache.commons.compress.changes#ChangeSet', 'addDeletion(Change)')": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveInputStream,ArchiveOutputStream)')": [
                        70
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ZipFile,ArchiveOutputStream)')": [
                        91
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveEntryIterator,ArchiveOutputStream)')": [
                        111,
                        112
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'isDeletedLater(Set,ArchiveEntry)')": [
                        187
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)')": [
                        218,
                        219
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', None)": [
                        244,
                        266
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveInputStream,ArchiveOutputStream)')": [
                        70
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ZipFile,ArchiveOutputStream)')": [
                        91
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'perform(ArchiveEntryIterator,ArchiveOutputStream)')": [
                        111,
                        112
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'isDeletedLater(Set,ArchiveEntry)')": [
                        187
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', 'copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)')": [
                        218,
                        219
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetPerformer', None)": [
                        244,
                        266
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'deleted(String)')": [
                        36
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'addedFromStream(String)')": [
                        45
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'addedFromChangeSet(String)')": [
                        54
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'hasBeenAdded(String)')": [
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'deleted(String)')": [
                        36
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'addedFromStream(String)')": [
                        45
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'addedFromChangeSet(String)')": [
                        54
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetResults', 'hasBeenAdded(String)')": [
                        87
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorException.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorException', None)": [
                        36,
                        48
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorException', None)": [
                        36,
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorInputStream', 'count(int)')": [
                        34
                    ],
                    "('org.apache.commons.compress.compressors#CompressorInputStream', 'count(long)')": [
                        44
                    ],
                    "('org.apache.commons.compress.compressors#CompressorInputStream', 'pushedBackBytes(long)')": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorInputStream', 'count(int)')": [
                        34
                    ],
                    "('org.apache.commons.compress.compressors#CompressorInputStream', 'count(long)')": [
                        44
                    ],
                    "('org.apache.commons.compress.compressors#CompressorInputStream', 'pushedBackBytes(long)')": [
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'setDecompressConcatenated(boolean)')": [
                        186
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'setDecompressConcatenated(boolean)')": [
                        186
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#FileNameUtil', None)": [
                        91,
                        92
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'isCompressedFilename(String)')": [
                        133
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getUncompressedFilename(String)')": [
                        158
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getCompressedFilename(String)')": [
                        182
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FileNameUtil', None)": [
                        91,
                        92
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'isCompressedFilename(String)')": [
                        133
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getUncompressedFilename(String)')": [
                        158
                    ],
                    "('org.apache.commons.compress.compressors#FileNameUtil', 'getCompressedFilename(String)')": [
                        182
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'init(boolean)')": [
                        230
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', None)": [
                        954,
                        965
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'matches(byte,int)')": [
                        992
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'init(boolean)')": [
                        230
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', None)": [
                        954,
                        965
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'matches(byte,int)')": [
                        992
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'chooseBlockSize(long)')": [
                        338
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', None)": [
                        1321
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'chooseBlockSize(long)')": [
                        338
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', None)": [
                        1321
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', 'isCompressedFilename(String)')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', 'getUncompressedFilename(String)')": [
                        75
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', 'getCompressedFilename(String)')": [
                        89
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', 'isCompressedFilename(String)')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', 'getUncompressedFilename(String)')": [
                        75
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2Utils', 'getCompressedFilename(String)')": [
                        89
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSimpleSort(int,int,int,int)')": [
                        267,
                        268,
                        269,
                        270
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fswap(int,int,int)')": [
                        303
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fvswap(int,int,int,int)')": [
                        312
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fmin(int,int)')": [
                        319
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fpush(int,int,int)')": [
                        323
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fpop(int)')": [
                        328
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackQSort3(int,int,int,int)')": [
                        342,
                        343,
                        344,
                        345
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSort(int,byte,int)')": [
                        470
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'vswap(int,int,int,int)')": [
                        783
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'med3(byte,byte,byte)')": [
                        792
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSimpleSort(int,int,int,int)')": [
                        267,
                        268,
                        269,
                        270
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fswap(int,int,int)')": [
                        303
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fvswap(int,int,int,int)')": [
                        312
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fmin(int,int)')": [
                        319
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fpush(int,int,int)')": [
                        323
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fpop(int)')": [
                        328
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackQSort3(int,int,int,int)')": [
                        342,
                        343,
                        344,
                        345
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'fallbackSort(int,byte,int)')": [
                        470
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'vswap(int,int,int,int)')": [
                        783
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSort', 'med3(byte,byte,byte)')": [
                        792
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'setGlobalCRC(int)')": [
                        110
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'updateCRC(int)')": [
                        114
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'updateCRC(int,int)')": [
                        122
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'setGlobalCRC(int)')": [
                        110
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'updateCRC(int)')": [
                        114
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#CRC', 'updateCRC(int,int)')": [
                        122
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/Rand.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#Rand', 'rNums(int)')": [
                        88
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#Rand', 'rNums(int)')": [
                        88
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', None)": [
                        49,
                        60,
                        61
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'read(byte,int,int)')": [
                        76
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'skip(long)')": [
                        84
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'matches(byte,int)')": [
                        117
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', None)": [
                        49,
                        60,
                        61
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'read(byte,int,int)')": [
                        76
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'skip(long)')": [
                        84
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'matches(byte,int)')": [
                        117
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStream', None)": [
                        41,
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStream', 'write(int)')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStream', 'write(byte,int,int)')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStream', None)": [
                        41,
                        51,
                        52
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStream', 'write(int)')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorOutputStream', 'write(byte,int,int)')": [
                        63
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate/DeflateParameters.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateParameters', 'setWithZlibHeader(boolean)')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateParameters', 'setCompressionLevel(int)')": [
                        72
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateParameters', 'setWithZlibHeader(boolean)')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateParameters', 'setCompressionLevel(int)')": [
                        72
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', None)": [
                        98,
                        123,
                        124
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        148
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInputStream)')": [
                        236
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readLittleEndianInt(DataInputStream)')": [
                        245
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        263
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'matches(byte,int)')": [
                        352
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', None)": [
                        98,
                        123,
                        124
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        148
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readToNull(DataInputStream)')": [
                        236
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'readLittleEndianInt(DataInputStream)')": [
                        245
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        263
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'matches(byte,int)')": [
                        352
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', None)": [
                        69,
                        81
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        88
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'write(int)')": [
                        134
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'write(byte)')": [
                        144
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'write(byte,int,int)')": [
                        154
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', None)": [
                        69,
                        81
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        88
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'write(int)')": [
                        134
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'write(byte)')": [
                        144
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'write(byte,int,int)')": [
                        154
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipParameters.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setCompressionLevel(int)')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setModificationTime(long)')": [
                        66
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setFilename(String)')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setComment(String)')": [
                        87
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setOperatingSystem(int)')": [
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setCompressionLevel(int)')": [
                        50
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setModificationTime(long)')": [
                        66
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setFilename(String)')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setComment(String)')": [
                        87
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipParameters', 'setOperatingSystem(int)')": [
                        118
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', 'isCompressedFilename(String)')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', 'getUncompressedFilename(String)')": [
                        81
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', 'getCompressedFilename(String)')": [
                        96
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', 'isCompressedFilename(String)')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', 'getUncompressedFilename(String)')": [
                        81
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipUtils', 'getCompressedFilename(String)')": [
                        96
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', None)": [
                        46
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'read(byte,int,int)')": [
                        61
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'skip(long)')": [
                        69
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'matches(byte,int)')": [
                        96
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', None)": [
                        46
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'read(byte,int,int)')": [
                        61
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'skip(long)')": [
                        69
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMACompressorInputStream', 'matches(byte,int)')": [
                        96
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'matches(byte,int)')": [
                        71
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'isCompressedFilename(String)')": [
                        114
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'getUncompressedFilename(String)')": [
                        128
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'getCompressedFilename(String)')": [
                        139
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'setCacheLZMAAvailablity(boolean)')": [
                        149
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'matches(byte,int)')": [
                        71
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'isCompressedFilename(String)')": [
                        114
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'getUncompressedFilename(String)')": [
                        128
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'getCompressedFilename(String)')": [
                        139
                    ],
                    "('org.apache.commons.compress.compressors.lzma#LZMAUtils', 'setCacheLZMAAvailablity(boolean)')": [
                        149
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'read(byte,int,int)')": [
                        72
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setClearCode(int)')": [
                        110
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'initializeTables(int)')": [
                        118
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'addEntry(int,byte,int)')": [
                        151
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'expandCodeToOutputStack(int,boolean)')": [
                        181
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'readFromStack(byte,int,int)')": [
                        194
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setCodeSize(int)')": [
                        213
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'getPrefix(int)')": [
                        225
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setPrefix(int,int)')": [
                        229
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setTableSize(int)')": [
                        245
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'read(byte,int,int)')": [
                        72
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setClearCode(int)')": [
                        110
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'initializeTables(int)')": [
                        118
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'addEntry(int,byte,int)')": [
                        151
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'expandCodeToOutputStack(int,boolean)')": [
                        181
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'readFromStack(byte,int,int)')": [
                        194
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setCodeSize(int)')": [
                        213
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'getPrefix(int)')": [
                        225
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setPrefix(int,int)')": [
                        229
                    ],
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'setTableSize(int)')": [
                        245
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'read(byte)')": [
                        200
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'read(byte,int,int)')": [
                        205
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'mark(int)')": [
                        224
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'skip(long)')": [
                        238
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'matches(byte,int)')": [
                        269
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'read(byte)')": [
                        200
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'read(byte,int,int)')": [
                        205
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'mark(int)')": [
                        224
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'skip(long)')": [
                        238
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorInputStream', 'matches(byte,int)')": [
                        269
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'write(int)')": [
                        102
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'write(byte)')": [
                        107
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'write(byte,int,int)')": [
                        112
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'write(int)')": [
                        102
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'write(byte)')": [
                        107
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200CompressorOutputStream', 'write(byte,int,int)')": [
                        112
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File)')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,Map)')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File)')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        128
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File)')": [
                        58
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,Map)')": [
                        79
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File)')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.pack200#Pack200Utils', 'normalize(File,File,Map)')": [
                        128
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', None)": [
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#StreamBridge', None)": [
                        38
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', None)": [
                        78
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'read(byte,int,int)')": [
                        101
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOnce(byte,int,int)')": [
                        132
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'matches(byte,int)')": [
                        276
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', None)": [
                        78
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'read(byte,int,int)')": [
                        101
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readOnce(byte,int,int)')": [
                        132
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'matches(byte,int)')": [
                        276
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        57
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        98
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(byte,int,int)')": [
                        57
                    ],
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        98
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        128
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill(int)')": [
                        155
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'readLiteralLength(int)')": [
                        268
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'expandCopy(long,int)')": [
                        339
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        128
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill(int)')": [
                        155
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'readLiteralLength(int)')": [
                        268
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'expandCopy(long,int)')": [
                        339
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'matches(byte,int)')": [
                        43
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', None)": [
                        70,
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read(byte,int,int)')": [
                        110
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'skip(long)')": [
                        117
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'matches(byte,int)')": [
                        43
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', None)": [
                        70,
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read(byte,int,int)')": [
                        110
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'skip(long)')": [
                        117
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStream', None)": [
                        41,
                        62
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStream', 'write(int)')": [
                        68
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStream', 'write(byte,int,int)')": [
                        73
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStream', None)": [
                        41,
                        62
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStream', 'write(int)')": [
                        68
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZCompressorOutputStream', 'write(byte,int,int)')": [
                        73
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'matches(byte,int)')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'isCompressedFilename(String)')": [
                        123
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'getUncompressedFilename(String)')": [
                        140
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'getCompressedFilename(String)')": [
                        155
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'setCacheXZAvailablity(boolean)')": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'matches(byte,int)')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'isCompressedFilename(String)')": [
                        123
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'getUncompressedFilename(String)')": [
                        140
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'getCompressedFilename(String)')": [
                        155
                    ],
                    "('org.apache.commons.compress.compressors.xz#XZUtils', 'setCacheXZAvailablity(boolean)')": [
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', None)": [
                        41
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'addEntry(int,byte)')": [
                        99
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'matches(byte,int)')": [
                        162
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', None)": [
                        41
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'addEntry(int,byte)')": [
                        99
                    ],
                    "('org.apache.commons.compress.compressors.z#ZCompressorInputStream', 'matches(byte,int)')": [
                        162
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java": {
                "old": {
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        37
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'writeOut(byte,int,int)')": [
                        57
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        37
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'writeOut(byte,int,int)')": [
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toString(ArchiveEntry)')": [
                        46
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        70
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte)')": [
                        87
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        98
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        128
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isEqual(byte,int,int,byte,int,int,boolean)')": [
                        151
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isEqual(byte,byte,boolean)')": [
                        216
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isArrayZero(byte,int)')": [
                        246
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toString(ArchiveEntry)')": [
                        46
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        70
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte)')": [
                        87
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        98
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        128
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isEqual(byte,int,int,byte,int,int,boolean)')": [
                        151
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isEqual(byte,byte,boolean)')": [
                        216
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'isArrayZero(byte,int)')": [
                        246
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BoundedInputStream', 'read(byte,int,int)')": [
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BoundedInputStream', 'read(byte,int,int)')": [
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/Charsets.java": {
                "old": {
                    "('org.apache.commons.compress.utils#Charsets', 'toCharset(Charset)')": [
                        71
                    ],
                    "('org.apache.commons.compress.utils#Charsets', 'toCharset(String)')": [
                        86
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#Charsets', 'toCharset(Charset)')": [
                        71
                    ],
                    "('org.apache.commons.compress.utils#Charsets', 'toCharset(String)')": [
                        86
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte)')": [
                        73
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte,int,int)')": [
                        84
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'skip(long)')": [
                        97
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte)')": [
                        73
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte,int,int)')": [
                        84
                    ],
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'skip(long)')": [
                        97
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/CountingInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read(byte)')": [
                        46
                    ],
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read(byte,int,int)')": [
                        50
                    ],
                    "('org.apache.commons.compress.utils#CountingInputStream', 'count(long)')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read(byte)')": [
                        46
                    ],
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read(byte,int,int)')": [
                        50
                    ],
                    "('org.apache.commons.compress.utils#CountingInputStream', 'count(long)')": [
                        63
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'write(int)')": [
                        38
                    ],
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'write(byte)')": [
                        43
                    ],
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'write(byte,int,int)')": [
                        47
                    ],
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'count(long)')": [
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'write(int)')": [
                        38
                    ],
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'write(byte)')": [
                        43
                    ],
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'write(byte,int,int)')": [
                        47
                    ],
                    "('org.apache.commons.compress.utils#CountingOutputStream', 'count(long)')": [
                        58
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtils', 'copy(InputStream,OutputStream,int)')": [
                        73
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'skip(InputStream,long)')": [
                        100
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte)')": [
                        133
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte,int,int)')": [
                        153
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'closeQuietly(Closeable)')": [
                        198
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtils', 'copy(InputStream,OutputStream,int)')": [
                        73
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'skip(InputStream,long)')": [
                        100
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte)')": [
                        133
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'readFully(InputStream,byte,int,int)')": [
                        153
                    ],
                    "('org.apache.commons.compress.utils#IOUtils', 'closeQuietly(Closeable)')": [
                        198
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'mkdir(String)')": [
                        63
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        70
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'rmdir(File)')": [
                        98
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'tryHardToDelete(File)')": [
                        129
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createArchive(String)')": [
                        168
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'addArchiveEntry(ArchiveOutputStream,String,File)')": [
                        215
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createEmptyArchive(String)')": [
                        230
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createSingleEntryArchive(String)')": [
                        257
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(File,List)')": [
                        288
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List)')": [
                        307
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        321
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'getExpectedString(ArchiveEntry)')": [
                        377
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'closeQuietly(Closeable)')": [
                        405
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'mkdir(String)')": [
                        63
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        70
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'rmdir(File)')": [
                        98
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'tryHardToDelete(File)')": [
                        129
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createArchive(String)')": [
                        168
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'addArchiveEntry(ArchiveOutputStream,String,File)')": [
                        215
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createEmptyArchive(String)')": [
                        230
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createSingleEntryArchive(String)')": [
                        257
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(File,List)')": [
                        288
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List)')": [
                        307
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        321
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'getExpectedString(ArchiveEntry)')": [
                        377
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'closeQuietly(Closeable)')": [
                        405
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveReadTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        56
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'data')": [
                        81
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'getExpectedString(ArchiveEntry)')": [
                        93
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        56
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'data')": [
                        81
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'getExpectedString(ArchiveEntry)')": [
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'asciiToByteAndBackOK(String)')": [
                        70
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'asciiToByteAndBackFail(String)')": [
                        74
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'asciiToByteAndBackOK(String)')": [
                        70
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'asciiToByteAndBackFail(String)')": [
                        74
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'getStreamFor(String)')": [
                        99
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'checkEmptyArchive(String)')": [
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'getStreamFor(String)')": [
                        99
                    ],
                    "('org.apache.commons.compress#DetectArchiverTestCase', 'checkEmptyArchive(String)')": [
                        132
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/IOMethodsTest.java": {
                "old": {
                    "('org.apache.commons.compress#IOMethodsTest', 'compareWrites(String,ArchiveEntry)')": [
                        111
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareReads(String)')": [
                        142
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#IOMethodsTest', 'compareWrites(String,ArchiveEntry)')": [
                        111
                    ],
                    "('org.apache.commons.compress#IOMethodsTest', 'compareReads(String)')": [
                        142
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        137
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveOutputStreamTest', 'doCallSequence(String)')": [
                        137
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        198
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getFactory(String)')": [
                        209
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'eq(String,String)')": [
                        345
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        352
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,ArchiveStreamFactory)')": [
                        386
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,String,ArchiveStreamFactory)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getOutputStreamFor(String,ArchiveStreamFactory)')": [
                        401
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        198
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getFactory(String)')": [
                        209
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'eq(String,String)')": [
                        345
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getField(Object,String)')": [
                        352
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,ArchiveStreamFactory)')": [
                        386
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getInputStreamFor(String,String,ArchiveStreamFactory)')": [
                        393
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'getOutputStreamFor(String,ArchiveStreamFactory)')": [
                        401
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'getExpectedString(ArchiveEntry)')": [
                        98
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'getExpectedString(ArchiveEntry)')": [
                        98
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'getExpectedString(ArchiveEntry)')": [
                        99
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        87
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'getExpectedString(ArchiveEntry)')": [
                        99
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'testSevenZArchiveCreation(SevenZMethod)')": [
                        55
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'testSevenZArchiveCreation(SevenZMethod)')": [
                        55
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        317
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createReferenceFile(File,Zip64Mode,String)')": [
                        400
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createFirstEntry(ZipArchiveOutputStream)')": [
                        410
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createSecondEntry(ZipArchiveOutputStream)')": [
                        415
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'assertSameFileContents(File,File)')": [
                        421
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createArchiveEntry(String,ZipArchiveOutputStream,String)')": [
                        459
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        317
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createReferenceFile(File,Zip64Mode,String)')": [
                        400
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createFirstEntry(ZipArchiveOutputStream)')": [
                        410
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createSecondEntry(ZipArchiveOutputStream)')": [
                        415
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'assertSameFileContents(File,File)')": [
                        421
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'createArchiveEntry(String,ZipArchiveOutputStream,String)')": [
                        459
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStreamTest', 'checkLongNameEntry(String)')": [
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readFully(SevenZFile)')": [
                        95
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod)')": [
                        142
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod,byte)')": [
                        263
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readFully(SevenZFile)')": [
                        95
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod)')": [
                        142
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod,byte)')": [
                        263
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCompress252(int,int)')": [
                        372
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyCompress252(File,int,int)')": [
                        392
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addDir(SevenZOutputFile)')": [
                        413
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyDir(SevenZFile)')": [
                        419
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addFile(SevenZOutputFile,int,boolean)')": [
                        426
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addFile(SevenZOutputFile,int,boolean,Iterable)')": [
                        431
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int)')": [
                        441
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int,Iterable)')": [
                        445,
                        446
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testRoundTrip(SevenZMethod)')": [
                        465
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testFilterRoundTrip(SevenZMethodConfiguration)')": [
                        472
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'createAndReadBack(File,Iterable)')": [
                        480
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'assertContentMethodsEquals(Iterable,Iterable)')": [
                        497,
                        498
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCompress252(int,int)')": [
                        372
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyCompress252(File,int,int)')": [
                        392
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addDir(SevenZOutputFile)')": [
                        413
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyDir(SevenZFile)')": [
                        419
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addFile(SevenZOutputFile,int,boolean)')": [
                        426
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'addFile(SevenZOutputFile,int,boolean,Iterable)')": [
                        431
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int)')": [
                        441
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyFile(SevenZFile,int,Iterable)')": [
                        445,
                        446
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testRoundTrip(SevenZMethod)')": [
                        465
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testFilterRoundTrip(SevenZMethodConfiguration)')": [
                        472
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'createAndReadBack(File,Iterable)')": [
                        480
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'assertContentMethodsEquals(Iterable,Iterable)')": [
                        497,
                        498
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#BigFilesIT', 'readFileBiggerThan8GByte(String)')": [
                        71
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#SparseFilesTest', 'assertPaxGNUEntry(TarArchiveInputStream,String)')": [
                        66
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'assertGnuMagic(TarArchiveEntry)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'assertPosixMagic(TarArchiveEntry)')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'readMagic(TarArchiveEntry)')": [
                        154
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'assertGnuMagic(TarArchiveEntry)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'assertPosixMagic(TarArchiveEntry)')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntryTest', 'readMagic(TarArchiveEntry)')": [
                        154
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'getTestStream(String)')": [
                        300
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'datePriorToEpoch(String)')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'getTestStream(String)')": [
                        300
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'writePaxHeader(Map)')": [
                        197
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testRoundtripWith67CharFileName(int)')": [
                        378
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryName(int)')": [
                        457
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkName(int)')": [
                        587
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'createTarArchiveContainingOneDirectory(String,Date)')": [
                        666
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'writePaxHeader(Map)')": [
                        197
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testRoundtripWith67CharFileName(int)')": [
                        378
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongDirectoryName(int)')": [
                        457
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongLinkName(int)')": [
                        587
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'createTarArchiveContainingOneDirectory(String,Date)')": [
                        666
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'log(TarArchiveEntry)')": [
                        66
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'main(String)')": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarLister', 'log(TarArchiveEntry)')": [
                        66
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundTripOctalOrBinary(int)')": [
                        158
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkName(String)')": [
                        220
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundTripOctalOrBinary(int)')": [
                        158
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkName(String)')": [
                        220
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testArchiveWithImplodeCompression(String,String)')": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testZipStreamWithImplodeCompression(String,String)')": [
                        69
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testArchiveWithImplodeCompression(String,String)')": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.zip#ExplodeSupportTest', 'testZipStreamWithImplodeCompression(String,String)')": [
                        69
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'list(ZipArchiveEntry)')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        101,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'parse(String)')": [
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        49
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'list(ZipArchiveEntry)')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'extract(String,ZipArchiveEntry,InputStream)')": [
                        101,
                        102
                    ],
                    "('org.apache.commons.compress.archivers.zip#Lister', 'parse(String)')": [
                        118
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'removeEntriesFoundInZipFile(File,Map)')": [
                        98
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'createZipArchiveEntry(Map,int,byte)')": [
                        142
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'removeEntriesFoundInZipFile(File,Map)')": [
                        98
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        111
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        126
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'createZipArchiveEntry(Map,int,byte)')": [
                        142
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSample.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', 'addEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', 'writeTo(ZipArchiveOutputStream)')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', 'addEntry(ZipArchiveEntry,InputStreamSupplier)')": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSample', 'writeTo(ZipArchiveOutputStream)')": [
                        42
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        43
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'checkFile(File)')": [
                        60
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'createFile(File)')": [
                        43
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterSampleTest', 'checkFile(File)')": [
                        60
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertCanRead(ZipFile,String)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFileRoundtrip(String,boolean,boolean)')": [
                        242,
                        243
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        256,
                        257,
                        258
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFile(File,String)')": [
                        336
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'findUniCodePath(ZipArchiveEntry)')": [
                        361
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        366,
                        367,
                        368
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertRawNameOfAcsiiTxt(ZipArchiveEntry)')": [
                        397
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertCanRead(ZipFile,String)')": [
                        146
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFileRoundtrip(String,boolean,boolean)')": [
                        242,
                        243
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        256,
                        257,
                        258
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'testFile(File,String)')": [
                        336
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'findUniCodePath(ZipArchiveEntry)')": [
                        361
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        366,
                        367,
                        368
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertRawNameOfAcsiiTxt(ZipArchiveEntry)')": [
                        397
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'isFlagSet(byte,byte)')": [
                        540
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'adjustFromGMTToExpectedOffset(Date)')": [
                        550
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'isFlagSet(byte,byte)')": [
                        540
                    ],
                    "('org.apache.commons.compress.archivers.zip#X5455_ExtendedTimestampTest', 'adjustFromGMTToExpectedOffset(Date)')": [
                        550
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'trimTest(byte)')": [
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X7875_NewUnixTest', 'trimTest(byte)')": [
                        136
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'checkSizes(byte)')": [
                        215
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'checkOffset(byte,int)')": [
                        234
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'checkDisk(byte,int)')": [
                        245
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'checkSizes(byte)')": [
                        215
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'checkOffset(byte,int)')": [
                        234
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64ExtendedInformationExtraFieldTest', 'checkDisk(byte,int)')": [
                        245
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write5GBZerosFile(String)')": [
                        145
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFiles(Zip64Mode)')": [
                        208
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        326,
                        493
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'readSelfGenerated100KFilesUsingZipFile')": [
                        354,
                        355
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        379
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        525,
                        526
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        580
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryModeNever(boolean)')": [
                        762
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        820,
                        821
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryUnknownSizeToStream(Zip64Mode)')": [
                        1007
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1064
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryKnownSizeToStreamModeNever')": [
                        1236,
                        1237
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFileModeNever(boolean)')": [
                        1270
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntry(boolean,Zip64Mode)')": [
                        1326
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1505
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        1668
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1841
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        2024
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2199
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean)')": [
                        2351,
                        2352,
                        2353
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getTempFile(String)')": [
                        2423
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2429
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosUsingZipFileImpl(File,String)')": [
                        2464,
                        2465
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2503
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesUsingZipFileImpl(File)')": [
                        2525
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory(RandomAccessFile)')": [
                        2544
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory32(RandomAccessFile,long)')": [
                        2565
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFilesToStream(ZipArchiveOutputStream)')": [
                        2574
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchiveToStream(ZipArchiveOutputStream)')": [
                        2586
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write5GBZerosFile(String)')": [
                        145
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFiles(Zip64Mode)')": [
                        208
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        326,
                        493
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'readSelfGenerated100KFilesUsingZipFile')": [
                        354,
                        355
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        379
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        525,
                        526
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        580
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntryModeNever(boolean)')": [
                        762
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        820,
                        821
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryUnknownSizeToStream(Zip64Mode)')": [
                        1007
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1064
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryKnownSizeToStreamModeNever')": [
                        1236,
                        1237
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFileModeNever(boolean)')": [
                        1270
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntry(boolean,Zip64Mode)')": [
                        1326
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1505
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        1668
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1841
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        2024
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2199
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'withTemporaryArchive(String,ZipOutputTest,boolean)')": [
                        2351,
                        2352,
                        2353
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getTempFile(String)')": [
                        2423
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosImpl(File,String)')": [
                        2429
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosUsingZipFileImpl(File,String)')": [
                        2464,
                        2465
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesImpl(File)')": [
                        2503
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read100KFilesUsingZipFileImpl(File)')": [
                        2525
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory(RandomAccessFile)')": [
                        2544
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'getLengthAndPositionAtCentralDirectory32(RandomAccessFile,long)')": [
                        2565
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFilesToStream(ZipArchiveOutputStream)')": [
                        2574
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchiveToStream(ZipArchiveOutputStream)')": [
                        2586
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'assertEquals(byte,ByteBuffer)')": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'doSimpleEncodingTest(String,byte)')": [
                        126
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'assertEquals(byte,ByteBuffer)')": [
                        115
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipEncodingTest', 'doSimpleEncodingTest(String,byte)')": [
                        126
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertEntryName(ArrayList,int,String)')": [
                        314,
                        315,
                        316
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertEntryName(ArrayList,int,String)')": [
                        314,
                        315,
                        316
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDeleteDir(String)')": [
                        52
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDelete(String)')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDeleteDir(String)')": [
                        52
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'archiveListDelete(String)')": [
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', None)": [
                        62
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String)')": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,CompressorStreamFactory)')": [
                        170
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', None)": [
                        62
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String)')": [
                        163
                    ],
                    "('org.apache.commons.compress.compressors#DetectCompressorTestCase', 'getStreamFor(String,CompressorStreamFactory)')": [
                        170
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtraction')": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactory')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactoryAutodetection')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        70
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtraction')": [
                        42
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactory')": [
                        52
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testDefaultExtractionViaFactoryAutodetection')": [
                        64
                    ],
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        70
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        240
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        240
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'copy(InputStream,File)')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'copy(InputStream,File)')": [
                        62
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        67
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        109
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        67
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        109
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchive')": [
                        41
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaFactory')": [
                        51
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaAutoDetection')": [
                        62
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchive')": [
                        41
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaFactory')": [
                        51
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testZUnarchiveViaAutoDetection')": [
                        62
                    ],
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        81
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'assertFixtureSorted(BZip2CompressorOutputStream)')": [
                        137
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'assertFixture2Sorted(BZip2CompressorOutputStream)')": [
                        145
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'setUpFixture(byte)')": [
                        149
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'assertFixtureSorted(BZip2CompressorOutputStream,byte,byte)')": [
                        155,
                        156
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', None)": [
                        166
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'assertFixtureSorted(BZip2CompressorOutputStream)')": [
                        137
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'assertFixture2Sorted(BZip2CompressorOutputStream)')": [
                        145
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'setUpFixture(byte)')": [
                        149
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', 'assertFixtureSorted(BZip2CompressorOutputStream,byte,byte)')": [
                        155,
                        156
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BlockSortTest', None)": [
                        166
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'makeBZ2C(InputStream)')": [
                        105
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'copyOfRange(byte,int,int)')": [
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'makeBZ2C(InputStream)')": [
                        105
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'copyOfRange(byte,int,int)')": [
                        114
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testChecksumUnmasking(long)')": [
                        173
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'mask(long)')": [
                        179
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testChecksumUnmasking(long)')": [
                        173
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'mask(long)')": [
                        179
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkip')": [
                        38
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingRead')": [
                        48,
                        51
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkipAndRead')": [
                        67
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skip(StreamWrapper)')": [
                        80
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkip')": [
                        38
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingRead')": [
                        48,
                        51
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skipUsingSkipAndRead')": [
                        67
                    ],
                    "('org.apache.commons.compress.utils#IOUtilsTest', 'skip(StreamWrapper)')": [
                        80
                    ]
                }
            }
        }
    },
    "6cc5a2f13e5214a766a328648afc80dfefa5f9aa": {
        "authored_data": "2016 Apr 09 16:40",
        "commit.message": "take advantage of IOException accepting cause in constructor\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "e7c50ceff3d12c94730849aab73978ebd857d3f9",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#AES256SHA256Decoder', 'decode(String,InputStream,long,Coder,byte)')": [
                        71,
                        72,
                        97,
                        98,
                        99
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        130,
                        131,
                        132,
                        133,
                        134
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        130,
                        131,
                        132,
                        133
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        286,
                        287,
                        288
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'getNextTarEntry')": [
                        286
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        79,
                        80,
                        81,
                        82
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'getFile(String)')": [
                        79
                    ]
                }
            }
        }
    },
    "9cc0604f7fdab2b23ead5f72a93feb2196660736": {
        "authored_data": "2016 Apr 09 16:10",
        "commit.message": "[COMPRESS-350] TarArchiveEntry wastefully allocates empty arrays.",
        "commit.author.name": "ggregory",
        "pcid": "ab17a70527ee46e3632be8911a31931fc3e78183",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        948,
                        952
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        146,
                        147
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', 'getDirectoryEntries')": [
                        950,
                        954,
                        955,
                        956,
                        957
                    ]
                }
            }
        }
    }
}