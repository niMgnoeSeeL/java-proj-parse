{
    "bcba036e78b9baf415086e5e6c4600a07390f1a0": {
        "authored_data": "2022 Apr 22 18:25",
        "commit.message": "Remove Unnecessary interface modifier (#281)\n\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "683b1f03eb7a5c47d3da2495aebda3bd2f270702",
        "changes": {
            "src/main/java/org/apache/commons/compress/java/util/jar/Pack200.java": {
                "old": {
                    "('org.apache.commons.compress.java.util.jar#Pack200', None)": [
                        104,
                        109,
                        114,
                        119,
                        124,
                        129,
                        134,
                        139,
                        144,
                        149,
                        154,
                        159,
                        165,
                        170,
                        175,
                        180,
                        185,
                        190,
                        195,
                        200,
                        255,
                        261,
                        266,
                        271,
                        276,
                        281
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.java.util.jar#Pack200', None)": [
                        104,
                        109,
                        114,
                        119,
                        124,
                        129,
                        134,
                        139,
                        144,
                        149,
                        154,
                        159,
                        165,
                        170,
                        175,
                        180,
                        185,
                        190,
                        195,
                        200,
                        255,
                        261,
                        266,
                        271,
                        276,
                        281
                    ]
                }
            }
        }
    },
    "53618e3d7304c6ffb0abfcb050ce445d86a3b08e": {
        "authored_data": "2022 Apr 22 18:23",
        "commit.message": "Use java API compare instead of do it manual. (#285)\n\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "6acb47120947a3138bbe0f6efcd8f3b292240502",
        "changes": {
            "src/main/java/org/apache/commons/compress/harmony/pack200/CPInt.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#CPInt', 'compareTo(Object)')": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#CPInt', 'compareTo(Object)')": [
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/CPLong.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#CPLong', 'compareTo(Object)')": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#CPLong', 'compareTo(Object)')": [
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/IcBands.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#IcBands', None)": [
                        160,
                        161
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.harmony.pack200#IcBands', None)": [
                        161,
                        162
                    ]
                }
            }
        }
    },
    "d05139856794546135d10f96bfb3a209325dd69b": {
        "authored_data": "2022 Apr 22 18:21",
        "commit.message": "Inline variable. Remove redundant local variable. (#283)\n\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "3030ba1769e09dcaac4d4514716058218f3d3cde",
        "changes": {
            "src/main/java/org/apache/commons/compress/harmony/unpack200/AttributeLayout.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#AttributeLayout', 'getValue(long,String,SegmentConstantPool)')": [
                        187,
                        188
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#AttributeLayout', 'getValue(long,String,SegmentConstantPool)')": [
                        187
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/BandSet.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseReferences(String,InputStream,BHSDCodec,int,String)')": [
                        269,
                        275
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseCPUTF8References(String,InputStream,BHSDCodec,int)')": [
                        360,
                        365
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseCPSignatureReferences(String,InputStream,BHSDCodec,int)')": [
                        455,
                        460
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseReferences(String,InputStream,BHSDCodec,int,String)')": [
                        274
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseCPUTF8References(String,InputStream,BHSDCodec,int)')": [
                        363
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#BandSet', 'parseCPSignatureReferences(String,InputStream,BHSDCodec,int)')": [
                        457
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/ClassBands.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#ClassBands', 'parseFieldAttrBands(InputStream)')": [
                        229,
                        230,
                        232
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#ClassBands', 'parseMethodAttrBands(InputStream)')": [
                        355,
                        356,
                        357,
                        359
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#ClassBands', 'parseFieldAttrBands(InputStream)')": [
                        230
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#ClassBands', 'parseMethodAttrBands(InputStream)')": [
                        354
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/SegmentConstantPool.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentConstantPool', 'getInitMethodPoolEntry(int,long,String)')": [
                        157,
                        163
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#SegmentConstantPool', 'getInitMethodPoolEntry(int,long,String)')": [
                        162
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/bytecode/forms/NewInitMethodRefForm.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode.forms#NewInitMethodRefForm', 'context(OperandManager)')": [
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode.forms#NewInitMethodRefForm', 'context(OperandManager)')": [
                        37
                    ]
                }
            }
        }
    },
    "6542912a5e80b261de8831cfaed271b3ec23d5b8": {
        "authored_data": "2022 Apr 22 18:19",
        "commit.message": "Use StringBuilder instead of StringBuffer. (#284)\n\n",
        "commit.author.name": "Arturo Bernal",
        "pcid": "c28d4ec9a1bb4e81791030c342d6c90032d9a8d6",
        "changes": {
            "src/main/java/org/apache/commons/compress/harmony/pack200/BHSDCodec.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#BHSDCodec', 'toString')": [
                        425
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#BHSDCodec', 'toString')": [
                        425
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/CpBands.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#CpBands', 'getCPSignature(String)')": [
                        474,
                        478
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#CpBands', 'getCPSignature(String)')": [
                        474,
                        478
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/pack200/NewAttributeBands.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.pack200#NewAttributeBands', 'getStreamUpToMatchingBracket(StringReader)')": [
                        808
                    ],
                    "('org.apache.commons.compress.harmony.pack200#NewAttributeBands', 'readUpToMatchingBracket(StringReader)')": [
                        875
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.pack200#NewAttributeBands', 'getStreamUpToMatchingBracket(StringReader)')": [
                        808
                    ],
                    "('org.apache.commons.compress.harmony.pack200#NewAttributeBands', 'readUpToMatchingBracket(StringReader)')": [
                        875
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/CpBands.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#CpBands', 'parseCpSignature(InputStream)')": [
                        308
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#CpBands', 'parseCpSignature(InputStream)')": [
                        308
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/IcTuple.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#IcTuple', 'toString')": [
                        272
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#IcTuple', 'toString')": [
                        272
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/NewAttributeBands.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200#NewAttributeBands', 'getStreamUpToMatchingBracket(StringReader)')": [
                        873
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#NewAttributeBands', 'readUpToMatchingBracket(StringReader)')": [
                        921
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200#NewAttributeBands', 'getStreamUpToMatchingBracket(StringReader)')": [
                        873
                    ],
                    "('org.apache.commons.compress.harmony.unpack200#NewAttributeBands', 'readUpToMatchingBracket(StringReader)')": [
                        921
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute.java": {
                "old": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode#ExceptionsAttribute', 'toString')": [
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.harmony.unpack200.bytecode#ExceptionsAttribute', 'toString')": [
                        102
                    ]
                }
            }
        }
    }
}