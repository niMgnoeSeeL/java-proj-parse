{
    "9ae937d2c21cf806256e2e267cd8d778a778ff29": {
        "authored_data": "2021 Dec 26 17:08",
        "commit.message": "Remove unused imports.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "8f7749de40c1cf91be9e8fc835535b067c53a2dd",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "(None, None)": [
                        40
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java": {
                "old": {
                    "(None, None)": [
                        27
                    ]
                }
            }
        }
    },
    "8f7749de40c1cf91be9e8fc835535b067c53a2dd": {
        "authored_data": "2021 Dec 26 17:07",
        "commit.message": "Trade this for underscores in constructor.\n\nBetter internal name.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "bd6c71e2bfaa95cbaaa9ddc18d8775d6703f64ea",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        93,
                        250,
                        254,
                        255,
                        256
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        370,
                        399
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        600
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'close')": [
                        673
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        822
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'fill')": [
                        861
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFully(byte,int)')": [
                        876
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readRange(int)')": [
                        884
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        1001
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'pushback(byte,int,int)')": [
                        1096
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        1194
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readOneByte')": [
                        1213
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        93,
                        250,
                        254,
                        255
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'getNextZipEntry')": [
                        369,
                        398
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStored(byte,int,int)')": [
                        599
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'close')": [
                        672
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'drainCurrentEntryData')": [
                        821
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'fill')": [
                        860
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readFully(byte,int)')": [
                        875
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readRange(int)')": [
                        883
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readStoredEntry')": [
                        1000
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'pushback(byte,int,int)')": [
                        1095
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'realSkip(long)')": [
                        1193
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'readOneByte')": [
                        1212
                    ]
                }
            }
        }
    },
    "bd6c71e2bfaa95cbaaa9ddc18d8775d6703f64ea": {
        "authored_data": "2021 Dec 26 17:07",
        "commit.message": "Trade this for underscores in constructor.\n\nBetter internal name.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "49483778bd37118a1dd38d9e4adfcf8584e404ff",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        251,
                        297,
                        324,
                        325,
                        326,
                        328,
                        333,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        389,
                        390,
                        411
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'finish')": [
                        572,
                        600
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'flush')": [
                        1135,
                        1136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        1197
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1404
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1551,
                        1561
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateIfZip64IsNeededInEOCD')": [
                        1608
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1669,
                        1696,
                        1729,
                        1743
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldUseZip64EOCD')": [
                        1760
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'destroy')": [
                        1951,
                        1952
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        251,
                        297,
                        324,
                        325,
                        326,
                        328,
                        333,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        389,
                        390,
                        411
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'finish')": [
                        572,
                        600
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'flush')": [
                        1135,
                        1136
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeLocalFileHeader(ZipArchiveEntry,boolean)')": [
                        1197
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)')": [
                        1404
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeCentralDirectoryEnd')": [
                        1551,
                        1561
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'validateIfZip64IsNeededInEOCD')": [
                        1608
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'writeZip64CentralDirectory')": [
                        1669,
                        1696,
                        1729,
                        1743
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'shouldUseZip64EOCD')": [
                        1760
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'destroy')": [
                        1951,
                        1952
                    ]
                }
            }
        }
    },
    "49483778bd37118a1dd38d9e4adfcf8584e404ff": {
        "authored_data": "2021 Dec 26 16:57",
        "commit.message": "Revert \"Use diamond notation.\"\n\nThis reverts commit 7215001ea83024b8211b2be3d4619992bbd476d8.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "7215001ea83024b8211b2be3d4619992bbd476d8",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        47
                    ]
                }
            }
        }
    },
    "7215001ea83024b8211b2be3d4619992bbd476d8": {
        "authored_data": "2021 Dec 26 16:55",
        "commit.message": "Use diamond notation.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "03092cf2a90cfe101d5ae8848a6137498b228bdd",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#Coders', None)": [
                        47
                    ]
                }
            }
        }
    },
    "15c98d555e1a28ea37ba2f63a75901b18b654e27": {
        "authored_data": "2021 Dec 26 16:13",
        "commit.message": "Javadoc.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "6c297c1117e7fc1a4cbcd3dcae079101b71e01b1",
        "changes": {
            "src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java": {
                "old": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        44
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        44,
                        45
                    ]
                }
            }
        }
    },
    "6c297c1117e7fc1a4cbcd3dcae079101b71e01b1": {
        "authored_data": "2021 Dec 26 16:12",
        "commit.message": "Documentation nits (#217)\n\n* whitespace improvement\r\n\r\ntabs to spaces and reduce padding for consistency with other structures documentation.\r\n\r\n* site minor improvements\r\n\r\nformatting (CDATA vs. entities for consistency; few keywords as code); move Git to top as it's the most up-to-date; fix Git case as it's not an acronym\r\n\r\n* spelling and grammar check\r\n\r\ntypos, grammar and a missing reference to version 1.21\r\n\r\n* site spelling check\r\n\r\noverall spelling check on the site-specific files.\r\n\r\n* address review comment by PeterAlfredLee",
        "commit.author.name": "Helder Magalh\u00e3es",
        "pcid": "c9431e06a61bb26b777af4c0e57d9929e0333c06",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "(None, None)": [
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156
                    ]
                },
                "new": {
                    "(None, None)": [
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156
                    ]
                }
            }
        }
    },
    "c9431e06a61bb26b777af4c0e57d9929e0333c06": {
        "authored_data": "2021 Dec 26 16:02",
        "commit.message": "COMPRESS-602 - Migrate zip package to use NIO #236\n\nUpdate GitHub patch #236 from Postelnicu George with all of my comments\nfrom today addressed which was simpler than going round and round and\nre-reviewing a large PR.\n\nCredit is in changes.xml.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "8e5c2c544e40a3c6ad46c30d447741c2831bea73",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        70
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File)')": [
                        189
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File,int)')": [
                        201
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File)')": [
                        190
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', None)": [
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'pathBased(Path)')": [
                        200,
                        201
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'fileBased(File,int)')": [
                        213
                    ],
                    "('org.apache.commons.compress.archivers.zip#ScatterZipOutputStream', 'pathBased(Path,int)')": [
                        224,
                        225
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        369
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376,
                        377,
                        378,
                        379,
                        380,
                        381,
                        382,
                        383,
                        384,
                        385,
                        386,
                        387,
                        389,
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'getBytesWritten')": [
                        547,
                        548
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        185,
                        199,
                        213,
                        230
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFile', None)": [
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        196,
                        210,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        34,
                        56,
                        64,
                        67,
                        68
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'finish')": [
                        152,
                        153,
                        155,
                        156,
                        157
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        167,
                        171,
                        172,
                        173,
                        179
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'createNewSplitSegmentFile(Integer)')": [
                        218,
                        220,
                        228,
                        229,
                        230
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27,
                        28
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', None)": [
                        37,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        80
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'finish')": [
                        164,
                        166
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'openNewSplitSegment')": [
                        176,
                        180,
                        186
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitOutputStream', 'createNewSplitSegmentFile(Integer)')": [
                        225,
                        227,
                        235,
                        236,
                        237,
                        238
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        158,
                        163,
                        164,
                        165,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        197,
                        198
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        221,
                        225,
                        226,
                        227
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        228,
                        229,
                        230,
                        233,
                        234,
                        235
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        39,
                        40
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', None)": [
                        51,
                        52,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        286,
                        287,
                        288,
                        290,
                        292,
                        293,
                        294
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(File)')": [
                        163
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'buildFromLastSplitSegment(Path)')": [
                        175,
                        176,
                        181,
                        182,
                        183,
                        184,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        211,
                        212,
                        213,
                        214,
                        215,
                        216
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forPaths(Path)')": [
                        230,
                        232,
                        233
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forFiles(File,Iterable)')": [
                        256,
                        258,
                        259,
                        260,
                        261
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipSplitReadOnlySeekableByteChannel', 'forPaths(Path,Iterable)')": [
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        283,
                        284,
                        285
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java": {
                "old": {
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        33,
                        34,
                        40,
                        55
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'getInputStream')": [
                        51
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'closeForWriting')": [
                        58
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'writeOut(byte,int,int)')": [
                        65
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'close')": [
                        73,
                        74
                    ],
                    "(None, None)": [
                        75
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', None)": [
                        35,
                        36,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        52
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'getInputStream')": [
                        63
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'closeForWriting')": [
                        69
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'writeOut(byte,int,int)')": [
                        76
                    ],
                    "('org.apache.commons.compress.parallel#FileBasedScatterGatherBackingStore', 'close')": [
                        84
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/FileNameUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FileNameUtils', None)": [
                        30,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getExtension(String)')": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getBaseName(String)')": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'fileNameToBaseName(String)')": [
                        30,
                        31,
                        32
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', None)": [
                        33,
                        34,
                        38,
                        39,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        90,
                        91,
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'fileNameToExtension(String)')": [
                        35,
                        36,
                        37
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getBaseName(Path)')": [
                        50,
                        51,
                        52,
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getBaseName(String)')": [
                        68,
                        69,
                        70,
                        71,
                        72
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getExtension(Path)')": [
                        85,
                        86,
                        87,
                        88,
                        89
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtils', 'getExtension(String)')": [
                        107
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel.java": {
                "old": {
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        245,
                        246
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', None)": [
                        48,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'forFiles(File)')": [
                        246,
                        247,
                        248,
                        249,
                        250,
                        251
                    ],
                    "('org.apache.commons.compress.utils#MultiReadOnlySeekableByteChannel', 'forPaths(Path)')": [
                        265,
                        267,
                        268
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/FileNameUtilsTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getExtensionBaseCases')": [
                        29
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getExtensionCornerCases')": [
                        35,
                        36
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getBaseNameBaseCases')": [
                        42,
                        43,
                        44
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', None)": [
                        45,
                        46,
                        47
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getBaseNameCornerCases')": [
                        48,
                        49,
                        50,
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25,
                        26,
                        27
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getBaseNameStringBaseCases')": [
                        32,
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', None)": [
                        35,
                        36,
                        37,
                        41,
                        42,
                        43,
                        48,
                        49,
                        50,
                        55,
                        56,
                        57,
                        67,
                        68,
                        69
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getBaseNamePathBaseCases')": [
                        38,
                        39,
                        40
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getBaseNameStringCornerCases')": [
                        44,
                        45,
                        46,
                        47
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getBaseNamePathCornerCases')": [
                        51,
                        52,
                        53,
                        54
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getExtensionStringBaseCases')": [
                        58
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getExtensionPathBaseCases')": [
                        64,
                        65,
                        66
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getExtensionStringCornerCases')": [
                        70,
                        71
                    ],
                    "('org.apache.commons.compress.utils#FileNameUtilsTest', 'getExtensionPathCornerCases')": [
                        77,
                        78,
                        79,
                        80
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ZipSplitReadOnlySeekableByteChannelTest.java": {
                "new": {
                    "(None, None)": [
                        31,
                        38,
                        209
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', None)": [
                        183,
                        184,
                        187,
                        188,
                        189,
                        192,
                        193,
                        194
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forPathsThrowsOnNullArg')": [
                        185,
                        186
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forPathsOfTwoParametersThrowsOnNullArg')": [
                        190,
                        191
                    ],
                    "('org.apache.commons.compress.utils#ZipSplitReadOnlySeekableByteChannelTest', 'forPathsReturnCorrectClass')": [
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208
                    ]
                }
            }
        }
    }
}