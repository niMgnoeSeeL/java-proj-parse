{
    "932fbdbfaf1604e24d2f95028e187c8eea23a7f7": {
        "authored_data": "2020 Jun 04 19:52",
        "commit.message": "remove unused imports.\n",
        "commit.author.name": "XenoAmess",
        "pcid": "18fb261d0bbbb8cc52483267213e0d2ef4c43de7",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "(None, None)": [
                        45
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "(None, None)": [
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "old": {
                    "(None, None)": [
                        21,
                        25,
                        26
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "(None, None)": [
                        36
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java": {
                "old": {
                    "(None, None)": [
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "(None, None)": [
                        21
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/examples/ParameterizedExpanderTest.java": {
                "old": {
                    "(None, None)": [
                        35
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java": {
                "old": {
                    "(None, None)": [
                        25
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "(None, None)": [
                        48
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "(None, None)": [
                        32
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java": {
                "old": {
                    "(None, None)": [
                        28,
                        32
                    ]
                }
            }
        }
    },
    "1cdf4eda2273473a9e046d0f0f9e3a984fedb63a": {
        "authored_data": "2020 Jun 04 19:50",
        "commit.message": "use System.currentTimeMillis instead of new Date().getTime\n",
        "commit.author.name": "XenoAmess",
        "pcid": "18fb261d0bbbb8cc52483267213e0d2ef4c43de7",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        297
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        297
                    ]
                }
            }
        }
    },
    "774f6b41a46fd7ddd2196687115569729646a67a": {
        "authored_data": "2020 Jun 04 19:46",
        "commit.message": "unitized array styles.\n",
        "commit.author.name": "XenoAmess",
        "pcid": "18fb261d0bbbb8cc52483267213e0d2ef4c43de7",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readBinaryLong(int,boolean)')": [
                        358
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readAsciiLong(int,int)')": [
                        365
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readCString(int)')": [
                        483
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', None)": [
                        78
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readBinaryLong(int,boolean)')": [
                        358
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readAsciiLong(int,int)')": [
                        365
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'readCString(int)')": [
                        483
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'pad(int)')": [
                        503
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeBinaryLong(long,int,boolean)')": [
                        511
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'pad(int)')": [
                        503
                    ],
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveOutputStream', 'writeBinaryLong(long,int,boolean)')": [
                        511
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'byteArray2long(byte,boolean)')": [
                        53
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioUtil', 'byteArray2long(byte,boolean)')": [
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFolder(ByteBuffer)')": [
                        884
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFolder(ByteBuffer)')": [
                        884
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', None)": [
                        263,
                        264,
                        267,
                        268,
                        271,
                        272
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#X0017_StrongEncryptionHeader', None)": [
                        263,
                        264,
                        267,
                        268,
                        271,
                        272
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#CRC', None)": [
                        27
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#CRC', None)": [
                        27
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundEncoding')": [
                        221
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkName(String)')": [
                        227
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testRoundEncoding')": [
                        221
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'checkName(String)')": [
                        227
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'copyOfRange(byte,int,int)')": [
                        116
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#PythonTruncatedBzip2Test', 'copyOfRange(byte,int,int)')": [
                        116
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/FixedLengthBlockOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteSingleBytes')": [
                        68
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testMultiWriteBuf')": [
                        95
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testBuf(int,String)')": [
                        231
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testWriteSingleBytes')": [
                        68
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testMultiWriteBuf')": [
                        95
                    ],
                    "('org.apache.commons.compress.utils#FixedLengthBlockOutputStreamTest', 'testBuf(int,String)')": [
                        231
                    ]
                }
            }
        }
    },
    "183816382a376ed22f37204eec6caaa5622a100b": {
        "authored_data": "2020 Jun 04 19:43",
        "commit.message": "remove `== null` as it is covered by `instance of`\n",
        "commit.author.name": "XenoAmess",
        "pcid": "18fb261d0bbbb8cc52483267213e0d2ef4c43de7",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'equals(Object)')": [
                        215
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipEightByteInteger', 'equals(Object)')": [
                        215
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'equals(Object)')": [
                        187
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipLong', 'equals(Object)')": [
                        187
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'equals(Object)')": [
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipShort', 'equals(Object)')": [
                        132
                    ]
                }
            }
        }
    },
    "a1e0be725078e679776e6d56e20f810c9a7c8a4e": {
        "authored_data": "2020 Jun 03 11:27",
        "commit.message": "maybe we can make it static\nHi.\nCan we add a static here?\n",
        "commit.author.name": "XenoAmess",
        "pcid": "f333bc647c860375cc4e9999da10b2c3c8d4d57f",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        256
                    ]
                }
            }
        }
    },
    "204faf58f69386d1b6f8d0410dcf2667d6d08051": {
        "authored_data": "2020 Jun 03 11:24",
        "commit.message": "maybe we can add a break here\nHi.\nCan we add a break here?\nAlso, should we try implement a data structure or something for doing this? a loop like this sounds slow.\nIf you don't mind I will give it a try several hours later (if I still have some time).\n",
        "commit.author.name": "XenoAmess",
        "pcid": "f333bc647c860375cc4e9999da10b2c3c8d4d57f",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorOutputStream', 'sendMTFValues4')": [
                        978
                    ]
                }
            }
        }
    },
    "243bfff8cace2a29e32b0622ae205b6b66c07616": {
        "authored_data": "2020 Jun 03 07:31",
        "commit.message": "use StandardCharsets.\nIn most cases using StandardCharsets is faster.\nYou can get more information at `decode(String charsetName, byte[] ba, int off, int len)`` and `decode(Charset cs, byte[] ba, int off, int len)` in class java.lang.StringCoding\n",
        "commit.author.name": "XenoAmess",
        "pcid": "04abbdf3b7e78e9fd4ba5c46e22f0472a7974ad6",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(String)')": [
                        126
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'write(String)')": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        985
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readFilesInfo(ByteBuffer,Archive)')": [
                        985
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileNames(DataOutput)')": [
                        576
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFile', 'writeFileNames(DataOutput)')": [
                        577
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        727
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'parsePaxHeaders(InputStream,List)')": [
                        728
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'encodeExtendedPaxHeadersContents(Map)')": [
                        497,
                        506,
                        510
                    ]
                },
                "new": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', 'encodeExtendedPaxHeadersContents(Map)')": [
                        498,
                        507,
                        511
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        56,
                        57,
                        58,
                        59,
                        60
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.archivers.zip#AbstractUnicodeExtraField', None)": [
                        57
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        242,
                        248
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'init(boolean)')": [
                        243,
                        249
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        114,
                        119
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorOutputStream', 'writeHeader(GzipParameters)')": [
                        115,
                        120
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        103,
                        104,
                        105,
                        106,
                        107
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', None)": [
                        108,
                        123,
                        140
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        118,
                        119,
                        120,
                        121,
                        122
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        135,
                        136,
                        137,
                        138,
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'matchAsciiBuffer(String,byte,int,int)')": [
                        76
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiBytes(String)')": [
                        99
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte)')": [
                        109
                    ],
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'toAsciiString(byte,int,int)')": [
                        121
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/TarTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers#TarTestCase', 'testTarArchiveLongNameCreation')": [
                        68
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zDecryptUnarchive')": [
                        155
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractSpecifiedFile')": [
                        436
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessTogetherWithSequentialAccess')": [
                        490,
                        509
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingBackwards')": [
                        556
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingForwards')": [
                        621
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessMultipleReadSameFile')": [
                        661
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(SevenZFile,SevenZMethod)')": [
                        737
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        752
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zDecryptUnarchive')": [
                        155
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractSpecifiedFile')": [
                        436
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessTogetherWithSequentialAccess')": [
                        490,
                        509
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingBackwards')": [
                        556
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessWhenJumpingForwards')": [
                        621
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomAccessMultipleReadSameFile')": [
                        661
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(SevenZFile,SevenZMethod)')": [
                        737
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        752
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readSimplePaxHeader')": [
                        58
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        70
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        82
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        93
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readNonAsciiPaxHeader')": [
                        103,
                        107
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readSimplePaxHeader')": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'secondEntryWinsWhenPaxHeaderContainsDuplicateKey')": [
                        71
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'paxHeaderEntryWithEmptyValueRemovesKey')": [
                        83
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readPaxHeaderWithEmbeddedNewline')": [
                        94
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readNonAsciiPaxHeader')": [
                        104,
                        108
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberPosixMode')": [
                        150
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        171,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        188,
                        191
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        207,
                        210
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNamePosixMode')": [
                        245
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryPosixMode')": [
                        304
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiPathNamePaxHeader')": [
                        347
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiLinkPathNamePaxHeader')": [
                        370
                    ]
                },
                "new": {
                    "(None, None)": [
                        37
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testBigNumberPosixMode')": [
                        151
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        172,
                        173
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        189,
                        192
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        208,
                        211
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteLongFileNamePosixMode')": [
                        246
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testOldEntryPosixMode')": [
                        305
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiPathNamePaxHeader')": [
                        348
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteNonAsciiLinkPathNamePaxHeader')": [
                        371
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctal')": [
                        61
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        96,
                        102,
                        108
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        191
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        198
                    ]
                },
                "new": {
                    "(None, None)": [
                        31,
                        32
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctal')": [
                        63
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testParseOctalInvalid')": [
                        98,
                        104,
                        110
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testNegative')": [
                        193
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarUtilsTest', 'testOverflow')": [
                        200
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'writesDataDescriptorForDeflatedEntryOnUnseekableOutput')": [
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        139
                    ]
                },
                "new": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'writesDataDescriptorForDeflatedEntryOnUnseekableOutput')": [
                        58
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorForDeflatedEntryOnSeekableOutput')": [
                        98
                    ],
                    "('org.apache.commons.compress.archivers.zip#DataDescriptorTest', 'doesntWriteDataDescriptorWhenAddingRawEntries')": [
                        140
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        313,
                        330,
                        348
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        408
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'createTestFile(File,String,boolean,boolean)')": [
                        314,
                        331,
                        349
                    ],
                    "('org.apache.commons.compress.archivers.zip#UTF8ZipFilesTest', 'assertUnicodeName(ZipArchiveEntry,String,String)')": [
                        409
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        493,
                        500,
                        508,
                        515,
                        534,
                        547,
                        561,
                        575
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        896,
                        897
                    ]
                },
                "new": {
                    "(None, None)": [
                        33
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testEntryAlignment')": [
                        494,
                        501,
                        509,
                        516,
                        535,
                        548,
                        562,
                        576
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'assertFileEqualIgnoreEndOfLine(File,File)')": [
                        897,
                        898
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactoryRoundtripTest', 'testCompressorStreamFactoryRoundtrip')": [
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactoryRoundtripTest', 'testCompressorStreamFactoryRoundtrip')": [
                        63
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        315
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', None)": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#LZ77CompressorTest', 'assertLiteralBlock(String,LZ77Compressor)')": [
                        312
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/CharsetsTest.java": {
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.compress.utils#CharsetsTest', 'testToCharset')": [
                        39
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', None)": [
                        38
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadDataFromSetPosition')": [
                        78
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        156
                    ]
                },
                "new": {
                    "(None, None)": [
                        29
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', None)": [
                        39
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldReadDataFromSetPosition')": [
                        79
                    ],
                    "('org.apache.commons.compress.utils#SeekableInMemoryByteChannelTest', 'shouldTruncateContentsProperly')": [
                        157
                    ]
                }
            }
        }
    }
}