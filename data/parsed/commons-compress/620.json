{
    "1c13587ba8e2bf5188c92b07913fdd2b2e17197b": {
        "authored_data": "2020 Aug 08 22:19",
        "commit.message": "- Remove unused imports.\n- Use Java 7 diamonds.\n- Better boolean test.\n- Remove redundant modifiers.\n- Remove redundant ;\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "e0b3b1c7e036c9659c666d4a148d898a66c40579",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/examples/CloseableConsumer.java": {
                "old": {
                    "(None, None)": [
                        37,
                        47
                    ]
                },
                "new": {
                    "(None, None)": [
                        37,
                        47
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        289,
                        304,
                        319,
                        335
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#StreamCompressor', None)": [
                        289,
                        304,
                        319,
                        335
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "(None, None)": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1199,
                        1201,
                        1203,
                        1204
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', 'createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)')": [
                        1198,
                        1200
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', 'isPowerOfTwo(int)')": [
                        346
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#Parameters', 'isPowerOfTwo(int)')": [
                        346
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        99
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#PureJavaCrc32C', 'update(int)')": [
                        99
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ByteUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'checkReadLength(int)')": [
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ByteUtils', 'checkReadLength(int)')": [
                        256
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "(None, None)": [
                        26
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        407
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', None)": [
                        407
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'readFully(SevenZFile)')": [
                        228
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', None)": [
                        228
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        2423
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', None)": [
                        2423
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        369
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadFile')": [
                        399
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadSeekable')": [
                        369
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testConcurrentReadFile')": [
                        399
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/ServiceLoaderIteratorTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testNextThrowsNoSuchElementException')": [
                        41
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testHasNextReturnsFalse')": [
                        52
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testRemoveThrowsUnsupportedOperationException')": [
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testNextThrowsNoSuchElementException')": [
                        41
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testHasNextReturnsFalse')": [
                        52
                    ],
                    "('org.apache.commons.compress.utils#ServiceLoaderIteratorTest', 'testRemoveThrowsUnsupportedOperationException')": [
                        64
                    ]
                }
            }
        }
    },
    "e0b3b1c7e036c9659c666d4a148d898a66c40579": {
        "authored_data": "2020 Aug 08 22:09",
        "commit.message": "Remove trailing whitespace.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "f3afb6e6e6e32ac47a1760e52e639310eb7bc688",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', None)": [
                        230
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', None)": [
                        230
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        240
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveEntry', None)": [
                        240
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        561
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStream', None)": [
                        561
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        248,
                        263
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveEntry', None)": [
                        248,
                        263
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        1788
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveOutputStream', None)": [
                        1788
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        32
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        32
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        261
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#LZ77Compressor', None)": [
                        261
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/IOUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#IOUtils', None)": [
                        43
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#IOUtils', None)": [
                        43
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', None)": [
                        65
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', None)": [
                        41,
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStreamTest', None)": [
                        41,
                        42
                    ]
                }
            }
        }
    }
}