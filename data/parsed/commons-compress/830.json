{
    "3db0879aabbafb815a6c5a2552d0e65e8c9d482c": {
        "authored_data": "2019 Oct 21 08:24",
        "commit.message": "add testcases for random access in 7z\n",
        "commit.author.name": "LeeYoung624",
        "pcid": "b0dcbac737fc2ba7357272e5bfb0c4e93f80dd0c",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getInputStream(SevenZArchiveEntry)')": [
                        1212,
                        1213,
                        1214,
                        1215
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23,
                        24,
                        25
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        39,
                        41
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', None)": [
                        46,
                        47,
                        48,
                        400,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        437,
                        438,
                        439,
                        440
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractSpecifiedFile')": [
                        401,
                        402,
                        403,
                        404,
                        405,
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423,
                        424
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'extractNonExistSpecifiedFile')": [
                        431,
                        432,
                        433,
                        434,
                        435,
                        436
                    ]
                }
            }
        }
    },
    "b0dcbac737fc2ba7357272e5bfb0c4e93f80dd0c": {
        "authored_data": "2019 Oct 21 07:36",
        "commit.message": "add random access for 7z in SevenZFile\n",
        "commit.author.name": "LeeYoung624",
        "pcid": "205876d6f9eb60ac31f3ec848b23d025f32995ab",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'getInputStream(SevenZArchiveEntry)')": [
                        1211,
                        1212,
                        1213,
                        1214,
                        1215,
                        1216,
                        1217,
                        1218,
                        1219,
                        1220,
                        1221,
                        1222,
                        1223,
                        1224,
                        1225,
                        1226,
                        1227,
                        1228,
                        1229,
                        1230,
                        1231,
                        1232,
                        1233,
                        1234,
                        1235,
                        1236,
                        1237,
                        1238,
                        1239,
                        1240,
                        1241,
                        1242,
                        1243,
                        1244,
                        1245,
                        1246,
                        1247,
                        1248
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', None)": [
                        1249,
                        1250
                    ]
                }
            }
        }
    },
    "205876d6f9eb60ac31f3ec848b23d025f32995ab": {
        "authored_data": "2019 Oct 12 10:29",
        "commit.message": "COMPRESS-495 remove vulnerable and obsolete 7z extraction example\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "26b78cecfc1ca0e5daf03109b2c441f960bde678",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', None)": [
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'usage')": [
                        137
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#CLI', 'usage')": [
                        99
                    ]
                }
            }
        }
    },
    "9eeea3f3c0b4abbdb357200d0f3ba8e4863545e7": {
        "authored_data": "2019 Sep 01 14:09",
        "commit.message": "COMPRESS-491 avoid returning 0 from read in Deflat64 input stream\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "fbaba0eab63bae94c865e6ba91295b79c8e8cbc1",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        152
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', 'decode(byte,int,int)')": [
                        152,
                        153,
                        154,
                        155
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoderTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoderTest', 'decodeFixedHuffmanBlockWithMemoryLookupInExactBuffer')": [
                        217,
                        218,
                        219
                    ]
                }
            }
        }
    },
    "fbaba0eab63bae94c865e6ba91295b79c8e8cbc1": {
        "authored_data": "2019 Sep 01 12:54",
        "commit.message": "non-blocking ReadableByteChannels may return 0 on read\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "5eb6b35d4e31a4468d34164ad7f971807188cb3e",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', None)": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ]
                }
            }
        }
    },
    "5eb6b35d4e31a4468d34164ad7f971807188cb3e": {
        "authored_data": "2019 Sep 01 12:54",
        "commit.message": "the if the comment is talking about has gone a while ago\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "2488a44faec06a91ae52652407fb0a881ed217d2",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        328,
                        329,
                        330
                    ]
                }
            }
        }
    },
    "2488a44faec06a91ae52652407fb0a881ed217d2": {
        "authored_data": "2019 Aug 31 13:15",
        "commit.message": "COMPRESS-491 overlooked the code was already checking for 0 len\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d3a0a309d902e3639654731e07ccfb51fed9688a",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        306,
                        307,
                        308
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        157,
                        158,
                        159
                    ]
                }
            }
        }
    },
    "d3a0a309d902e3639654731e07ccfb51fed9688a": {
        "authored_data": "2019 Aug 31 12:18",
        "commit.message": "COMPRESS-491 InputStream contract says \"return 0 if length is 0, don't try to read\"\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "277d6a0c2820548fd97748ec6aff92ceceb1fd35",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveInputStream', 'read(byte,int,int)')": [
                        260,
                        261,
                        262
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.arj#ArjArchiveInputStream', 'read(byte,int,int)')": [
                        348,
                        349,
                        350
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'read(byte,int,int)')": [
                        306,
                        307,
                        308
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStream', 'read(byte,int,int)')": [
                        468,
                        469,
                        470
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        123,
                        124,
                        125
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#BoundedSeekableByteChannelInputStream', 'read(byte,int,int)')": [
                        57,
                        58,
                        59
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'buildDecoderStack(Folder,long,int,SevenZArchiveEntry)')": [
                        1143,
                        1144,
                        1145
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'read(byte,int,int)')": [
                        1234,
                        1235,
                        1236
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStream', 'read(byte,int,int)')": [
                        627,
                        628,
                        629
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', 'read(byte,int,int)')": [
                        431,
                        432,
                        433
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStream', None)": [
                        1262,
                        1263,
                        1264
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'read(byte,int,int)')": [
                        157,
                        158,
                        159
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStream', 'read(byte,int,int)')": [
                        83,
                        84,
                        85
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', None)": [
                        75
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', None)": [
                        75
                    ],
                    "('org.apache.commons.compress.compressors.deflate64#Deflate64CompressorInputStream', 'read(byte,int,int)')": [
                        79,
                        80,
                        81
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/deflate64/HuffmanDecoder.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.deflate64#HuffmanDecoder', None)": [
                        217,
                        218,
                        219,
                        261,
                        262,
                        263,
                        301,
                        302,
                        303
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.gzip#GzipCompressorInputStream', 'read(byte,int,int)')": [
                        289,
                        290,
                        291
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'read(byte,int,int)')": [
                        64,
                        65,
                        66
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'read(byte,int,int)')": [
                        142,
                        143,
                        144
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'read(byte,int,int)')": [
                        75,
                        76,
                        77
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'read(byte,int,int)')": [
                        164,
                        165,
                        166
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'read(byte,int,int)')": [
                        94,
                        95,
                        96
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.xz#XZCompressorInputStream', 'read(byte,int,int)')": [
                        152,
                        153,
                        154
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.zstandard#ZstdCompressorInputStream', 'read(byte,int,int)')": [
                        85,
                        86,
                        87
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.utils#BoundedInputStream', 'read(byte,int,int)')": [
                        54,
                        55,
                        56
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumCalculatingInputStream', 'read(byte,int,int)')": [
                        81,
                        82,
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.utils#ChecksumVerifyingInputStream', 'read(byte,int,int)')": [
                        85,
                        86,
                        87
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/CountingInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.utils#CountingInputStream', 'read(byte,int,int)')": [
                        51,
                        52,
                        53
                    ]
                }
            }
        }
    }
}