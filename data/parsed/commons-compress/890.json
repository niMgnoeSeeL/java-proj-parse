{
    "91c2f0df50e86c65131cf9b83f1cba2e10c9786f": {
        "authored_data": "2019 May 12 12:29",
        "commit.message": "COMPRESS-486 deal with resouce leaks in example code\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "317bd054a7a843405b24a90f312cb72251a05919",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/examples/Archiver.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,File,File)')": [
                        74,
                        79
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        94,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        110
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,OutputStream,File)')": [
                        96
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,SeekableByteChannel,File)')": [
                        114,
                        116,
                        118
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,File,File)')": [
                        74,
                        79
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', None)": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        99,
                        100,
                        101,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        150,
                        151,
                        152,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        191
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,OutputStream,File)')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,OutputStream,File,CloseableConsumer)')": [
                        126,
                        127,
                        128,
                        129,
                        130
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,SeekableByteChannel,File)')": [
                        155
                    ],
                    "('org.apache.commons.compress.archivers.examples#Archiver', 'create(String,SeekableByteChannel,File,CloseableConsumer)')": [
                        178,
                        179,
                        180,
                        181,
                        183,
                        185,
                        187
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/examples/Expander.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,File,File)')": [
                        87,
                        92
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', None)": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(InputStream,File)')": [
                        107
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,InputStream,File)')": [
                        122
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File)')": [
                        138,
                        140,
                        142
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,File,File)')": [
                        87,
                        92
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', None)": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        244
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(InputStream,File)')": [
                        114
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(InputStream,File,CloseableConsumer)')": [
                        135,
                        136,
                        137,
                        138,
                        139
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,InputStream,File)')": [
                        162
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,InputStream,File,CloseableConsumer)')": [
                        183,
                        184,
                        185,
                        186,
                        187
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File)')": [
                        210
                    ],
                    "('org.apache.commons.compress.archivers.examples#Expander', 'expand(String,SeekableByteChannel,File,CloseableConsumer)')": [
                        231,
                        232,
                        233,
                        234,
                        236,
                        238,
                        240
                    ]
                }
            }
        }
    },
    "317bd054a7a843405b24a90f312cb72251a05919": {
        "authored_data": "2019 Aug 08 17:11",
        "commit.message": "Gary says exception messages should start with a capitalized word\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "d50308367fa7238c20b9db63469000aa2906d18f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        138,
                        152,
                        159,
                        166,
                        173,
                        182
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'putArchiveEntry(ArchiveEntry)')": [
                        97
                    ],
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStream', 'writeEntryHeader(ArArchiveEntry)')": [
                        138,
                        152,
                        159,
                        166,
                        173,
                        182
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        169
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read')": [
                        103
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'read(byte,int,int)')": [
                        119
                    ],
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        169
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'readSizes')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'initializeBackReference')": [
                        143,
                        148
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'readSizes')": [
                        104
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'initializeBackReference')": [
                        143,
                        148
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        255
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        361
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        255
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        361
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        254,
                        261
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        304
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        254,
                        261
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        304
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill')": [
                        140,
                        160,
                        173,
                        190,
                        199,
                        215,
                        224
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill')": [
                        140,
                        160,
                        173,
                        190,
                        199,
                        215,
                        224
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        42
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesCauseExceptionByDefault')": [
                        42
                    ]
                }
            }
        }
    },
    "d50308367fa7238c20b9db63469000aa2906d18f": {
        "authored_data": "2019 Aug 08 16:56",
        "commit.message": "not really COMPRESS-490 - throw on negative sizes read from stream\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "66356617415d2642a50ebd0c73f376fa621ab87d",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        356
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'nextBlock')": [
                        254,
                        255,
                        256
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'skipSkippableFrame(byte)')": [
                        359,
                        360,
                        361,
                        362
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', None)": [
                        123,
                        130,
                        131,
                        132
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        253,
                        254,
                        255,
                        260,
                        261,
                        262
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'skipBlock')": [
                        303,
                        304,
                        305
                    ]
                }
            }
        }
    },
    "66356617415d2642a50ebd0c73f376fa621ab87d": {
        "authored_data": "2019 Aug 08 16:30",
        "commit.message": "COMPRESS-490 add unit tests, thanks to Alex Rebert\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "58364058bd2903ebd1568f6df22161e142a0dc86",
        "changes": {
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "new": {
                    "(None, None)": [
                        35,
                        37,
                        671,
                        672,
                        673
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', None)": [
                        41,
                        42,
                        43,
                        627,
                        630,
                        631,
                        632,
                        635,
                        636,
                        637,
                        640,
                        641,
                        665
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'backreferenceOfSize0CausesIOException')": [
                        628,
                        629
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'backreferenceAtStartCausesIOException')": [
                        633,
                        634
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'backreferenceWithOffsetTooBigCausesIOException')": [
                        638,
                        639
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'expectIOException(String)')": [
                        666,
                        667,
                        668,
                        669,
                        670
                    ]
                }
            }
        }
    },
    "58364058bd2903ebd1568f6df22161e142a0dc86": {
        "authored_data": "2019 Aug 08 16:28",
        "commit.message": "COMPRESS-490 throw IOException for certain malformed archives\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "1f4ae17ba0753bd9fa1ec0c188c579b52ba19ba5",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'initializeBackReference')": [
                        139
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'readSizes')": [
                        103,
                        104,
                        105
                    ],
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorInputStream', 'initializeBackReference')": [
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'tryToReadLiteral(int)')": [
                        237
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', None)": [
                        133,
                        137,
                        138,
                        139,
                        208,
                        235,
                        236,
                        237,
                        238,
                        286,
                        287,
                        288,
                        309,
                        310,
                        311,
                        312
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'startLiteral(long)')": [
                        211,
                        212,
                        213
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'tryToReadLiteral(int)')": [
                        249
                    ],
                    "('org.apache.commons.compress.compressors.lz77support#AbstractLZ77CompressorInputStream', 'startBackReference(int,long)')": [
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill')": [
                        163,
                        182,
                        200
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', None)": [
                        81
                    ],
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorInputStream', 'fill')": [
                        139,
                        140,
                        141,
                        159,
                        160,
                        161,
                        170,
                        171,
                        172,
                        173,
                        174,
                        189,
                        190,
                        191,
                        196,
                        197,
                        198,
                        199,
                        200,
                        214,
                        215,
                        216,
                        221,
                        222,
                        223,
                        224,
                        225
                    ]
                }
            }
        }
    },
    "e2175822cbc0d13ed1f17fd0be2ac790bf7f93c9": {
        "authored_data": "2019 May 11 22:50",
        "commit.message": "Substituting 'synchronized' with faster and fully thread-safe collections 'ConcurrentLinkedDeque' and iterators.\n",
        "commit.author.name": "tibordigana",
        "pcid": "b0777e826e28df7a7f61a7a1ae27011e6427bd7e",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java": {
                "old": {
                    "(None, None)": [
                        27,
                        28,
                        38,
                        291,
                        292,
                        293
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        55,
                        58
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'closeAll')": [
                        287,
                        288,
                        289,
                        290
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        29,
                        286,
                        287
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', None)": [
                        54,
                        57
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'writeTo(ZipArchiveOutputStream)')": [
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreator', 'closeAll')": [
                        283,
                        284,
                        285
                    ]
                }
            }
        }
    }
}