{
    "d40b05aee433424281114f921ad501940d2890db": {
        "authored_data": "2017 May 02 23:25",
        "commit.message": "[COMPRESS-392] Add Brotli decoder based on the Google Brotli library.\nFix @since tag.",
        "commit.author.name": "Gary Gregory",
        "pcid": "69e53a402cdca4de155f087cf7f02d461db3de36",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        104
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        104
                    ]
                }
            }
        }
    },
    "4cc3f6e7dbee9e3684884780af82822485c4c7c2": {
        "authored_data": "2017 May 02 19:25",
        "commit.message": "[COMPRESS-392] Add Brotli decoder based on the Google Brotli library.\nUse final.",
        "commit.author.name": "Gary Gregory",
        "pcid": "3856d3f0a0826be3ccc6b160e740d5c7176df743",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', None)": [
                        34,
                        36
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'read(byte)')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'equals(Object)')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'skip(long)')": [
                        91
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'mark(int)')": [
                        100
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'read(byte,int,int)')": [
                        123
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', None)": [
                        34,
                        36
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'read(byte)')": [
                        70
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'equals(Object)')": [
                        80
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'skip(long)')": [
                        91
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'mark(int)')": [
                        100
                    ],
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', 'read(byte,int,int)')": [
                        123
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliDecode')": [
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStreamTest', 'testBrotliDecode')": [
                        49
                    ]
                }
            }
        }
    },
    "3856d3f0a0826be3ccc6b160e740d5c7176df743": {
        "authored_data": "2017 May 02 19:24",
        "commit.message": "[COMPRESS-392] Add Brotli decoder based on the Google Brotli library.\nAdd missing '@Override' annotations",
        "commit.author.name": "Gary Gregory",
        "pcid": "22fe7f3c8b3fa204c2406c3d15811b2581e1b7b5",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.brotli#BrotliCompressorInputStream', None)": [
                        45,
                        54,
                        63,
                        79,
                        90,
                        99,
                        108,
                        133,
                        142
                    ]
                }
            }
        }
    },
    "a793612b9e09795feb253aab9a738bd1f7280700": {
        "authored_data": "2017 May 02 19:22",
        "commit.message": "[COMPRESS-392] Add Brotli decoder based on the Google Brotli library.",
        "commit.author.name": "Philippe Mouawad",
        "pcid": "932d4f89922e96fb1b89ba220d124db187ab7741",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'getInputStreamCompressorNames')": [
                        680
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        35
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', None)": [
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        277,
                        278
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'getBrotli')": [
                        279,
                        280
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'createCompressorInputStream(String,InputStream,boolean)')": [
                        543,
                        544,
                        545,
                        546,
                        547,
                        548,
                        549
                    ],
                    "('org.apache.commons.compress.compressors#CompressorStreamFactory', 'getInputStreamCompressorNames')": [
                        703
                    ]
                }
            }
        }
    },
    "932d4f89922e96fb1b89ba220d124db187ab7741": {
        "authored_data": "2017 May 02 07:06",
        "commit.message": "Unnecessary casts.",
        "commit.author.name": "Gary Gregory",
        "pcid": "d681042e60a3a1e92f4c891ce9dcffd672868e7f",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        185
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#TapeInputStream', 'skip(long)')": [
                        185
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetInt(BitInputStream)')": [
                        399
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        615,
                        669,
                        672
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode0(int)')": [
                        689
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'bsGetInt(BitInputStream)')": [
                        399
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode')": [
                        615,
                        669,
                        672
                    ],
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStream', 'getAndMoveToFrontDecode0(int)')": [
                        689
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        217
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readFrameDescriptor')": [
                        217
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'initializeTables(int,int)')": [
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lzw#LZWInputStream', 'initializeTables(int,int)')": [
                        132
                    ]
                }
            }
        }
    },
    "d681042e60a3a1e92f4c891ce9dcffd672868e7f": {
        "authored_data": "2017 May 02 07:03",
        "commit.message": "Add missing '@Override' annotations.",
        "commit.author.name": "Gary Gregory",
        "pcid": "6ae55beb2d28bd6cf36780b4c58da41854dc8248",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#BlockLZ4CompressorOutputStream', None)": [
                        118
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#SnappyCompressorOutputStream', None)": [
                        103
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedTrue')": [
                        99
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithDecompressConcatenatedFalse')": [
                        109
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4WithoutExplicitDecompressConcatenated')": [
                        119
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue')": [
                        142
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse')": [
                        153
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStreamTest', 'readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated')": [
                        164
                    ]
                }
            }
        }
    },
    "6ae55beb2d28bd6cf36780b4c58da41854dc8248": {
        "authored_data": "2017 May 02 07:01",
        "commit.message": "No need to nest in an else block.",
        "commit.author.name": "Gary Gregory",
        "pcid": "9a92b8526cd13e092b5185a59c7ff0f68a1ad56e",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readOnce(byte,int,int)')": [
                        311,
                        312,
                        313,
                        314,
                        315,
                        316
                    ],
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', None)": [
                        317
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.lz4#FramedLZ4CompressorInputStream', 'readOnce(byte,int,int)')": [
                        311,
                        312,
                        313,
                        314,
                        315,
                        316
                    ]
                }
            }
        }
    },
    "9a92b8526cd13e092b5185a59c7ff0f68a1ad56e": {
        "authored_data": "2017 May 02 07:01",
        "commit.message": "No need to nest in an else block.",
        "commit.author.name": "Gary Gregory",
        "pcid": "badc9868ce38096c757f385891b8638324adaf63",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        91,
                        92,
                        93,
                        94,
                        95,
                        97,
                        99,
                        100
                    ]
                }
            }
        }
    }
}