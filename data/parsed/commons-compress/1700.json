{
    "e71827b5db22d81e0b009f3e205173ce643d2e8e": {
        "authored_data": "2016 Sep 05 18:41",
        "commit.message": "Use try with resources.",
        "commit.author.name": "Gary Gregory",
        "pcid": "159d9c646d598edde1dbf2e20bb3879abaea7694",
        "changes": {
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfANegativeAmountOfBits')": [
                        33,
                        34,
                        35
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfMoreThan63BitsAtATime')": [
                        40,
                        41,
                        42
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInLittleEndian')": [
                        47,
                        48,
                        49
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInBigEndian')": [
                        54,
                        55,
                        56
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInLittleEndian')": [
                        61,
                        62,
                        63
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInBigEndian')": [
                        68,
                        69,
                        70,
                        71
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInLittleEndian')": [
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInBigEndian')": [
                        83,
                        84,
                        85,
                        86
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInLittleEndian')": [
                        91,
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInBigEndian')": [
                        98,
                        99,
                        100,
                        101
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testClearBitCache')": [
                        106,
                        107,
                        108,
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testEOF')": [
                        115,
                        116,
                        117,
                        118
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfANegativeAmountOfBits')": [
                        33,
                        34
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', None)": [
                        35,
                        42,
                        49,
                        56,
                        63,
                        71,
                        78,
                        86,
                        93,
                        101,
                        110,
                        118,
                        146,
                        171
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'shouldNotAllowReadingOfMoreThan63BitsAtATime')": [
                        40,
                        41
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInLittleEndian')": [
                        47,
                        48
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading24BitsInBigEndian')": [
                        54,
                        55
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInLittleEndian')": [
                        61,
                        62
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading17BitsInBigEndian')": [
                        68,
                        69,
                        70
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInLittleEndian')": [
                        76,
                        77
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading30BitsInBigEndian')": [
                        83,
                        84,
                        85
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInLittleEndian')": [
                        91,
                        92
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testReading31BitsInBigEndian')": [
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testClearBitCache')": [
                        106,
                        107,
                        108,
                        109
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'testEOF')": [
                        115,
                        116,
                        117
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170
                    ]
                }
            }
        }
    },
    "159d9c646d598edde1dbf2e20bb3879abaea7694": {
        "authored_data": "2016 Sep 05 17:48",
        "commit.message": "Avoid unclosed stream warnings",
        "commit.author.name": "Sebb",
        "pcid": "52dd5908e374973d69c51856b74d4d93d591c90a",
        "changes": {
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        146
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        171
                    ]
                }
            }
        }
    },
    "52dd5908e374973d69c51856b74d4d93d591c90a": {
        "authored_data": "2016 Jul 01 19:37",
        "commit.message": "COMPRESS-363 properly handle overflow inside BitInputStream\n",
        "commit.author.name": "Stefan Bodewig",
        "pcid": "32c30f6f072ccfea6ead90f8eef0c205d88d00d3",
        "changes": {
            "src/main/java/org/apache/commons/compress/utils/BitInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        85,
                        100,
                        101,
                        102,
                        104,
                        106
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStream', 'readBits(int)')": [
                        85,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        131,
                        132,
                        133
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java": {
                "new": {
                    "('org.apache.commons.compress.utils#BitInputStreamTest', None)": [
                        121,
                        122,
                        123,
                        124,
                        146,
                        147,
                        148,
                        170,
                        171
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'littleEndianWithOverflow')": [
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.utils#BitInputStreamTest', 'bigEndianWithOverflow')": [
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169
                    ]
                }
            }
        }
    },
    "32c30f6f072ccfea6ead90f8eef0c205d88d00d3": {
        "authored_data": "2016 Jun 27 08:02",
        "commit.message": "More java7 language features\n",
        "commit.author.name": "Kristian Rosenvold",
        "pcid": "77388c82c0f484ebf11b5f3292f0103514fd00f1",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.cpio#CpioArchiveInputStream', 'getNextCPIOEntry')": [
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(DataInputStream,Archive,byte)')": [
                        304,
                        305,
                        307,
                        308
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFile', 'readEncodedHeader(DataInputStream,Archive,byte)')": [
                        304
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        184,
                        186,
                        187
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ExtraFieldUtils', 'parse(byte,boolean,UnparseableExtraField)')": [
                        184
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'sanitize(String)')": [
                        281,
                        283,
                        284
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'sanitize(String)')": [
                        282
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(File,List)')": [
                        287,
                        288,
                        292,
                        293
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        333,
                        334,
                        335,
                        336,
                        337
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDirAndFile')": [
                        387,
                        388,
                        389,
                        390,
                        391,
                        392
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(File,List)')": [
                        287
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'checkArchiveContent(ArchiveInputStream,List,boolean)')": [
                        330,
                        331
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createTempDirAndFile')": [
                        381,
                        382,
                        383
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'aiffFilesAreNoTARs')": [
                        66,
                        67,
                        68,
                        69,
                        74,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        79,
                        97,
                        134,
                        159,
                        236,
                        237,
                        245,
                        246
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testCOMPRESS209')": [
                        84,
                        85,
                        86,
                        87,
                        92,
                        93,
                        94,
                        95,
                        96
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detectsAndThrowsFor7z')": [
                        121,
                        122,
                        123,
                        124,
                        129,
                        130,
                        131,
                        132,
                        133
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'skipsPK00Prefix')": [
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        151,
                        152,
                        154,
                        155,
                        156,
                        157,
                        158
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'aiffFilesAreNoTARs')": [
                        66,
                        67
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', None)": [
                        72,
                        73,
                        84,
                        85,
                        115,
                        116,
                        131,
                        132
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'testCOMPRESS209')": [
                        78,
                        79
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'detectsAndThrowsFor7z')": [
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.archivers#ArchiveStreamFactoryTest', 'skipsPK00Prefix')": [
                        126,
                        127,
                        128
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'archiveDetection(File)')": [
                        93,
                        94,
                        96,
                        97,
                        98,
                        99,
                        100
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        120,
                        121,
                        123,
                        124,
                        125
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'archiveDetection(File)')": [
                        93,
                        95,
                        96,
                        97
                    ],
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        117,
                        119
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'testSevenZArchiveCreation(SevenZMethod)')": [
                        77,
                        78,
                        79,
                        81,
                        83,
                        85,
                        87,
                        89,
                        90,
                        91,
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#SevenZTestCase', 'testSevenZArchiveCreation(SevenZMethod)')": [
                        77,
                        78,
                        80,
                        82,
                        84,
                        86,
                        88,
                        89
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        92,
                        93,
                        95,
                        96
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        138,
                        142,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        180,
                        181,
                        182,
                        193,
                        194
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        92
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        138
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipEntryWithUnsupportedCompressionMethod')": [
                        174
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchive')": [
                        34,
                        35,
                        41,
                        42
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchiveButBigEnough')": [
                        48,
                        49,
                        55,
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchive')": [
                        34
                    ],
                    "('org.apache.commons.compress.archivers.dump#DumpArchiveInputStreamTest', 'testNotADumpArchiveButBigEnough')": [
                        45
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testAllEmptyFilesArchive')": [
                        106,
                        107,
                        109,
                        110
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testCompressedHeaderWithNonDefaultDictionarySize')": [
                        167,
                        168,
                        174,
                        175
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackLZMA2DictSize')": [
                        197,
                        198,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        215,
                        216
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackDeltaDistance')": [
                        223,
                        224,
                        226,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        242,
                        243
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'getEntriesOfUnarchiveTest')": [
                        249,
                        250,
                        258,
                        259
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readEntriesOfSize0')": [
                        268,
                        269,
                        283,
                        284
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod,byte)')": [
                        289,
                        290,
                        297,
                        301,
                        306,
                        307
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        312,
                        313,
                        316,
                        320,
                        325,
                        326
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testAllEmptyFilesArchive')": [
                        106
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testCompressedHeaderWithNonDefaultDictionarySize')": [
                        164
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackLZMA2DictSize')": [
                        191,
                        198,
                        199,
                        200
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testReadingBackDeltaDistance')": [
                        211,
                        213,
                        219,
                        220,
                        221
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'getEntriesOfUnarchiveTest')": [
                        231
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readEntriesOfSize0')": [
                        247
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'test7zUnarchive(File,SevenZMethod,byte)')": [
                        265,
                        272,
                        276
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'checkHelloWorld(String)')": [
                        285,
                        288,
                        292
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesAndEmptyFiles')": [
                        64,
                        65,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        106,
                        112,
                        122,
                        130,
                        136,
                        145,
                        146,
                        147
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesOnly')": [
                        155,
                        156,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        169,
                        174,
                        175,
                        176
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCantFinishTwice')": [
                        184,
                        185,
                        191,
                        192
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testArchiveWithMixedMethods')": [
                        353,
                        354,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        364,
                        366,
                        367,
                        368
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCompress252(int,int)')": [
                        379,
                        380,
                        386,
                        387
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyCompress252(File,int,int)')": [
                        394,
                        397,
                        406,
                        407
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'createAndReadBack(File,Iterable)')": [
                        489,
                        490,
                        492,
                        493
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesAndEmptyFiles')": [
                        64,
                        98,
                        99,
                        100,
                        102,
                        108,
                        118,
                        126,
                        132,
                        141
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testDirectoriesOnly')": [
                        149,
                        155,
                        156,
                        157,
                        159,
                        164
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCantFinishTwice')": [
                        172
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testArchiveWithMixedMethods')": [
                        338,
                        341,
                        342,
                        343,
                        345,
                        347
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testCompress252(int,int)')": [
                        358
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'verifyCompress252(File,int,int)')": [
                        372
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'createAndReadBack(File,Iterable)')": [
                        462
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testCompress197')": [
                        159,
                        160,
                        167,
                        168
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readsArchiveCompletely_COMPRESS245')": [
                        217,
                        218,
                        219,
                        232,
                        233
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadGNULongNameEntryWithWrongName')": [
                        288,
                        289,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'survivesBlankLinesInPaxHeader')": [
                        306,
                        307,
                        311,
                        312
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'survivesPaxHeaderWithNameEndingInSlash')": [
                        321,
                        322,
                        326,
                        327
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'testCompress197')": [
                        159
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'readsArchiveCompletely_COMPRESS245')": [
                        214,
                        215
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'shouldReadGNULongNameEntryWithWrongName')": [
                        282,
                        285,
                        286,
                        287,
                        288
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'survivesBlankLinesInPaxHeader')": [
                        297
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveInputStreamTest', 'survivesPaxHeaderWithNameEndingInSlash')": [
                        309
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        57,
                        58,
                        59,
                        61,
                        62,
                        72,
                        73,
                        76,
                        77,
                        83,
                        84,
                        86,
                        87,
                        91,
                        92
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Lister', 'main(String)')": [
                        57,
                        59,
                        60,
                        72,
                        78
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFiles(Zip64Mode)')": [
                        214,
                        215,
                        222,
                        233,
                        240,
                        241,
                        243,
                        257,
                        284,
                        297,
                        298,
                        299
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        386,
                        387,
                        393,
                        395,
                        413,
                        437,
                        445,
                        456,
                        457,
                        458
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        545,
                        546,
                        547,
                        550,
                        551
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        599,
                        600,
                        619,
                        646,
                        661,
                        676,
                        694,
                        708,
                        709,
                        710
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        839,
                        840,
                        841,
                        862,
                        889,
                        904,
                        915,
                        925,
                        940,
                        958,
                        971,
                        972,
                        973
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1084,
                        1085,
                        1105,
                        1132,
                        1147,
                        1162,
                        1180,
                        1194,
                        1195,
                        1196
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntry(boolean,Zip64Mode)')": [
                        1343,
                        1344,
                        1363,
                        1391,
                        1398,
                        1411,
                        1430,
                        1445,
                        1447,
                        1448
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1520,
                        1521,
                        1539,
                        1567,
                        1576,
                        1593,
                        1612,
                        1627,
                        1628,
                        1629
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        1684,
                        1685,
                        1705,
                        1713,
                        1737,
                        1748,
                        1756,
                        1771,
                        1789,
                        1790,
                        1791
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1855,
                        1856,
                        1876,
                        1884,
                        1908,
                        1916,
                        1927,
                        1936,
                        1951,
                        1969,
                        1984,
                        1985,
                        1986
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        2040,
                        2041,
                        2060,
                        2068,
                        2091,
                        2106,
                        2114,
                        2120,
                        2121,
                        2132,
                        2148,
                        2150,
                        2151
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2213,
                        2214,
                        2233,
                        2240,
                        2263,
                        2271,
                        2286,
                        2294,
                        2309,
                        2325,
                        2326,
                        2327
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosUsingZipFileImpl(File,String)')": [
                        2482,
                        2483,
                        2493,
                        2494
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write100KFiles(Zip64Mode)')": [
                        214,
                        221,
                        232,
                        239,
                        240,
                        242,
                        256,
                        283,
                        296
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'write3EntriesCreatingBigArchive(Zip64Mode)')": [
                        383,
                        389,
                        391,
                        409,
                        433,
                        441,
                        452
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read3EntriesCreatingBigArchiveFileUsingZipFile')": [
                        539
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigStoredEntry(boolean,Zip64Mode)')": [
                        589,
                        608,
                        635,
                        650,
                        665,
                        683,
                        697
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        826,
                        847,
                        874,
                        889,
                        900,
                        910,
                        925,
                        943,
                        956
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeBigDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        1067,
                        1087,
                        1114,
                        1129,
                        1144,
                        1162,
                        1176
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntry(boolean,Zip64Mode)')": [
                        1323,
                        1342,
                        1370,
                        1377,
                        1390,
                        1409,
                        1424
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallStoredEntryModeAlways(boolean)')": [
                        1497,
                        1515,
                        1543,
                        1552,
                        1569,
                        1588,
                        1603
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStream(boolean,Zip64Mode)')": [
                        1658,
                        1678,
                        1686,
                        1710,
                        1721,
                        1729,
                        1744,
                        1762
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToStreamModeAlways(boolean)')": [
                        1826,
                        1846,
                        1854,
                        1878,
                        1886,
                        1897,
                        1906,
                        1921,
                        1939,
                        1954
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFile(boolean,Zip64Mode)')": [
                        2008,
                        2027,
                        2035,
                        2058,
                        2073,
                        2081,
                        2087,
                        2088,
                        2099,
                        2115
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'writeSmallDeflatedEntryToFileModeAlways(boolean)')": [
                        2178,
                        2197,
                        2204,
                        2227,
                        2235,
                        2250,
                        2258,
                        2273,
                        2289
                    ],
                    "('org.apache.commons.compress.archivers.zip#Zip64SupportIT', 'read5GBOfZerosUsingZipFileImpl(File,String)')": [
                        2444
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testReadingOfFirstStoredEntry')": [
                        164,
                        165,
                        166,
                        169,
                        170,
                        171,
                        172
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testMessageWithCorruptFileName')": [
                        183,
                        184,
                        193,
                        194
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnzipBZip2CompressedEntry')": [
                        200,
                        201,
                        202,
                        206,
                        208,
                        209
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testReadingOfFirstStoredEntry')": [
                        164,
                        165,
                        168,
                        169
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testMessageWithCorruptFileName')": [
                        180
                    ],
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testUnzipBZip2CompressedEntry')": [
                        194,
                        195,
                        199
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        87,
                        88,
                        90,
                        91
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFully')": [
                        98,
                        99,
                        100,
                        101,
                        102,
                        107,
                        108,
                        110,
                        111
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testCOMPRESS131')": [
                        118,
                        119,
                        120,
                        121,
                        122,
                        124,
                        128,
                        129,
                        131,
                        132
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        80,
                        81,
                        82
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testConcatenatedStreamsReadFully')": [
                        92,
                        93
                    ],
                    "('org.apache.commons.compress.compressors#BZip2TestCase', 'testCOMPRESS131')": [
                        105,
                        106,
                        108
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateCreation')": [
                        45,
                        46,
                        47,
                        48,
                        49,
                        51,
                        52,
                        54,
                        55
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateCreation')": [
                        68,
                        69,
                        72,
                        73,
                        75,
                        76,
                        78,
                        79
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateUnarchive')": [
                        92,
                        93,
                        95,
                        106,
                        107
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        120,
                        121,
                        135,
                        136
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateCreation')": [
                        45,
                        46,
                        47
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateCreation')": [
                        62,
                        65
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testDeflateUnarchive')": [
                        80,
                        82
                    ],
                    "('org.apache.commons.compress.compressors#DeflateTestCase', 'testRawDeflateUnarchive')": [
                        105
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        73,
                        74,
                        89,
                        90,
                        93,
                        94,
                        95,
                        96,
                        98,
                        99,
                        100,
                        102,
                        103
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#FramedSnappyTestCase', 'testUnarchive(StreamWrapper)')": [
                        73,
                        90,
                        91,
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipCreation')": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        54,
                        55,
                        56,
                        57,
                        58
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipUnarchive')": [
                        66,
                        67,
                        69,
                        80,
                        81
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        88,
                        89,
                        90,
                        91,
                        92,
                        95,
                        96,
                        97,
                        98,
                        99
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFully')": [
                        106,
                        107,
                        108,
                        109,
                        110,
                        115,
                        116,
                        117,
                        118,
                        119
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        166,
                        168,
                        170,
                        171
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        195,
                        197,
                        199,
                        200
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        241,
                        243,
                        245,
                        246
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testMetadataRoundTrip')": [
                        298,
                        299,
                        300,
                        302,
                        303,
                        304
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipCreation')": [
                        48,
                        49,
                        50
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', None)": [
                        52,
                        84,
                        97
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testGzipUnarchive')": [
                        60,
                        62
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        79,
                        80,
                        81
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testConcatenatedStreamsReadFully')": [
                        91,
                        92
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGzipCompressorInputStream')": [
                        145
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testInteroperabilityWithGZIPInputStream')": [
                        171
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testExtraFlags(int,int)')": [
                        214
                    ],
                    "('org.apache.commons.compress.compressors#GZipTestCase', 'testMetadataRoundTrip')": [
                        267,
                        268
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchive')": [
                        39,
                        40,
                        43,
                        44
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchiveWithAutodetection')": [
                        52,
                        53,
                        55,
                        57,
                        58
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchive')": [
                        39
                    ],
                    "('org.apache.commons.compress.compressors#LZMATestCase', 'testLZMAUnarchiveWithAutodetection')": [
                        49,
                        51
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        76,
                        94,
                        95
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        115,
                        116,
                        117,
                        118,
                        120,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        138,
                        144,
                        145
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testGoodSignature')": [
                        151,
                        152,
                        156,
                        157
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testBadSignature')": [
                        163,
                        164,
                        168,
                        169
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testShortSignature')": [
                        175,
                        176,
                        180,
                        181
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        189,
                        190,
                        191,
                        192,
                        207,
                        208
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        217,
                        218,
                        223,
                        224
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarUnarchiveAll(boolean,Pack200Strategy)')": [
                        70,
                        71,
                        72,
                        73,
                        75
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        112,
                        113,
                        115,
                        126,
                        127,
                        128,
                        130
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testGoodSignature')": [
                        141
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testBadSignature')": [
                        150
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testShortSignature')": [
                        159
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        170,
                        171
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        194
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/XZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZCreation')": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        49,
                        50,
                        52,
                        53
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZUnarchive')": [
                        61,
                        62,
                        64,
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        83,
                        84,
                        85,
                        86,
                        87,
                        90,
                        91,
                        93,
                        94
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFully')": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        110,
                        111,
                        113,
                        114
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZCreation')": [
                        43,
                        44,
                        45
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testXZUnarchive')": [
                        55,
                        57
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFirstOnly')": [
                        74,
                        75,
                        76
                    ],
                    "('org.apache.commons.compress.compressors#XZTestCase', 'testConcatenatedStreamsReadFully')": [
                        86,
                        87
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/ZTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        84,
                        85,
                        97,
                        98
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#ZTestCase', 'testUnarchive(StreamWrapper)')": [
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        34,
                        35,
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.bzip2#BZip2CompressorInputStreamTest', 'shouldThrowAnIOExceptionWhenAppliedToAZipFile')": [
                        34
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'availableShouldReturnNonZero')": [
                        36,
                        37,
                        39,
                        42,
                        43
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        50,
                        51,
                        53,
                        56,
                        57
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        64,
                        65,
                        67,
                        71,
                        72
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadReturnsMinusOneAtEof')": [
                        79,
                        80,
                        82,
                        86,
                        87
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'availableShouldReturnNonZero')": [
                        36,
                        38
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'shouldBeAbleToSkipAByte')": [
                        47,
                        49
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadWorksAsExpected')": [
                        58,
                        60
                    ],
                    "('org.apache.commons.compress.compressors.deflate#DeflateCompressorInputStreamTest', 'singleByteReadReturnsMinusOneAtEof')": [
                        70,
                        72
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        43,
                        44,
                        46,
                        64,
                        65
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.pack200#Pack200UtilsTest', 'testNormalize')": [
                        43,
                        45
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testMatches')": [
                        44,
                        45,
                        47,
                        48
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testLoremIpsum')": [
                        60,
                        63,
                        75,
                        76,
                        87,
                        88,
                        90,
                        91,
                        94,
                        95,
                        96,
                        97,
                        99,
                        100,
                        101,
                        103,
                        104
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testRemainingChunkTypes')": [
                        110,
                        112,
                        116,
                        117
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testAvailable')": [
                        133,
                        134,
                        146,
                        147
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        176,
                        177,
                        178,
                        179,
                        181,
                        192,
                        193,
                        195,
                        196
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testMatches')": [
                        44
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testLoremIpsum')": [
                        59,
                        71,
                        85,
                        86,
                        88
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testRemainingChunkTypes')": [
                        96
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'testAvailable')": [
                        115
                    ],
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        155,
                        156,
                        158
                    ]
                }
            }
        }
    },
    "77388c82c0f484ebf11b5f3292f0103514fd00f1": {
        "authored_data": "2016 Jun 25 21:35",
        "commit.message": "Add final modifier to local variables.",
        "commit.author.name": "Gary Gregory",
        "pcid": "4865194d5fd2de1df4393a12bfe5552bc2e6a2c0",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        204
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStream', 'readNextBlock')": [
                        204
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'sanitize(String)')": [
                        286
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'sanitize(String)')": [
                        286
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'sanitizeShortensString')": [
                        72,
                        77
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'sanitizeLeavesShortStringsAlone')": [
                        87
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'sanitizeRemovesUnprintableCharacters')": [
                        93,
                        94
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'sanitizeShortensString')": [
                        72,
                        77
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'sanitizeLeavesShortStringsAlone')": [
                        87
                    ],
                    "('org.apache.commons.compress#ArchiveUtilsTest', 'sanitizeRemovesUnprintableCharacters')": [
                        93,
                        94
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readEntriesOfSize0')": [
                        274
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'readEntriesOfSize0')": [
                        274
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testMessageWithCorruptFileName')": [
                        190,
                        191
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipArchiveInputStreamTest', 'testMessageWithCorruptFileName')": [
                        190,
                        191
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        178
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors.snappy#FramedSnappyCompressorInputStreamTest', 'readIWAFile')": [
                        178
                    ]
                }
            }
        }
    },
    "4865194d5fd2de1df4393a12bfe5552bc2e6a2c0": {
        "authored_data": "2016 Jun 25 21:34",
        "commit.message": "Add final modifier to method parameters.",
        "commit.author.name": "Gary Gregory",
        "pcid": "7f110cf318a5f99554b1628512c70085ff25b2bf",
        "changes": {
            "src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java": {
                "old": {
                    "(None, None)": [
                        39,
                        40
                    ]
                },
                "new": {
                    "(None, None)": [
                        39,
                        40
                    ]
                }
            },
            "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java": {
                "old": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'sanitize(String)')": [
                        273
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.utils#ArchiveUtils', 'sanitize(String)')": [
                        273
                    ]
                }
            }
        }
    },
    "7f110cf318a5f99554b1628512c70085ff25b2bf": {
        "authored_data": "2016 Jun 25 21:32",
        "commit.message": "Javadoc.",
        "commit.author.name": "Gary Gregory",
        "pcid": "0714e1063cc85cc6ba2c1ca358fad93baa53e1d6",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java": {
                "new": {
                    "('org.apache.commons.compress.archivers.zip#UnshrinkingInputStream', None)": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42
                    ]
                }
            }
        }
    },
    "0714e1063cc85cc6ba2c1ca358fad93baa53e1d6": {
        "authored_data": "2016 Jun 25 21:24",
        "commit.message": "Statement unnecessarily nested within else clause.",
        "commit.author.name": "Gary Gregory",
        "pcid": "dee8220e4c56ffca5d4fcded556f3c74c72cedb6",
        "changes": {
            "src/main/java/org/apache/commons/compress/archivers/Lister.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#Lister', 'createArchiveInputStream(String,InputStream)')": [
                        61,
                        62
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#Lister', 'createArchiveInputStream(String,InputStream)')": [
                        62
                    ]
                }
            }
        }
    },
    "dee8220e4c56ffca5d4fcded556f3c74c72cedb6": {
        "authored_data": "2016 Jun 25 21:22",
        "commit.message": "Remove Redundant specification of type (Java 7).",
        "commit.author.name": "Gary Gregory",
        "pcid": "e2d348e17210d17060394d16c491f0e20783c10c",
        "changes": {
            "src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToAr')": [
                        1028
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToAr')": [
                        1028
                    ]
                }
            }
        }
    },
    "e2d348e17210d17060394d16c491f0e20783c10c": {
        "authored_data": "2016 Jun 25 21:22",
        "commit.message": "Remove Redundant specification of type (Java 7).",
        "commit.author.name": "Gary Gregory",
        "pcid": "d5aa050a642409fab36805b2296a99e8e5ce8449",
        "changes": {
            "src/test/java/org/apache/commons/compress/AbstractTestCase.java": {
                "old": {
                    "('org.apache.commons.compress#AbstractTestCase', 'createArchive(String)')": [
                        171
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createEmptyArchive(String)')": [
                        230
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createSingleEntryArchive(String)')": [
                        257
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#AbstractTestCase', 'createArchive(String)')": [
                        171
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createEmptyArchive(String)')": [
                        230
                    ],
                    "('org.apache.commons.compress#AbstractTestCase', 'createSingleEntryArchive(String)')": [
                        257
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/ArchiveReadTest.java": {
                "old": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        52
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'data')": [
                        78
                    ]
                },
                "new": {
                    "('org.apache.commons.compress#ArchiveReadTest', None)": [
                        52
                    ],
                    "('org.apache.commons.compress#ArchiveReadTest', 'data')": [
                        78
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        95
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#CpioTestCase', 'testCpioUnarchive')": [
                        95
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        115
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#DumpTestCase', 'checkDumpArchive(File)')": [
                        115
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongPathTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongPathTest', None)": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers#LongPathTest', 'data')": [
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        84
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', None)": [
                        59
                    ],
                    "('org.apache.commons.compress.archivers#LongSymLinkTest', 'data')": [
                        84
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        211
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testZipArchiveCreation')": [
                        80
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testSkipsPK00Prefix')": [
                        139
                    ],
                    "('org.apache.commons.compress.archivers#ZipTestCase', 'testListAllFilesWithNestedArchive')": [
                        211
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        72
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.ar#ArArchiveOutputStreamTest', 'testLongFileNamesWorkUsingBSDDialect')": [
                        72
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomlySkippingEntries')": [
                        46
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZFileTest', 'testRandomlySkippingEntries')": [
                        46
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testStackOfContentCompressions')": [
                        310
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testRoundTrip(SevenZMethod)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testFilterRoundTrip(SevenZMethodConfiguration)')": [
                        474
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testStackOfContentCompressions')": [
                        310
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testRoundTrip(SevenZMethod)')": [
                        467
                    ],
                    "('org.apache.commons.compress.archivers.sevenz#SevenZOutputFileTest', 'testFilterRoundTrip(SevenZMethodConfiguration)')": [
                        474
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        147
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        161
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        180
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testWriteSimplePaxHeaders')": [
                        147
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength99')": [
                        161
                    ],
                    "('org.apache.commons.compress.archivers.tar#TarArchiveOutputStreamTest', 'testPaxHeadersWithLength101')": [
                        180
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        112
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        127
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntries(ParallelScatterZipCreator)')": [
                        112
                    ],
                    "('org.apache.commons.compress.archivers.zip#ParallelScatterZipCreatorTest', 'writeEntriesAsCallable(ParallelScatterZipCreator)')": [
                        127
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java": {
                "old": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnixSymlinkSampleFile')": [
                        182
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.archivers.zip#ZipFileTest', 'testUnixSymlinkSampleFile')": [
                        182
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java": {
                "old": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromZip')": [
                        769
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromTar')": [
                        808
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromJar')": [
                        849
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToTar')": [
                        896
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToJar')": [
                        943
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAr')": [
                        983
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromZip')": [
                        769
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromTar')": [
                        808
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromJar')": [
                        849
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToTar')": [
                        896
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAndAddToJar')": [
                        943
                    ],
                    "('org.apache.commons.compress.changes#ChangeSetTestCase', 'testDeleteFromAr')": [
                        983
                    ]
                }
            },
            "src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java": {
                "old": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        139
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        187
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        215
                    ]
                },
                "new": {
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'jarArchiveCreation(Pack200Strategy)')": [
                        139
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testInputStreamMethods')": [
                        187
                    ],
                    "('org.apache.commons.compress.compressors#Pack200TestCase', 'testOutputStreamMethods')": [
                        215
                    ]
                }
            }
        }
    }
}