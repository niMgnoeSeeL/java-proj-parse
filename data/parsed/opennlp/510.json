{
    "06371807f421926eefb99b0ce15dd552066b0cab": {
        "authored_data": "2016 Nov 07 17:19",
        "commit.message": "Remove redundant variable initialization\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "eb93f64b9f1150f658ba456b4630e1040dac8112",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/GenerateManualTool.java": {
                "old": {
                    "('opennlp.tools.cmdline#GenerateManualTool', 'splitLongLines(String)')": [
                        242
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#GenerateManualTool', 'splitLongLines(String)')": [
                        242
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/parser/ParserTrainerTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.parser#ParserTrainerTool', 'creaeHeadRules(TrainerToolParams)')": [
                        86
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.parser#ParserTrainerTool', 'creaeHeadRules(TrainerToolParams)')": [
                        86
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/entitylinker/EntityLinkerProperties.java": {
                "old": {
                    "('opennlp.tools.entitylinker#EntityLinkerProperties', 'getProperty(String,String)')": [
                        79,
                        80,
                        82,
                        86
                    ]
                },
                "new": {
                    "('opennlp.tools.entitylinker#EntityLinkerProperties', 'getProperty(String,String)')": [
                        80
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADNameSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.ad#ADNameSampleStream', 'processLeaf(Leaf,List,List)')": [
                        350,
                        353
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ad#ADNameSampleStream', 'processLeaf(Leaf,List,List)')": [
                        352
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/brat/AnnotationConfiguration.java": {
                "old": {
                    "('opennlp.tools.formats.brat#AnnotationConfiguration', 'parse(InputStream)')": [
                        59
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.brat#AnnotationConfiguration', 'parse(InputStream)')": [
                        59
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/DictionaryLemmatizer.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', 'apply(String,String)')": [
                        103
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', 'apply(String,String)')": [
                        103
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/AbstractEventTrainer.java": {
                "old": {
                    "('opennlp.tools.ml#AbstractEventTrainer', 'getDataIndexer(ObjectStream)')": [
                        69
                    ]
                },
                "new": {
                    "('opennlp.tools.ml#AbstractEventTrainer', 'getDataIndexer(ObjectStream)')": [
                        69
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/GISTrainer.java": {
                "old": {
                    "('opennlp.tools.ml.maxent#GISTrainer', 'trainModel(int,DataIndexer,Prior,int,int)')": [
                        343
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'findParameters(int,double)')": [
                        407
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'nextIteration(double)')": [
                        572
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#GISTrainer', 'trainModel(int,DataIndexer,Prior,int,int)')": [
                        343
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'findParameters(int,double)')": [
                        407
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'nextIteration(double)')": [
                        572
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/quasinewton/QNTrainer.java": {
                "old": {
                    "('opennlp.tools.ml.maxent.quasinewton#QNTrainer', 'trainModel(int,DataIndexer)')": [
                        159
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent.quasinewton#QNTrainer', 'trainModel(int,DataIndexer)')": [
                        159
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java": {
                "old": {
                    "('opennlp.tools.namefind#DictionaryNameFinder', 'find(String)')": [
                        70
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#DictionaryNameFinder', 'find(String)')": [
                        70
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/TokenNameFinderFactory.java": {
                "old": {
                    "('opennlp.tools.namefind#TokenNameFinderFactory', 'createFeatureGenerators')": [
                        173
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#TokenNameFinderFactory', 'createFeatureGenerators')": [
                        173
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractBottomUpParser.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'collapsePunctuation(Parse,Set)')": [
                        222
                    ],
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'advanceChunks(Parse,double)')": [
                        386,
                        388
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'collapsePunctuation(Parse,Set)')": [
                        222
                    ],
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'advanceChunks(Parse,double)')": [
                        386,
                        388
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/chunking/BuildContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.chunking#BuildContextGenerator', 'getContext(Parse,int)')": [
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        94,
                        95,
                        96,
                        97
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.chunking#BuildContextGenerator', 'getContext(Parse,int)')": [
                        76,
                        77,
                        78,
                        79,
                        84,
                        85,
                        90,
                        91,
                        92,
                        93,
                        94,
                        99,
                        100
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/chunking/Parser.java": {
                "old": {
                    "('opennlp.tools.parser.chunking#Parser', 'advanceParses(Parse,double)')": [
                        209
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.chunking#Parser', 'advanceParses(Parse,double)')": [
                        209
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/AttachContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#AttachContextGenerator', 'getContext(Parse,int,List,int)')": [
                        80,
                        81,
                        82,
                        83,
                        84,
                        85
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#AttachContextGenerator', 'getContext(Parse,int,List,int)')": [
                        80,
                        81,
                        82
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/BuildContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#BuildContextGenerator', 'getContext(Parse,int)')": [
                        58,
                        59,
                        60,
                        61,
                        62,
                        65,
                        73,
                        74,
                        76,
                        77,
                        78,
                        79,
                        81,
                        95,
                        96
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#BuildContextGenerator', 'getContext(Parse,int)')": [
                        60,
                        61,
                        62,
                        66,
                        67,
                        72,
                        73,
                        74,
                        75,
                        78,
                        92,
                        93,
                        95
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/CheckContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#CheckContextGenerator', 'getContext(Parse,Parse,int,boolean)')": [
                        62,
                        63,
                        89,
                        90
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#CheckContextGenerator', 'getContext(Parse,Parse,int,boolean)')": [
                        87,
                        88
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/sentdetect/SentenceDetectorFactory.java": {
                "old": {
                    "('opennlp.tools.sentdetect#SentenceDetectorFactory', 'getSDContextGenerator')": [
                        193
                    ]
                },
                "new": {
                    "('opennlp.tools.sentdetect#SentenceDetectorFactory', 'getSDContextGenerator')": [
                        193
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenSample.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenSample', 'toString')": [
                        133
                    ],
                    "('opennlp.tools.tokenize#TokenSample', 'parse(String,String)')": [
                        184
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenSample', 'toString')": [
                        133
                    ],
                    "('opennlp.tools.tokenize#TokenSample', 'parse(String,String)')": [
                        184
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerFactory.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getContextGenerator')": [
                        231
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getContextGenerator')": [
                        231
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/AbstractEventStream.java": {
                "old": {
                    "('opennlp.tools.util#AbstractEventStream', 'read')": [
                        60
                    ]
                },
                "new": {
                    "('opennlp.tools.util#AbstractEventStream', 'read')": [
                        60
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/BaseToolFactory.java": {
                "old": {
                    "('opennlp.tools.util#BaseToolFactory', 'create(String,ArtifactProvider)')": [
                        104
                    ]
                },
                "new": {
                    "('opennlp.tools.util#BaseToolFactory', 'create(String,ArtifactProvider)')": [
                        104
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/model/BaseModel.java": {
                "old": {
                    "('opennlp.tools.util.model#BaseModel', 'getArtifactSerializer(String)')": [
                        350,
                        352,
                        356,
                        357
                    ],
                    "('opennlp.tools.util.model#BaseModel', 'toByteArray(InputStream)')": [
                        624
                    ]
                },
                "new": {
                    "('opennlp.tools.util.model#BaseModel', 'getArtifactSerializer(String)')": [
                        351
                    ],
                    "('opennlp.tools.util.model#BaseModel', 'toByteArray(InputStream)')": [
                        621
                    ]
                }
            }
        }
    },
    "eb93f64b9f1150f658ba456b4630e1040dac8112": {
        "authored_data": "2016 Nov 02 19:50",
        "commit.message": "Remove pointless boolean expression\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "1550dac129b2db957db09de0456e3c579119a741",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceStream.java": {
                "old": {
                    "('opennlp.tools.formats.ad#ADSentenceStream', None)": [
                        167
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ad#ADSentenceStream', None)": [
                        167
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/NameSample.java": {
                "old": {
                    "('opennlp.tools.namefind#NameSample', 'parse(String,String,boolean)')": [
                        248
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#NameSample', 'parse(String,String,boolean)')": [
                        248
                    ]
                }
            }
        }
    },
    "1550dac129b2db957db09de0456e3c579119a741": {
        "authored_data": "2016 Nov 02 19:18",
        "commit.message": "Collapse duplicate catch blocks into multi-catch\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "6871d1164ef22692141f59bb3176bef4c7777771",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/formats/frenchtreebank/ConstitParseSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitParseSampleStream', None)": [
                        47,
                        48,
                        49
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitParseSampleStream', None)": [
                        47
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/ext/ExtensionLoader.java": {
                "old": {
                    "('opennlp.tools.util.ext#ExtensionLoader', 'instantiateExtension(Class,String)')": [
                        78,
                        79,
                        80,
                        86,
                        87,
                        88
                    ]
                },
                "new": {
                    "('opennlp.tools.util.ext#ExtensionLoader', 'instantiateExtension(Class,String)')": [
                        78,
                        84
                    ]
                }
            }
        }
    },
    "6871d1164ef22692141f59bb3176bef4c7777771": {
        "authored_data": "2016 Nov 02 19:12",
        "commit.message": "Replace == with equals for string compare\n\nComparing string referencs to check strings are equal\nshould not be done, in case the strigns somehow change\nall those comparisons break. Using equals will result in the\nsame and only if references are not equal the string will\nbe compared.\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "e20dc210be4bf6d9438e009daf98ac2442a6f722",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/formats/frenchtreebank/ConstitDocumentHandler.java": {
                "old": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitDocumentHandler', 'endElement(String,String,String)')": [
                        174
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitDocumentHandler', 'endElement(String,String,String)')": [
                        174
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java": {
                "old": {
                    "('opennlp.tools.parser#Parse', 'parseParse(String,GapLabeler)')": [
                        886
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#Parse', 'parseParse(String,GapLabeler)')": [
                        886
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/lang/en/HeadRules.java": {
                "old": {
                    "('opennlp.tools.parser.lang.en#HeadRules', 'getHead(Parse,String)')": [
                        134
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.lang.en#HeadRules', 'getHead(Parse,String)')": [
                        134
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/lang/es/AncoraSpanishHeadRules.java": {
                "old": {
                    "('opennlp.tools.parser.lang.es#AncoraSpanishHeadRules', 'getHead(Parse,String)')": [
                        135
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.lang.es#AncoraSpanishHeadRules', 'getHead(Parse,String)')": [
                        135
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/Parser.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'getRightFrontier(Parse,Set)')": [
                        145,
                        146
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'getRightFrontier(Parse,Set)')": [
                        145,
                        146
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/ParserEventStream.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'addParseEvents(List,Parse)')": [
                        276,
                        293
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'addParseEvents(List,Parse)')": [
                        276,
                        293
                    ]
                }
            }
        }
    },
    "e20dc210be4bf6d9438e009daf98ac2442a6f722": {
        "authored_data": "2016 Nov 02 19:02",
        "commit.message": "Replace while loop with foreach\n\nThe foreach makes the code easier to read\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "c3eeb5c530e9b0e738f84e74c774b4f63d944a7f",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatFineGrainedReportListener.java": {
                "old": {
                    "('opennlp.tools.cmdline.doccat#DoccatFineGrainedReportListener', 'printTagsErrorRank')": [
                        278,
                        279,
                        280,
                        284,
                        291,
                        292,
                        293
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.doccat#DoccatFineGrainedReportListener', 'printTagsErrorRank')": [
                        278,
                        282,
                        289,
                        290,
                        291
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/lemmatizer/LemmatizerFineGrainedReportListener.java": {
                "old": {
                    "('opennlp.tools.cmdline.lemmatizer#LemmatizerFineGrainedReportListener', 'printTagsErrorRank')": [
                        370,
                        371,
                        372,
                        376,
                        383,
                        384,
                        385
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.lemmatizer#LemmatizerFineGrainedReportListener', 'printTagsErrorRank')": [
                        370,
                        374,
                        381,
                        382,
                        383
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/postag/POSTaggerFineGrainedReportListener.java": {
                "old": {
                    "('opennlp.tools.cmdline.postag#POSTaggerFineGrainedReportListener', 'printTagsErrorRank')": [
                        371,
                        372,
                        373
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.postag#POSTaggerFineGrainedReportListener', 'printTagsErrorRank')": [
                        371
                    ]
                }
            }
        }
    },
    "c3eeb5c530e9b0e738f84e74c774b4f63d944a7f": {
        "authored_data": "2016 Nov 02 18:57",
        "commit.message": "Replace StringBuilder with String\n\nUsing a String concatenation makes the code shorter and simpler.\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "7ef7235f04f9e26cf41155a92ab2a2632a7ba7e6",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/GenerateManualTool.java": {
                "old": {
                    "('opennlp.tools.cmdline#GenerateManualTool', 'getUsage')": [
                        79,
                        80,
                        81,
                        82
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#GenerateManualTool', 'getUsage')": [
                        79,
                        80
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractContextGenerator', 'punct(Parse,int)')": [
                        45,
                        46,
                        47,
                        48
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'punctbo(Parse,int)')": [
                        58,
                        59,
                        60,
                        61
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractContextGenerator', 'punct(Parse,int)')": [
                        45
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'punctbo(Parse,int)')": [
                        55
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/sentdetect/DefaultSDContextGenerator.java": {
                "old": {
                    "('opennlp.tools.sentdetect#DefaultSDContextGenerator', 'getContext(CharSequence,int)')": [
                        132,
                        135,
                        156,
                        157
                    ]
                },
                "new": {
                    "('opennlp.tools.sentdetect#DefaultSDContextGenerator', 'getContext(CharSequence,int)')": [
                        132,
                        135,
                        156,
                        157
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/sentdetect/SentenceDetectorFactory.java": {
                "old": {
                    "('opennlp.tools.sentdetect#SentenceDetectorFactory', 'eosCharArrayToString(char)')": [
                        208,
                        209,
                        210
                    ]
                },
                "new": {
                    "('opennlp.tools.sentdetect#SentenceDetectorFactory', 'eosCharArrayToString(char)')": [
                        208
                    ]
                }
            }
        }
    },
    "7ef7235f04f9e26cf41155a92ab2a2632a7ba7e6": {
        "authored_data": "2016 Nov 02 18:52",
        "commit.message": "Use StringBuilder.append and not string cat\n\nThe argument to StringBuilder.append should not be\nconcatenated. Instead StringBuilder.append can be called\nmore often.\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "b854d3142b718aff8f44077bbbb1905dc455364d",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/DetailedFMeasureListener.java": {
                "old": {
                    "('opennlp.tools.cmdline#DetailedFMeasureListener', 'createReport(Locale)')": [
                        123,
                        124,
                        125
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#DetailedFMeasureListener', 'createReport(Locale)')": [
                        123,
                        124,
                        125
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/GenerateManualTool.java": {
                "old": {
                    "('opennlp.tools.cmdline#GenerateManualTool', 'appendArgumentTable(Map,StringBuilder)')": [
                        163,
                        164
                    ],
                    "('opennlp.tools.cmdline#GenerateManualTool', 'appendCode(String,StringBuilder)')": [
                        232,
                        233
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#GenerateManualTool', 'appendArgumentTable(Map,StringBuilder)')": [
                        163,
                        164
                    ],
                    "('opennlp.tools.cmdline#GenerateManualTool', 'appendCode(String,StringBuilder)')": [
                        232,
                        233
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ontonotes/OntoNotesParseSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.ontonotes#OntoNotesParseSampleStream', 'read')": [
                        54
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ontonotes#OntoNotesParseSampleStream', 'read')": [
                        54
                    ]
                }
            }
        }
    },
    "b854d3142b718aff8f44077bbbb1905dc455364d": {
        "authored_data": "2016 Nov 02 18:47",
        "commit.message": "Remove calls to String.toString()\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "c479846405b5ea919609d2e63e25f3048c20d31e",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/DefaultLemmatizerContextGenerator.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#DefaultLemmatizerContextGenerator', 'getContext(int,String,String,String)')": [
                        70
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#DefaultLemmatizerContextGenerator', 'getContext(int,String,String,String)')": [
                        70
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/postag/DefaultPOSSequenceValidator.java": {
                "old": {
                    "('opennlp.tools.postag#DefaultPOSSequenceValidator', 'validSequence(int,String,String,String)')": [
                        37
                    ]
                },
                "new": {
                    "('opennlp.tools.postag#DefaultPOSSequenceValidator', 'validSequence(int,String,String,String)')": [
                        37
                    ]
                }
            }
        }
    },
    "c479846405b5ea919609d2e63e25f3048c20d31e": {
        "authored_data": "2016 Nov 02 18:45",
        "commit.message": "Remove redundant array creation\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "3ab16184657e381a69c3415fed76711147c4e0cf",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/namefind/DefaultNameContextGenerator.java": {
                "old": {
                    "('opennlp.tools.namefind#DefaultNameContextGenerator', None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#DefaultNameContextGenerator', None)": [
                        43,
                        44,
                        45,
                        46,
                        47
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderME.java": {
                "old": {
                    "('opennlp.tools.namefind#NameFinderME', 'createFeatureGenerator')": [
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110
                    ],
                    "('opennlp.tools.namefind#NameFinderME', None)": [
                        111
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#NameFinderME', 'createFeatureGenerator')": [
                        104,
                        105,
                        106,
                        107,
                        108,
                        109
                    ]
                }
            }
        }
    },
    "3ab16184657e381a69c3415fed76711147c4e0cf": {
        "authored_data": "2016 Nov 02 18:36",
        "commit.message": "Remove duplicate if in if\n\nThe inner if is identical and will always have\nthe same result as the outer one.\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "cd6b11dc616de890f3072876aeff656ed66eefd1",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/util/model/BaseModel.java": {
                "old": {
                    "('opennlp.tools.util.model#BaseModel', 'finishLoadingArtifacts(InputStream)')": [
                        314,
                        315,
                        316
                    ]
                },
                "new": {
                    "('opennlp.tools.util.model#BaseModel', 'finishLoadingArtifacts(InputStream)')": [
                        314
                    ]
                }
            }
        }
    }
}