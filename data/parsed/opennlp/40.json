{
    "ae83790b905829478a7292a98ad8fb4cd52fc459": {
        "authored_data": "2021 Jun 23 12:35",
        "commit.message": "OPENNLP-1330 Fix Parser top \"k\" parses (#392)\n\nCo-authored-by: Eric Ihli <eihli@owoga.com>",
        "commit.author.name": "Eric Ihli",
        "pcid": "7286f9c804b65a4a1d771d3c984ea76516fc8141",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractBottomUpParser.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'parse(Parse,int)')": [
                        361
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'parse(Parse,int)')": [
                        361
                    ]
                }
            }
        }
    },
    "7286f9c804b65a4a1d771d3c984ea76516fc8141": {
        "authored_data": "2021 Feb 07 13:57",
        "commit.message": "OPENNLP-1325: 'if' replaceable with 'switch' (#391)\n\n",
        "commit.author.name": "Alan Wang",
        "pcid": "af6a6e091abf80debf51dd5f2ef6fb26538d9d4f",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/formats/Conll02NameSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats#Conll02NameSampleStream', 'extract(int,int,String)')": [
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104
                    ]
                },
                "new": {
                    "('opennlp.tools.formats#Conll02NameSampleStream', 'extract(int,int,String)')": [
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/EvalitaNameSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats#EvalitaNameSampleStream', 'extract(int,int,String)')": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112
                    ]
                },
                "new": {
                    "('opennlp.tools.formats#EvalitaNameSampleStream', 'extract(int,int,String)')": [
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#GeneratorFactory', 'buildGenerator(Element,FeatureGeneratorResourceProvider)')": [
                        539,
                        540,
                        541,
                        542,
                        543,
                        544,
                        545
                    ],
                    "('opennlp.tools.util.featuregen#GeneratorFactory', 'extractArtifactSerializerMappings(Map,Element)')": [
                        638,
                        639,
                        640,
                        641,
                        642,
                        643,
                        644
                    ],
                    "('opennlp.tools.util.featuregen#GeneratorFactory', 'extractArtifactSerializerMappingsClassicFormat(Element)')": [
                        735,
                        736,
                        737,
                        738
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#GeneratorFactory', 'buildGenerator(Element,FeatureGeneratorResourceProvider)')": [
                        539,
                        540
                    ],
                    "('opennlp.tools.util.featuregen#GeneratorFactory', 'extractArtifactSerializerMappings(Map,Element)')": [
                        633,
                        634
                    ],
                    "('opennlp.tools.util.featuregen#GeneratorFactory', 'extractArtifactSerializerMappingsClassicFormat(Element)')": [
                        725,
                        726
                    ]
                }
            }
        }
    },
    "52eb4cf0724c41619ce5a33d23352594bf396872": {
        "authored_data": "2020 Dec 30 12:31",
        "commit.message": "OPENNLP-1322: Simplify some code of List (#389)\n\n",
        "commit.author.name": "Alan Wang",
        "pcid": "ecb0a49c330c57cdb1f1fab025d9157ad2ea2248",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/CmdLineUtil.java": {
                "old": {
                    "('opennlp.tools.cmdline#CmdLineUtil', 'checkLanguageCode(String)')": [
                        279,
                        280
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#CmdLineUtil', 'checkLanguageCode(String)')": [
                        279
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/DictionaryLemmatizer.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', 'getDictKeys(String,String)')": [
                        98,
                        99
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', 'getDictKeys(String,String)')": [
                        98
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/BioCodec.java": {
                "old": {
                    "('opennlp.tools.namefind#BioCodec', 'encode(Span,int)')": [
                        81,
                        82,
                        83
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('opennlp.tools.namefind#BioCodec', 'encode(Span,int)')": [
                        82
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderEventStream.java": {
                "old": {
                    "('opennlp.tools.namefind#NameFinderEventStream', 'generateOutcomes(Span,String,int)')": [
                        88,
                        89,
                        90
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('opennlp.tools.namefind#NameFinderEventStream', 'generateOutcomes(Span,String,int)')": [
                        89
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java": {
                "old": {
                    "('opennlp.tools.parser#Parse', 'getTagNodes')": [
                        954,
                        955
                    ],
                    "('opennlp.tools.parser#Parse', 'getTokenNodes')": [
                        970,
                        971
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#Parse', 'getTagNodes')": [
                        954
                    ],
                    "('opennlp.tools.parser#Parse', 'getTokenNodes')": [
                        969
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/model/ModelUtil.java": {
                "old": {
                    "('opennlp.tools.util.model#ModelUtil', 'validateOutcomes(MaxentModel,String)')": [
                        88,
                        89
                    ]
                },
                "new": {
                    "('opennlp.tools.util.model#ModelUtil', 'validateOutcomes(MaxentModel,String)')": [
                        88
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/ml/model/SimpleEventStreamBuilder.java": {
                "old": {
                    "('opennlp.tools.ml.model#SimpleEventStreamBuilder', 'add(String)')": [
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('opennlp.tools.ml.model#SimpleEventStreamBuilder', 'add(String)')": [
                        52
                    ]
                }
            }
        }
    },
    "ecb0a49c330c57cdb1f1fab025d9157ad2ea2248": {
        "authored_data": "2020 Dec 20 13:44",
        "commit.message": "OPENNLP-1321 use LinkedHashMap for deterministic iteration order (#387)\n\n* AbstractModel.java LinkedHashMap\r\n\r\n* NGramModel LinkedHashMap\r\n\r\n* change import order",
        "commit.author.name": "Yilinwang",
        "pcid": "57c685eef695a8b951ada343c3914104963445c8",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/AbstractModel.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('opennlp.tools.ml.model#AbstractModel', 'init(String,Context,String)')": [
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('opennlp.tools.ml.model#AbstractModel', 'init(String,Context,String)')": [
                        57
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ngram/NGramModel.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('opennlp.tools.ngram#NGramModel', None)": [
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        24
                    ],
                    "('opennlp.tools.ngram#NGramModel', None)": [
                        45
                    ]
                }
            }
        }
    },
    "57c685eef695a8b951ada343c3914104963445c8": {
        "authored_data": "2020 Dec 16 14:09",
        "commit.message": "OPENNLP-1317: 'if' and 'return' statement can be simplified (#384)\n\n",
        "commit.author.name": "Alan Wang",
        "pcid": "8209cd308ee6ff7e61ec0346f1799a32541ed80f",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/chunker/DefaultChunkerSequenceValidator.java": {
                "old": {
                    "('opennlp.tools.chunker#DefaultChunkerSequenceValidator', 'validOutcome(String,String)')": [
                        34,
                        35,
                        36
                    ]
                },
                "new": {
                    "('opennlp.tools.chunker#DefaultChunkerSequenceValidator', 'validOutcome(String,String)')": [
                        34
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.ad#ADSentenceSampleStream', 'read')": [
                        110
                    ],
                    "('opennlp.tools.formats.ad#ADSentenceSampleStream', 'hasPunctuation(String)')": [
                        142,
                        143,
                        144
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ad#ADSentenceSampleStream', 'read')": [
                        110
                    ],
                    "('opennlp.tools.formats.ad#ADSentenceSampleStream', 'hasPunctuation(String)')": [
                        142
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/brat/BratDocumentParser.java": {
                "old": {
                    "('opennlp.tools.formats.brat#BratDocumentParser', 'isSpanAnnotation(BratAnnotation)')": [
                        186,
                        187,
                        188,
                        189
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.brat#BratDocumentParser', 'isSpanAnnotation(BratAnnotation)')": [
                        186
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/nkjp/NKJPSegmentationDocument.java": {
                "old": {
                    "('opennlp.tools.formats.nkjp#NKJPSegmentationDocument', 'parse(InputStream)')": [
                        119,
                        120,
                        121,
                        122,
                        131,
                        141
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/LemmatizerME.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#LemmatizerME', 'lemmatize(String,String)')": [
                        92,
                        93
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#LemmatizerME', 'lemmatize(String,String)')": [
                        92
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/BasicContextGenerator.java": {
                "old": {
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', 'getContext(String)')": [
                        44,
                        45
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', 'getContext(String)')": [
                        44
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/ComparableEvent.java": {
                "old": {
                    "('opennlp.tools.ml.model#ComparableEvent', 'compareTo(ComparableEvent)')": [
                        76,
                        77,
                        78,
                        79,
                        80,
                        81
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#ComparableEvent', 'compareTo(ComparableEvent)')": [
                        76
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/ComparablePredicate.java": {
                "old": {
                    "('opennlp.tools.ml.model#ComparablePredicate', 'compareTo(ComparablePredicate)')": [
                        49,
                        50,
                        51,
                        52,
                        53,
                        54
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#ComparablePredicate', 'compareTo(ComparablePredicate)')": [
                        49
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/BilouNameFinderSequenceValidator.java": {
                "old": {
                    "('opennlp.tools.namefind#BilouNameFinderSequenceValidator', 'validSequence(int,String,String,String)')": [
                        47,
                        48,
                        49,
                        60,
                        61,
                        62,
                        63
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#BilouNameFinderSequenceValidator', 'validSequence(int,String,String,String)')": [
                        47,
                        58,
                        59
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderSequenceValidator.java": {
                "old": {
                    "('opennlp.tools.namefind#NameFinderSequenceValidator', 'validSequence(int,String,String,String)')": [
                        48,
                        49,
                        50
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#NameFinderSequenceValidator', 'validSequence(int,String,String,String)')": [
                        48
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/ParserEventStream.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'addParseEvents(List,Parse)')": [
                        150
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'addParseEvents(List,Parse)')": [
                        150
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/postag/POSSample.java": {
                "old": {
                    "('opennlp.tools.postag#POSSample', 'equals(Object)')": [
                        161
                    ]
                },
                "new": {
                    "('opennlp.tools.postag#POSSample', 'equals(Object)')": [
                        161
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/model/BaseModel.java": {
                "old": {
                    "('opennlp.tools.util.model#BaseModel', 'getEntryExtension(String)')": [
                        337
                    ]
                },
                "new": {
                    "('opennlp.tools.util.model#BaseModel', 'getEntryExtension(String)')": [
                        337
                    ]
                }
            }
        }
    },
    "8209cd308ee6ff7e61ec0346f1799a32541ed80f": {
        "authored_data": "2020 Nov 25 16:26",
        "commit.message": "OPENNLP-1315: Remove unnecessary call to \"toString()\" (#382)\n\n",
        "commit.author.name": "Alan Wang",
        "pcid": "fb098b0d86a0baf5245cfe0135ba4777a5b58505",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/AbstractConverterTool.java": {
                "old": {
                    "('opennlp.tools.cmdline#AbstractConverterTool', 'getShortDescription')": [
                        51
                    ],
                    "('opennlp.tools.cmdline#AbstractConverterTool', 'run(String,String)')": [
                        109
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#AbstractConverterTool', 'getShortDescription')": [
                        51
                    ],
                    "('opennlp.tools.cmdline#AbstractConverterTool', 'run(String,String)')": [
                        109
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/ArgumentParser.java": {
                "old": {
                    "('opennlp.tools.cmdline#ArgumentParser', 'createUsage(Class)')": [
                        372
                    ],
                    "('opennlp.tools.cmdline#ArgumentParser', 'validateArgumentsLoudly(String,Class)')": [
                        459
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#ArgumentParser', 'createUsage(Class)')": [
                        372
                    ],
                    "('opennlp.tools.cmdline#ArgumentParser', 'validateArgumentsLoudly(String,Class)')": [
                        459
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/CLI.java": {
                "old": {
                    "('opennlp.tools.cmdline#CLI', 'usage')": [
                        189
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#CLI', 'usage')": [
                        189
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerCrossValidatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.chunker#ChunkerCrossValidatorTool', 'run(String,String)')": [
                        93,
                        95
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.chunker#ChunkerCrossValidatorTool', 'run(String,String)')": [
                        93,
                        95
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerEvaluatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.chunker#ChunkerEvaluatorTool', 'run(String,String)')": [
                        102
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.chunker#ChunkerEvaluatorTool', 'run(String,String)')": [
                        102
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.doccat#DoccatTool', 'run(String)')": [
                        78
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.doccat#DoccatTool', 'run(String)')": [
                        78
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/langdetect/LanguageDetectorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.langdetect#LanguageDetectorTool', 'run(String)')": [
                        77
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.langdetect#LanguageDetectorTool', 'run(String)')": [
                        77
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/lemmatizer/LemmatizerMETool.java": {
                "old": {
                    "('opennlp.tools.cmdline.lemmatizer#LemmatizerMETool', 'run(String)')": [
                        79
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.lemmatizer#LemmatizerMETool', 'run(String)')": [
                        79
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderCrossValidatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderCrossValidatorTool', 'run(String,String)')": [
                        164
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderCrossValidatorTool', 'run(String,String)')": [
                        164
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderEvaluatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderEvaluatorTool', 'run(String,String)')": [
                        143
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderEvaluatorTool', 'run(String,String)')": [
                        143
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderTool', 'run(String)')": [
                        100
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderTool', 'run(String)')": [
                        100
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/postag/POSTaggerTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.postag#POSTaggerTool', 'run(String)')": [
                        70
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.postag#POSTaggerTool', 'run(String)')": [
                        70
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/sentdetect/SentenceDetectorCrossValidatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.sentdetect#SentenceDetectorCrossValidatorTool', 'run(String,String)')": [
                        92
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.sentdetect#SentenceDetectorCrossValidatorTool', 'run(String,String)')": [
                        92
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/tokenizer/TokenizerCrossValidatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.tokenizer#TokenizerCrossValidatorTool', 'run(String,String)')": [
                        87
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.tokenizer#TokenizerCrossValidatorTool', 'run(String,String)')": [
                        87
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/DirectorySampleStream.java": {
                "old": {
                    "('opennlp.tools.formats#DirectorySampleStream', None)": [
                        63
                    ]
                },
                "new": {
                    "('opennlp.tools.formats#DirectorySampleStream', None)": [
                        63
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/naivebayes/LogProbability.java": {
                "old": {
                    "('opennlp.tools.ml.naivebayes#LogProbability', 'toString')": [
                        132
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.naivebayes#LogProbability', 'toString')": [
                        132
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/naivebayes/Probability.java": {
                "old": {
                    "('opennlp.tools.ml.naivebayes#Probability', 'toString')": [
                        131
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.naivebayes#Probability', 'toString')": [
                        131
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java": {
                "old": {
                    "('opennlp.tools.parser#Parse', 'clone')": [
                        186
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#Parse', 'clone')": [
                        186
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/postag/POSTaggerFactory.java": {
                "old": {
                    "('opennlp.tools.postag#POSTaggerFactory', 'validatePOSDictionary(POSDictionary,AbstractModel)')": [
                        333
                    ]
                },
                "new": {
                    "('opennlp.tools.postag#POSTaggerFactory', 'validatePOSDictionary(POSDictionary,AbstractModel)')": [
                        333
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/stemmer/snowball/SnowballStemmer.java": {
                "old": {
                    "('opennlp.tools.stemmer.snowball#SnowballStemmer', None)": [
                        118
                    ]
                },
                "new": {
                    "('opennlp.tools.stemmer.snowball#SnowballStemmer', None)": [
                        118
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenSample.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenSample', None)": [
                        58
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenSample', None)": [
                        58
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/Span.java": {
                "old": {
                    "('opennlp.tools.util#Span', 'getCoveredText(CharSequence)')": [
                        230
                    ]
                },
                "new": {
                    "('opennlp.tools.util#Span', 'getCoveredText(CharSequence)')": [
                        230
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/TokenPatternFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#TokenPatternFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        87
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#TokenPatternFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        87
                    ]
                }
            }
        }
    },
    "fb098b0d86a0baf5245cfe0135ba4777a5b58505": {
        "authored_data": "2020 Nov 14 16:03",
        "commit.message": "OPENNLP-1311: replace try-finally with try-with-resources (#380)\n\n",
        "commit.author.name": "Alan Wang",
        "pcid": "0860503f4a80c5c7929fb56f2c18d8d0d7c839a6",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerEvaluatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.chunker#ChunkerEvaluatorTool', 'run(String,String)')": [
                        72,
                        86,
                        87,
                        88,
                        89,
                        90,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.chunker#ChunkerEvaluatorTool', 'run(String,String)')": [
                        72,
                        86,
                        87,
                        93
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatEvaluatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.doccat#DoccatEvaluatorTool', 'run(String,String)')": [
                        89,
                        103,
                        104,
                        105,
                        106,
                        107,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.doccat#DoccatEvaluatorTool', 'run(String,String)')": [
                        89,
                        103,
                        104,
                        109,
                        111
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/langdetect/LanguageDetectorEvaluatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.langdetect#LanguageDetectorEvaluatorTool', 'run(String,String)')": [
                        88,
                        102,
                        103,
                        104,
                        105,
                        106,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.langdetect#LanguageDetectorEvaluatorTool', 'run(String,String)')": [
                        88,
                        102,
                        103,
                        108,
                        110
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/languagemodel/NGramLanguageModelTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.languagemodel#NGramLanguageModelTool', 'run(String)')": [
                        47,
                        48,
                        49,
                        57,
                        76,
                        86,
                        88,
                        89,
                        90,
                        91
                    ],
                    "('opennlp.tools.cmdline.languagemodel#NGramLanguageModelTool', None)": [
                        92,
                        93,
                        94,
                        95
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.languagemodel#NGramLanguageModelTool', 'run(String)')": [
                        47,
                        55,
                        74,
                        84
                    ],
                    "('opennlp.tools.cmdline.languagemodel#NGramLanguageModelTool', None)": [
                        87
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/namefind/TokenNameFinderEvaluatorTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderEvaluatorTool', 'run(String,String)')": [
                        109,
                        123,
                        124,
                        125,
                        126,
                        127,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.namefind#TokenNameFinderEvaluatorTool', 'run(String,String)')": [
                        109,
                        123,
                        124,
                        130
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/entitylinker/EntityLinkerProperties.java": {
                "old": {
                    "('opennlp.tools.entitylinker#EntityLinkerProperties', None)": [
                        41,
                        42,
                        43,
                        45,
                        46,
                        47,
                        48
                    ]
                },
                "new": {
                    "('opennlp.tools.entitylinker#EntityLinkerProperties', None)": [
                        41
                    ]
                }
            }
        }
    },
    "0860503f4a80c5c7929fb56f2c18d8d0d7c839a6": {
        "authored_data": "2020 Nov 14 16:02",
        "commit.message": "OPENNLP-1313: use for each loop (#381)\n\n",
        "commit.author.name": "Alan Wang",
        "pcid": "e90c1e5e49528d362b37f2e182622d4fa0eaa703",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/EvaluationErrorPrinter.java": {
                "old": {
                    "('opennlp.tools.cmdline#EvaluationErrorPrinter', 'findErrors(Span,Span,List,List)')": [
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        230
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline#EvaluationErrorPrinter', 'findErrors(Span,Span,List,List)')": [
                        222,
                        223,
                        224,
                        225,
                        228
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/entitylinker/EntityLinkerTool.java": {
                "old": {
                    "('opennlp.tools.cmdline.entitylinker#EntityLinkerTool', 'run(String)')": [
                        125,
                        126
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.entitylinker#EntityLinkerTool', 'run(String)')": [
                        125,
                        126
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADChunkSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.ad#ADChunkSampleStream', 'processRoot(Node,List,List,List)')": [
                        129,
                        130,
                        131,
                        133
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ad#ADChunkSampleStream', 'processRoot(Node,List,List,List)')": [
                        129,
                        130,
                        131,
                        133
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/frenchtreebank/ConstitDocumentHandler.java": {
                "old": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitDocumentHandler', 'endElement(String,String,String)')": [
                        170,
                        171,
                        177
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitDocumentHandler', 'endElement(String,String,String)')": [
                        170,
                        176
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/DefaultLemmatizerContextGenerator.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#DefaultLemmatizerContextGenerator', 'getContext(int,String,String,String)')": [
                        92,
                        93,
                        97,
                        98
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#DefaultLemmatizerContextGenerator', 'getContext(int,String,String,String)')": [
                        92,
                        93,
                        97,
                        98
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/LemmatizerME.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#LemmatizerME', 'lemmatize(List,List)')": [
                        102,
                        103
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#LemmatizerME', 'lemmatize(List,List)')": [
                        102,
                        103
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/AbstractModelReader.java": {
                "old": {
                    "('opennlp.tools.ml.model#AbstractModelReader', 'getParameters(int)')": [
                        133,
                        135,
                        136,
                        139,
                        140,
                        141,
                        144
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#AbstractModelReader', 'getParameters(int)')": [
                        133,
                        135,
                        136,
                        139,
                        140,
                        141,
                        144
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/naivebayes/NaiveBayesModel.java": {
                "old": {
                    "('opennlp.tools.ml.naivebayes#NaiveBayesModel', 'initOutcomeTotals(String,Context)')": [
                        53,
                        54
                    ],
                    "('opennlp.tools.ml.naivebayes#NaiveBayesModel', 'eval(Context,float,double,EvalParameters,boolean)')": [
                        117,
                        118
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.naivebayes#NaiveBayesModel', 'initOutcomeTotals(String,Context)')": [
                        53
                    ],
                    "('opennlp.tools.ml.naivebayes#NaiveBayesModel', 'eval(Context,float,double,EvalParameters,boolean)')": [
                        116,
                        117
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/BilouCodec.java": {
                "old": {
                    "('opennlp.tools.namefind#BilouCodec', 'areOutcomesCompatible(String)')": [
                        134,
                        135,
                        138,
                        141,
                        144,
                        147
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#BilouCodec', 'areOutcomesCompatible(String)')": [
                        134,
                        137,
                        140,
                        143,
                        146
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/BioCodec.java": {
                "old": {
                    "('opennlp.tools.namefind#BioCodec', 'areOutcomesCompatible(String)')": [
                        119,
                        120,
                        123,
                        126
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#BioCodec', 'areOutcomesCompatible(String)')": [
                        119,
                        122,
                        125
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractBottomUpParser.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'setParents(Parse)')": [
                        206,
                        207,
                        208
                    ],
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'parse(Parse,int)')": [
                        321,
                        322,
                        323,
                        324,
                        325,
                        327,
                        328,
                        330,
                        331,
                        332,
                        333
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'setParents(Parse)')": [
                        206,
                        207,
                        208
                    ],
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'parse(Parse,int)')": [
                        321,
                        322,
                        323,
                        324,
                        325,
                        327,
                        328,
                        330,
                        331,
                        332
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractContextGenerator.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'production(Parse,boolean)')": [
                        109,
                        110
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'cons2(List,Cons,Cons,Collection,boolean)')": [
                        121,
                        122,
                        123,
                        140,
                        141
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'cons3(List,Cons,Cons,Cons,Collection,Collection,boolean,boolean,boolean)')": [
                        173,
                        174,
                        176,
                        188,
                        189,
                        202,
                        203,
                        204,
                        205,
                        210,
                        214,
                        219,
                        221,
                        226,
                        227,
                        228,
                        236,
                        237,
                        238,
                        241,
                        243,
                        244,
                        247,
                        248,
                        253,
                        254,
                        255,
                        264,
                        265,
                        274,
                        279,
                        283
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'surround(Parse,int,String,Collection,List)')": [
                        318,
                        319,
                        322,
                        323,
                        324,
                        333,
                        334
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'getFrontierNodes(List,Parse)')": [
                        416,
                        417
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractContextGenerator', 'production(Parse,boolean)')": [
                        108
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'cons2(List,Cons,Cons,Collection,boolean)')": [
                        119,
                        120,
                        137,
                        138
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'cons3(List,Cons,Cons,Cons,Collection,Collection,boolean,boolean,boolean)')": [
                        170,
                        172,
                        184,
                        197,
                        198,
                        199,
                        200,
                        205,
                        209,
                        214,
                        216,
                        221,
                        222,
                        223,
                        231,
                        232,
                        233,
                        236,
                        238,
                        239,
                        242,
                        243,
                        248,
                        249,
                        250,
                        259,
                        260,
                        269,
                        274,
                        278
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'surround(Parse,int,String,Collection,List)')": [
                        313,
                        316,
                        317,
                        326
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'getFrontierNodes(List,Parse)')": [
                        408
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractParserEventStream.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractParserEventStream', 'getInitialChunks(Parse,List)')": [
                        112,
                        113,
                        122,
                        123
                    ],
                    "('opennlp.tools.parser#AbstractParserEventStream', 'addChunkEvents(List,Parse)')": [
                        141,
                        142,
                        147,
                        148,
                        152,
                        153,
                        159,
                        160
                    ],
                    "('opennlp.tools.parser#AbstractParserEventStream', 'addTagEvents(List,Parse)')": [
                        176,
                        177,
                        181,
                        182,
                        184,
                        185
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractParserEventStream', 'getInitialChunks(Parse,List)')": [
                        112,
                        113,
                        122,
                        123
                    ],
                    "('opennlp.tools.parser#AbstractParserEventStream', 'addChunkEvents(List,Parse)')": [
                        141,
                        146,
                        150,
                        156
                    ],
                    "('opennlp.tools.parser#AbstractParserEventStream', 'addTagEvents(List,Parse)')": [
                        172,
                        176,
                        178
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/ChunkSampleStream.java": {
                "old": {
                    "('opennlp.tools.parser#ChunkSampleStream', 'getInitialChunks(Parse,List)')": [
                        42,
                        43,
                        52,
                        53
                    ],
                    "('opennlp.tools.parser#ChunkSampleStream', 'read')": [
                        74,
                        75,
                        80,
                        81,
                        85,
                        86,
                        92,
                        93
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#ChunkSampleStream', 'getInitialChunks(Parse,List)')": [
                        42,
                        43,
                        52,
                        53
                    ],
                    "('opennlp.tools.parser#ChunkSampleStream', 'read')": [
                        74,
                        79,
                        83,
                        89
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/Parse.java": {
                "old": {
                    "(None, None)": [
                        24
                    ],
                    "('opennlp.tools.parser#Parse', 'show(StringBuffer)')": [
                        374,
                        375
                    ],
                    "('opennlp.tools.parser#Parse', 'getTagSequenceProb')": [
                        419,
                        420
                    ],
                    "('opennlp.tools.parser#Parse', 'updateHeads(HeadRules)')": [
                        760,
                        761
                    ],
                    "('opennlp.tools.parser#Parse', 'parseParse(String,GapLabeler)')": [
                        886,
                        887,
                        893
                    ],
                    "('opennlp.tools.parser#Parse', 'isFlat')": [
                        937,
                        938
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#Parse', 'show(StringBuffer)')": [
                        373
                    ],
                    "('opennlp.tools.parser#Parse', 'getTagSequenceProb')": [
                        417,
                        418
                    ],
                    "('opennlp.tools.parser#Parse', 'updateHeads(HeadRules)')": [
                        758
                    ],
                    "('opennlp.tools.parser#Parse', 'parseParse(String,GapLabeler)')": [
                        883,
                        889
                    ],
                    "('opennlp.tools.parser#Parse', 'isFlat')": [
                        933,
                        934
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/ParserChunkerSequenceValidator.java": {
                "old": {
                    "('opennlp.tools.parser#ParserChunkerSequenceValidator', None)": [
                        34,
                        35,
                        37,
                        38
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#ParserChunkerSequenceValidator', None)": [
                        34,
                        36,
                        37
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/chunking/CheckContextGenerator.java": {
                "old": {
                    "(None, None)": [
                        22
                    ],
                    "('opennlp.tools.parser.chunking#CheckContextGenerator', 'getContext(Parse,String,int,int)')": [
                        79,
                        80
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.chunking#CheckContextGenerator', 'getContext(Parse,String,int,int)')": [
                        78
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/lang/en/HeadRules.java": {
                "old": {
                    "('opennlp.tools.parser.lang.en#HeadRules', 'getHead(Parse,String)')": [
                        152,
                        153,
                        154
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.lang.en#HeadRules', 'getHead(Parse,String)')": [
                        152,
                        153,
                        154
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/lang/es/AncoraSpanishHeadRules.java": {
                "old": {
                    "('opennlp.tools.parser.lang.es#AncoraSpanishHeadRules', 'getHead(Parse,String)')": [
                        150,
                        152,
                        153
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.lang.es#AncoraSpanishHeadRules', 'getHead(Parse,String)')": [
                        150,
                        152,
                        153
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/Parser.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'advanceChunks(Parse,double)')": [
                        209,
                        210
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'advanceParses(Parse,double)')": [
                        347,
                        348,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        366,
                        368,
                        370,
                        371,
                        372,
                        376,
                        377,
                        378,
                        380,
                        394,
                        399,
                        400,
                        404,
                        405,
                        407,
                        414,
                        417,
                        418,
                        421,
                        422
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'advanceChunks(Parse,double)')": [
                        209,
                        210
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'advanceParses(Parse,double)')": [
                        347,
                        348,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        366,
                        368,
                        370,
                        371,
                        375,
                        376,
                        378,
                        392,
                        397,
                        401,
                        403,
                        410,
                        413,
                        416,
                        417
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/postag/DefaultPOSContextGenerator.java": {
                "old": {
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getContext(int,Object,String)')": [
                        154,
                        155,
                        159,
                        160
                    ]
                },
                "new": {
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getContext(int,Object,String)')": [
                        154,
                        155,
                        159,
                        160
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/BrownTokenClassFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#BrownTokenClassFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        39,
                        40
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#BrownTokenClassFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        39,
                        40
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/BrownTokenFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#BrownTokenFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        38,
                        39
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#BrownTokenFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        38,
                        39
                    ]
                }
            }
        }
    }
}