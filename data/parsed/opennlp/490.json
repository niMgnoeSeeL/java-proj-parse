{
    "f781fcaf0f19766f7c9105911613f86d22b2091a": {
        "authored_data": "2016 Dec 23 19:35",
        "commit.message": "OPENNLP-870: ContextGenerator is now Generic\n\nThis closes #19\n",
        "commit.author.name": "Daniel Russ",
        "pcid": "221086874fcdaf60798df9c3aebbcbf0c4433865",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/BasicContextGenerator.java": {
                "old": {
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', None)": [
                        32
                    ],
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', 'getContext(Object)')": [
                        45
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', None)": [
                        32
                    ],
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', 'getContext(String)')": [
                        45
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/ContextGenerator.java": {
                "old": {
                    "(None, None)": [
                        25,
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        30
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/RealBasicEventStream.java": {
                "old": {
                    "('opennlp.tools.ml.maxent#RealBasicEventStream', None)": [
                        29
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#RealBasicEventStream', None)": [
                        29
                    ]
                }
            }
        }
    },
    "9cb610bcbc3c541a3326d6504056d5526876c4cb": {
        "authored_data": "2016 Dec 24 01:52",
        "commit.message": "OPENNLP-871: Clean up code base for release\n\nThis closes #20\n",
        "commit.author.name": "smarthi",
        "pcid": "1d1c41945a50a740519131bfff4e1875de69dd6b",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/formats/brat/BratNameSampleStreamFactory.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23,
                        24
                    ],
                    "('opennlp.tools.formats.brat#BratNameSampleStreamFactory', None)": [
                        78
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.brat#BratNameSampleStreamFactory', None)": [
                        75
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/frenchtreebank/ConstitParseSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitParseSampleStream', None)": [
                        39
                    ],
                    "('opennlp.tools.formats.frenchtreebank#ConstitParseSampleStream', 'read')": [
                        60,
                        65
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.frenchtreebank#ConstitParseSampleStream', None)": [
                        39
                    ],
                    "('opennlp.tools.formats.frenchtreebank#ConstitParseSampleStream', 'read')": [
                        60,
                        65
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/muc/DocumentSplitterStream.java": {
                "old": {
                    "('opennlp.tools.formats.muc#DocumentSplitterStream', None)": [
                        33
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.muc#DocumentSplitterStream', None)": [
                        33
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/muc/Muc6NameSampleStreamFactory.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23
                    ],
                    "('opennlp.tools.formats.muc#Muc6NameSampleStreamFactory', 'create(String)')": [
                        58,
                        59,
                        60,
                        61,
                        62,
                        63
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.muc#Muc6NameSampleStreamFactory', 'create(String)')": [
                        56,
                        57
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/muc/MucElementNames.java": {
                "old": {
                    "('opennlp.tools.formats.muc#MucElementNames', None)": [
                        35
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.muc#MucElementNames', None)": [
                        35
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/muc/MucNameContentHandler.java": {
                "old": {
                    "('opennlp.tools.formats.muc#MucNameContentHandler', None)": [
                        46,
                        58,
                        68,
                        69,
                        71,
                        73
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.muc#MucNameContentHandler', None)": [
                        46,
                        58,
                        68,
                        69,
                        71,
                        73
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/muc/MucNameSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.muc#MucNameSampleStream', None)": [
                        34
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.muc#MucNameSampleStream', None)": [
                        34
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/muc/SgmlParser.java": {
                "old": {
                    "('opennlp.tools.formats.muc#SgmlParser', 'getAttributes(CharSequence)')": [
                        78
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.muc#SgmlParser', 'getAttributes(CharSequence)')": [
                        78
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ontonotes/DocumentToLineStream.java": {
                "old": {
                    "('opennlp.tools.formats.ontonotes#DocumentToLineStream', 'read(String)')": [
                        44
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ontonotes#DocumentToLineStream', 'read(String)')": [
                        44
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ontonotes/OntoNotesNameSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats.ontonotes#OntoNotesNameSampleStream', None)": [
                        45,
                        50
                    ],
                    "('opennlp.tools.formats.ontonotes#OntoNotesNameSampleStream', 'read')": [
                        110,
                        111
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ontonotes#OntoNotesNameSampleStream', None)": [
                        45,
                        50
                    ],
                    "('opennlp.tools.formats.ontonotes#OntoNotesNameSampleStream', 'read')": [
                        110,
                        111
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ontonotes/OntoNotesNameSampleStreamFactory.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23
                    ],
                    "('opennlp.tools.formats.ontonotes#OntoNotesNameSampleStreamFactory', 'create(String)')": [
                        44,
                        46,
                        47,
                        48,
                        49,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ontonotes#OntoNotesNameSampleStreamFactory', 'create(String)')": [
                        42,
                        43,
                        44,
                        45,
                        47,
                        48,
                        50
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/ontonotes/OntoNotesParseSampleStreamFactory.java": {
                "old": {
                    "(None, None)": [
                        21,
                        23
                    ],
                    "('opennlp.tools.formats.ontonotes#OntoNotesParseSampleStreamFactory', None)": [
                        34
                    ],
                    "('opennlp.tools.formats.ontonotes#OntoNotesParseSampleStreamFactory', 'create(String)')": [
                        44,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ontonotes#OntoNotesParseSampleStreamFactory', 'create(String)')": [
                        41,
                        42,
                        43,
                        44,
                        46,
                        47
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/DictionaryLemmatizer.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', None)": [
                        39
                    ],
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', 'getDictMap')": [
                        69
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', None)": [
                        40
                    ],
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', 'getDictMap')": [
                        70
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/GISTrainer.java": {
                "old": {
                    "(None, None)": [
                        23,
                        24,
                        31,
                        32
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'trainModel(int,DataIndexer,Prior,int,int)')": [
                        259,
                        390,
                        398
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'findParameters(int,double)')": [
                        408
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'nextIteration(double,CompletionService)')": [
                        574
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#GISTrainer', 'trainModel(int,DataIndexer,Prior,int,int)')": [
                        255,
                        386,
                        394
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'findParameters(int,double)')": [
                        404
                    ],
                    "('opennlp.tools.ml.maxent#GISTrainer', 'nextIteration(double,CompletionService)')": [
                        570
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/GenericModelReader.java": {
                "old": {
                    "('opennlp.tools.ml.model#GenericModelReader', 'checkModelType')": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        52,
                        53,
                        55,
                        56,
                        57
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#GenericModelReader', 'checkModelType')": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        53,
                        54,
                        56,
                        57,
                        58
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/OnePassRealValueDataIndexer.java": {
                "old": {
                    "('opennlp.tools.ml.model#OnePassRealValueDataIndexer', 'index(LinkedList,Map)')": [
                        76,
                        80,
                        81
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#OnePassRealValueDataIndexer', 'index(LinkedList,Map)')": [
                        76,
                        80,
                        81
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/naivebayes/BinaryNaiveBayesModelWriter.java": {
                "old": {
                    "('opennlp.tools.ml.naivebayes#BinaryNaiveBayesModelWriter', None)": [
                        34
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.naivebayes#BinaryNaiveBayesModelWriter', None)": [
                        34
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/naivebayes/NaiveBayesTrainer.java": {
                "old": {
                    "('opennlp.tools.ml.naivebayes#NaiveBayesTrainer', 'trainModel(DataIndexer)')": [
                        140
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.naivebayes#NaiveBayesTrainer', 'trainModel(DataIndexer)')": [
                        140
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/perceptron/BinaryPerceptronModelWriter.java": {
                "old": {
                    "('opennlp.tools.ml.perceptron#BinaryPerceptronModelWriter', None)": [
                        34
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.perceptron#BinaryPerceptronModelWriter', None)": [
                        34
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/perceptron/PerceptronModelWriter.java": {
                "old": {
                    "('opennlp.tools.ml.perceptron#PerceptronModelWriter', None)": [
                        43
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronModelWriter', 'computeOutcomePatterns(ComparablePredicate)')": [
                        102,
                        103,
                        110
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.perceptron#PerceptronModelWriter', None)": [
                        43
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronModelWriter', 'computeOutcomePatterns(ComparablePredicate)')": [
                        102,
                        103,
                        110
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/perceptron/PerceptronTrainer.java": {
                "old": {
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'isValid')": [
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'trainModel(int,DataIndexer,int,boolean)')": [
                        220
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'findParameters(int,boolean)')": [
                        232,
                        242,
                        276,
                        298,
                        299,
                        312,
                        313,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        332,
                        339,
                        340,
                        341
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'isPerfectSquare(int)')": [
                        422
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'isValid')": [
                        89
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'trainModel(int,DataIndexer,int,boolean)')": [
                        215
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'findParameters(int,boolean)')": [
                        227,
                        237,
                        271,
                        293,
                        294,
                        307,
                        308,
                        314,
                        319,
                        326,
                        327,
                        328
                    ],
                    "('opennlp.tools.ml.perceptron#PerceptronTrainer', 'isPerfectSquare(int)')": [
                        409
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/perceptron/PlainTextPerceptronModelWriter.java": {
                "old": {
                    "(None, None)": [
                        24,
                        30
                    ],
                    "('opennlp.tools.ml.perceptron#PlainTextPerceptronModelWriter', None)": [
                        37,
                        48
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.perceptron#PlainTextPerceptronModelWriter', None)": [
                        35,
                        46
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/perceptron/SimplePerceptronSequenceTrainer.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', None)": [
                        64,
                        78,
                        79,
                        80,
                        84
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', 'isValid')": [
                        97,
                        98,
                        99,
                        100,
                        101,
                        102
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', 'trainModel(int,SequenceStream,int,boolean)')": [
                        130,
                        142,
                        183
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', 'nextIteration(int)')": [
                        228,
                        230,
                        252,
                        265,
                        272,
                        286,
                        294,
                        297,
                        302,
                        306
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        25
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', None)": [
                        65,
                        79,
                        80,
                        81,
                        85
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', 'isValid')": [
                        98,
                        99
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', 'trainModel(int,SequenceStream,int,boolean)')": [
                        127,
                        139,
                        180
                    ],
                    "('opennlp.tools.ml.perceptron#SimplePerceptronSequenceTrainer', 'nextIteration(int)')": [
                        225,
                        227,
                        249,
                        262,
                        269,
                        283,
                        291,
                        294,
                        299,
                        303
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/NameFinderME.java": {
                "old": {
                    "(None, None)": [
                        48
                    ],
                    "('opennlp.tools.namefind#NameFinderME', 'createFeatureGenerator(byte,Map)')": [
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123
                    ],
                    "('opennlp.tools.namefind#NameFinderME', 'dropOverlappingSpans(Span)')": [
                        443
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#NameFinderME', 'createFeatureGenerator(byte,Map)')": [
                        116,
                        117,
                        118,
                        120
                    ],
                    "('opennlp.tools.namefind#NameFinderME', 'dropOverlappingSpans(Span)')": [
                        439
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ngram/NGramModel.java": {
                "old": {
                    "(None, None)": [
                        28,
                        33
                    ],
                    "('opennlp.tools.ngram#NGramModel', None)": [
                        60,
                        61,
                        62,
                        63,
                        64,
                        85,
                        86
                    ]
                },
                "new": {
                    "('opennlp.tools.ngram#NGramModel', None)": [
                        58,
                        59,
                        60,
                        81
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractBottomUpParser.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'parse(Parse,int)')": [
                        352
                    ],
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'advanceTags(Parse)')": [
                        463,
                        464,
                        465,
                        478
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'parse(Parse,int)')": [
                        352
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractContextGenerator', 'cons2(List,Cons,Cons,Collection,boolean)')": [
                        121
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/ChunkContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(int,String,String,String)')": [
                        118
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(int,String,String,String)')": [
                        118
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/AttachContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#AttachContextGenerator', 'getContext(Parse,int,List,int)')": [
                        63,
                        64,
                        150,
                        152,
                        161,
                        162,
                        163
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#AttachContextGenerator', 'getContext(Parse,int,List,int)')": [
                        63,
                        149,
                        151
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/BuildContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#BuildContextGenerator', 'getContext(Parse,int)')": [
                        118
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#BuildContextGenerator', 'getContext(Parse,int)')": [
                        118
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/CheckContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#CheckContextGenerator', 'getContext(Parse,Parse,int,boolean)')": [
                        45
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#CheckContextGenerator', 'getContext(Parse,Parse,int,boolean)')": [
                        45
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/Parser.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'getRightFrontier(Parse,Set)')": [
                        143,
                        157
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'isBuilt(Parse)')": [
                        196,
                        197,
                        198,
                        199,
                        200
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', None)": [
                        201,
                        211
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'isComplete(Parse)')": [
                        206,
                        207,
                        208,
                        209,
                        210
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'advanceParses(Parse,double)')": [
                        229,
                        231,
                        257,
                        265
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'train(String,ObjectStream,HeadRules,TrainingParameters)')": [
                        437,
                        460,
                        472,
                        484
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'getRightFrontier(Parse,Set)')": [
                        143,
                        157
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'isBuilt(Parse)')": [
                        196
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'isComplete(Parse)')": [
                        201
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'advanceParses(Parse,double)')": [
                        219,
                        221,
                        247,
                        255
                    ],
                    "('opennlp.tools.parser.treeinsert#Parser', 'train(String,ObjectStream,HeadRules,TrainingParameters)')": [
                        427,
                        450,
                        462,
                        474
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/ParserEventStream.java": {
                "old": {
                    "(None, None)": [
                        28,
                        40
                    ],
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'getNonAdjoinedParent(Parse)')": [
                        76
                    ],
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'addParseEvents(List,Parse)')": [
                        133,
                        135,
                        136,
                        137,
                        203,
                        211
                    ],
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'main(String)')": [
                        336,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375,
                        376
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'getNonAdjoinedParent(Parse)')": [
                        74
                    ],
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'addParseEvents(List,Parse)')": [
                        131,
                        133,
                        134,
                        135,
                        201,
                        209
                    ],
                    "('opennlp.tools.parser.treeinsert#ParserEventStream', 'main(String)')": [
                        334,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        375
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/postag/POSModel.java": {
                "old": {
                    "('opennlp.tools.postag#POSModel', None)": [
                        46,
                        81,
                        85,
                        89
                    ]
                },
                "new": {
                    "('opennlp.tools.postag#POSModel', None)": [
                        46,
                        81,
                        85,
                        89
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/postag/POSTaggerME.java": {
                "old": {
                    "(None, None)": [
                        27,
                        29,
                        48
                    ],
                    "('opennlp.tools.postag#POSTaggerME', None)": [
                        120,
                        130
                    ],
                    "('opennlp.tools.postag#POSTaggerME', 'train(String,ObjectStream,TrainingParameters,POSTaggerFactory)')": [
                        240
                    ],
                    "('opennlp.tools.postag#POSTaggerME', 'populatePOSDictionary(ObjectStream,MutableTagDictionary,int)')": [
                        305,
                        322,
                        349
                    ]
                },
                "new": {
                    "('opennlp.tools.postag#POSTaggerME', None)": [
                        117,
                        127
                    ],
                    "('opennlp.tools.postag#POSTaggerME', 'train(String,ObjectStream,TrainingParameters,POSTaggerFactory)')": [
                        237
                    ],
                    "('opennlp.tools.postag#POSTaggerME', 'populatePOSDictionary(ObjectStream,MutableTagDictionary,int)')": [
                        302,
                        319,
                        346
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/BaseToolFactory.java": {
                "old": {
                    "('opennlp.tools.util#BaseToolFactory', 'createArtifactSerializersMap')": [
                        66
                    ],
                    "('opennlp.tools.util#BaseToolFactory', 'createArtifactMap')": [
                        78
                    ],
                    "('opennlp.tools.util#BaseToolFactory', 'createManifestEntries')": [
                        87
                    ]
                },
                "new": {
                    "('opennlp.tools.util#BaseToolFactory', 'createArtifactSerializersMap')": [
                        66
                    ],
                    "('opennlp.tools.util#BaseToolFactory', 'createArtifactMap')": [
                        78
                    ],
                    "('opennlp.tools.util#BaseToolFactory', 'createManifestEntries')": [
                        87
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/eval/OntoNotes4NameFinderEval.java": {
                "old": {
                    "(None, None)": [
                        21,
                        24,
                        25,
                        26,
                        27
                    ],
                    "('opennlp.tools.eval#OntoNotes4NameFinderEval', 'crossEval(TrainingParameters,String,double)')": [
                        45,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        33,
                        34
                    ],
                    "('opennlp.tools.eval#OntoNotes4NameFinderEval', 'crossEval(TrainingParameters,String,double)')": [
                        42,
                        43,
                        44,
                        45,
                        47,
                        48
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/eval/OntoNotes4ParserEval.java": {
                "old": {
                    "(None, None)": [
                        21,
                        26,
                        27,
                        28,
                        29
                    ],
                    "('opennlp.tools.eval#OntoNotes4ParserEval', 'crossEval(TrainingParameters,HeadRules,double)')": [
                        48,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57
                    ]
                },
                "new": {
                    "(None, None)": [
                        36,
                        37
                    ],
                    "('opennlp.tools.eval#OntoNotes4ParserEval', 'crossEval(TrainingParameters,HeadRules,double)')": [
                        45,
                        46,
                        47,
                        48,
                        50,
                        51
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/eval/OntoNotes4PosTaggerEval.java": {
                "old": {
                    "(None, None)": [
                        21,
                        24,
                        25,
                        26,
                        27
                    ],
                    "('opennlp.tools.eval#OntoNotes4PosTaggerEval', 'crossEval(TrainingParameters,double)')": [
                        45,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54
                    ]
                },
                "new": {
                    "(None, None)": [
                        33,
                        34
                    ],
                    "('opennlp.tools.eval#OntoNotes4PosTaggerEval', 'crossEval(TrainingParameters,double)')": [
                        42,
                        43,
                        44,
                        45,
                        47,
                        48
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/postag/POSTaggerFactoryTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        26,
                        27,
                        28,
                        40
                    ],
                    "('opennlp.tools.postag#POSTaggerFactoryTest', 'trainPOSModel(ModelType,POSTaggerFactory)')": [
                        56
                    ],
                    "('opennlp.tools.postag#POSTaggerFactoryTest', 'testPOSTaggerWithCustomFactory')": [
                        69,
                        70,
                        87
                    ],
                    "('opennlp.tools.postag#POSTaggerFactoryTest', 'testPOSTaggerWithDefaultFactory')": [
                        96,
                        97,
                        101,
                        103,
                        113,
                        115
                    ]
                },
                "new": {
                    "(None, None)": [
                        36,
                        37,
                        38
                    ],
                    "('opennlp.tools.postag#POSTaggerFactoryTest', 'trainPOSModel(POSTaggerFactory)')": [
                        54
                    ],
                    "('opennlp.tools.postag#POSTaggerFactoryTest', 'testPOSTaggerWithCustomFactory')": [
                        67,
                        68,
                        85
                    ],
                    "('opennlp.tools.postag#POSTaggerFactoryTest', 'testPOSTaggerWithDefaultFactory')": [
                        94,
                        95,
                        99,
                        101,
                        111,
                        113
                    ]
                }
            }
        }
    },
    "1d1c41945a50a740519131bfff4e1875de69dd6b": {
        "authored_data": "2016 Dec 21 13:55",
        "commit.message": "Update Jersey to 2.25 and use Grizzly HTTP Server\n\nSee issue OPENNNLP-897\n",
        "commit.author.name": "Joern Kottmann",
        "pcid": "c49a87abdb6c07a123a2234f4ec5ca3d21306d69",
        "changes": {
            "opennlp-brat-annotator/src/main/java/opennlp/bratann/NameFinderAnnService.java": {
                "old": {
                    "(None, None)": [
                        24,
                        25,
                        26,
                        27,
                        117
                    ],
                    "('opennlp.bratann#NameFinderAnnService', 'main(String)')": [
                        51,
                        52,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116
                    ]
                },
                "new": {
                    "(None, None)": [
                        21,
                        25,
                        38,
                        39,
                        40,
                        41
                    ],
                    "('opennlp.bratann#NameFinderAnnService', 'main(String)')": [
                        52,
                        54,
                        55,
                        98,
                        99,
                        100
                    ]
                }
            }
        }
    },
    "c49a87abdb6c07a123a2234f4ec5ca3d21306d69": {
        "authored_data": "2016 Dec 23 03:39",
        "commit.message": "OPENNLP-871: Cleanup for Java 8 and remove deprecated tokenizer code\n\nCloses #17\n",
        "commit.author.name": "smarthi",
        "pcid": "99323ad68c5eb3f9bae4314984931acca3699521",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/chunker/ChunkerMETool.java": {
                "old": {
                    "('opennlp.tools.cmdline.chunker#ChunkerMETool', 'run(String)')": [
                        72,
                        73,
                        75,
                        76
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.chunker#ChunkerMETool', 'run(String)')": [
                        72,
                        74
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/dictionary/Dictionary.java": {
                "old": {
                    "(None, None)": [
                        34
                    ],
                    "('opennlp.tools.dictionary#Dictionary', None)": [
                        116,
                        117,
                        118,
                        119,
                        120
                    ]
                },
                "new": {
                    "('opennlp.tools.dictionary#Dictionary', None)": [
                        115
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerCrossValidator.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        27
                    ],
                    "('opennlp.tools.tokenize#TokenizerCrossValidator', None)": [
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerFactory.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenizerFactory', None)": [
                        40
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'createManifestEntries')": [
                        115,
                        116,
                        120,
                        121
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getAlphaNumericPattern')": [
                        170,
                        171,
                        172
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'isUseAlphaNumericOptmization')": [
                        192,
                        193
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getAbbreviationDictionary')": [
                        206,
                        207
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getLanguageCode')": [
                        218
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenizerFactory', None)": [
                        40
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'createManifestEntries')": [
                        115,
                        119
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getAlphaNumericPattern')": [
                        168,
                        169
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'isUseAlphaNumericOptmization')": [
                        189,
                        190
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getAbbreviationDictionary')": [
                        203
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactory', 'getLanguageCode')": [
                        214
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerME.java": {
                "old": {
                    "(None, None)": [
                        37
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', None)": [
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        342,
                        343,
                        344
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,boolean,TrainingParameters)')": [
                        274,
                        275,
                        276,
                        277
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,Dictionary,boolean,TrainingParameters)')": [
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,boolean)')": [
                        338,
                        339,
                        340,
                        341
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerModel.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenizerModel', None)": [
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/eval/Conll00ChunkerEval.java": {
                "old": {
                    "('opennlp.tools.eval#Conll00ChunkerEval', 'eval(ChunkerModel,File,double)')": [
                        62,
                        63
                    ]
                },
                "new": {
                    "('opennlp.tools.eval#Conll00ChunkerEval', 'eval(ChunkerModel,File,double)')": [
                        62
                    ]
                }
            }
        }
    },
    "99323ad68c5eb3f9bae4314984931acca3699521": {
        "authored_data": "2016 Dec 22 16:31",
        "commit.message": "Define update and clearAdaptiveData as default methods\n\nSee issue OPENNLP-856\n",
        "commit.author.name": "Kottmann",
        "pcid": "71e40d0b30fbef976da3595fef8736a4e1245466",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/AdaptiveFeatureGenerator.java": {
                "old": {
                    "(None, None)": [
                        61,
                        67
                    ]
                },
                "new": {
                    "(None, None)": [
                        61,
                        67
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/AdditionalContextFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#AdditionalContextFeatureGenerator', None)": [
                        27
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#AdditionalContextFeatureGenerator', None)": [
                        27
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/BigramNameFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#BigramNameFeatureGenerator', None)": [
                        22
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#BigramNameFeatureGenerator', None)": [
                        22
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/BrownBigramFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#BrownBigramFeatureGenerator', None)": [
                        25
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#BrownBigramFeatureGenerator', None)": [
                        25
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/BrownTokenClassFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#BrownTokenClassFeatureGenerator', None)": [
                        25
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#BrownTokenClassFeatureGenerator', None)": [
                        25
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/BrownTokenFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#BrownTokenFeatureGenerator', None)": [
                        25
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#BrownTokenFeatureGenerator', None)": [
                        25
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/CharacterNgramFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#CharacterNgramFeatureGenerator', None)": [
                        31
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#CharacterNgramFeatureGenerator', None)": [
                        31
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/DictionaryFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#DictionaryFeatureGenerator', None)": [
                        34
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#DictionaryFeatureGenerator', None)": [
                        34
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/DocumentBeginFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#DocumentBeginFeatureGenerator', None)": [
                        22
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#DocumentBeginFeatureGenerator', None)": [
                        22
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/FastTokenClassFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#FastTokenClassFeatureGenerator', None)": [
                        33
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#FastTokenClassFeatureGenerator', None)": [
                        33
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/FeatureGeneratorAdapter.java": {
                "new": {
                    "(None, None)": [
                        25,
                        26,
                        28
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/InSpanGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#InSpanGenerator', None)": [
                        30
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#InSpanGenerator', None)": [
                        30
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/OutcomePriorFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#OutcomePriorFeatureGenerator', None)": [
                        26
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#OutcomePriorFeatureGenerator', None)": [
                        26
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/PrefixFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#PrefixFeatureGenerator', None)": [
                        22
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#PrefixFeatureGenerator', None)": [
                        22
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/SentenceFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#SentenceFeatureGenerator', None)": [
                        25
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#SentenceFeatureGenerator', None)": [
                        25
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/SuffixFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#SuffixFeatureGenerator', None)": [
                        22
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#SuffixFeatureGenerator', None)": [
                        22
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/TokenClassFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#TokenClassFeatureGenerator', None)": [
                        28
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#TokenClassFeatureGenerator', None)": [
                        28
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/TokenFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#TokenFeatureGenerator', None)": [
                        28
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#TokenFeatureGenerator', None)": [
                        28
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/TokenPatternFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#TokenPatternFeatureGenerator', None)": [
                        32
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#TokenPatternFeatureGenerator', None)": [
                        32
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/TrigramNameFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#TrigramNameFeatureGenerator', None)": [
                        26
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#TrigramNameFeatureGenerator', None)": [
                        26
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/WordClusterFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#WordClusterFeatureGenerator', None)": [
                        24
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#WordClusterFeatureGenerator', None)": [
                        24
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/util/featuregen/IdentityFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#IdentityFeatureGenerator', None)": [
                        22
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#IdentityFeatureGenerator', None)": [
                        22
                    ]
                }
            }
        }
    },
    "71e40d0b30fbef976da3595fef8736a4e1245466": {
        "authored_data": "2016 Dec 22 15:55",
        "commit.message": "OPENNLP-900: LemmatizerME and DictionaryLemmatizer share data format\n\nThis closes #16\n",
        "commit.author.name": "Daniel Russ",
        "pcid": "927ee0fc7f47c7c6ccbd72a184aaa6215d77943c",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/DictionaryLemmatizer.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', None)": [
                        57,
                        87
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#DictionaryLemmatizer', None)": [
                        57,
                        87
                    ]
                }
            }
        }
    },
    "927ee0fc7f47c7c6ccbd72a184aaa6215d77943c": {
        "authored_data": "2016 Dec 21 19:35",
        "commit.message": "OPENNLP-899: Replace deprecated code from Tokenizer Trainer\n\nThis closes #13\n",
        "commit.author.name": "smarthi",
        "pcid": "bbda5de4098e0ffb884384a2fbbccae8b181742b",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerCrossValidator.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenizerCrossValidator', 'evaluate(ObjectStream,int)')": [
                        97,
                        98,
                        99
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenizerCrossValidator', 'evaluate(ObjectStream,int)')": [
                        97
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerFactory.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenizerFactory', None)": [
                        40
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenizerFactory', None)": [
                        40
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerME.java": {
                "old": {
                    "(None, None)": [
                        55
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(ObjectStream,TokenizerFactory,TrainingParameters)')": [
                        253,
                        254
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,boolean)')": [
                        341
                    ]
                },
                "new": {
                    "(None, None)": [
                        55
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(ObjectStream,TokenizerFactory,TrainingParameters)')": [
                        253
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,boolean)')": [
                        340,
                        341
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerModel.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenizerModel', None)": [
                        127,
                        137,
                        138,
                        139,
                        149,
                        150,
                        151
                    ],
                    "('opennlp.tools.tokenize#TokenizerModel', 'useAlphaNumericOptimization')": [
                        199,
                        200,
                        201,
                        202
                    ],
                    "('opennlp.tools.tokenize#TokenizerModel', 'main(String)')": [
                        227,
                        228
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenizerModel', None)": [
                        127,
                        137,
                        138,
                        148,
                        149
                    ],
                    "('opennlp.tools.tokenize#TokenizerModel', 'useAlphaNumericOptimization')": [
                        197
                    ],
                    "('opennlp.tools.tokenize#TokenizerModel', 'main(String)')": [
                        222,
                        223
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/eval/ArvoresDeitadasEval.java": {
                "old": {
                    "('opennlp.tools.eval#ArvoresDeitadasEval', 'getPerceptronZeroCutoff')": [
                        75
                    ]
                },
                "new": {
                    "('opennlp.tools.eval#ArvoresDeitadasEval', 'getPerceptronZeroCutoff')": [
                        75
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerTestUtil.java": {
                "old": {
                    "(None, None)": [
                        23,
                        26
                    ],
                    "('opennlp.tools.tokenize#TokenizerTestUtil', 'createSimpleMaxentTokenModel')": [
                        41,
                        62,
                        63
                    ],
                    "('opennlp.tools.tokenize#TokenizerTestUtil', 'createMaxentTokenModel')": [
                        78
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('opennlp.tools.tokenize#TokenizerTestUtil', 'createSimpleMaxentTokenModel')": [
                        40,
                        61,
                        62
                    ],
                    "('opennlp.tools.tokenize#TokenizerTestUtil', 'createMaxentTokenModel')": [
                        77
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/tokenize/TokenizerTrainer.java": {
                "old": {
                    "('opennlp.uima.tokenize#TokenizerTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        260
                    ]
                },
                "new": {
                    "(None, None)": [
                        35,
                        44
                    ],
                    "('opennlp.uima.tokenize#TokenizerTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        262,
                        263,
                        264
                    ]
                }
            }
        }
    },
    "bbda5de4098e0ffb884384a2fbbccae8b181742b": {
        "authored_data": "2016 Dec 21 17:58",
        "commit.message": "OPENNLP-871: Cleanup for Java 8\n\nThis closes #12\n",
        "commit.author.name": "smarthi",
        "pcid": "dd2aaccc0737eace57a949f2d7d7291bddb81ee9",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerCrossValidator.java": {
                "old": {
                    "('opennlp.tools.tokenize#TokenizerCrossValidator', 'evaluate(ObjectStream,int)')": [
                        89,
                        90
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenizerCrossValidator', 'evaluate(ObjectStream,int)')": [
                        89
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/TokenizerME.java": {
                "old": {
                    "(None, None)": [
                        21,
                        29
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', None)": [
                        130,
                        131,
                        148,
                        149,
                        337,
                        338,
                        339,
                        340
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'getAbbreviations(Dictionary)')": [
                        154
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(ObjectStream,TokenizerFactory,TrainingParameters)')": [
                        244
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,Dictionary,boolean,TrainingParameters)')": [
                        308
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,boolean)')": [
                        346
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#TokenizerME', None)": [
                        128,
                        129,
                        146,
                        147
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'getAbbreviations(Dictionary)')": [
                        152
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(ObjectStream,TokenizerFactory,TrainingParameters)')": [
                        242
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,Dictionary,boolean,TrainingParameters)')": [
                        306
                    ],
                    "('opennlp.tools.tokenize#TokenizerME', 'train(String,ObjectStream,boolean)')": [
                        340
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/ObjectStreamUtils.java": {
                "new": {
                    "('opennlp.tools.util#ObjectStreamUtils', None)": [
                        34,
                        94
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/tokenize/TokenizerFactoryTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        23,
                        24,
                        31,
                        32,
                        33
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'train(TokenizerFactory)')": [
                        59,
                        60
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', None)": [
                        61,
                        62
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'loadAbbDictionary')": [
                        63
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'testDefault')": [
                        79,
                        95
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'testNullDict')": [
                        133,
                        134
                    ]
                },
                "new": {
                    "(None, None)": [
                        36,
                        37,
                        38,
                        39,
                        40,
                        41
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'train(TokenizerFactory)')": [
                        58
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', None)": [
                        59,
                        60
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'loadAbbDictionary')": [
                        61
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'testDefault')": [
                        77,
                        93
                    ],
                    "('opennlp.tools.tokenize#TokenizerFactoryTest', 'testNullDict')": [
                        131
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/chunker/ChunkerTrainer.java": {
                "old": {
                    "('opennlp.uima.chunker#ChunkerTrainer', None)": [
                        69,
                        85,
                        86
                    ],
                    "('opennlp.uima.chunker#ChunkerTrainer', 'initialize')": [
                        98
                    ],
                    "('opennlp.uima.chunker#ChunkerTrainer', 'processChunk(CAS,AnnotationFS)')": [
                        186,
                        187,
                        188
                    ]
                },
                "new": {
                    "('opennlp.uima.chunker#ChunkerTrainer', None)": [
                        69
                    ],
                    "('opennlp.uima.chunker#ChunkerTrainer', 'initialize')": [
                        96
                    ],
                    "('opennlp.uima.chunker#ChunkerTrainer', 'processChunk(CAS,AnnotationFS)')": [
                        184,
                        185,
                        186
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/doccat/AbstractDocumentCategorizer.java": {
                "old": {
                    "('opennlp.uima.doccat#AbstractDocumentCategorizer', None)": [
                        44,
                        45
                    ],
                    "('opennlp.uima.doccat#AbstractDocumentCategorizer', 'initialize(UimaContext)')": [
                        57
                    ]
                },
                "new": {
                    "('opennlp.uima.doccat#AbstractDocumentCategorizer', 'initialize(UimaContext)')": [
                        55
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/doccat/DocumentCategorizer.java": {
                "old": {
                    "('opennlp.uima.doccat#DocumentCategorizer', 'setBestCategory(CAS,String)')": [
                        59,
                        60
                    ]
                },
                "new": {
                    "('opennlp.uima.doccat#DocumentCategorizer', 'setBestCategory(CAS,String)')": [
                        59
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/doccat/DocumentCategorizerTrainer.java": {
                "old": {
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', None)": [
                        59,
                        60,
                        63,
                        64,
                        65
                    ],
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', 'initialize')": [
                        79
                    ],
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', 'typeSystemInit(TypeSystem)')": [
                        98
                    ]
                },
                "new": {
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', None)": [
                        61
                    ],
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', 'initialize')": [
                        75
                    ],
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', 'typeSystemInit(TypeSystem)')": [
                        94
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/namefind/AbstractNameFinder.java": {
                "old": {
                    "('opennlp.uima.namefind#AbstractNameFinder', 'process(CAS)')": [
                        126,
                        143,
                        145
                    ]
                },
                "new": {
                    "('opennlp.uima.namefind#AbstractNameFinder', 'process(CAS)')": [
                        126,
                        143,
                        145
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/namefind/NameFinderTrainer.java": {
                "old": {
                    "('opennlp.uima.namefind#NameFinderTrainer', None)": [
                        129,
                        302
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'iteratorToList(Iterator)')": [
                        223
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'isContaining(AnnotationFS,AnnotationFS)')": [
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'createNames(List,List)')": [
                        261
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        395
                    ]
                },
                "new": {
                    "('opennlp.uima.namefind#NameFinderTrainer', None)": [
                        129,
                        236,
                        292
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'iteratorToList(Iterator)')": [
                        223
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'isContaining(AnnotationFS,AnnotationFS)')": [
                        234,
                        235
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'createNames(List,List)')": [
                        251
                    ],
                    "('opennlp.uima.namefind#NameFinderTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        385
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/normalizer/Normalizer.java": {
                "old": {
                    "('opennlp.uima.normalizer#Normalizer', None)": [
                        68
                    ],
                    "('opennlp.uima.normalizer#Normalizer', 'process(CAS)')": [
                        235
                    ],
                    "(None, None)": [
                        236,
                        237
                    ]
                },
                "new": {
                    "('opennlp.uima.normalizer#Normalizer', None)": [
                        68
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/normalizer/StringDictionary.java": {
                "old": {
                    "('opennlp.uima.normalizer#StringDictionary', None)": [
                        37,
                        47,
                        49,
                        50
                    ]
                },
                "new": {
                    "('opennlp.uima.normalizer#StringDictionary', None)": [
                        37,
                        48
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/parser/Parser.java": {
                "old": {
                    "('opennlp.uima.parser#Parser', None)": [
                        73
                    ],
                    "('opennlp.uima.parser#Parser', 'process(CAS,AnnotationFS)')": [
                        274
                    ]
                },
                "new": {
                    "('opennlp.uima.parser#Parser', None)": [
                        73
                    ],
                    "('opennlp.uima.parser#Parser', 'process(CAS,AnnotationFS)')": [
                        274
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/postag/POSTagger.java": {
                "old": {
                    "('opennlp.uima.postag#POSTagger', 'process(CAS)')": [
                        167,
                        168,
                        169
                    ]
                },
                "new": {
                    "('opennlp.uima.postag#POSTagger', 'process(CAS)')": [
                        167,
                        168,
                        169
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/postag/POSTaggerTrainer.java": {
                "old": {
                    "(None, None)": [
                        20,
                        24,
                        28,
                        30,
                        33,
                        39
                    ],
                    "('opennlp.uima.postag#POSTaggerTrainer', None)": [
                        85
                    ],
                    "('opennlp.uima.postag#POSTaggerTrainer', 'process(CAS,AnnotationFS)')": [
                        176,
                        177
                    ]
                },
                "new": {
                    "(None, None)": [
                        27,
                        28,
                        29,
                        30,
                        31
                    ],
                    "('opennlp.uima.postag#POSTaggerTrainer', None)": [
                        84
                    ],
                    "('opennlp.uima.postag#POSTaggerTrainer', 'process(CAS,AnnotationFS)')": [
                        175,
                        176
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/sentdetect/SentenceDetectorTrainer.java": {
                "old": {
                    "('opennlp.uima.sentdetect#SentenceDetectorTrainer', None)": [
                        70,
                        78,
                        79
                    ],
                    "('opennlp.uima.sentdetect#SentenceDetectorTrainer', 'initialize')": [
                        97
                    ],
                    "('opennlp.uima.sentdetect#SentenceDetectorTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        175,
                        179
                    ]
                },
                "new": {
                    "('opennlp.uima.sentdetect#SentenceDetectorTrainer', None)": [
                        70
                    ],
                    "('opennlp.uima.sentdetect#SentenceDetectorTrainer', 'initialize')": [
                        95
                    ],
                    "('opennlp.uima.sentdetect#SentenceDetectorTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        173,
                        177
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/tokenize/TokenizerTrainer.java": {
                "old": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44
                    ],
                    "('opennlp.uima.tokenize#TokenizerTrainer', None)": [
                        83,
                        86
                    ],
                    "('opennlp.uima.tokenize#TokenizerTrainer', 'process(CAS,AnnotationFS)')": [
                        197
                    ],
                    "('opennlp.uima.tokenize#TokenizerTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        234,
                        258
                    ]
                },
                "new": {
                    "(None, None)": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59
                    ],
                    "('opennlp.uima.tokenize#TokenizerTrainer', None)": [
                        82,
                        85
                    ],
                    "('opennlp.uima.tokenize#TokenizerTrainer', 'process(CAS,AnnotationFS)')": [
                        196
                    ],
                    "('opennlp.uima.tokenize#TokenizerTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        233,
                        257
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/util/ContainingConstraint.java": {
                "old": {
                    "('opennlp.uima.util#ContainingConstraint', None)": [
                        33,
                        34
                    ],
                    "('opennlp.uima.util#ContainingConstraint', 'isContaining(AnnotationFS,AnnotationFS)')": [
                        72,
                        73,
                        74,
                        75,
                        76
                    ],
                    "(None, None)": [
                        77
                    ]
                },
                "new": {
                    "('opennlp.uima.util#ContainingConstraint', None)": [
                        33
                    ],
                    "('opennlp.uima.util#ContainingConstraint', 'isContaining(AnnotationFS,AnnotationFS)')": [
                        71,
                        72
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/util/OpennlpUtil.java": {
                "old": {
                    "('opennlp.uima.util#OpennlpUtil', 'loadBytes(File)')": [
                        59
                    ],
                    "('opennlp.uima.util#OpennlpUtil', 'loadTrainingParams(String,boolean)')": [
                        74
                    ]
                },
                "new": {
                    "('opennlp.uima.util#OpennlpUtil', 'loadBytes(File)')": [
                        59
                    ],
                    "('opennlp.uima.util#OpennlpUtil', 'loadTrainingParams(String,boolean)')": [
                        74
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/util/UimaUtil.java": {
                "old": {
                    "('opennlp.uima.util#UimaUtil', 'removeAnnotations(CAS,AnnotationFS,Type)')": [
                        105
                    ]
                },
                "new": {
                    "('opennlp.uima.util#UimaUtil', 'removeAnnotations(CAS,AnnotationFS,Type)')": [
                        105
                    ]
                }
            }
        }
    },
    "dd2aaccc0737eace57a949f2d7d7291bddb81ee9": {
        "authored_data": "2016 Dec 21 16:12",
        "commit.message": "Replace manual array copy\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "Joern Kottmann",
        "pcid": "06c27b37ccbde70514e035a50ba0a6ee1ff94ea3",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/GISTrainer.java": {
                "old": {
                    "('opennlp.tools.ml.maxent#GISTrainer', 'trainModel(int,DataIndexer,Prior,int,int)')": [
                        364,
                        365,
                        366
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#GISTrainer', 'trainModel(int,DataIndexer,Prior,int,int)')": [
                        364
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/AbstractModelReader.java": {
                "old": {
                    "('opennlp.tools.ml.model#AbstractModelReader', 'getParameters(int)')": [
                        138,
                        139,
                        140
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#AbstractModelReader', 'getParameters(int)')": [
                        138
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractBottomUpParser.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'buildDictionary(ObjectStream,HeadRules,TrainingParameters)')": [
                        579,
                        580,
                        581
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractBottomUpParser', 'buildDictionary(ObjectStream,HeadRules,TrainingParameters)')": [
                        579
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/chunking/ParserEventStream.java": {
                "old": {
                    "('opennlp.tools.parser.chunking#ParserEventStream', 'reduceChunks(Parse,int,Parse)')": [
                        96,
                        97,
                        98
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.chunking#ParserEventStream', 'reduceChunks(Parse,int,Parse)')": [
                        96
                    ]
                }
            }
        }
    }
}