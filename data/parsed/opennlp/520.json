{
    "cd6b11dc616de890f3072876aeff656ed66eefd1": {
        "authored_data": "2016 Oct 28 19:46",
        "commit.message": "Remove unnecessary static modifier from enum\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "9e1e77d371f6d11432e163c0f8c171b5c77d94ea",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinderFactory.java": {
                "old": {
                    "('opennlp.tools.namefind#RegexNameFinderFactory', None)": [
                        110
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#RegexNameFinderFactory', None)": [
                        110
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/DetokenizationDictionary.java": {
                "old": {
                    "('opennlp.tools.tokenize#DetokenizationDictionary', None)": [
                        36
                    ]
                },
                "new": {
                    "('opennlp.tools.tokenize#DetokenizationDictionary', None)": [
                        36
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/tokenize/Detokenizer.java": {
                "old": {
                    "(None, None)": [
                        30
                    ]
                },
                "new": {
                    "(None, None)": [
                        30
                    ]
                }
            }
        }
    },
    "9e1e77d371f6d11432e163c0f8c171b5c77d94ea": {
        "authored_data": "2016 Oct 28 19:22",
        "commit.message": "Remove unnecessay semicolons\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "dd483afe90b157ab39af6fab1f6f1a5d1775fbe3",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/formats/ad/ADSentenceStream.java": {
                "old": {
                    "('opennlp.tools.formats.ad#ADSentenceStream', None)": [
                        388
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.ad#ADSentenceStream', None)": [
                        388
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/AbstractModel.java": {
                "old": {
                    "('opennlp.tools.ml.model#AbstractModel', None)": [
                        37
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#AbstractModel', None)": [
                        37
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/RegexNameFinderFactory.java": {
                "old": {
                    "(None, None)": [
                        196
                    ]
                },
                "new": {
                    "(None, None)": [
                        196
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/sentdetect/SentenceSample.java": {
                "old": {
                    "('opennlp.tools.sentdetect#SentenceSample', None)": [
                        46
                    ]
                },
                "new": {
                    "('opennlp.tools.sentdetect#SentenceSample', None)": [
                        46
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/stemmer/snowball/AbstractSnowballStemmer.java": {
                "old": {
                    "(None, None)": [
                        36
                    ]
                },
                "new": {
                    "(None, None)": [
                        36
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/stemmer/snowball/Among.java": {
                "old": {
                    "(None, None)": [
                        62
                    ]
                },
                "new": {
                    "(None, None)": [
                        62
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/stemmer/snowball/SnowballProgram.java": {
                "old": {
                    "(None, None)": [
                        462
                    ]
                },
                "new": {
                    "(None, None)": [
                        462
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/AbstractEventStream.java": {
                "old": {
                    "('opennlp.tools.util#AbstractEventStream', None)": [
                        31
                    ]
                },
                "new": {
                    "('opennlp.tools.util#AbstractEventStream', None)": [
                        31
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/util/AbstractEventStreamTest.java": {
                "old": {
                    "('opennlp.tools.util#AbstractEventStreamTest', None)": [
                        42
                    ]
                },
                "new": {
                    "('opennlp.tools.util#AbstractEventStreamTest', None)": [
                        42
                    ]
                }
            }
        }
    },
    "dd483afe90b157ab39af6fab1f6f1a5d1775fbe3": {
        "authored_data": "2016 Oct 28 16:54",
        "commit.message": "Remove unnecessary parentheses\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "d79b97cc662ce0428d1823cfa5afe7988a3419e6",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/chunker/ChunkSample.java": {
                "old": {
                    "('opennlp.tools.chunker#ChunkSample', None)": [
                        69,
                        70,
                        71
                    ],
                    "('opennlp.tools.chunker#ChunkSample', 'phrasesAsSpanList(String,String,String)')": [
                        120
                    ]
                },
                "new": {
                    "('opennlp.tools.chunker#ChunkSample', None)": [
                        69,
                        70,
                        71
                    ],
                    "('opennlp.tools.chunker#ChunkSample', 'phrasesAsSpanList(String,String,String)')": [
                        120
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/chunker/DefaultChunkerSequenceValidator.java": {
                "old": {
                    "('opennlp.tools.chunker#DefaultChunkerSequenceValidator', 'validOutcome(String,String)')": [
                        27,
                        31,
                        34
                    ]
                },
                "new": {
                    "('opennlp.tools.chunker#DefaultChunkerSequenceValidator', 'validOutcome(String,String)')": [
                        27,
                        31,
                        34
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/Conll03NameSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats#Conll03NameSampleStream', 'read')": [
                        119,
                        124
                    ]
                },
                "new": {
                    "('opennlp.tools.formats#Conll03NameSampleStream', 'read')": [
                        119,
                        124
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/EvalitaNameSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats#EvalitaNameSampleStream', 'read')": [
                        163
                    ]
                },
                "new": {
                    "('opennlp.tools.formats#EvalitaNameSampleStream', 'read')": [
                        163
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/NameSampleDataStreamFactory.java": {
                "old": {
                    "('opennlp.tools.formats#NameSampleDataStreamFactory', 'create(String)')": [
                        57
                    ]
                },
                "new": {
                    "('opennlp.tools.formats#NameSampleDataStreamFactory', 'create(String)')": [
                        57
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/formats/convert/ParseToTokenSampleStreamFactory.java": {
                "old": {
                    "('opennlp.tools.formats.convert#ParseToTokenSampleStreamFactory', 'create(String)')": [
                        49,
                        50
                    ]
                },
                "new": {
                    "('opennlp.tools.formats.convert#ParseToTokenSampleStreamFactory', 'create(String)')": [
                        49,
                        50
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/lemmatizer/LemmaSample.java": {
                "old": {
                    "('opennlp.tools.lemmatizer#LemmaSample', None)": [
                        61,
                        62,
                        63
                    ]
                },
                "new": {
                    "('opennlp.tools.lemmatizer#LemmaSample', None)": [
                        61,
                        62,
                        63
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/AbstractModel.java": {
                "old": {
                    "('opennlp.tools.ml.model#AbstractModel', 'getNumOutcomes')": [
                        142
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#AbstractModel', 'getNumOutcomes')": [
                        142
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/ComparableEvent.java": {
                "old": {
                    "('opennlp.tools.ml.model#ComparableEvent', 'compareTo(ComparableEvent)')": [
                        52,
                        53
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#ComparableEvent', 'compareTo(ComparableEvent)')": [
                        52,
                        53
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/ComparablePredicate.java": {
                "old": {
                    "('opennlp.tools.ml.model#ComparablePredicate', 'compareTo(ComparablePredicate)')": [
                        39,
                        40
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#ComparablePredicate', 'compareTo(ComparablePredicate)')": [
                        39,
                        40
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/MutableContext.java": {
                "old": {
                    "('opennlp.tools.ml.model#MutableContext', 'contains(int)')": [
                        62
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#MutableContext', 'contains(int)')": [
                        62
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/RealValueFileEventStream.java": {
                "old": {
                    "('opennlp.tools.ml.model#RealValueFileEventStream', 'read')": [
                        89
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#RealValueFileEventStream', 'read')": [
                        89
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/naivebayes/NaiveBayesModel.java": {
                "old": {
                    "('opennlp.tools.ml.naivebayes#NaiveBayesModel', 'getProbability(double,double,double,boolean)')": [
                        139
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.naivebayes#NaiveBayesModel', 'getProbability(double,double,double,boolean)')": [
                        139
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/namefind/DictionaryNameFinder.java": {
                "old": {
                    "('opennlp.tools.namefind#DictionaryNameFinder', 'find(String)')": [
                        93
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#DictionaryNameFinder', 'find(String)')": [
                        93
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractContextGenerator', 'punctbo(Parse,int)')": [
                        61
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'cons(Parse,int)')": [
                        76
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'consbo(Parse,int)')": [
                        91
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractContextGenerator', 'punctbo(Parse,int)')": [
                        61
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'cons(Parse,int)')": [
                        76
                    ],
                    "('opennlp.tools.parser#AbstractContextGenerator', 'consbo(Parse,int)')": [
                        91
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/AbstractParserEventStream.java": {
                "old": {
                    "('opennlp.tools.parser#AbstractParserEventStream', 'lastChild(Parse,Parse)')": [
                        202
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#AbstractParserEventStream', 'lastChild(Parse,Parse)')": [
                        202
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/ChunkContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(int,String,String,String)')": [
                        167
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'chunkandpostag(int,String,String,String)')": [
                        176
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'chunkandpostagbo(int,String,String)')": [
                        185
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(int,String,String,String)')": [
                        167
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'chunkandpostag(int,String,String,String)')": [
                        176
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'chunkandpostagbo(int,String,String)')": [
                        185
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/chunking/BuildContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser.chunking#BuildContextGenerator', 'getContext(Parse,int)')": [
                        307
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.chunking#BuildContextGenerator', 'getContext(Parse,int)')": [
                        307
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/sentdetect/SentenceDetectorME.java": {
                "old": {
                    "('opennlp.tools.sentdetect#SentenceDetectorME', 'sentPosDetect(String)')": [
                        218
                    ]
                },
                "new": {
                    "('opennlp.tools.sentdetect#SentenceDetectorME', 'sentPosDetect(String)')": [
                        218
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/namefind/NameFinderMETest.java": {
                "old": {
                    "('opennlp.tools.namefind#NameFinderMETest', 'testOnlyWithEntitiesWithTypes')": [
                        275
                    ]
                },
                "new": {
                    "('opennlp.tools.namefind#NameFinderMETest', 'testOnlyWithEntitiesWithTypes')": [
                        275
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/chunker/ChunkerTrainer.java": {
                "old": {
                    "('opennlp.uima.chunker#ChunkerTrainer', 'processSentence(CAS,AnnotationFS)')": [
                        170
                    ]
                },
                "new": {
                    "('opennlp.uima.chunker#ChunkerTrainer', 'processSentence(CAS,AnnotationFS)')": [
                        170
                    ]
                }
            }
        }
    },
    "d79b97cc662ce0428d1823cfa5afe7988a3419e6": {
        "authored_data": "2016 Oct 28 16:27",
        "commit.message": "Remove unnecessary casts\n\nSee issue OPENNLP-871\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "34af4aec2d7f3f5513de09a00b2a730c7570dc6c",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/doccat/DoccatFineGrainedReportListener.java": {
                "old": {
                    "('opennlp.tools.cmdline.doccat#DoccatFineGrainedReportListener', None)": [
                        628,
                        629,
                        633,
                        634
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.doccat#DoccatFineGrainedReportListener', None)": [
                        628,
                        629,
                        633,
                        634
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/lemmatizer/LemmatizerFineGrainedReportListener.java": {
                "old": {
                    "('opennlp.tools.cmdline.lemmatizer#LemmatizerFineGrainedReportListener', None)": [
                        757,
                        758,
                        762,
                        763
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.lemmatizer#LemmatizerFineGrainedReportListener', None)": [
                        757,
                        758,
                        762,
                        763
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/cmdline/postag/POSTaggerFineGrainedReportListener.java": {
                "old": {
                    "('opennlp.tools.cmdline.postag#POSTaggerFineGrainedReportListener', None)": [
                        764,
                        765,
                        769,
                        770
                    ]
                },
                "new": {
                    "('opennlp.tools.cmdline.postag#POSTaggerFineGrainedReportListener', None)": [
                        764,
                        765,
                        769,
                        770
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/languagemodel/NGramLanguageModel.java": {
                "old": {
                    "('opennlp.tools.languagemodel#NGramLanguageModel', 'getLaplaceSmoothingProbability(StringList,StringList)')": [
                        125
                    ]
                },
                "new": {
                    "('opennlp.tools.languagemodel#NGramLanguageModel', 'getLaplaceSmoothingProbability(StringList,StringList)')": [
                        125
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/BasicContextGenerator.java": {
                "old": {
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', 'getContext(Object)')": [
                        47
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#BasicContextGenerator', 'getContext(Object)')": [
                        47
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/maxent/GISModel.java": {
                "old": {
                    "('opennlp.tools.ml.maxent#GISModel', 'eval(int,float,double,EvalParameters)')": [
                        202
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.maxent#GISModel', 'eval(int,float,double,EvalParameters)')": [
                        202
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ml/model/OnePassRealValueDataIndexer.java": {
                "old": {
                    "('opennlp.tools.ml.model#OnePassRealValueDataIndexer', 'sortAndMerge(List,boolean)')": [
                        66
                    ]
                },
                "new": {
                    "('opennlp.tools.ml.model#OnePassRealValueDataIndexer', 'sortAndMerge(List,boolean)')": [
                        66
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/chunking/Parser.java": {
                "old": {
                    "('opennlp.tools.parser.chunking#Parser', 'train(String,ObjectStream,HeadRules,TrainingParameters)')": [
                        318
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.chunking#Parser', 'train(String,ObjectStream,HeadRules,TrainingParameters)')": [
                        318
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/treeinsert/Parser.java": {
                "old": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'train(String,ObjectStream,HeadRules,TrainingParameters)')": [
                        492
                    ]
                },
                "new": {
                    "('opennlp.tools.parser.treeinsert#Parser', 'train(String,ObjectStream,HeadRules,TrainingParameters)')": [
                        492
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/chunker/ChunkerTrainer.java": {
                "old": {
                    "('opennlp.uima.chunker#ChunkerTrainer', 'processSentence(CAS,AnnotationFS)')": [
                        169
                    ]
                },
                "new": {
                    "('opennlp.uima.chunker#ChunkerTrainer', 'processSentence(CAS,AnnotationFS)')": [
                        169
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/doccat/DocumentCategorizer.java": {
                "old": {
                    "('opennlp.uima.doccat#DocumentCategorizer', 'setBestCategory(CAS,String)')": [
                        59,
                        60,
                        63
                    ]
                },
                "new": {
                    "('opennlp.uima.doccat#DocumentCategorizer', 'setBestCategory(CAS,String)')": [
                        59,
                        60,
                        63
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/namefind/AbstractNameFinder.java": {
                "old": {
                    "('opennlp.uima.namefind#AbstractNameFinder', 'process(CAS)')": [
                        155,
                        161,
                        162,
                        164,
                        165
                    ]
                },
                "new": {
                    "('opennlp.uima.namefind#AbstractNameFinder', 'process(CAS)')": [
                        155,
                        161,
                        162,
                        164,
                        165
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/normalizer/StringDictionary.java": {
                "old": {
                    "('opennlp.uima.normalizer#StringDictionary', 'get(StringList)')": [
                        60
                    ]
                },
                "new": {
                    "('opennlp.uima.normalizer#StringDictionary', 'get(StringList)')": [
                        60
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/parser/Parser.java": {
                "old": {
                    "('opennlp.uima.parser#Parser', 'process(CAS,AnnotationFS)')": [
                        277,
                        283,
                        284
                    ]
                },
                "new": {
                    "('opennlp.uima.parser#Parser', 'process(CAS,AnnotationFS)')": [
                        277,
                        283
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/postag/POSTaggerTrainer.java": {
                "old": {
                    "('opennlp.uima.postag#POSTaggerTrainer', 'process(CAS,AnnotationFS)')": [
                        184
                    ]
                },
                "new": {
                    "('opennlp.uima.postag#POSTaggerTrainer', 'process(CAS,AnnotationFS)')": [
                        184
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/util/AnnotationComboIterator.java": {
                "old": {
                    "('opennlp.uima.util#AnnotationComboIterator', None)": [
                        89,
                        94,
                        116,
                        163
                    ],
                    "('opennlp.uima.util#AnnotationComboIterator', 'next')": [
                        179
                    ]
                },
                "new": {
                    "('opennlp.uima.util#AnnotationComboIterator', None)": [
                        89,
                        94,
                        116,
                        163
                    ],
                    "('opennlp.uima.util#AnnotationComboIterator', 'next')": [
                        179
                    ]
                }
            }
        }
    },
    "4da7f4c643d45b57a6a94e34797481b476194336": {
        "authored_data": "2016 Dec 19 17:51",
        "commit.message": "OPENNLP-887: Replace the Cache class with a LinkedHashMap\n\nThis closes #9\n",
        "commit.author.name": "smarthi",
        "pcid": "7d1123a9cccaf3c22e0c2b3428c45728c3c2387e",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/ml/BeamSearch.java": {
                "old": {
                    "('opennlp.tools.ml#BeamSearch', None)": [
                        50,
                        69
                    ],
                    "('opennlp.tools.ml#BeamSearch', 'bestSequences(int,T,Object,double,BeamSearchContextGenerator,SequenceValidator)')": [
                        105,
                        116,
                        117,
                        118
                    ]
                },
                "new": {
                    "('opennlp.tools.ml#BeamSearch', None)": [
                        50,
                        69
                    ],
                    "('opennlp.tools.ml#BeamSearch', 'bestSequences(int,T,Object,double,BeamSearchContextGenerator,SequenceValidator)')": [
                        105,
                        116
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/ngram/NGramGenerator.java": {
                "old": {
                    "('opennlp.tools.ngram#NGramGenerator', 'generate(List,int,String)')": [
                        40
                    ],
                    "('opennlp.tools.ngram#NGramGenerator', 'generate(char,int,String)')": [
                        62
                    ]
                },
                "new": {
                    "('opennlp.tools.ngram#NGramGenerator', 'generate(List,int,String)')": [
                        40
                    ],
                    "('opennlp.tools.ngram#NGramGenerator', 'generate(char,int,String)')": [
                        62
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/parser/ChunkContextGenerator.java": {
                "old": {
                    "('opennlp.tools.parser#ChunkContextGenerator', None)": [
                        32,
                        43
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(Object)')": [
                        49
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(int,String,String,String)')": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        93,
                        94,
                        116
                    ]
                },
                "new": {
                    "('opennlp.tools.parser#ChunkContextGenerator', None)": [
                        32,
                        43
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(Object)')": [
                        49
                    ],
                    "('opennlp.tools.parser#ChunkContextGenerator', 'getContext(int,String,String,String)')": [
                        57,
                        58,
                        59,
                        60,
                        61,
                        92,
                        93,
                        115
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/postag/DefaultPOSContextGenerator.java": {
                "old": {
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', None)": [
                        42,
                        67
                    ],
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getPrefixes(String)')": [
                        72
                    ],
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getSuffixes(String)')": [
                        80
                    ],
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getContext(int,Object,String)')": [
                        98,
                        101,
                        134,
                        144
                    ]
                },
                "new": {
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', None)": [
                        42,
                        67
                    ],
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getPrefixes(String)')": [
                        72
                    ],
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getSuffixes(String)')": [
                        80
                    ],
                    "('opennlp.tools.postag#DefaultPOSContextGenerator', 'getContext(int,Object,String)')": [
                        98,
                        133,
                        143
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/BeamSearch.java": {
                "old": {
                    "('opennlp.tools.util#BeamSearch', None)": [
                        47,
                        75,
                        95
                    ],
                    "('opennlp.tools.util#BeamSearch', 'validSequence(int,T,String,String)')": [
                        89,
                        90,
                        91,
                        92,
                        93,
                        94
                    ],
                    "('opennlp.tools.util#BeamSearch', 'bestSequences(int,T,Object,double)')": [
                        113,
                        114,
                        132,
                        143,
                        144,
                        145
                    ]
                },
                "new": {
                    "('opennlp.tools.util#BeamSearch', None)": [
                        47,
                        75
                    ],
                    "('opennlp.tools.util#BeamSearch', 'validSequence(int,T,String,String)')": [
                        89
                    ],
                    "('opennlp.tools.util#BeamSearch', 'bestSequences(int,T,Object,double)')": [
                        107,
                        108,
                        126,
                        137
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/Cache.java": {
                "old": {
                    "(None, None)": [
                        20,
                        21,
                        23,
                        28,
                        207,
                        208,
                        209,
                        238,
                        239,
                        240,
                        260,
                        261,
                        262,
                        263
                    ],
                    "('opennlp.tools.util#Cache', None)": [
                        29,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        79,
                        80,
                        81,
                        139,
                        140,
                        169,
                        170,
                        171,
                        172,
                        175,
                        176,
                        179,
                        180,
                        183,
                        184,
                        187,
                        188,
                        191,
                        192,
                        195,
                        196,
                        199,
                        200,
                        203,
                        204
                    ],
                    "('opennlp.tools.util#Cache', 'clear')": [
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78
                    ],
                    "('opennlp.tools.util#Cache', 'put(Object,Object)')": [
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138
                    ],
                    "('opennlp.tools.util#Cache', 'get(Object)')": [
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168
                    ],
                    "('opennlp.tools.util#Cache', 'containsKey(Object)')": [
                        173,
                        174
                    ],
                    "('opennlp.tools.util#Cache', 'containsValue(Object)')": [
                        177,
                        178
                    ],
                    "('opennlp.tools.util#Cache', 'entrySet')": [
                        181,
                        182
                    ],
                    "('opennlp.tools.util#Cache', 'isEmpty')": [
                        185,
                        186
                    ],
                    "('opennlp.tools.util#Cache', 'keySet')": [
                        189,
                        190
                    ],
                    "('opennlp.tools.util#Cache', 'putAll(Map)')": [
                        193,
                        194
                    ],
                    "('opennlp.tools.util#Cache', 'remove(Object)')": [
                        197,
                        198
                    ],
                    "('opennlp.tools.util#Cache', 'size')": [
                        201,
                        202
                    ],
                    "('opennlp.tools.util#Cache', 'values')": [
                        205,
                        206
                    ],
                    "('opennlp.tools.util#ObjectWrapper', None)": [
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        222,
                        223,
                        226,
                        227,
                        230,
                        231,
                        234,
                        235
                    ],
                    "('opennlp.tools.util#ObjectWrapper', 'getObject')": [
                        220,
                        221
                    ],
                    "('opennlp.tools.util#ObjectWrapper', 'getListItem')": [
                        224,
                        225
                    ],
                    "('opennlp.tools.util#ObjectWrapper', 'setObject(Object)')": [
                        228,
                        229
                    ],
                    "('opennlp.tools.util#ObjectWrapper', 'setListItem(DoubleLinkedListElement)')": [
                        232,
                        233
                    ],
                    "('opennlp.tools.util#ObjectWrapper', 'eqauls(Object)')": [
                        236,
                        237
                    ],
                    "('opennlp.tools.util#DoubleLinkedListElement', None)": [
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', None)": [
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        281,
                        282,
                        283,
                        289,
                        290,
                        291,
                        306,
                        307,
                        308,
                        312,
                        313,
                        317,
                        318,
                        321,
                        322,
                        328,
                        329
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'addFirst(Object)')": [
                        276,
                        277,
                        278,
                        279,
                        280
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'addLast(Object)')": [
                        284,
                        285,
                        286,
                        287,
                        288
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'insert(Object)')": [
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'getFirst')": [
                        309,
                        310,
                        311
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'getLast')": [
                        314,
                        315,
                        316
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'getCurrent')": [
                        319,
                        320
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'next')": [
                        323,
                        324,
                        325,
                        326,
                        327
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'prev')": [
                        330,
                        331,
                        332,
                        333,
                        334
                    ],
                    "('opennlp.tools.util#DoubleLinkedList', 'toString')": [
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('opennlp.tools.util#Cache', None)": [
                        26,
                        28,
                        30,
                        31
                    ],
                    "('opennlp.tools.util#Cache', 'removeEldestEntry(Map)')": [
                        35,
                        36
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/CachedFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#CachedFeatureGenerator', None)": [
                        35,
                        42
                    ],
                    "('opennlp.tools.util.featuregen#CachedFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        52,
                        65
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#CachedFeatureGenerator', None)": [
                        35,
                        42
                    ],
                    "('opennlp.tools.util.featuregen#CachedFeatureGenerator', 'createFeatures(List,String,int,String)')": [
                        52,
                        65
                    ]
                }
            }
        }
    },
    "7d1123a9cccaf3c22e0c2b3428c45728c3c2387e": {
        "authored_data": "2016 Dec 19 15:28",
        "commit.message": "Fix hash sums of person ner and parser test\n\nSee issue OPENNLP-877\n",
        "commit.author.name": "Joern Kottmann",
        "pcid": "a7826d2b86810ea0e094281c575b99d377021295",
        "changes": {
            "opennlp-tools/src/test/java/opennlp/tools/eval/SourceForgeModelEval.java": {
                "old": {
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerPersonModel')": [
                        256
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalParserModel')": [
                        337,
                        338,
                        339,
                        344,
                        370
                    ]
                },
                "new": {
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerPersonModel')": [
                        256
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalParserModel')": [
                        366
                    ]
                }
            }
        }
    },
    "a7826d2b86810ea0e094281c575b99d377021295": {
        "authored_data": "2016 Dec 15 20:03",
        "commit.message": "Replace private text with Leipzig english news\n\nSee issue OPENNLP-877\n",
        "commit.author.name": "Joern Kottmann",
        "pcid": "bbc5a34a8968dc39abcd24bdbc50b69851c6caa5",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/formats/LeipzigDoccatSampleStream.java": {
                "old": {
                    "('opennlp.tools.formats#LeipzigDoccatSampleStream', None)": [
                        54,
                        55
                    ],
                    "('opennlp.tools.formats#LeipzigDoccatSampleStream', 'read')": [
                        71
                    ]
                },
                "new": {
                    "(None, None)": [
                        26
                    ],
                    "('opennlp.tools.formats#LeipzigDoccatSampleStream', None)": [
                        44,
                        45,
                        57,
                        58,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76
                    ],
                    "('opennlp.tools.formats#LeipzigDoccatSampleStream', 'read')": [
                        88
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/eval/SourceForgeModelEval.java": {
                "old": {
                    "(None, None)": [
                        58,
                        59,
                        61,
                        62,
                        63
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalSentenceModel')": [
                        79,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        103
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalTokenModel')": [
                        117,
                        119,
                        120,
                        121,
                        122,
                        123,
                        130
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNameFinder(TokenNameFinderModel,BigInteger)')": [
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerDateModel')": [
                        162
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerLocationModel')": [
                        170
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerMoneyModel')": [
                        178
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerOrganizationModel')": [
                        186
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerPercentageModel')": [
                        194
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerTimeModel')": [
                        210
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalChunkerModel')": [
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        238
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalPosModel(POSModel,BigInteger)')": [
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalMaxentModel')": [
                        268
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalPerceptronModel')": [
                        276
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalParserModel')": [
                        283,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        307
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        59,
                        60,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'ensureTestDataIsCorrect')": [
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', None)": [
                        106,
                        107,
                        108,
                        109,
                        182,
                        187,
                        188
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalSentenceModel')": [
                        113,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        140
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalTokenModel')": [
                        146,
                        147,
                        148,
                        149,
                        158,
                        159,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        179
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'createLineWiseStream')": [
                        183,
                        184,
                        185,
                        186
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNameFinder(TokenNameFinderModel,BigInteger)')": [
                        197,
                        198,
                        199,
                        200,
                        201
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerDateModel')": [
                        216
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerLocationModel')": [
                        224
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerMoneyModel')": [
                        232
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerOrganizationModel')": [
                        240
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerPercentageModel')": [
                        248
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalNerTimeModel')": [
                        264
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalChunkerModel')": [
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        291
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalPosModel(POSModel,BigInteger)')": [
                        296,
                        297,
                        298,
                        299,
                        304,
                        305,
                        306,
                        307,
                        308
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalMaxentModel')": [
                        323
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalPerceptronModel')": [
                        331
                    ],
                    "('opennlp.tools.eval#SourceForgeModelEval', 'evalParserModel')": [
                        337,
                        338,
                        339,
                        341,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        370
                    ]
                }
            }
        }
    },
    "bbc5a34a8968dc39abcd24bdbc50b69851c6caa5": {
        "authored_data": "2016 Dec 15 16:52",
        "commit.message": "Remove deprecated methods from Doccat\n\nSee issue OPENNLP-885\n",
        "commit.author.name": "J\u00f6rn Kottmann",
        "pcid": "080656237bb56d52ca97f4da4171b0ce1ec42e4a",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/doccat/DoccatModel.java": {
                "old": {
                    "('opennlp.tools.doccat#DoccatModel', None)": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        97,
                        98,
                        99,
                        102,
                        103
                    ],
                    "('opennlp.tools.doccat#DoccatModel', 'getChunkerModel')": [
                        100,
                        101
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/doccat/DocumentCategorizerME.java": {
                "old": {
                    "('opennlp.tools.doccat#DocumentCategorizerME', None)": [
                        179,
                        180,
                        181,
                        182,
                        183,
                        201,
                        202,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229
                    ],
                    "('opennlp.tools.doccat#DocumentCategorizerME', 'train(String,ObjectStream,TrainingParameters,FeatureGenerator)')": [
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200
                    ],
                    "('opennlp.tools.doccat#DocumentCategorizerME', 'train(String,ObjectStream)')": [
                        230,
                        231
                    ],
                    "(None, None)": [
                        232
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/doccat/DoccatFactoryTest.java": {
                "old": {
                    "('opennlp.tools.doccat#DoccatFactoryTest', 'train')": [
                        52
                    ]
                },
                "new": {
                    "('opennlp.tools.doccat#DoccatFactoryTest', 'train')": [
                        52
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/doccat/DocumentCategorizerMETest.java": {
                "old": {
                    "('opennlp.tools.doccat#DocumentCategorizerMETest', 'testSimpleTraining')": [
                        51
                    ]
                },
                "new": {
                    "('opennlp.tools.doccat#DocumentCategorizerMETest', 'testSimpleTraining')": [
                        51
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/doccat/DocumentCategorizerNBTest.java": {
                "old": {
                    "('opennlp.tools.doccat#DocumentCategorizerNBTest', 'testSimpleTraining')": [
                        51
                    ]
                },
                "new": {
                    "('opennlp.tools.doccat#DocumentCategorizerNBTest', 'testSimpleTraining')": [
                        51
                    ]
                }
            },
            "opennlp-uima/src/main/java/opennlp/uima/doccat/DocumentCategorizerTrainer.java": {
                "old": {
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        133
                    ]
                },
                "new": {
                    "(None, None)": [
                        25,
                        31
                    ],
                    "('opennlp.uima.doccat#DocumentCategorizerTrainer', 'collectionProcessComplete(ProcessTrace)')": [
                        135,
                        136,
                        137,
                        138,
                        139,
                        140
                    ]
                }
            }
        }
    },
    "080656237bb56d52ca97f4da4171b0ce1ec42e4a": {
        "authored_data": "2016 Dec 13 00:55",
        "commit.message": "OPENNLP-891: Making the TokenClassFeatureGenerator configurable.\n",
        "commit.author.name": "jzonthemtn",
        "pcid": "d62cc416b5fb6db89b624c3b5203711ad597ebe4",
        "changes": {
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/GeneratorFactory.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#GeneratorFactory', None)": [
                        430,
                        431
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#GeneratorFactory', None)": [
                        430,
                        431,
                        432,
                        433,
                        434,
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443
                    ]
                }
            },
            "opennlp-tools/src/main/java/opennlp/tools/util/featuregen/TokenClassFeatureGenerator.java": {
                "old": {
                    "('opennlp.tools.util.featuregen#TokenClassFeatureGenerator', None)": [
                        39,
                        40
                    ]
                },
                "new": {
                    "('opennlp.tools.util.featuregen#TokenClassFeatureGenerator', None)": [
                        39,
                        40
                    ]
                }
            },
            "opennlp-tools/src/test/java/opennlp/tools/util/featuregen/GeneratorFactoryTest.java": {
                "new": {
                    "('opennlp.tools.util.featuregen#GeneratorFactoryTest', None)": [
                        38,
                        39,
                        53,
                        54
                    ],
                    "('opennlp.tools.util.featuregen#GeneratorFactoryTest', 'testCreationWithTokenClassFeatureGenerator')": [
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52
                    ]
                }
            }
        }
    }
}