{
    "0a5b0ff601161ff8ef43f8b4bcf6cf1e0fe21df1": {
        "authored_data": "2020 Jun 01 23:19",
        "commit.message": "Use lambdas.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "2a590a533a0b5c27c5afd6d9abd2fe93bd9ec098",
        "changes": {
            "src/examples/Mini/ASTFunDecl.java": {
                "old": {
                    "('Mini#ASTFunDecl', None)": [
                        292,
                        293,
                        294,
                        295,
                        296,
                        297
                    ]
                },
                "new": {
                    "('Mini#ASTFunDecl', None)": [
                        292,
                        293,
                        294,
                        295
                    ]
                }
            }
        }
    },
    "2a590a533a0b5c27c5afd6d9abd2fe93bd9ec098": {
        "authored_data": "2020 Jun 01 23:09",
        "commit.message": "Use enhanced for loop.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "62f3cc347f8cfffa50be527bd67e35d5de5672a0",
        "changes": {
            "src/examples/Mini/ASTExpr.java": {
                "old": {
                    "('Mini#ASTExpr', 'eval(int)')": [
                        180,
                        181,
                        184,
                        189
                    ],
                    "('Mini#ASTExpr', 'dump(String)')": [
                        325,
                        326
                    ]
                },
                "new": {
                    "('Mini#ASTExpr', 'eval(int)')": [
                        180,
                        181,
                        184,
                        189
                    ],
                    "('Mini#ASTExpr', 'dump(String)')": [
                        325,
                        326
                    ]
                }
            },
            "src/examples/Mini/ASTFunDecl.java": {
                "old": {
                    "('Mini#ASTFunDecl', 'traverse(Environment)')": [
                        106,
                        107,
                        110,
                        112
                    ],
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        331,
                        332,
                        333,
                        334,
                        335
                    ],
                    "('Mini#ASTFunDecl', 'dump(String)')": [
                        419,
                        420
                    ]
                },
                "new": {
                    "('Mini#ASTFunDecl', 'traverse(Environment)')": [
                        106,
                        107,
                        110,
                        112
                    ],
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        331,
                        332,
                        333,
                        334,
                        335
                    ],
                    "('Mini#ASTFunDecl', 'dump(String)')": [
                        419,
                        420
                    ]
                }
            },
            "src/examples/Mini/ASTLetExpr.java": {
                "old": {
                    "('Mini#ASTLetExpr', 'traverse(Environment)')": [
                        88,
                        89
                    ]
                },
                "new": {
                    "('Mini#ASTLetExpr', 'traverse(Environment)')": [
                        88
                    ]
                }
            },
            "src/examples/Mini/ASTProgram.java": {
                "old": {
                    "('Mini#ASTProgram', 'traverse')": [
                        119,
                        120
                    ],
                    "('Mini#ASTProgram', 'eval(int)')": [
                        162,
                        163,
                        166
                    ],
                    "('Mini#ASTProgram', 'code(PrintWriter,String)')": [
                        196,
                        197
                    ],
                    "('Mini#ASTProgram', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        324,
                        325
                    ],
                    "('Mini#ASTProgram', 'dump(String)')": [
                        333,
                        334
                    ]
                },
                "new": {
                    "('Mini#ASTProgram', 'traverse')": [
                        119,
                        120
                    ],
                    "('Mini#ASTProgram', 'eval(int)')": [
                        162,
                        163,
                        166
                    ],
                    "('Mini#ASTProgram', 'code(PrintWriter,String)')": [
                        196,
                        197
                    ],
                    "('Mini#ASTProgram', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        324,
                        325
                    ],
                    "('Mini#ASTProgram', 'dump(String)')": [
                        333,
                        334
                    ]
                }
            },
            "src/examples/Mini/MiniC.java": {
                "old": {
                    "('Mini#MiniC', 'main(String)')": [
                        44,
                        45,
                        46,
                        48,
                        51,
                        55
                    ]
                },
                "new": {
                    "('Mini#MiniC', 'main(String)')": [
                        44,
                        45,
                        46,
                        48,
                        51,
                        55
                    ]
                }
            },
            "src/examples/Mini/MiniParser.java": {
                "old": {
                    "('Mini#MiniParser', 'jj_consume_token(int)')": [
                        959,
                        960
                    ],
                    "('Mini#MiniParser', 'jj_add_error_token(int,int)')": [
                        1046,
                        1047
                    ]
                },
                "new": {
                    "('Mini#MiniParser', 'jj_consume_token(int)')": [
                        959,
                        960
                    ],
                    "('Mini#MiniParser', 'jj_add_error_token(int,int)')": [
                        1046,
                        1047
                    ]
                }
            },
            "src/examples/Mini/ParseException.java": {
                "old": {
                    "('Mini#ParseException', 'getMessage')": [
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128
                    ]
                },
                "new": {
                    "('Mini#ParseException', 'getMessage')": [
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128
                    ]
                }
            },
            "src/examples/Mini/SimpleNode.java": {
                "old": {
                    "('Mini#SimpleNode', 'dump(String)')": [
                        88,
                        89
                    ]
                },
                "new": {
                    "('Mini#SimpleNode', 'dump(String)')": [
                        88,
                        89
                    ]
                }
            },
            "src/examples/Package.java": {
                "old": {
                    "('None#Package', 'printAllClasses')": [
                        221,
                        222
                    ]
                },
                "new": {
                    "('None#Package', 'printAllClasses')": [
                        221
                    ]
                }
            },
            "src/examples/listclass.java": {
                "old": {
                    "('None#listclass', 'main(String)')": [
                        154,
                        155
                    ],
                    "('None#listclass', 'list(String)')": [
                        185,
                        186
                    ]
                },
                "new": {
                    "('None#listclass', 'main(String)')": [
                        154,
                        155
                    ],
                    "('None#listclass', 'list(String)')": [
                        185,
                        186
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/ClassPath.java": {
                "old": {
                    "('org.apache.bcel.util#ClassPath', None)": [
                        368,
                        369,
                        380,
                        381,
                        392,
                        393,
                        404,
                        405
                    ],
                    "('org.apache.bcel.util#ClassPath', 'addJdkModules(String,List)')": [
                        454,
                        455
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#ClassPath', None)": [
                        368,
                        369,
                        380,
                        381,
                        392,
                        393,
                        404,
                        405
                    ],
                    "('org.apache.bcel.util#ClassPath', 'addJdkModules(String,List)')": [
                        454,
                        455
                    ]
                }
            }
        }
    },
    "62f3cc347f8cfffa50be527bd67e35d5de5672a0": {
        "authored_data": "2020 Jun 01 23:06",
        "commit.message": "Use final.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "d85b0641ecb9309aa0eaadc71bb2f3b1ab668d21",
        "changes": {
            "src/main/java/org/apache/bcel/generic/MethodGen.java": {
                "old": {
                    "('org.apache.bcel.generic#MethodGen', 'removeRuntimeAttributes(Attribute)')": [
                        657
                    ],
                    "('org.apache.bcel.generic#MethodGen', 'getMethod')": [
                        723,
                        724
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#MethodGen', 'removeRuntimeAttributes(Attribute)')": [
                        657
                    ],
                    "('org.apache.bcel.generic#MethodGen', 'getMethod')": [
                        723,
                        724
                    ]
                }
            },
            "src/test/java/org/apache/bcel/classfile/CodeExceptionTestCase.java": {
                "new": {
                    "('org.apache.bcel.classfile#CodeExceptionTestCase', 'testReferenceToConstant')": [
                        30
                    ]
                }
            },
            "src/test/java/org/apache/bcel/classfile/LocalVariableTestCase.java": {
                "new": {
                    "('org.apache.bcel.classfile#LocalVariableTestCase', 'testReferenceToConstant')": [
                        30
                    ]
                }
            },
            "src/test/java/org/apache/bcel/generic/MethodGenTestCase.java": {
                "old": {
                    "('org.apache.bcel.generic#MethodGenTestCase', 'testInvalidNullMethodBody(String)')": [
                        135,
                        136
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#MethodGenTestCase', 'testInvalidNullMethodBody(String)')": [
                        135,
                        136
                    ]
                }
            },
            "src/test/java/org/apache/bcel/util/Class2HTMLTestCase.java": {
                "new": {
                    "('org.apache.bcel.util#Class2HTMLTestCase', 'testReferenceToConstant')": [
                        51
                    ]
                }
            },
            "src/test/java/org/apache/bcel/verifier/statics/Pass2VerifierTestCase.java": {
                "new": {
                    "('org.apache.bcel.verifier.statics#Pass2VerifierTestCase', 'testReferenceToConstant')": [
                        30
                    ]
                }
            },
            "src/test/java/org/apache/bcel/verifier/structurals/UninitializedObjectTypeTestCase.java": {
                "new": {
                    "('org.apache.bcel.verifier.structurals#UninitializedObjectTypeTestCase', 'testReferenceToConstant')": [
                        30
                    ]
                }
            }
        }
    },
    "d85b0641ecb9309aa0eaadc71bb2f3b1ab668d21": {
        "authored_data": "2020 Jun 01 23:02",
        "commit.message": "Remove trailing spaces.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "f959849a37c8b08871cec6d6276ab152e6ed08ce",
        "changes": {
            "src/examples/Mini/ASTFunDecl.java": {
                "old": {
                    "('Mini#ASTFunDecl', None)": [
                        133
                    ]
                },
                "new": {
                    "('Mini#ASTFunDecl', None)": [
                        133
                    ]
                }
            },
            "src/test/java/org/apache/bcel/generic/EmptyStaticInit.java": {
                "old": {
                    "(None, None)": [
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ]
                }
            }
        }
    },
    "f959849a37c8b08871cec6d6276ab152e6ed08ce": {
        "authored_data": "2020 Jun 01 23:01",
        "commit.message": "[BCEL-339] Throw IllegalArgumentException, IllegalStateException,\nUnsupportedOperationException instead of RuntimeException.",
        "commit.author.name": "Gary Gregory",
        "pcid": "0ece85f0626e76ba42cf5ce9092e623a6cb25a79",
        "changes": {
            "src/examples/ClassDumper.java": {
                "old": {
                    "('None#DumpClass', 'main(String)')": [
                        359
                    ]
                },
                "new": {
                    "('None#DumpClass', 'main(String)')": [
                        359
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/AnnotationElementValue.java": {
                "old": {
                    "('org.apache.bcel.classfile#AnnotationElementValue', None)": [
                        36
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#AnnotationElementValue', None)": [
                        36
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/ArrayElementValue.java": {
                "old": {
                    "('org.apache.bcel.classfile#ArrayElementValue', None)": [
                        51
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#ArrayElementValue', None)": [
                        51
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/ConstantPool.java": {
                "old": {
                    "('org.apache.bcel.classfile#ConstantPool', 'constantToString(Constant)')": [
                        168
                    ],
                    "('org.apache.bcel.classfile#ConstantPool', 'getConstantString(int,byte)')": [
                        313
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#ConstantPool', 'constantToString(Constant)')": [
                        168
                    ],
                    "('org.apache.bcel.classfile#ConstantPool', 'getConstantString(int,byte)')": [
                        313
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/ElementValue.java": {
                "old": {
                    "('org.apache.bcel.classfile#ElementValue', 'readElementValue(DataInput,ConstantPool)')": [
                        112
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#ElementValue', 'readElementValue(DataInput,ConstantPool)')": [
                        112
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/EnumElementValue.java": {
                "old": {
                    "('org.apache.bcel.classfile#EnumElementValue', None)": [
                        40
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#EnumElementValue', None)": [
                        40
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/Signature.java": {
                "old": {
                    "('org.apache.bcel.classfile#Signature', 'matchIdent(MyByteArrayInputStream,StringBuilder)')": [
                        156
                    ],
                    "('org.apache.bcel.classfile#Signature', 'matchGJIdent(MyByteArrayInputStream,StringBuilder)')": [
                        206,
                        227
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#Signature', 'matchIdent(MyByteArrayInputStream,StringBuilder)')": [
                        156
                    ],
                    "('org.apache.bcel.classfile#Signature', 'matchGJIdent(MyByteArrayInputStream,StringBuilder)')": [
                        206,
                        227
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/SimpleElementValue.java": {
                "old": {
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueString')": [
                        54
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueInt')": [
                        65
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueByte')": [
                        76
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueChar')": [
                        87
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueLong')": [
                        98
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueFloat')": [
                        108
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueDouble')": [
                        118
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueBoolean')": [
                        128
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueShort')": [
                        138
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'stringifyValue')": [
                        199
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'dump(DataOutputStream)')": [
                        222
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueString')": [
                        54
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueInt')": [
                        65
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueByte')": [
                        76
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueChar')": [
                        87
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueLong')": [
                        98
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueFloat')": [
                        108
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueDouble')": [
                        118
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueBoolean')": [
                        128
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'getValueShort')": [
                        138
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'stringifyValue')": [
                        199
                    ],
                    "('org.apache.bcel.classfile#SimpleElementValue', 'dump(DataOutputStream)')": [
                        222
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/StackMapEntry.java": {
                "old": {
                    "('org.apache.bcel.classfile#StackMapEntry', 'getMapEntrySize')": [
                        259
                    ],
                    "('org.apache.bcel.classfile#StackMapEntry', 'setFrameType(int)')": [
                        276
                    ],
                    "('org.apache.bcel.classfile#StackMapEntry', 'setByteCodeOffset(int)')": [
                        289,
                        314
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#StackMapEntry', 'getMapEntrySize')": [
                        259
                    ],
                    "('org.apache.bcel.classfile#StackMapEntry', 'setFrameType(int)')": [
                        276
                    ],
                    "('org.apache.bcel.classfile#StackMapEntry', 'setByteCodeOffset(int)')": [
                        289,
                        314
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/StackMapType.java": {
                "old": {
                    "('org.apache.bcel.classfile#StackMapType', None)": [
                        61
                    ],
                    "('org.apache.bcel.classfile#StackMapType', 'setType(byte)')": [
                        71
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#StackMapType', None)": [
                        61
                    ],
                    "('org.apache.bcel.classfile#StackMapType', 'setType(byte)')": [
                        71
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/Utility.java": {
                "old": {
                    "('org.apache.bcel.classfile#Utility', 'getSignature(String)')": [
                        1148
                    ],
                    "('org.apache.bcel.classfile#Utility', 'countBrackets(String)')": [
                        1190,
                        1196,
                        1207
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#Utility', 'getSignature(String)')": [
                        1148
                    ],
                    "('org.apache.bcel.classfile#Utility', 'countBrackets(String)')": [
                        1190,
                        1196,
                        1207
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/AnnotationElementValueGen.java": {
                "old": {
                    "('org.apache.bcel.generic#AnnotationElementValueGen', None)": [
                        45
                    ],
                    "('org.apache.bcel.generic#AnnotationElementValueGen', 'stringifyValue')": [
                        68
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#AnnotationElementValueGen', None)": [
                        45
                    ],
                    "('org.apache.bcel.generic#AnnotationElementValueGen', 'stringifyValue')": [
                        68
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/ArrayElementValueGen.java": {
                "old": {
                    "('org.apache.bcel.generic#ArrayElementValueGen', None)": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#ArrayElementValueGen', None)": [
                        48
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/ConstantPoolGen.java": {
                "old": {
                    "('org.apache.bcel.generic#ConstantPoolGen', 'addConstant(Constant,ConstantPoolGen)')": [
                        832,
                        836
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#ConstantPoolGen', 'addConstant(Constant,ConstantPoolGen)')": [
                        832,
                        836
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/ElementValueGen.java": {
                "old": {
                    "('org.apache.bcel.generic#ElementValueGen', 'readElementValue(DataInput,ConstantPoolGen)')": [
                        149
                    ],
                    "('org.apache.bcel.generic#ElementValueGen', 'copy(ElementValue,ConstantPoolGen,boolean)')": [
                        191
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#ElementValueGen', 'readElementValue(DataInput,ConstantPoolGen)')": [
                        149
                    ],
                    "('org.apache.bcel.generic#ElementValueGen', 'copy(ElementValue,ConstantPoolGen,boolean)')": [
                        191
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/ElementValuePairGen.java": {
                "old": {
                    "('org.apache.bcel.generic#ElementValuePairGen', None)": [
                        48
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#ElementValuePairGen', None)": [
                        48
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/EnumElementValueGen.java": {
                "old": {
                    "('org.apache.bcel.generic#EnumElementValueGen', None)": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#EnumElementValueGen', None)": [
                        47
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/FieldGen.java": {
                "old": {
                    "('org.apache.bcel.generic#FieldGen', 'addConstant')": [
                        255
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#FieldGen', 'addConstant')": [
                        255
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/InstructionFactory.java": {
                "old": {
                    "('org.apache.bcel.generic#InstructionFactory', 'createInvoke(String,String,Type,Type,short,boolean)')": [
                        104
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createAppend(Type)')": [
                        279
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createFieldAccess(String,String,Type,short)')": [
                        306
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createReturn(Type)')": [
                        340
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryIntOp(char,String)')": [
                        368
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryLongOp(char,String)')": [
                        396
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryFloatOp(char)')": [
                        414
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryDoubleOp(char)')": [
                        432
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryOperation(String,Type)')": [
                        457
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createStore(Type,int)')": [
                        515
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createLoad(Type,int)')": [
                        541
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createArrayLoad(Type)')": [
                        570
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createArrayStore(Type)')": [
                        599
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createCast(Type,Type)')": [
                        621,
                        630
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createNull(Type)')": [
                        726
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBranchInstruction(short,InstructionHandle)')": [
                        777
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#InstructionFactory', 'createInvoke(String,String,Type,Type,short,boolean)')": [
                        104
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createAppend(Type)')": [
                        279
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createFieldAccess(String,String,Type,short)')": [
                        306
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createReturn(Type)')": [
                        340
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryIntOp(char,String)')": [
                        368
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryLongOp(char,String)')": [
                        396
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryFloatOp(char)')": [
                        414
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryDoubleOp(char)')": [
                        432
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBinaryOperation(String,Type)')": [
                        457
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createStore(Type,int)')": [
                        515
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createLoad(Type,int)')": [
                        541
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createArrayLoad(Type)')": [
                        570
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createArrayStore(Type)')": [
                        599
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createCast(Type,Type)')": [
                        621,
                        630
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createNull(Type)')": [
                        726
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createBranchInstruction(short,InstructionHandle)')": [
                        777
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/JsrInstruction.java": {
                "old": {
                    "('org.apache.bcel.generic#JsrInstruction', 'physicalSuccessor')": [
                        73
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#JsrInstruction', 'physicalSuccessor')": [
                        73
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/LDC.java": {
                "old": {
                    "('org.apache.bcel.generic#LDC', 'getValue(ConstantPoolGen)')": [
                        111
                    ],
                    "('org.apache.bcel.generic#LDC', 'getType(ConstantPoolGen)')": [
                        128
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#LDC', 'getValue(ConstantPoolGen)')": [
                        111
                    ],
                    "('org.apache.bcel.generic#LDC', 'getType(ConstantPoolGen)')": [
                        128
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/LDC2_W.java": {
                "old": {
                    "('org.apache.bcel.generic#LDC2_W', 'getType(ConstantPoolGen)')": [
                        49
                    ],
                    "('org.apache.bcel.generic#LDC2_W', 'getValue(ConstantPoolGen)')": [
                        62
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#LDC2_W', 'getType(ConstantPoolGen)')": [
                        49
                    ],
                    "('org.apache.bcel.generic#LDC2_W', 'getValue(ConstantPoolGen)')": [
                        62
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/SimpleElementValueGen.java": {
                "old": {
                    "('org.apache.bcel.generic#SimpleElementValueGen', None)": [
                        165
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'getValueString')": [
                        188
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'getValueInt')": [
                        198
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'stringifyValue')": [
                        242
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'dump(DataOutputStream)')": [
                        265
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#SimpleElementValueGen', None)": [
                        165
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'getValueString')": [
                        188
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'getValueInt')": [
                        198
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'stringifyValue')": [
                        242
                    ],
                    "('org.apache.bcel.generic#SimpleElementValueGen', 'dump(DataOutputStream)')": [
                        265
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/BCELFactory.java": {
                "old": {
                    "('org.apache.bcel.util#BCELFactory', 'visitAllocationInstruction(AllocationInstruction)')": [
                        199
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#BCELFactory', 'visitAllocationInstruction(AllocationInstruction)')": [
                        199
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/InstructionFinder.java": {
                "old": {
                    "('org.apache.bcel.util#InstructionFinder', 'mapName(String)')": [
                        120
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#InstructionFinder', 'mapName(String)')": [
                        120
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/JavaWrapper.java": {
                "old": {
                    "('org.apache.bcel.util#JavaWrapper', 'getClassLoader')": [
                        46,
                        51
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#JavaWrapper', 'getClassLoader')": [
                        46,
                        51
                    ]
                }
            },
            "src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java": {
                "old": {
                    "('org.apache.bcel.verifier.statics#Pass3aVerifier', None)": [
                        1130
                    ]
                },
                "new": {
                    "('org.apache.bcel.verifier.statics#Pass3aVerifier', None)": [
                        1130
                    ]
                }
            },
            "src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java": {
                "old": {
                    "('org.apache.bcel.verifier.structurals#InstConstraintVisitor', 'visitINVOKEDYNAMIC(INVOKEDYNAMIC)')": [
                        1805
                    ]
                },
                "new": {
                    "('org.apache.bcel.verifier.structurals#InstConstraintVisitor', 'visitINVOKEDYNAMIC(INVOKEDYNAMIC)')": [
                        1805
                    ]
                }
            },
            "src/main/java/org/apache/bcel/verifier/structurals/Pass3bVerifier.java": {
                "old": {
                    "('org.apache.bcel.verifier.structurals#Pass3bVerifier', 'circulationPump(MethodGen,ControlFlowGraph,InstructionContext,Frame,InstConstraintVisitor,ExecutionVisitor)')": [
                        326
                    ]
                },
                "new": {
                    "('org.apache.bcel.verifier.structurals#Pass3bVerifier', 'circulationPump(MethodGen,ControlFlowGraph,InstructionContext,Frame,InstConstraintVisitor,ExecutionVisitor)')": [
                        326
                    ]
                }
            }
        }
    },
    "0ece85f0626e76ba42cf5ce9092e623a6cb25a79": {
        "authored_data": "2020 Jun 01 22:40",
        "commit.message": "No silly strings in exception messages.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "57857223be76ca051bb7687e52c9e3b57e5969bf",
        "changes": {
            "src/examples/ClassDumper.java": {
                "old": {
                    "('None#ClassDumper', 'processFieldOrMethod')": [
                        339
                    ]
                },
                "new": {
                    "('None#ClassDumper', 'processFieldOrMethod')": [
                        339
                    ]
                }
            },
            "src/examples/Mini/ASTExpr.java": {
                "old": {
                    "('Mini#ASTExpr', 'code(StringBuffer)')": [
                        246
                    ],
                    "('Mini#ASTExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        285
                    ]
                },
                "new": {
                    "('Mini#ASTExpr', 'code(StringBuffer)')": [
                        246
                    ],
                    "('Mini#ASTExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        285
                    ]
                }
            },
            "src/examples/Mini/ASTFunDecl.java": {
                "old": {
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        336
                    ]
                },
                "new": {
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        336
                    ]
                }
            },
            "src/main/java/org/apache/bcel/verifier/statics/Pass3aVerifier.java": {
                "old": {
                    "('org.apache.bcel.verifier.statics#Pass3aVerifier', None)": [
                        572
                    ]
                },
                "new": {
                    "('org.apache.bcel.verifier.statics#Pass3aVerifier', None)": [
                        572
                    ]
                }
            },
            "src/main/java/org/apache/bcel/verifier/structurals/InstConstraintVisitor.java": {
                "old": {
                    "('org.apache.bcel.verifier.structurals#InstConstraintVisitor', 'visitRET(RET)')": [
                        2872
                    ]
                },
                "new": {
                    "('org.apache.bcel.verifier.structurals#InstConstraintVisitor', 'visitRET(RET)')": [
                        2872
                    ]
                }
            },
            "src/main/java/org/apache/bcel/verifier/structurals/Subroutines.java": {
                "old": {
                    "('org.apache.bcel.verifier.structurals#Subroutines', None)": [
                        295
                    ]
                },
                "new": {
                    "('org.apache.bcel.verifier.structurals#Subroutines', None)": [
                        295
                    ]
                }
            }
        }
    },
    "57857223be76ca051bb7687e52c9e3b57e5969bf": {
        "authored_data": "2020 Jun 01 22:37",
        "commit.message": "Fix weird formatting.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "c7a62c2afe3388ca9223b3f7cdbb583a8fbe49d3",
        "changes": {
            "src/examples/Mini/ASTFunDecl.java": {
                "old": {
                    "('Mini#ASTFunDecl', None)": [
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        98,
                        99,
                        100,
                        101,
                        102,
                        130,
                        131,
                        132,
                        133,
                        134,
                        154,
                        155,
                        156,
                        157,
                        158,
                        209,
                        210,
                        211,
                        212,
                        213,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        302,
                        303,
                        304,
                        307,
                        308,
                        309,
                        310,
                        311,
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        368,
                        369,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        398,
                        399,
                        400,
                        401,
                        402,
                        403,
                        405,
                        419,
                        420,
                        421,
                        422,
                        429,
                        430,
                        432,
                        433,
                        434,
                        438,
                        439
                    ],
                    "('Mini#ASTFunDecl', 'jjtCreate(MiniParser,int)')": [
                        70,
                        71
                    ],
                    "('Mini#ASTFunDecl', 'closeNode')": [
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97
                    ],
                    "('Mini#ASTFunDecl', 'traverse(Environment)')": [
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129
                    ],
                    "('Mini#ASTFunDecl', 'eval(int)')": [
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153
                    ],
                    "('Mini#ASTFunDecl', 'code(PrintWriter)')": [
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208
                    ],
                    "('Mini#ASTFunDecl', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295
                    ],
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343
                    ],
                    "('Mini#ASTFunDecl', 'toString')": [
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367
                    ],
                    "('Mini#ASTFunDecl', 'isrecursive')": [
                        370
                    ],
                    "('Mini#ASTFunDecl', 'isSimple')": [
                        371
                    ],
                    "('Mini#ASTFunDecl', 'getName')": [
                        372
                    ],
                    "('Mini#ASTFunDecl', 'getNoArgs')": [
                        373
                    ],
                    "('Mini#ASTFunDecl', 'getArgs')": [
                        374
                    ],
                    "('Mini#ASTFunDecl', 'getType')": [
                        375
                    ],
                    "('Mini#ASTFunDecl', 'setType(int)')": [
                        376
                    ],
                    "('Mini#ASTFunDecl', 'setLine(int)')": [
                        377
                    ],
                    "('Mini#ASTFunDecl', 'getLine')": [
                        378
                    ],
                    "('Mini#ASTFunDecl', 'setColumn(int)')": [
                        379
                    ],
                    "('Mini#ASTFunDecl', 'getColumn')": [
                        380
                    ],
                    "('Mini#ASTFunDecl', 'setPosition(int,int)')": [
                        381,
                        382,
                        383
                    ],
                    "('Mini#ASTFunDecl', 'dump(String)')": [
                        390,
                        391,
                        392,
                        393,
                        394,
                        395,
                        396,
                        397
                    ],
                    "('Mini#ASTFunDecl', 'reset')": [
                        404
                    ],
                    "('Mini#ASTFunDecl', 'getVarDecls')": [
                        406,
                        407,
                        408,
                        409,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        416,
                        417,
                        418
                    ],
                    "('Mini#ASTFunDecl', 'pop(int)')": [
                        423
                    ],
                    "('Mini#ASTFunDecl', 'push(int)')": [
                        424,
                        425,
                        426,
                        427,
                        428
                    ],
                    "('Mini#ASTFunDecl', 'push')": [
                        431
                    ],
                    "('Mini#ASTFunDecl', 'push(StringBuffer,String)')": [
                        435,
                        436,
                        437
                    ],
                    "('Mini#ASTFunDecl', 'pop')": [
                        440,
                        441
                    ],
                    "(None, None)": [
                        442
                    ]
                },
                "new": {
                    "(None, None)": [
                        22,
                        479
                    ],
                    "('Mini#ASTFunDecl', None)": [
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        97,
                        98,
                        99,
                        100,
                        101,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        154,
                        155,
                        156,
                        157,
                        158,
                        207,
                        208,
                        209,
                        210,
                        211,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        300,
                        301,
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309,
                        310,
                        311,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345,
                        346,
                        347,
                        361,
                        362,
                        365,
                        366,
                        369,
                        370,
                        373,
                        374,
                        377,
                        378,
                        381,
                        382,
                        385,
                        386,
                        389,
                        390,
                        393,
                        394,
                        397,
                        398,
                        401,
                        402,
                        405,
                        406,
                        410,
                        411,
                        412,
                        413,
                        414,
                        415,
                        424,
                        425,
                        426,
                        427,
                        428,
                        429,
                        430,
                        433,
                        434,
                        448,
                        449,
                        450,
                        451,
                        452,
                        455,
                        456,
                        462,
                        463,
                        464,
                        467,
                        468,
                        469,
                        470,
                        471,
                        475,
                        476
                    ],
                    "('Mini#ASTFunDecl', 'jjtCreate(MiniParser,int)')": [
                        70,
                        71
                    ],
                    "('Mini#ASTFunDecl', 'closeNode')": [
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96
                    ],
                    "('Mini#ASTFunDecl', 'traverse(Environment)')": [
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128
                    ],
                    "('Mini#ASTFunDecl', 'eval(int)')": [
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153
                    ],
                    "('Mini#ASTFunDecl', 'code(PrintWriter)')": [
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206
                    ],
                    "('Mini#ASTFunDecl', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        258,
                        259,
                        260,
                        261,
                        262,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        272,
                        273,
                        274,
                        275,
                        276,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        285,
                        286,
                        287,
                        288,
                        289
                    ],
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        312,
                        313,
                        314,
                        315,
                        316,
                        317,
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335,
                        336
                    ],
                    "('Mini#ASTFunDecl', 'toString')": [
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360
                    ],
                    "('Mini#ASTFunDecl', 'isrecursive')": [
                        363,
                        364
                    ],
                    "('Mini#ASTFunDecl', 'isSimple')": [
                        367,
                        368
                    ],
                    "('Mini#ASTFunDecl', 'getName')": [
                        371,
                        372
                    ],
                    "('Mini#ASTFunDecl', 'getNoArgs')": [
                        375,
                        376
                    ],
                    "('Mini#ASTFunDecl', 'getArgs')": [
                        379,
                        380
                    ],
                    "('Mini#ASTFunDecl', 'getType')": [
                        383,
                        384
                    ],
                    "('Mini#ASTFunDecl', 'setType(int)')": [
                        387,
                        388
                    ],
                    "('Mini#ASTFunDecl', 'setLine(int)')": [
                        391,
                        392
                    ],
                    "('Mini#ASTFunDecl', 'getLine')": [
                        395,
                        396
                    ],
                    "('Mini#ASTFunDecl', 'setColumn(int)')": [
                        399,
                        400
                    ],
                    "('Mini#ASTFunDecl', 'getColumn')": [
                        403,
                        404
                    ],
                    "('Mini#ASTFunDecl', 'setPosition(int,int)')": [
                        407,
                        408,
                        409
                    ],
                    "('Mini#ASTFunDecl', 'dump(String)')": [
                        416,
                        417,
                        418,
                        419,
                        420,
                        421,
                        422,
                        423
                    ],
                    "('Mini#ASTFunDecl', 'reset')": [
                        431,
                        432
                    ],
                    "('Mini#ASTFunDecl', 'getVarDecls')": [
                        435,
                        436,
                        437,
                        438,
                        439,
                        440,
                        441,
                        442,
                        443,
                        444,
                        445,
                        446,
                        447
                    ],
                    "('Mini#ASTFunDecl', 'pop(int)')": [
                        453,
                        454
                    ],
                    "('Mini#ASTFunDecl', 'push(int)')": [
                        457,
                        458,
                        459,
                        460,
                        461
                    ],
                    "('Mini#ASTFunDecl', 'push')": [
                        465,
                        466
                    ],
                    "('Mini#ASTFunDecl', 'push(StringBuffer,String)')": [
                        472,
                        473,
                        474
                    ],
                    "('Mini#ASTFunDecl', 'pop')": [
                        477,
                        478
                    ]
                }
            }
        }
    },
    "c7a62c2afe3388ca9223b3f7cdbb583a8fbe49d3": {
        "authored_data": "2020 Jun 01 22:35",
        "commit.message": "Update next version from 6.4.2 to 6.5.0 since we've added public APIs.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "5d1e87525ce84a737f6760e0a14073a0ebefe417",
        "changes": {
            "src/main/java/org/apache/bcel/generic/InstructionFactory.java": {
                "old": {
                    "('org.apache.bcel.generic#InstructionFactory', None)": [
                        98
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#InstructionFactory', None)": [
                        98
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/MethodGen.java": {
                "old": {
                    "('org.apache.bcel.generic#MethodGen', None)": [
                        654,
                        655
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#MethodGen', None)": [
                        654,
                        655
                    ]
                }
            }
        }
    },
    "5d1e87525ce84a737f6760e0a14073a0ebefe417": {
        "authored_data": "2020 Jun 01 22:31",
        "commit.message": "No silly strings in exception messages.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "bf06bdaec1aa40d2069bc72337f0105f7fdc1498",
        "changes": {
            "src/main/java/org/apache/bcel/generic/ArrayInstruction.java": {
                "old": {
                    "('org.apache.bcel.generic#ArrayInstruction', 'getType(ConstantPoolGen)')": [
                        82
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#ArrayInstruction', 'getType(ConstantPoolGen)')": [
                        82
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/FieldGen.java": {
                "old": {
                    "('org.apache.bcel.generic#FieldGen', 'addConstant')": [
                        255
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#FieldGen', 'addConstant')": [
                        255
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/InstructionFactory.java": {
                "old": {
                    "('org.apache.bcel.generic#InstructionFactory', 'createInvoke(String,String,Type,Type,short,boolean)')": [
                        104
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createAppend(Type)')": [
                        279
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createFieldAccess(String,String,Type,short)')": [
                        306
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#InstructionFactory', 'createInvoke(String,String,Type,Type,short,boolean)')": [
                        104
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createAppend(Type)')": [
                        279
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createFieldAccess(String,String,Type,short)')": [
                        306
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/LocalVariableInstruction.java": {
                "old": {
                    "('org.apache.bcel.generic#LocalVariableInstruction', 'getType(ConstantPoolGen)')": [
                        219
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#LocalVariableInstruction', 'getType(ConstantPoolGen)')": [
                        219
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/Type.java": {
                "old": {
                    "('org.apache.bcel.generic#Type', 'getType(java)')": [
                        303
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#Type', 'getType(java)')": [
                        303
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/BCELFactory.java": {
                "old": {
                    "('org.apache.bcel.util#BCELFactory', 'visitAllocationInstruction(AllocationInstruction)')": [
                        199
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#BCELFactory', 'visitAllocationInstruction(AllocationInstruction)')": [
                        199
                    ]
                }
            },
            "src/main/java/org/apache/bcel/verifier/exc/AssertionViolatedException.java": {
                "old": {
                    "('org.apache.bcel.verifier.exc#AssertionViolatedException', 'main(String)')": [
                        80
                    ]
                },
                "new": {
                    "(None, None)": [
                        20
                    ],
                    "('org.apache.bcel.verifier.exc#AssertionViolatedException', 'main(String)')": [
                        81
                    ]
                }
            }
        }
    },
    "bf06bdaec1aa40d2069bc72337f0105f7fdc1498": {
        "authored_data": "2020 Jun 01 22:25",
        "commit.message": "[BCEL-338] org.apache.bcel.generic.InstructionFactory.createInvoke()\npopulates its internal ConstantPoolGen on bad input, then throws\nexception.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "a977371b8bd1894743f1ae1661afec31bd553f7d",
        "changes": {
            "src/main/java/org/apache/bcel/generic/InstructionFactory.java": {
                "old": {
                    "('org.apache.bcel.generic#InstructionFactory', 'createInvoke(String,String,Type,Type,short,boolean)')": [
                        100,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#InstructionFactory', None)": [
                        97
                    ],
                    "('org.apache.bcel.generic#InstructionFactory', 'createInvoke(String,String,Type,Type,short,boolean)')": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130
                    ]
                }
            }
        }
    }
}