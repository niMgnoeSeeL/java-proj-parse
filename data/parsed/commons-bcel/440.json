{
    "97f928db392457adcd8777afe6415d0440116cd7": {
        "authored_data": "2019 Sep 01 22:08",
        "commit.message": "Cannot break binary compatibility with 6.3.1.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "06151c0b5f7f78f73354370f8ca4d863342fde39",
        "changes": {
            "src/main/java/org/apache/bcel/classfile/Visitor.java": {
                "old": {
                    "(None, None)": [
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216
                    ]
                },
                "new": {
                    "(None, None)": [
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234
                    ]
                }
            }
        }
    },
    "06151c0b5f7f78f73354370f8ca4d863342fde39": {
        "authored_data": "2019 Sep 01 21:47",
        "commit.message": "Cannot break binary compatibility with 6.3.1.\n",
        "commit.author.name": "Gary Gregory",
        "pcid": "dc78738b2083ef2526b0f392e6359b621b8f3f35",
        "changes": {
            "src/main/java/org/apache/bcel/Const.java": {
                "old": {
                    "('org.apache.bcel#Const', None)": [
                        332
                    ]
                },
                "new": {
                    "('org.apache.bcel#Const', None)": [
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339,
                        340,
                        341,
                        342,
                        343,
                        344,
                        345
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/Utility.java": {
                "old": {
                    "('org.apache.bcel.classfile#Utility', 'accessToString(int,boolean)')": [
                        105
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#Utility', 'accessToString(int,boolean)')": [
                        105
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/BCELifier.java": {
                "old": {
                    "('org.apache.bcel.util#BCELifier', 'printFlags(int,FLAGS)')": [
                        216
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#BCELifier', 'printFlags(int,FLAGS)')": [
                        216
                    ]
                }
            }
        }
    },
    "dc78738b2083ef2526b0f392e6359b621b8f3f35": {
        "authored_data": "2019 Sep 01 21:23",
        "commit.message": "Remove redundant type arguments.",
        "commit.author.name": "Gary Gregory",
        "pcid": "9ea57757d0379296a9a72da05437f9a9cbb4a96f",
        "changes": {
            "src/examples/JasminVisitor.java": {
                "old": {
                    "('None#JasminVisitor', 'visitCode(Code)')": [
                        178
                    ]
                },
                "new": {
                    "('None#JasminVisitor', 'visitCode(Code)')": [
                        178
                    ]
                }
            },
            "src/examples/Mini/Environment.java": {
                "old": {
                    "('Mini#Environment', 'put(EnvEntry)')": [
                        74
                    ]
                },
                "new": {
                    "('Mini#Environment', 'put(EnvEntry)')": [
                        74
                    ]
                }
            },
            "src/examples/Mini/JJTMiniParserState.java": {
                "old": {
                    "('Mini#JJTMiniParserState', None)": [
                        31,
                        32
                    ]
                },
                "new": {
                    "('Mini#JJTMiniParserState', None)": [
                        31,
                        32
                    ]
                }
            },
            "src/examples/Mini/MiniC.java": {
                "old": {
                    "('Mini#MiniC', 'main(String)')": [
                        64,
                        65
                    ]
                },
                "new": {
                    "('Mini#MiniC', 'main(String)')": [
                        64,
                        65
                    ]
                }
            },
            "src/examples/Mini/MiniParser.java": {
                "old": {
                    "('Mini#MiniParser', None)": [
                        1028
                    ]
                },
                "new": {
                    "('Mini#MiniParser', None)": [
                        1028
                    ]
                }
            },
            "src/examples/Package.java": {
                "old": {
                    "('None#Package', None)": [
                        78,
                        85,
                        91
                    ],
                    "('None#Package', 'printAllClasses')": [
                        219
                    ]
                },
                "new": {
                    "('None#Package', None)": [
                        78,
                        85,
                        91
                    ],
                    "('None#Package', 'printAllClasses')": [
                        219
                    ]
                }
            },
            "src/examples/listclass.java": {
                "old": {
                    "('None#listclass', 'main(String)')": [
                        95,
                        96
                    ],
                    "('None#listclass', None)": [
                        170
                    ]
                },
                "new": {
                    "('None#listclass', 'main(String)')": [
                        95,
                        96
                    ],
                    "('None#listclass', None)": [
                        170
                    ]
                }
            }
        }
    },
    "9ea57757d0379296a9a72da05437f9a9cbb4a96f": {
        "authored_data": "2019 Sep 01 21:21",
        "commit.message": "Use final.",
        "commit.author.name": "Gary Gregory",
        "pcid": "05a35cfa3377058d86e93714f890a50de7051ea6",
        "changes": {
            "src/examples/ClassDumper.java": {
                "old": {
                    "('None#ClassDumper', None)": [
                        42,
                        43,
                        62,
                        101
                    ],
                    "('None#ClassDumper', 'processConstantPool')": [
                        144
                    ],
                    "('None#ClassDumper', 'processAttributes')": [
                        290,
                        291
                    ],
                    "('None#ClassDumper', 'processFieldOrMethod')": [
                        304,
                        305,
                        310,
                        314,
                        315,
                        321,
                        322,
                        335,
                        337
                    ],
                    "('None#ClassDumper', 'constantToString(int)')": [
                        347,
                        348
                    ],
                    "('None#DumpClass', 'main(String)')": [
                        356,
                        364
                    ]
                },
                "new": {
                    "('None#ClassDumper', None)": [
                        42,
                        43,
                        62,
                        101
                    ],
                    "('None#ClassDumper', 'processConstantPool')": [
                        144
                    ],
                    "('None#ClassDumper', 'processAttributes')": [
                        290,
                        291
                    ],
                    "('None#ClassDumper', 'processFieldOrMethod')": [
                        304,
                        305,
                        310,
                        314,
                        315,
                        321,
                        322,
                        335,
                        337
                    ],
                    "('None#ClassDumper', 'constantToString(int)')": [
                        347,
                        348
                    ],
                    "('None#DumpClass', 'main(String)')": [
                        356,
                        364
                    ]
                }
            },
            "src/examples/HelloWorldBuilder.java": {
                "old": {
                    "('None#HelloWorldBuilder', 'main(String)')": [
                        63,
                        64,
                        68,
                        69,
                        70,
                        79,
                        81,
                        82,
                        101,
                        106,
                        111,
                        123,
                        124,
                        129,
                        139,
                        177
                    ]
                },
                "new": {
                    "('None#HelloWorldBuilder', 'main(String)')": [
                        63,
                        64,
                        68,
                        69,
                        70,
                        79,
                        81,
                        82,
                        101,
                        106,
                        111,
                        123,
                        124,
                        129,
                        139,
                        177
                    ]
                }
            },
            "src/examples/JasminVisitor.java": {
                "old": {
                    "('None#JasminVisitor', None)": [
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('None#JasminVisitor', 'visitJavaClass(JavaClass)')": [
                        81,
                        92
                    ],
                    "('None#JasminVisitor', 'visitField(Field)')": [
                        100
                    ],
                    "('None#JasminVisitor', 'visitConstantValue(ConstantValue)')": [
                        109
                    ],
                    "('None#JasminVisitor', 'printEndMethod(Attribute)')": [
                        120,
                        121
                    ],
                    "('None#JasminVisitor', 'visitDeprecated(Deprecated)')": [
                        129
                    ],
                    "('None#JasminVisitor', 'visitSynthetic(Synthetic)')": [
                        134
                    ],
                    "('None#JasminVisitor', 'visitMethod(Method)')": [
                        141,
                        147
                    ],
                    "('None#JasminVisitor', 'visitExceptionTable(ExceptionTable)')": [
                        154,
                        155
                    ],
                    "('None#JasminVisitor', 'visitCode(Code)')": [
                        165,
                        171,
                        172,
                        173,
                        180,
                        182,
                        185,
                        190,
                        195,
                        196,
                        203,
                        204,
                        214,
                        215,
                        216,
                        221,
                        231,
                        240,
                        241,
                        242,
                        247,
                        261,
                        273,
                        274,
                        275
                    ],
                    "('None#JasminVisitor', 'get(InstructionHandle)')": [
                        286,
                        287
                    ],
                    "('None#JasminVisitor', 'put(InstructionHandle,String)')": [
                        291,
                        292
                    ],
                    "('None#JasminVisitor', 'main(String)')": [
                        305,
                        313,
                        319,
                        320,
                        324,
                        328,
                        329
                    ]
                },
                "new": {
                    "('None#JasminVisitor', None)": [
                        60,
                        61,
                        62,
                        63,
                        64,
                        65
                    ],
                    "('None#JasminVisitor', 'visitJavaClass(JavaClass)')": [
                        81,
                        92
                    ],
                    "('None#JasminVisitor', 'visitField(Field)')": [
                        100
                    ],
                    "('None#JasminVisitor', 'visitConstantValue(ConstantValue)')": [
                        109
                    ],
                    "('None#JasminVisitor', 'printEndMethod(Attribute)')": [
                        120,
                        121
                    ],
                    "('None#JasminVisitor', 'visitDeprecated(Deprecated)')": [
                        129
                    ],
                    "('None#JasminVisitor', 'visitSynthetic(Synthetic)')": [
                        134
                    ],
                    "('None#JasminVisitor', 'visitMethod(Method)')": [
                        141,
                        147
                    ],
                    "('None#JasminVisitor', 'visitExceptionTable(ExceptionTable)')": [
                        154,
                        155
                    ],
                    "('None#JasminVisitor', 'visitCode(Code)')": [
                        165,
                        171,
                        172,
                        173,
                        180,
                        182,
                        185,
                        190,
                        195,
                        196,
                        203,
                        204,
                        214,
                        215,
                        216,
                        221,
                        231,
                        240,
                        241,
                        242,
                        247,
                        261,
                        273,
                        274,
                        275
                    ],
                    "('None#JasminVisitor', 'get(InstructionHandle)')": [
                        286,
                        287
                    ],
                    "('None#JasminVisitor', 'put(InstructionHandle,String)')": [
                        291,
                        292
                    ],
                    "('None#JasminVisitor', 'main(String)')": [
                        305,
                        313,
                        319,
                        320,
                        324,
                        328,
                        329
                    ]
                }
            },
            "src/examples/Mini/ASCII_CharStream.java": {
                "old": {
                    "('Mini#ASCII_CharStream', 'ExpandBuff(boolean)')": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        87
                    ],
                    "('Mini#ASCII_CharStream', 'FillBuff')": [
                        136
                    ],
                    "('Mini#ASCII_CharStream', 'BeginToken')": [
                        149
                    ],
                    "('Mini#ASCII_CharStream', 'UpdateLineColumn(char)')": [
                        155
                    ],
                    "('Mini#ASCII_CharStream', 'readChar')": [
                        207
                    ],
                    "('Mini#ASCII_CharStream', 'backup(int)')": [
                        229
                    ],
                    "('Mini#ASCII_CharStream', None)": [
                        237,
                        238,
                        255,
                        256,
                        284,
                        285,
                        290,
                        291
                    ],
                    "('Mini#ASCII_CharStream', 'ReInit(java,int,int,int)')": [
                        260,
                        261,
                        296,
                        297
                    ],
                    "('Mini#ASCII_CharStream', 'ReInit(java,int,int)')": [
                        279,
                        280,
                        301,
                        302
                    ],
                    "('Mini#ASCII_CharStream', 'GetSuffix(int)')": [
                        316,
                        317,
                        318
                    ],
                    "('Mini#ASCII_CharStream', 'adjustBeginLineColumn(int,int)')": [
                        342
                    ]
                },
                "new": {
                    "('Mini#ASCII_CharStream', 'ExpandBuff(boolean)')": [
                        48,
                        49,
                        50,
                        51,
                        52,
                        87
                    ],
                    "('Mini#ASCII_CharStream', 'FillBuff')": [
                        136
                    ],
                    "('Mini#ASCII_CharStream', 'BeginToken')": [
                        149
                    ],
                    "('Mini#ASCII_CharStream', 'UpdateLineColumn(char)')": [
                        155
                    ],
                    "('Mini#ASCII_CharStream', 'readChar')": [
                        207
                    ],
                    "('Mini#ASCII_CharStream', 'backup(int)')": [
                        229
                    ],
                    "('Mini#ASCII_CharStream', None)": [
                        237,
                        238,
                        255,
                        256,
                        284,
                        285,
                        290,
                        291
                    ],
                    "('Mini#ASCII_CharStream', 'ReInit(java,int,int,int)')": [
                        260,
                        261,
                        296,
                        297
                    ],
                    "('Mini#ASCII_CharStream', 'ReInit(java,int,int)')": [
                        279,
                        280,
                        301,
                        302
                    ],
                    "('Mini#ASCII_CharStream', 'GetSuffix(int)')": [
                        316,
                        317,
                        318
                    ],
                    "('Mini#ASCII_CharStream', 'adjustBeginLineColumn(int,int)')": [
                        342
                    ]
                }
            },
            "src/examples/Mini/ASTExpr.java": {
                "old": {
                    "('Mini#ASTExpr', None)": [
                        65,
                        69,
                        77,
                        83,
                        92
                    ],
                    "('Mini#ASTExpr', 'jjtCreate(MiniParser,int)')": [
                        73
                    ],
                    "('Mini#ASTExpr', 'toString')": [
                        103
                    ],
                    "('Mini#ASTExpr', 'traverse(Environment)')": [
                        134
                    ],
                    "('Mini#ASTExpr', 'eval(int)')": [
                        153
                    ],
                    "('Mini#ASTExpr', 'toBool(String)')": [
                        195
                    ],
                    "('Mini#ASTExpr', 'toInt(String)')": [
                        199
                    ],
                    "('Mini#ASTExpr', 'code(StringBuffer)')": [
                        206,
                        209,
                        219,
                        220
                    ],
                    "('Mini#ASTExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        254
                    ],
                    "('Mini#ASTExpr', 'setType(int)')": [
                        305
                    ],
                    "('Mini#ASTExpr', 'setKind(int)')": [
                        307
                    ],
                    "('Mini#ASTExpr', 'setUnOp(int)')": [
                        309
                    ],
                    "('Mini#ASTExpr', 'setLine(int)')": [
                        311
                    ],
                    "('Mini#ASTExpr', 'setColumn(int)')": [
                        313
                    ],
                    "('Mini#ASTExpr', 'setPosition(int,int)')": [
                        315
                    ],
                    "('Mini#ASTExpr', 'dump(String)')": [
                        321
                    ]
                },
                "new": {
                    "('Mini#ASTExpr', None)": [
                        65,
                        69,
                        77,
                        83,
                        92
                    ],
                    "('Mini#ASTExpr', 'jjtCreate(MiniParser,int)')": [
                        73
                    ],
                    "('Mini#ASTExpr', 'toString')": [
                        103
                    ],
                    "('Mini#ASTExpr', 'traverse(Environment)')": [
                        134
                    ],
                    "('Mini#ASTExpr', 'eval(int)')": [
                        153
                    ],
                    "('Mini#ASTExpr', 'toBool(String)')": [
                        195
                    ],
                    "('Mini#ASTExpr', 'toInt(String)')": [
                        199
                    ],
                    "('Mini#ASTExpr', 'code(StringBuffer)')": [
                        206,
                        209,
                        219,
                        220
                    ],
                    "('Mini#ASTExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        254
                    ],
                    "('Mini#ASTExpr', 'setType(int)')": [
                        305
                    ],
                    "('Mini#ASTExpr', 'setKind(int)')": [
                        307
                    ],
                    "('Mini#ASTExpr', 'setUnOp(int)')": [
                        309
                    ],
                    "('Mini#ASTExpr', 'setLine(int)')": [
                        311
                    ],
                    "('Mini#ASTExpr', 'setColumn(int)')": [
                        313
                    ],
                    "('Mini#ASTExpr', 'setPosition(int,int)')": [
                        315
                    ],
                    "('Mini#ASTExpr', 'dump(String)')": [
                        321
                    ]
                }
            },
            "src/examples/Mini/ASTFactor.java": {
                "old": {
                    "('Mini#ASTFactor', None)": [
                        28,
                        32
                    ],
                    "('Mini#ASTFactor', 'jjtCreate(MiniParser,int)')": [
                        36
                    ],
                    "('Mini#ASTFactor', 'traverse(Environment)')": [
                        47
                    ]
                },
                "new": {
                    "('Mini#ASTFactor', None)": [
                        28,
                        32
                    ],
                    "('Mini#ASTFactor', 'jjtCreate(MiniParser,int)')": [
                        36
                    ],
                    "('Mini#ASTFactor', 'traverse(Environment)')": [
                        47
                    ]
                }
            },
            "src/examples/Mini/ASTFunAppl.java": {
                "old": {
                    "('Mini#ASTFunAppl', None)": [
                        37,
                        41,
                        49
                    ],
                    "('Mini#ASTFunAppl', 'jjtCreate(MiniParser,int)')": [
                        45
                    ],
                    "('Mini#ASTFunAppl', 'traverse(Environment)')": [
                        81,
                        82,
                        83,
                        95,
                        96
                    ],
                    "('Mini#ASTFunAppl', 'eval(int)')": [
                        125,
                        126,
                        127,
                        128,
                        129,
                        137,
                        138
                    ],
                    "('Mini#ASTFunAppl', 'code(StringBuffer)')": [
                        164,
                        165,
                        182
                    ],
                    "('Mini#ASTFunAppl', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        203,
                        204,
                        208,
                        222
                    ]
                },
                "new": {
                    "('Mini#ASTFunAppl', None)": [
                        37,
                        41,
                        49
                    ],
                    "('Mini#ASTFunAppl', 'jjtCreate(MiniParser,int)')": [
                        45
                    ],
                    "('Mini#ASTFunAppl', 'traverse(Environment)')": [
                        81,
                        82,
                        83,
                        95,
                        96
                    ],
                    "('Mini#ASTFunAppl', 'eval(int)')": [
                        125,
                        126,
                        127,
                        128,
                        129,
                        137,
                        138
                    ],
                    "('Mini#ASTFunAppl', 'code(StringBuffer)')": [
                        164,
                        165,
                        182
                    ],
                    "('Mini#ASTFunAppl', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        203,
                        204,
                        208,
                        222
                    ]
                }
            },
            "src/examples/Mini/ASTFunDecl.java": {
                "old": {
                    "('Mini#ASTFunDecl', None)": [
                        62,
                        66,
                        74,
                        299,
                        300,
                        301
                    ],
                    "('Mini#ASTFunDecl', 'jjtCreate(MiniParser,int)')": [
                        70
                    ],
                    "('Mini#ASTFunDecl', 'traverse(Environment)')": [
                        103,
                        108,
                        123,
                        125
                    ],
                    "('Mini#ASTFunDecl', 'eval(int)')": [
                        135,
                        136
                    ],
                    "('Mini#ASTFunDecl', 'code(PrintWriter)')": [
                        159,
                        163,
                        188
                    ],
                    "('Mini#ASTFunDecl', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        214,
                        217,
                        218,
                        219,
                        233,
                        247,
                        249,
                        260,
                        261,
                        262,
                        265
                    ],
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        318,
                        319,
                        320,
                        321,
                        322,
                        323,
                        325,
                        326,
                        332,
                        333,
                        338
                    ],
                    "('Mini#ASTFunDecl', 'toString')": [
                        355
                    ],
                    "('Mini#ASTFunDecl', 'setType(int)')": [
                        375
                    ],
                    "('Mini#ASTFunDecl', 'setLine(int)')": [
                        376
                    ],
                    "('Mini#ASTFunDecl', 'setColumn(int)')": [
                        378
                    ],
                    "('Mini#ASTFunDecl', 'setPosition(int,int)')": [
                        380
                    ],
                    "('Mini#ASTFunDecl', 'dump(String)')": [
                        389
                    ],
                    "('Mini#ASTFunDecl', 'getVarDecls')": [
                        406
                    ],
                    "('Mini#ASTFunDecl', 'pop(int)')": [
                        422
                    ],
                    "('Mini#ASTFunDecl', 'push(int)')": [
                        423
                    ],
                    "('Mini#ASTFunDecl', 'push(StringBuffer,String)')": [
                        434
                    ]
                },
                "new": {
                    "('Mini#ASTFunDecl', None)": [
                        62,
                        66,
                        74,
                        300,
                        301,
                        302
                    ],
                    "('Mini#ASTFunDecl', 'jjtCreate(MiniParser,int)')": [
                        70
                    ],
                    "('Mini#ASTFunDecl', 'traverse(Environment)')": [
                        103,
                        108,
                        123,
                        125
                    ],
                    "('Mini#ASTFunDecl', 'eval(int)')": [
                        135,
                        136
                    ],
                    "('Mini#ASTFunDecl', 'code(PrintWriter)')": [
                        159,
                        163,
                        188
                    ],
                    "('Mini#ASTFunDecl', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        214,
                        217,
                        218,
                        219,
                        233,
                        247,
                        249,
                        260,
                        261,
                        262,
                        263,
                        266
                    ],
                    "('Mini#ASTFunDecl', 'optimizeIFs(InstructionList)')": [
                        319,
                        320,
                        321,
                        322,
                        323,
                        324,
                        326,
                        327,
                        333,
                        334,
                        339
                    ],
                    "('Mini#ASTFunDecl', 'toString')": [
                        356
                    ],
                    "('Mini#ASTFunDecl', 'setType(int)')": [
                        376
                    ],
                    "('Mini#ASTFunDecl', 'setLine(int)')": [
                        377
                    ],
                    "('Mini#ASTFunDecl', 'setColumn(int)')": [
                        379
                    ],
                    "('Mini#ASTFunDecl', 'setPosition(int,int)')": [
                        381
                    ],
                    "('Mini#ASTFunDecl', 'dump(String)')": [
                        390
                    ],
                    "('Mini#ASTFunDecl', 'getVarDecls')": [
                        407
                    ],
                    "('Mini#ASTFunDecl', 'pop(int)')": [
                        423
                    ],
                    "('Mini#ASTFunDecl', 'push(int)')": [
                        424
                    ],
                    "('Mini#ASTFunDecl', 'push(StringBuffer,String)')": [
                        435
                    ]
                }
            },
            "src/examples/Mini/ASTIdent.java": {
                "old": {
                    "('Mini#ASTIdent', None)": [
                        37,
                        41,
                        49
                    ],
                    "('Mini#ASTIdent', 'jjtCreate(MiniParser,int)')": [
                        45
                    ],
                    "('Mini#ASTIdent', 'traverse(Environment)')": [
                        70,
                        71
                    ],
                    "('Mini#ASTIdent', 'eval(int)')": [
                        89,
                        90,
                        91
                    ],
                    "('Mini#ASTIdent', 'code(StringBuffer)')": [
                        115
                    ],
                    "('Mini#ASTIdent', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        129,
                        135
                    ],
                    "('Mini#ASTIdent', 'setName(String)')": [
                        142
                    ]
                },
                "new": {
                    "('Mini#ASTIdent', None)": [
                        37,
                        41,
                        49
                    ],
                    "('Mini#ASTIdent', 'jjtCreate(MiniParser,int)')": [
                        45
                    ],
                    "('Mini#ASTIdent', 'traverse(Environment)')": [
                        70,
                        71
                    ],
                    "('Mini#ASTIdent', 'eval(int)')": [
                        89,
                        90,
                        91
                    ],
                    "('Mini#ASTIdent', 'code(StringBuffer)')": [
                        115
                    ],
                    "('Mini#ASTIdent', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        129,
                        135
                    ],
                    "('Mini#ASTIdent', 'setName(String)')": [
                        142
                    ]
                }
            },
            "src/examples/Mini/ASTIfExpr.java": {
                "old": {
                    "('Mini#ASTIfExpr', None)": [
                        37,
                        41
                    ],
                    "('Mini#ASTIfExpr', 'jjtCreate(MiniParser,int)')": [
                        45
                    ],
                    "('Mini#ASTIfExpr', 'traverse(Environment)')": [
                        72
                    ],
                    "('Mini#ASTIfExpr', 'eval(int)')": [
                        92
                    ],
                    "('Mini#ASTIfExpr', 'code(StringBuffer)')": [
                        143,
                        147
                    ],
                    "('Mini#ASTIfExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        159,
                        162,
                        163
                    ],
                    "('Mini#ASTIfExpr', 'dump(String)')": [
                        179
                    ]
                },
                "new": {
                    "('Mini#ASTIfExpr', None)": [
                        37,
                        41
                    ],
                    "('Mini#ASTIfExpr', 'jjtCreate(MiniParser,int)')": [
                        45
                    ],
                    "('Mini#ASTIfExpr', 'traverse(Environment)')": [
                        72
                    ],
                    "('Mini#ASTIfExpr', 'eval(int)')": [
                        92
                    ],
                    "('Mini#ASTIfExpr', 'code(StringBuffer)')": [
                        143,
                        147
                    ],
                    "('Mini#ASTIfExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        159,
                        162,
                        163
                    ],
                    "('Mini#ASTIfExpr', 'dump(String)')": [
                        179
                    ]
                }
            },
            "src/examples/Mini/ASTInteger.java": {
                "old": {
                    "('Mini#ASTInteger', None)": [
                        34,
                        38
                    ],
                    "('Mini#ASTInteger', 'jjtCreate(MiniParser,int)')": [
                        42
                    ],
                    "('Mini#ASTInteger', 'traverse(Environment)')": [
                        60
                    ],
                    "('Mini#ASTInteger', 'eval(int)')": [
                        71
                    ],
                    "('Mini#ASTInteger', 'code(StringBuffer)')": [
                        81
                    ],
                    "('Mini#ASTInteger', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        89
                    ],
                    "('Mini#ASTInteger', 'setValue(int)')": [
                        93
                    ]
                },
                "new": {
                    "('Mini#ASTInteger', None)": [
                        34,
                        38
                    ],
                    "('Mini#ASTInteger', 'jjtCreate(MiniParser,int)')": [
                        42
                    ],
                    "('Mini#ASTInteger', 'traverse(Environment)')": [
                        60
                    ],
                    "('Mini#ASTInteger', 'eval(int)')": [
                        71
                    ],
                    "('Mini#ASTInteger', 'code(StringBuffer)')": [
                        81
                    ],
                    "('Mini#ASTInteger', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        89
                    ],
                    "('Mini#ASTInteger', 'setValue(int)')": [
                        93
                    ]
                }
            },
            "src/examples/Mini/ASTLetExpr.java": {
                "old": {
                    "('Mini#ASTLetExpr', None)": [
                        40,
                        44
                    ],
                    "('Mini#ASTLetExpr', 'jjtCreate(MiniParser,int)')": [
                        48
                    ],
                    "('Mini#ASTLetExpr', 'closeNode')": [
                        59
                    ],
                    "('Mini#ASTLetExpr', 'traverse(Environment)')": [
                        78,
                        88,
                        89,
                        90
                    ],
                    "('Mini#ASTLetExpr', 'eval(int)')": [
                        112,
                        116
                    ],
                    "('Mini#ASTLetExpr', 'code(StringBuffer)')": [
                        129,
                        131,
                        132
                    ],
                    "('Mini#ASTLetExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        150,
                        151,
                        152,
                        155,
                        156,
                        157,
                        158,
                        159,
                        171
                    ],
                    "('Mini#ASTLetExpr', 'dump(String)')": [
                        178
                    ]
                },
                "new": {
                    "('Mini#ASTLetExpr', None)": [
                        40,
                        44
                    ],
                    "('Mini#ASTLetExpr', 'jjtCreate(MiniParser,int)')": [
                        48
                    ],
                    "('Mini#ASTLetExpr', 'closeNode')": [
                        59,
                        61
                    ],
                    "('Mini#ASTLetExpr', 'traverse(Environment)')": [
                        79,
                        89,
                        90,
                        91
                    ],
                    "('Mini#ASTLetExpr', 'eval(int)')": [
                        113,
                        117
                    ],
                    "('Mini#ASTLetExpr', 'code(StringBuffer)')": [
                        130,
                        132,
                        133
                    ],
                    "('Mini#ASTLetExpr', 'byte_code(InstructionList,MethodGen,ConstantPoolGen)')": [
                        151,
                        152,
                        153,
                        156,
                        157,
                        158,
                        159,
                        160,
                        172
                    ],
                    "('Mini#ASTLetExpr', 'dump(String)')": [
                        179
                    ]
                }
            },
            "src/examples/Mini/ASTProgram.java": {
                "old": {
                    "('Mini#ASTProgram', None)": [
                        51,
                        80
                    ],
                    "('Mini#ASTProgram', 'jjtCreate(MiniParser,int)')": [
                        84
                    ],
                    "('Mini#ASTProgram', 'eval(int)')": [
                        160,
                        166
                    ],
                    "('Mini#ASTProgram', 'code(PrintWriter,String)')": [
                        180
                    ],
                    "('Mini#ASTProgram', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        206,
                        216,
                        220,
                        221,
                        222,
                        252,
                        253
                    ],
                    "('Mini#ASTProgram', 'dump(String)')": [
                        330
                    ]
                },
                "new": {
                    "('Mini#ASTProgram', None)": [
                        51,
                        80
                    ],
                    "('Mini#ASTProgram', 'jjtCreate(MiniParser,int)')": [
                        84
                    ],
                    "('Mini#ASTProgram', 'eval(int)')": [
                        160,
                        166
                    ],
                    "('Mini#ASTProgram', 'code(PrintWriter,String)')": [
                        180
                    ],
                    "('Mini#ASTProgram', 'byte_code(ClassGen,ConstantPoolGen)')": [
                        206,
                        216,
                        220,
                        221,
                        222,
                        252,
                        253
                    ],
                    "('Mini#ASTProgram', 'dump(String)')": [
                        330
                    ]
                }
            },
            "src/examples/Mini/ASTTerm.java": {
                "old": {
                    "('Mini#ASTTerm', None)": [
                        28,
                        32
                    ],
                    "('Mini#ASTTerm', 'jjtCreate(MiniParser,int)')": [
                        36
                    ],
                    "('Mini#ASTTerm', 'traverse(Environment)')": [
                        47
                    ]
                },
                "new": {
                    "('Mini#ASTTerm', None)": [
                        28,
                        32
                    ],
                    "('Mini#ASTTerm', 'jjtCreate(MiniParser,int)')": [
                        36
                    ],
                    "('Mini#ASTTerm', 'traverse(Environment)')": [
                        47
                    ]
                }
            },
            "src/examples/Mini/Environment.java": {
                "old": {
                    "('Mini#Environment', None)": [
                        37,
                        38,
                        41,
                        46,
                        136,
                        137,
                        138
                    ],
                    "('Mini#Environment', 'hashCode(String)')": [
                        55
                    ],
                    "('Mini#Environment', 'put(EnvEntry)')": [
                        63,
                        66,
                        77,
                        83
                    ],
                    "('Mini#Environment', 'get(String)')": [
                        92,
                        105,
                        110
                    ],
                    "('Mini#Environment', 'delete(String)')": [
                        118,
                        130
                    ],
                    "('Mini#Environment', 'lookup(Vector,String)')": [
                        139,
                        142,
                        145
                    ],
                    "('Mini#Environment', 'clone')": [
                        157
                    ],
                    "('Mini#Environment', 'toString')": [
                        179
                    ],
                    "('Mini#Environment', 'getEntries')": [
                        191,
                        197,
                        202
                    ]
                },
                "new": {
                    "('Mini#Environment', None)": [
                        37,
                        38,
                        41,
                        46,
                        136,
                        137,
                        138
                    ],
                    "('Mini#Environment', 'hashCode(String)')": [
                        55
                    ],
                    "('Mini#Environment', 'put(EnvEntry)')": [
                        63,
                        66,
                        77,
                        83
                    ],
                    "('Mini#Environment', 'get(String)')": [
                        92,
                        105,
                        110
                    ],
                    "('Mini#Environment', 'delete(String)')": [
                        118,
                        130
                    ],
                    "('Mini#Environment', 'lookup(Vector,String)')": [
                        139,
                        142,
                        145
                    ],
                    "('Mini#Environment', 'clone')": [
                        157
                    ],
                    "('Mini#Environment', 'toString')": [
                        179
                    ],
                    "('Mini#Environment', 'getEntries')": [
                        191,
                        197,
                        202
                    ]
                }
            },
            "src/examples/Mini/Function.java": {
                "old": {
                    "('Mini#Function', None)": [
                        26,
                        29,
                        30,
                        31,
                        34,
                        38
                    ],
                    "('Mini#Function', 'toString')": [
                        51,
                        61
                    ],
                    "('Mini#Function', 'getArg(int)')": [
                        75
                    ],
                    "('Mini#Function', 'setArgs(ASTIdent)')": [
                        77
                    ]
                },
                "new": {
                    "('Mini#Function', None)": [
                        26,
                        29,
                        30,
                        31,
                        34,
                        38
                    ],
                    "('Mini#Function', 'toString')": [
                        51,
                        61
                    ],
                    "('Mini#Function', 'getArg(int)')": [
                        75
                    ],
                    "('Mini#Function', 'setArgs(ASTIdent)')": [
                        77
                    ]
                }
            },
            "src/examples/Mini/JJTMiniParserState.java": {
                "old": {
                    "('Mini#JJTMiniParserState', None)": [
                        23,
                        24
                    ],
                    "('Mini#JJTMiniParserState', 'pushNode(Node)')": [
                        60
                    ],
                    "('Mini#JJTMiniParserState', 'clearNodeScope(Node)')": [
                        86
                    ],
                    "('Mini#JJTMiniParserState', 'openNodeScope(Node)')": [
                        94
                    ],
                    "('Mini#JJTMiniParserState', 'closeNodeScope(Node,int)')": [
                        105,
                        108
                    ],
                    "('Mini#JJTMiniParserState', 'closeNodeScope(Node,boolean)')": [
                        123,
                        128
                    ]
                },
                "new": {
                    "('Mini#JJTMiniParserState', None)": [
                        23,
                        24
                    ],
                    "('Mini#JJTMiniParserState', 'pushNode(Node)')": [
                        60
                    ],
                    "('Mini#JJTMiniParserState', 'clearNodeScope(Node)')": [
                        86
                    ],
                    "('Mini#JJTMiniParserState', 'openNodeScope(Node)')": [
                        94
                    ],
                    "('Mini#JJTMiniParserState', 'closeNodeScope(Node,int)')": [
                        105,
                        108
                    ],
                    "('Mini#JJTMiniParserState', 'closeNodeScope(Node,boolean)')": [
                        123,
                        128
                    ]
                }
            },
            "src/examples/Mini/MiniC.java": {
                "old": {
                    "('Mini#MiniC', 'main(String)')": [
                        34,
                        35,
                        117,
                        121,
                        124,
                        129,
                        135,
                        138,
                        140,
                        151
                    ],
                    "('Mini#MiniC', 'addError(int,int,String)')": [
                        155
                    ],
                    "('Mini#MiniC', 'addWarning(int,int,String)')": [
                        162
                    ],
                    "('Mini#MiniC', 'fillup(int,int)')": [
                        167,
                        168,
                        169,
                        172
                    ],
                    "('Mini#MiniC', 'addWarning(String)')": [
                        184
                    ]
                },
                "new": {
                    "('Mini#MiniC', 'main(String)')": [
                        34,
                        35,
                        117,
                        121,
                        124,
                        129,
                        135,
                        138,
                        140,
                        151
                    ],
                    "('Mini#MiniC', 'addError(int,int,String)')": [
                        155
                    ],
                    "('Mini#MiniC', 'addWarning(int,int,String)')": [
                        162
                    ],
                    "('Mini#MiniC', 'fillup(int,int)')": [
                        167,
                        168,
                        169,
                        172
                    ],
                    "('Mini#MiniC', 'addWarning(String)')": [
                        184
                    ]
                }
            },
            "src/examples/Mini/MiniParser.java": {
                "old": {
                    "('Mini#MiniParser', 'jjtreeOpenNodeScope(Node)')": [
                        24
                    ],
                    "('Mini#MiniParser', 'jjtreeCloseNodeScope(Node)')": [
                        25
                    ],
                    "('Mini#MiniParser', 'Program')": [
                        32,
                        49
                    ],
                    "('Mini#MiniParser', 'FunDecl')": [
                        81,
                        116
                    ],
                    "('Mini#MiniParser', 'Expr')": [
                        146,
                        190
                    ],
                    "('Mini#MiniParser', 'IfExpr')": [
                        225,
                        244
                    ],
                    "('Mini#MiniParser', 'LetExpr')": [
                        274,
                        300
                    ],
                    "('Mini#MiniParser', 'FunAppl')": [
                        330,
                        374
                    ],
                    "('Mini#MiniParser', 'Term')": [
                        405,
                        427
                    ],
                    "('Mini#MiniParser', 'Factor')": [
                        457,
                        481
                    ],
                    "('Mini#MiniParser', 'Integer')": [
                        539
                    ],
                    "('Mini#MiniParser', 'Ident')": [
                        564
                    ],
                    "('Mini#MiniParser', 'jj_2_1(int)')": [
                        708,
                        710
                    ],
                    "('Mini#MiniParser', None)": [
                        841,
                        877,
                        913
                    ],
                    "('Mini#MiniParser', 'ReInit(java)')": [
                        862,
                        898
                    ],
                    "('Mini#MiniParser', 'ReInit(MiniParserTokenManager)')": [
                        933
                    ],
                    "('Mini#MiniParser', 'jj_consume_token(int)')": [
                        947
                    ],
                    "('Mini#MiniParser', 'jj_scan_token(int)')": [
                        976
                    ],
                    "('Mini#MiniParser', 'getToken(int)')": [
                        1008
                    ],
                    "('Mini#MiniParser', 'jj_add_error_token(int,int)')": [
                        1034,
                        1046,
                        1047
                    ],
                    "('Mini#MiniParser', 'generateParseException')": [
                        1072,
                        1102
                    ],
                    "('Mini#MiniParser', 'jj_save(int,int)')": [
                        1132
                    ]
                },
                "new": {
                    "('Mini#MiniParser', 'jjtreeOpenNodeScope(Node)')": [
                        24
                    ],
                    "('Mini#MiniParser', 'jjtreeCloseNodeScope(Node)')": [
                        25
                    ],
                    "('Mini#MiniParser', 'Program')": [
                        32,
                        49
                    ],
                    "('Mini#MiniParser', 'FunDecl')": [
                        81,
                        116
                    ],
                    "('Mini#MiniParser', 'Expr')": [
                        146,
                        190
                    ],
                    "('Mini#MiniParser', 'IfExpr')": [
                        225,
                        244
                    ],
                    "('Mini#MiniParser', 'LetExpr')": [
                        274,
                        300
                    ],
                    "('Mini#MiniParser', 'FunAppl')": [
                        330,
                        374
                    ],
                    "('Mini#MiniParser', 'Term')": [
                        405,
                        427
                    ],
                    "('Mini#MiniParser', 'Factor')": [
                        457,
                        481
                    ],
                    "('Mini#MiniParser', 'Integer')": [
                        539
                    ],
                    "('Mini#MiniParser', 'Ident')": [
                        564
                    ],
                    "('Mini#MiniParser', 'jj_2_1(int)')": [
                        708,
                        710
                    ],
                    "('Mini#MiniParser', None)": [
                        841,
                        877,
                        913
                    ],
                    "('Mini#MiniParser', 'ReInit(java)')": [
                        862,
                        898
                    ],
                    "('Mini#MiniParser', 'ReInit(MiniParserTokenManager)')": [
                        933
                    ],
                    "('Mini#MiniParser', 'jj_consume_token(int)')": [
                        947
                    ],
                    "('Mini#MiniParser', 'jj_scan_token(int)')": [
                        976
                    ],
                    "('Mini#MiniParser', 'getToken(int)')": [
                        1008
                    ],
                    "('Mini#MiniParser', 'jj_add_error_token(int,int)')": [
                        1034,
                        1046,
                        1047
                    ],
                    "('Mini#MiniParser', 'generateParseException')": [
                        1072,
                        1102
                    ],
                    "('Mini#MiniParser', 'jj_save(int,int)')": [
                        1132
                    ]
                }
            },
            "src/examples/Mini/MiniParserTokenManager.java": {
                "old": {
                    "('Mini#MiniParserTokenManager', 'jjCheckNAdd(int)')": [
                        27
                    ],
                    "('Mini#MiniParserTokenManager', 'jjAddStates(int,int)')": [
                        35
                    ],
                    "('Mini#MiniParserTokenManager', 'jjCheckNAddTwoStates(int,int)')": [
                        41
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveNfa_1(int,int)')": [
                        57,
                        71,
                        132
                    ],
                    "('Mini#MiniParserTokenManager', None)": [
                        133,
                        134,
                        593,
                        602
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStopStringLiteralDfa_0(int,long)')": [
                        135
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStartNfa_0(int,long)')": [
                        183
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStopAtPos(int,int)')": [
                        187
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStartNfaWithStates_0(int,int,int)')": [
                        193,
                        198
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa1_0(long)')": [
                        256,
                        259
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa2_0(long,long)')": [
                        316,
                        322
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa3_0(long,long)')": [
                        360,
                        366
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa4_0(long,long)')": [
                        398,
                        404
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveNfa_0(int,int)')": [
                        425,
                        439,
                        495,
                        527,
                        528,
                        553
                    ],
                    "('Mini#MiniParserTokenManager', 'ReInit(ASCII_CharStream)')": [
                        607
                    ],
                    "('Mini#MiniParserTokenManager', 'ReInit(ASCII_CharStream,int)')": [
                        622
                    ],
                    "('Mini#MiniParserTokenManager', 'SwitchTo(int)')": [
                        627
                    ],
                    "('Mini#MiniParserTokenManager', 'jjFillToken')": [
                        639,
                        641
                    ],
                    "('Mini#MiniParserTokenManager', 'getNextToken')": [
                        670,
                        690,
                        750,
                        757
                    ],
                    "('Mini#MiniParserTokenManager', 'SkipLexicalActions(Token)')": [
                        776
                    ]
                },
                "new": {
                    "('Mini#MiniParserTokenManager', 'jjCheckNAdd(int)')": [
                        27
                    ],
                    "('Mini#MiniParserTokenManager', 'jjAddStates(int,int)')": [
                        35
                    ],
                    "('Mini#MiniParserTokenManager', 'jjCheckNAddTwoStates(int,int)')": [
                        41
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveNfa_1(int,int)')": [
                        57,
                        71,
                        132
                    ],
                    "('Mini#MiniParserTokenManager', None)": [
                        133,
                        134,
                        593,
                        602
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStopStringLiteralDfa_0(int,long)')": [
                        135
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStartNfa_0(int,long)')": [
                        183
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStopAtPos(int,int)')": [
                        187
                    ],
                    "('Mini#MiniParserTokenManager', 'jjStartNfaWithStates_0(int,int,int)')": [
                        193,
                        198
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa1_0(long)')": [
                        256,
                        259
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa2_0(long,long)')": [
                        316,
                        322
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa3_0(long,long)')": [
                        360,
                        366
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveStringLiteralDfa4_0(long,long)')": [
                        398,
                        404
                    ],
                    "('Mini#MiniParserTokenManager', 'jjMoveNfa_0(int,int)')": [
                        425,
                        439,
                        495,
                        527,
                        528,
                        553
                    ],
                    "('Mini#MiniParserTokenManager', 'ReInit(ASCII_CharStream)')": [
                        607
                    ],
                    "('Mini#MiniParserTokenManager', 'ReInit(ASCII_CharStream,int)')": [
                        622
                    ],
                    "('Mini#MiniParserTokenManager', 'SwitchTo(int)')": [
                        627
                    ],
                    "('Mini#MiniParserTokenManager', 'jjFillToken')": [
                        639,
                        641
                    ],
                    "('Mini#MiniParserTokenManager', 'getNextToken')": [
                        670,
                        690,
                        750,
                        757
                    ],
                    "('Mini#MiniParserTokenManager', 'SkipLexicalActions(Token)')": [
                        776
                    ]
                }
            },
            "src/examples/Mini/ParseException.java": {
                "old": {
                    "('Mini#ParseException', None)": [
                        44,
                        45,
                        46,
                        71
                    ],
                    "('Mini#ParseException', 'add_escapes(String)')": [
                        166,
                        167,
                        200
                    ]
                },
                "new": {
                    "('Mini#ParseException', None)": [
                        44,
                        45,
                        46,
                        71
                    ],
                    "('Mini#ParseException', 'add_escapes(String)')": [
                        166,
                        167,
                        200
                    ]
                }
            },
            "src/examples/Mini/SimpleNode.java": {
                "old": {
                    "('Mini#SimpleNode', None)": [
                        32,
                        36
                    ],
                    "('Mini#SimpleNode', 'jjtSetParent(Node)')": [
                        50
                    ],
                    "('Mini#SimpleNode', 'jjtAddChild(Node,int)')": [
                        53,
                        57
                    ],
                    "('Mini#SimpleNode', 'jjtGetChild(int)')": [
                        64
                    ],
                    "('Mini#SimpleNode', 'toString(String)')": [
                        80
                    ],
                    "('Mini#SimpleNode', 'dump(String)')": [
                        85,
                        89
                    ]
                },
                "new": {
                    "('Mini#SimpleNode', None)": [
                        32,
                        36
                    ],
                    "('Mini#SimpleNode', 'jjtSetParent(Node)')": [
                        50
                    ],
                    "('Mini#SimpleNode', 'jjtAddChild(Node,int)')": [
                        53,
                        57
                    ],
                    "('Mini#SimpleNode', 'jjtGetChild(int)')": [
                        64
                    ],
                    "('Mini#SimpleNode', 'toString(String)')": [
                        80
                    ],
                    "('Mini#SimpleNode', 'dump(String)')": [
                        85,
                        89
                    ]
                }
            },
            "src/examples/Mini/Token.java": {
                "old": {
                    "('Mini#Token', 'newToken(int)')": [
                        91
                    ]
                },
                "new": {
                    "('Mini#Token', 'newToken(int)')": [
                        91
                    ]
                }
            },
            "src/examples/Mini/TokenMgrError.java": {
                "old": {
                    "('Mini#TokenMgrError', 'addEscapes(String)')": [
                        57,
                        58,
                        91
                    ],
                    "('Mini#TokenMgrError', 'LexicalError(boolean,int,int,int,String,char)')": [
                        114
                    ],
                    "('Mini#TokenMgrError', None)": [
                        143,
                        148
                    ]
                },
                "new": {
                    "('Mini#TokenMgrError', 'addEscapes(String)')": [
                        57,
                        58,
                        91
                    ],
                    "('Mini#TokenMgrError', 'LexicalError(boolean,int,int,int,String,char)')": [
                        114
                    ],
                    "('Mini#TokenMgrError', None)": [
                        143,
                        148
                    ]
                }
            },
            "src/examples/Mini/Variable.java": {
                "old": {
                    "('Mini#Variable', None)": [
                        26,
                        27,
                        29,
                        30,
                        33,
                        37
                    ],
                    "('Mini#Variable', 'setLocalVariable(LocalVariableGen)')": [
                        61
                    ]
                },
                "new": {
                    "('Mini#Variable', None)": [
                        26,
                        27,
                        29,
                        30,
                        33,
                        37
                    ],
                    "('Mini#Variable', 'setLocalVariable(LocalVariableGen)')": [
                        61
                    ]
                }
            },
            "src/examples/Package.java": {
                "old": {
                    "('None#Package', 'main(String)')": [
                        57,
                        58,
                        61
                    ],
                    "('None#Package', 'go(String)')": [
                        129,
                        132,
                        166,
                        167,
                        170,
                        173,
                        185,
                        188,
                        189,
                        190,
                        191,
                        192,
                        205
                    ],
                    "('None#Package', 'printAllClasses')": [
                        219,
                        222
                    ],
                    "('None#Package', 'addDependents(JavaClass)')": [
                        231,
                        232,
                        234,
                        236,
                        239,
                        240
                    ],
                    "('None#Package', 'addClassString(String,String)')": [
                        250
                    ]
                },
                "new": {
                    "('None#Package', 'main(String)')": [
                        57,
                        58,
                        61
                    ],
                    "('None#Package', 'go(String)')": [
                        129,
                        132,
                        166,
                        167,
                        170,
                        173,
                        185,
                        188,
                        189,
                        190,
                        191,
                        192,
                        205
                    ],
                    "('None#Package', 'printAllClasses')": [
                        219,
                        222
                    ],
                    "('None#Package', 'addDependents(JavaClass)')": [
                        231,
                        232,
                        234,
                        236,
                        239,
                        240
                    ],
                    "('None#Package', 'addClassString(String,String)')": [
                        250
                    ]
                }
            },
            "src/examples/Peephole.java": {
                "old": {
                    "('None#Peephole', 'main(String)')": [
                        38,
                        41,
                        42,
                        43,
                        47,
                        48,
                        59
                    ],
                    "('None#Peephole', 'removeNOPs(MethodGen)')": [
                        64,
                        65,
                        66,
                        67,
                        71,
                        72,
                        73,
                        74,
                        86,
                        87,
                        88
                    ]
                },
                "new": {
                    "('None#Peephole', 'main(String)')": [
                        38,
                        41,
                        42,
                        43,
                        47,
                        48,
                        59
                    ],
                    "('None#Peephole', 'removeNOPs(MethodGen)')": [
                        64,
                        65,
                        66,
                        67,
                        71,
                        72,
                        73,
                        74,
                        86,
                        87,
                        88
                    ]
                }
            },
            "src/examples/ProxyCreator.java": {
                "old": {
                    "('None#ProxyCreator', 'createProxy(String,String)')": [
                        59,
                        61,
                        63
                    ],
                    "('None#ProxyCreator', 'main(String)')": [
                        75,
                        76,
                        82,
                        88,
                        89,
                        90,
                        92,
                        94,
                        96,
                        119,
                        123,
                        127
                    ]
                },
                "new": {
                    "('None#ProxyCreator', 'createProxy(String,String)')": [
                        59,
                        61,
                        63
                    ],
                    "('None#ProxyCreator', 'main(String)')": [
                        75,
                        76,
                        82,
                        88,
                        89,
                        90,
                        92,
                        94,
                        96,
                        119,
                        123,
                        127
                    ]
                }
            },
            "src/examples/TransitiveHull.java": {
                "old": {
                    "('None#TransitiveHull', None)": [
                        58,
                        59,
                        66
                    ],
                    "('None#TransitiveHull', 'start')": [
                        86
                    ],
                    "('None#TransitiveHull', 'add(String)')": [
                        96,
                        103,
                        108
                    ],
                    "('None#TransitiveHull', 'visitConstantClass(ConstantClass)')": [
                        114,
                        115
                    ],
                    "('None#TransitiveHull', 'visitRef(ConstantCP,boolean)')": [
                        129,
                        130,
                        133,
                        136,
                        139,
                        143
                    ],
                    "('None#TransitiveHull', 'visitConstantMethodref(ConstantMethodref)')": [
                        152
                    ],
                    "('None#TransitiveHull', 'visitConstantInterfaceMethodref(ConstantInterfaceMethodref)')": [
                        157
                    ],
                    "('None#TransitiveHull', 'visitConstantFieldref(ConstantFieldref)')": [
                        162
                    ],
                    "('None#TransitiveHull', 'setIgnored(String)')": [
                        175
                    ],
                    "('None#TransitiveHull', 'main(String)')": [
                        179,
                        190,
                        195
                    ]
                },
                "new": {
                    "('None#TransitiveHull', None)": [
                        58,
                        59,
                        66
                    ],
                    "('None#TransitiveHull', 'start')": [
                        86
                    ],
                    "('None#TransitiveHull', 'add(String)')": [
                        96,
                        103,
                        108
                    ],
                    "('None#TransitiveHull', 'visitConstantClass(ConstantClass)')": [
                        114,
                        115
                    ],
                    "('None#TransitiveHull', 'visitRef(ConstantCP,boolean)')": [
                        129,
                        130,
                        133,
                        136,
                        139,
                        143
                    ],
                    "('None#TransitiveHull', 'visitConstantMethodref(ConstantMethodref)')": [
                        152
                    ],
                    "('None#TransitiveHull', 'visitConstantInterfaceMethodref(ConstantInterfaceMethodref)')": [
                        157
                    ],
                    "('None#TransitiveHull', 'visitConstantFieldref(ConstantFieldref)')": [
                        162
                    ],
                    "('None#TransitiveHull', 'setIgnored(String)')": [
                        175
                    ],
                    "('None#TransitiveHull', 'main(String)')": [
                        179,
                        190,
                        195
                    ]
                }
            },
            "src/examples/helloify.java": {
                "old": {
                    "('None#helloify', 'main(String)')": [
                        49,
                        50,
                        52,
                        53,
                        54,
                        62
                    ],
                    "('None#helloify', 'helloifyClassName(JavaClass)')": [
                        78
                    ],
                    "('None#helloify', 'helloifyMethod(Method)')": [
                        90,
                        91,
                        92,
                        100,
                        103,
                        108,
                        109,
                        110
                    ]
                },
                "new": {
                    "('None#helloify', 'main(String)')": [
                        49,
                        50,
                        52,
                        53,
                        54,
                        62
                    ],
                    "('None#helloify', 'helloifyClassName(JavaClass)')": [
                        78
                    ],
                    "('None#helloify', 'helloifyMethod(Method)')": [
                        90,
                        91,
                        92,
                        100,
                        103,
                        108,
                        109,
                        110
                    ]
                }
            },
            "src/examples/id.java": {
                "old": {
                    "('None#id', 'main(String)')": [
                        44,
                        51,
                        53,
                        54,
                        58,
                        59
                    ]
                },
                "new": {
                    "('None#id', 'main(String)')": [
                        44,
                        51,
                        53,
                        54,
                        58,
                        59
                    ]
                }
            },
            "src/examples/listclass.java": {
                "old": {
                    "('None#listclass', 'main(String)')": [
                        94,
                        95,
                        96,
                        107,
                        151
                    ],
                    "('None#listclass', None)": [
                        162,
                        163
                    ],
                    "('None#listclass', 'list(String)')": [
                        177,
                        218,
                        219,
                        220,
                        224,
                        226
                    ],
                    "('None#listclass', 'printClassDependencies(ConstantPool)')": [
                        234,
                        236
                    ],
                    "('None#listclass', 'getClassDependencies(ConstantPool)')": [
                        241,
                        242,
                        244,
                        247,
                        249,
                        262
                    ],
                    "('None#listclass', 'printCode(Method,boolean)')": [
                        270,
                        271,
                        274
                    ]
                },
                "new": {
                    "('None#listclass', 'main(String)')": [
                        94,
                        95,
                        96,
                        107,
                        151
                    ],
                    "('None#listclass', None)": [
                        162,
                        163
                    ],
                    "('None#listclass', 'list(String)')": [
                        177,
                        218,
                        219,
                        220,
                        224,
                        226
                    ],
                    "('None#listclass', 'printClassDependencies(ConstantPool)')": [
                        234,
                        236
                    ],
                    "('None#listclass', 'getClassDependencies(ConstantPool)')": [
                        241,
                        242,
                        244,
                        247,
                        249,
                        262
                    ],
                    "('None#listclass', 'printCode(Method,boolean)')": [
                        270,
                        271,
                        274
                    ]
                }
            },
            "src/examples/maxstack.java": {
                "old": {
                    "('None#maxstack', 'main(String)')": [
                        33,
                        34,
                        41,
                        43,
                        45,
                        47,
                        48,
                        51,
                        52
                    ]
                },
                "new": {
                    "('None#maxstack', 'main(String)')": [
                        33,
                        34,
                        41,
                        43,
                        45,
                        47,
                        48,
                        51,
                        52
                    ]
                }
            },
            "src/examples/patchclass.java": {
                "old": {
                    "('None#patchclass', 'main(String)')": [
                        33,
                        34,
                        47,
                        48
                    ],
                    "('None#patchclass', 'patchIt(String,String,Constant)')": [
                        62,
                        94
                    ]
                },
                "new": {
                    "('None#patchclass', 'main(String)')": [
                        33,
                        34,
                        47,
                        48
                    ],
                    "('None#patchclass', 'patchIt(String,String,Constant)')": [
                        62,
                        94
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/Module.java": {
                "old": {
                    "('org.apache.bcel.classfile#Module', None)": [
                        35,
                        36,
                        37,
                        42,
                        43
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#Module', None)": [
                        35,
                        36,
                        37,
                        42,
                        43
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/ModuleExports.java": {
                "old": {
                    "('org.apache.bcel.classfile#ModuleExports', None)": [
                        35,
                        36,
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#ModuleExports', None)": [
                        35,
                        36,
                        37,
                        38
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/ModuleOpens.java": {
                "old": {
                    "('org.apache.bcel.classfile#ModuleOpens', None)": [
                        35,
                        36,
                        37,
                        38
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#ModuleOpens', None)": [
                        35,
                        36,
                        37,
                        38
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/ModuleProvides.java": {
                "old": {
                    "('org.apache.bcel.classfile#ModuleProvides', None)": [
                        35,
                        36,
                        37
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#ModuleProvides', None)": [
                        35,
                        36,
                        37
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/ModuleRequires.java": {
                "old": {
                    "('org.apache.bcel.classfile#ModuleRequires', None)": [
                        35,
                        36,
                        37
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#ModuleRequires', None)": [
                        35,
                        36,
                        37
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/Utility.java": {
                "old": {
                    "('org.apache.bcel.classfile#Utility', 'signatureToString(String,boolean)')": [
                        843
                    ],
                    "('org.apache.bcel.classfile#Utility', 'typeParamTypesToString(String,boolean)')": [
                        870
                    ],
                    "('org.apache.bcel.classfile#Utility', 'typeParamTypeToString(String,boolean)')": [
                        899
                    ],
                    "('org.apache.bcel.classfile#Utility', 'typeSignaturesToString(String,boolean,char)')": [
                        929
                    ]
                },
                "new": {
                    "('org.apache.bcel.classfile#Utility', 'signatureToString(String,boolean)')": [
                        843
                    ],
                    "('org.apache.bcel.classfile#Utility', 'typeParamTypesToString(String,boolean)')": [
                        870
                    ],
                    "('org.apache.bcel.classfile#Utility', 'typeParamTypeToString(String,boolean)')": [
                        899
                    ],
                    "('org.apache.bcel.classfile#Utility', 'typeSignaturesToString(String,boolean,char)')": [
                        929
                    ]
                }
            },
            "src/main/java/org/apache/bcel/classfile/Visitor.java": {
                "old": {
                    "(None, None)": [
                        137,
                        169
                    ]
                },
                "new": {
                    "(None, None)": [
                        137,
                        169
                    ]
                }
            },
            "src/main/java/org/apache/bcel/generic/InvokeInstruction.java": {
                "old": {
                    "('org.apache.bcel.generic#InvokeInstruction', 'toString(ConstantPool)')": [
                        58,
                        60
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#InvokeInstruction', 'toString(ConstantPool)')": [
                        58,
                        60
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/ClassPath.java": {
                "old": {
                    "('org.apache.bcel.util#ClassPath', None)": [
                        355
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#ClassPath', None)": [
                        355
                    ]
                }
            },
            "src/main/java/org/apache/bcel/util/LruCacheClassPathRepository.java": {
                "old": {
                    "('org.apache.bcel.util#LruCacheClassPathRepository', None)": [
                        45,
                        46,
                        52
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#LruCacheClassPathRepository', None)": [
                        45,
                        46,
                        52
                    ]
                }
            },
            "src/test/java/org/apache/bcel/generic/JdkGenericDumpTestCase.java": {
                "old": {
                    "('org.apache.bcel.generic#JdkGenericDumpTestCase', 'addAllJavaHomes(String,Set)')": [
                        172,
                        173,
                        177
                    ]
                },
                "new": {
                    "('org.apache.bcel.generic#JdkGenericDumpTestCase', 'addAllJavaHomes(String,Set)')": [
                        172,
                        173,
                        177
                    ]
                }
            },
            "src/test/java/org/apache/bcel/util/ClassPathRepositoryTestCase.java": {
                "old": {
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'verifyCaching(AbstractClassPathRepository)')": [
                        34,
                        36,
                        38
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testClassPath')": [
                        78
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testNoClassNotFound')": [
                        86
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testClassWithoutPackage')": [
                        94
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testEmptyInput')": [
                        102
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testNullInput')": [
                        110
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'verifyCaching(AbstractClassPathRepository)')": [
                        34,
                        36,
                        38
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testClassPath')": [
                        78
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testNoClassNotFound')": [
                        86
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testClassWithoutPackage')": [
                        94
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testEmptyInput')": [
                        102
                    ],
                    "('org.apache.bcel.util#ClassPathRepositoryTestCase', 'testNullInput')": [
                        110
                    ]
                }
            },
            "src/test/java/org/apache/bcel/util/LruCacheClassPathRepositoryTestCase.java": {
                "old": {
                    "('org.apache.bcel.util#LruCacheClassPathRepositoryTestCase', 'testCacheEviction')": [
                        37,
                        38,
                        40,
                        42,
                        46
                    ],
                    "('org.apache.bcel.util#LruCacheClassPathRepositoryTestCase', 'testLeastRecentlyUsedEviction')": [
                        54,
                        55,
                        57,
                        60,
                        64
                    ]
                },
                "new": {
                    "('org.apache.bcel.util#LruCacheClassPathRepositoryTestCase', 'testCacheEviction')": [
                        37,
                        38,
                        40,
                        42,
                        46
                    ],
                    "('org.apache.bcel.util#LruCacheClassPathRepositoryTestCase', 'testLeastRecentlyUsedEviction')": [
                        54,
                        55,
                        57,
                        60,
                        64
                    ]
                }
            },
            "src/test/java/org/apache/bcel/verifier/tests/JiraBcel291TestFixture.java": {
                "old": {
                    "('org.apache.bcel.verifier.tests#JiraBcel291TestFixture', 'bug(Object)')": [
                        23
                    ]
                },
                "new": {
                    "('org.apache.bcel.verifier.tests#JiraBcel291TestFixture', 'bug(Object)')": [
                        23
                    ]
                }
            }
        }
    }
}