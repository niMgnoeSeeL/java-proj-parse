{
    "8fb518e6a136d6e8c38f5e3f81589c67599d7b66": {
        "authored_data": "2020 Mar 12 15:50",
        "commit.message": "Standardise computation of signatures.",
        "commit.author.name": "aherbert",
        "pcid": "33d6ddc7f997a8ebd84e282eb3e2257b59bf1d1a",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/function/MD5Cyclic.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#MD5Cyclic', None)": [
                        64
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#MD5Cyclic', None)": [
                        45,
                        46,
                        65
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/function/Murmur128x86Cyclic.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur128x86Cyclic', None)": [
                        52
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur128x86Cyclic', None)": [
                        34,
                        35,
                        46,
                        47,
                        55
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/function/Murmur32x86Iterative.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur32x86Iterative', None)": [
                        47
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur32x86Iterative', None)": [
                        34,
                        35,
                        41,
                        42,
                        50
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/function/ObjectsHashIterative.java": {
                "old": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterative', None)": [
                        54
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterative', None)": [
                        41,
                        42,
                        55
                    ]
                }
            }
        }
    },
    "33d6ddc7f997a8ebd84e282eb3e2257b59bf1d1a": {
        "authored_data": "2020 Mar 12 15:17",
        "commit.message": "Correct javadoc of the hash function signature.",
        "commit.author.name": "aherbert",
        "pcid": "9f2271334d3f76c1d76d64f8edf5e63e82e13bd2",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/HashFunction.java": {
                "new": {
                    "(None, None)": [
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/HashFunctionIdentity.java": {
                "old": {
                    "(None, None)": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        147,
                        148,
                        149,
                        150,
                        151
                    ]
                },
                "new": {
                    "(None, None)": [
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        112,
                        149,
                        150,
                        151,
                        152,
                        155
                    ]
                }
            }
        }
    },
    "9f2271334d3f76c1d76d64f8edf5e63e82e13bd2": {
        "authored_data": "2020 Mar 12 15:13",
        "commit.message": "Update the hash function tests to use a base class.\n\nThe base class performs the standard signature test that all hash\nfunctions should pass.\n",
        "commit.author.name": "aherbert",
        "pcid": "a51c96520a73dd3d2655267e07642ada49a109ee",
        "changes": {
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/function/MD5CyclicTest.java": {
                "old": {
                    "(None, None)": [
                        21,
                        22,
                        23
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#MD5CyclicTest', None)": [
                        29,
                        49,
                        50,
                        51,
                        52
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#MD5CyclicTest', 'signatureTest')": [
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59
                    ]
                },
                "new": {
                    "(None, None)": [
                        21
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#MD5CyclicTest', None)": [
                        27,
                        47
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#MD5CyclicTest', 'createHashFunction')": [
                        48,
                        49
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/function/Murmur128x86CyclicTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur128x86CyclicTest', None)": [
                        29,
                        51,
                        52,
                        53,
                        54
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur128x86CyclicTest', 'signatureTest')": [
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur128x86CyclicTest', None)": [
                        28,
                        50
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur128x86CyclicTest', 'createHashFunction')": [
                        51,
                        52
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/function/Murmur32x86IterativeTest.java": {
                "old": {
                    "(None, None)": [
                        22,
                        23
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur32x86IterativeTest', None)": [
                        29,
                        49,
                        50,
                        51,
                        52
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur32x86IterativeTest', 'signatureTest')": [
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59
                    ]
                },
                "new": {
                    "(None, None)": [
                        22
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur32x86IterativeTest', None)": [
                        28,
                        48
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#Murmur32x86IterativeTest', 'createHashFunction')": [
                        49,
                        50
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/function/ObjectsHashIterativeTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterativeTest', None)": [
                        29,
                        52,
                        53,
                        54,
                        55
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterativeTest', 'signatureTest')": [
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64
                    ]
                },
                "new": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterativeTest', None)": [
                        29,
                        52
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterativeTest', 'createHashFunction')": [
                        53,
                        54
                    ]
                }
            }
        }
    },
    "a51c96520a73dd3d2655267e07642ada49a109ee": {
        "authored_data": "2020 Mar 12 14:22",
        "commit.message": "Remove javadocs in overridden methods that are duplicates.\n\nAn exact copy of the javadoc is redundant. It also means updates to the\nparent get lost by those inheriting. It is better to use {@inheritDoc}\nand add extra information.",
        "commit.author.name": "aherbert",
        "pcid": "2a9bdc00981621c21e95e2bac474e64384efacd2",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilter.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilter', None)": [
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        76,
                        77,
                        78,
                        79,
                        80,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        148,
                        149,
                        150,
                        151,
                        152,
                        168,
                        169,
                        170,
                        171,
                        172,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/BloomFilter.java": {
                "old": {
                    "(None, None)": [
                        120
                    ]
                },
                "new": {
                    "(None, None)": [
                        120
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/DynamicHasher.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#DynamicHasher', None)": [
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/StaticHasher.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasher', None)": [
                        99,
                        100,
                        101,
                        102
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasher', None)": [
                        99,
                        100,
                        101
                    ]
                }
            }
        }
    },
    "2a9bdc00981621c21e95e2bac474e64384efacd2": {
        "authored_data": "2020 Mar 12 13:59",
        "commit.message": "Improve comment in BloomFilterIndexer.",
        "commit.author.name": "aherbert",
        "pcid": "eda601dd041591c1af90c638389a06091babdf5d",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/BloomFilterIndexer.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#BloomFilterIndexer', 'getLongIndex(int)')": [
                        56
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#BloomFilterIndexer', 'getLongIndex(int)')": [
                        56,
                        57,
                        58
                    ]
                }
            }
        }
    },
    "eda601dd041591c1af90c638389a06091babdf5d": {
        "authored_data": "2020 Mar 12 13:55",
        "commit.message": "Update package info for Bloom filter sub-packages.",
        "commit.author.name": "aherbert",
        "pcid": "cb967680c315504871a9e7bc2c7e31123c705e8f",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/function/package-info.java": {
                "old": {
                    "(None, None)": [
                        19,
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/package-info.java": {
                "old": {
                    "(None, None)": [
                        19,
                        20
                    ]
                },
                "new": {
                    "(None, None)": [
                        19,
                        20
                    ]
                }
            }
        }
    },
    "cb967680c315504871a9e7bc2c7e31123c705e8f": {
        "authored_data": "2020 Mar 10 01:53",
        "commit.message": "Standardise the Bloom filter shape equations.\n\nEquations match those in:\n\nhttps://hur.st/bloomfilter/\n\nFixed documentation of the approximate value of the denominator. Compute\nusing a re-arrangement.\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "03543e5f9b5133d4026a080b62839440bebda7e6",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/Shape.java": {
                "old": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        49,
                        54,
                        55,
                        56,
                        405
                    ]
                },
                "new": {
                    "(None, None)": [
                        32
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        49,
                        54,
                        55,
                        56,
                        57,
                        58,
                        407
                    ]
                }
            }
        }
    },
    "03543e5f9b5133d4026a080b62839440bebda7e6": {
        "authored_data": "2020 Mar 10 00:46",
        "commit.message": "Ensure hashCode hashes the same properties as the equality.\n\nSince HashFunctionIdentity is an interface there is no control over what\nis hashed. Add a hash function to the HashFunctionValidator to ensure\nthe hash code is the same if two hash functions are equal according to\nthe hashFunctionIdentity.\n\nNote: Since Shape is final we use the properties directly and not through the get methods.",
        "commit.author.name": "Alex Herbert",
        "pcid": "0964d5bf19ec97c8588cfdd8c02e76a7e71b047d",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/HashFunctionValidator.java": {
                "new": {
                    "(None, None)": [
                        19,
                        20,
                        21
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#HashFunctionValidator', None)": [
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        54
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#HashFunctionValidator', 'hash(HashFunctionIdentity)')": [
                        50,
                        51,
                        52,
                        53
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/Shape.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'equals(Object)')": [
                        341,
                        342,
                        343,
                        344,
                        345
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'generateHashCode')": [
                        351
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        411,
                        412,
                        413
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'hashCode')": [
                        414,
                        415
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'equals(Object)')": [
                        341,
                        342,
                        343,
                        344
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        349,
                        352,
                        353
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'hashCode')": [
                        350,
                        351
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'generateHashCode')": [
                        355
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/ShapeTest.java": {
                "old": {
                    "(None, None)": [
                        23
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#ShapeTest', None)": [
                        461
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#ShapeTest', 'hashCodeTest')": [
                        465,
                        466
                    ]
                },
                "new": {
                    "(None, None)": [
                        23,
                        24,
                        25,
                        26,
                        501,
                        502
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#ShapeTest', None)": [
                        464,
                        465
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#ShapeTest', 'hashCodeTest')": [
                        469,
                        470,
                        471,
                        472,
                        473,
                        474,
                        475,
                        476,
                        477,
                        478,
                        479,
                        480,
                        481,
                        482,
                        483,
                        484,
                        485,
                        486,
                        487,
                        488,
                        489,
                        490,
                        491,
                        492,
                        493,
                        494,
                        495,
                        496,
                        497,
                        498,
                        499,
                        500
                    ]
                }
            }
        }
    },
    "0964d5bf19ec97c8588cfdd8c02e76a7e71b047d": {
        "authored_data": "2020 Mar 10 00:29",
        "commit.message": "Standardise Shape constructor validations.\n\nStandardise the constructor assertions to functions.\n\nEnsure Shape catches NaN probability in the constructor.\n\nPreviously NaN would result in a NaN computation for the number of bits.\nWhen cast to int it would be zero. This change improves the error\nmessage in the exception.\n\nClean-up javadocs.\n\nEnsure Shape is final. If not final then the rest of the Bloom filter\nAPI cannot assume that a Shape is valid as it may be extended and the\ncomputations changed.\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "cb88c4ed01fdab8045243b122f504c87261e7421",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/Shape.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        46,
                        47,
                        48,
                        49,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        64,
                        69,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        162,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        202,
                        203,
                        207,
                        209,
                        210,
                        212,
                        213,
                        215,
                        216,
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        279,
                        294,
                        295,
                        296,
                        297,
                        306,
                        315,
                        316,
                        317
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'calculateNumberOfHashFunctions(int,int)')": [
                        235,
                        236,
                        237,
                        238,
                        242,
                        243,
                        244,
                        245,
                        246,
                        247,
                        248,
                        249
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'equals(Object)')": [
                        258,
                        259
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'getNumberOfBytes')": [
                        293
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'getProbability')": [
                        321,
                        322,
                        323,
                        325,
                        326,
                        327,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333,
                        334,
                        335
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        46,
                        47,
                        48,
                        49,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        64,
                        69,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        129,
                        130,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        159,
                        160,
                        161,
                        162,
                        163,
                        166,
                        169,
                        171,
                        172,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200,
                        201,
                        203,
                        204,
                        205,
                        206,
                        207,
                        208,
                        209,
                        210,
                        211,
                        212,
                        213,
                        214,
                        215,
                        216,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233,
                        234,
                        235,
                        236,
                        237,
                        238,
                        239,
                        240,
                        241,
                        242,
                        243,
                        249,
                        250,
                        251,
                        252,
                        253,
                        254,
                        255,
                        256,
                        257,
                        263,
                        264,
                        265,
                        266,
                        267,
                        268,
                        269,
                        270,
                        271,
                        277,
                        278,
                        279,
                        280,
                        281,
                        282,
                        283,
                        284,
                        289,
                        290,
                        291,
                        292,
                        293,
                        294,
                        295,
                        296,
                        297,
                        298,
                        299,
                        300,
                        301,
                        310,
                        320,
                        363,
                        378,
                        379,
                        380,
                        381,
                        390,
                        399,
                        400,
                        401,
                        402,
                        403,
                        404
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'checkNumberOfItems(int)')": [
                        244,
                        246,
                        247,
                        248
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'checkNumberOfBits(int)')": [
                        258,
                        260,
                        261,
                        262
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'checkNumberOfHashFunctions(int)')": [
                        272,
                        274,
                        275,
                        276
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'checkProbability(double)')": [
                        285,
                        286,
                        287,
                        288
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'checkCalculatedProbability(double)')": [
                        302,
                        303,
                        304,
                        305,
                        306,
                        307,
                        308,
                        309
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'calculateNumberOfHashFunctions(int,int)')": [
                        323,
                        324,
                        328,
                        329,
                        330,
                        331,
                        332,
                        333
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'equals(Object)')": [
                        342,
                        343
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'getNumberOfBytes')": [
                        377
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'getProbability')": [
                        408,
                        409
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/ShapeTest.java": {
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#ShapeTest', 'constructor_items_probability_BadProbabilityTest')": [
                        230,
                        231,
                        232
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#ShapeTest', None)": [
                        233,
                        234,
                        235
                    ]
                }
            }
        }
    },
    "cb88c4ed01fdab8045243b122f504c87261e7421": {
        "authored_data": "2020 Mar 09 22:49",
        "commit.message": "Achieve 100% test coverage for BitSetBloomFilter.\n\nThis is done by duplicating the and/or/xor cardinality tests and merge\ntests in the AbtsractBloomFilterTest using the current filter type\n(provided via abstract methods) and a generic BloomFilter\nimplementation.\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "90ed5343bb6248f2d3c9302112666a880962ef24",
        "changes": {
            "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'andCardinalityTest')": [
                        119
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', None)": [
                        306,
                        486
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_BloomFilter')": [
                        380
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'orCardinalityTest')": [
                        461
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'xorCardinalityTest')": [
                        497
                    ]
                },
                "new": {
                    "(None, None)": [
                        26,
                        27,
                        30,
                        31
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', None)": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72,
                        73,
                        74,
                        75,
                        76,
                        77,
                        78,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        362,
                        367,
                        368,
                        369,
                        370,
                        371,
                        372,
                        373,
                        374,
                        379,
                        443,
                        444,
                        445,
                        446,
                        447,
                        448,
                        451,
                        452,
                        453,
                        454,
                        455,
                        456,
                        457,
                        541,
                        542,
                        543,
                        544,
                        545,
                        546,
                        549,
                        550,
                        551,
                        552,
                        553,
                        554,
                        555,
                        590,
                        595,
                        596,
                        597,
                        598,
                        599,
                        600,
                        603,
                        604,
                        605,
                        606,
                        607,
                        608,
                        609
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'andCardinalityTest')": [
                        150
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'andCardinalityTest_GenenicBloomFilter')": [
                        157,
                        158
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'andCardinalityTest(BiFunction)')": [
                        166,
                        175
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'createGenericFilter(Hasher,Shape)')": [
                        375,
                        376,
                        377,
                        378
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_BloomFilter')": [
                        442
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_GenenicBloomFilter')": [
                        449,
                        450
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_BloomFilter(BiFunction)')": [
                        458,
                        466,
                        467
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'orCardinalityTest')": [
                        540
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'orCardinalityTest_GenenicBloomFilter')": [
                        547,
                        548
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'orCardinalityTest(BiFunction)')": [
                        556,
                        565
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'xorCardinalityTest')": [
                        594
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'xorCardinalityTest_GenenicBloomFilter')": [
                        601,
                        602
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'xorCardinalityTest(BiFunction)')": [
                        610,
                        618,
                        619
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/BitSetBloomFilterTest.java": {
                "old": {
                    "(None, None)": [
                        19,
                        20,
                        21,
                        22,
                        25,
                        26,
                        115
                    ],
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilterTest', None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        58,
                        59,
                        69,
                        70,
                        71,
                        72,
                        73,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93
                    ],
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilterTest', 'andCardinalityTest_BitSetBloomFilter')": [
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57
                    ],
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilterTest', 'mergeTest_BitSetBloomFilter')": [
                        74,
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87
                    ],
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilterTest', 'xorCardinalityTest_BitSetBloomFilter')": [
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114
                    ]
                }
            }
        }
    }
}