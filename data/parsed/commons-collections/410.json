{
    "976d64583525e604c4e04ac57ff4c600d2c61bfe": {
        "authored_data": "2020 Mar 17 12:16",
        "commit.message": "Remove Hasher isEmpty()",
        "commit.author.name": "Alex Herbert",
        "pcid": "f00daff8c8474a76f489b51584cd687894961fd8",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/DynamicHasher.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#DynamicHasher', None)": [
                        184,
                        185
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#DynamicHasher', 'isEmpty')": [
                        186,
                        187
                    ],
                    "(None, None)": [
                        188
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/Hasher.java": {
                "old": {
                    "(None, None)": [
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/StaticHasher.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasher', None)": [
                        126,
                        129,
                        130
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasher', 'isEmpty')": [
                        127,
                        128
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/FixedIndexesTestHasher.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#FixedIndexesTestHasher', None)": [
                        62,
                        63
                    ],
                    "('org.apache.commons.collections4.bloomfilter#FixedIndexesTestHasher', 'isEmpty')": [
                        64,
                        65
                    ],
                    "(None, None)": [
                        66
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/HasherBloomFilterTest.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#HasherBloomFilterTest', 'getBitsTest_LowestBitOnly')": [
                        89,
                        90,
                        91,
                        92,
                        93
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/DynamicHasherTest.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#DynamicHasherTest', None)": [
                        134,
                        135,
                        136,
                        137,
                        138
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#DynamicHasherTest', 'testIsEmpty')": [
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151
                    ],
                    "(None, None)": [
                        152
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/StaticHasherTest.java": {
                "old": {
                    "(None, None)": [
                        24,
                        340
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasherTest', 'testConstructor_Hasher')": [
                        132,
                        133,
                        134,
                        135,
                        136
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasherTest', 'testConstructor_Hasher_WrongShape')": [
                        165,
                        166,
                        167,
                        168,
                        169
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasherTest', None)": [
                        326,
                        327,
                        328,
                        329,
                        330
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#StaticHasherTest', 'testIsEmpty')": [
                        331,
                        332,
                        333,
                        334,
                        335,
                        336,
                        337,
                        338,
                        339
                    ]
                }
            }
        }
    },
    "f00daff8c8474a76f489b51584cd687894961fd8": {
        "authored_data": "2020 Mar 17 07:39",
        "commit.message": "Fix typo in Shape.checkNumberOfBits",
        "commit.author.name": "Alex Herbert",
        "pcid": "d6eeceb01880d970517f31dec9a81e0a3846360e",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/Shape.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        249
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'checkNumberOfBits(int)')": [
                        257
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', None)": [
                        249
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher#Shape', 'checkNumberOfBits(int)')": [
                        257
                    ]
                }
            }
        }
    },
    "d6eeceb01880d970517f31dec9a81e0a3846360e": {
        "authored_data": "2020 Mar 17 00:59",
        "commit.message": "Optimise ObjectsHashIterative hash function.\n\nAvoid using Arrays.deepHashCode. The array passed to deepHashCode is\nalways length 2. So we can unroll the same computation for the fixed 2\niterations.",
        "commit.author.name": "Alex Herbert",
        "pcid": "a699c8b9ba8e3bdb8bb669f844a3e5b3a150e8b1",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/function/ObjectsHashIterative.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterative', 'apply(byte,int)')": [
                        63
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterative', 'apply(byte,int)')": [
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/hasher/function/ObjectsHashIterativeTest.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterativeTest', 'applyTest')": [
                        44,
                        45,
                        46,
                        47,
                        48,
                        49
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterativeTest', 'applyTest')": [
                        44,
                        45,
                        46,
                        47
                    ],
                    "('org.apache.commons.collections4.bloomfilter.hasher.function#ObjectsHashIterativeTest', None)": [
                        48
                    ]
                }
            }
        }
    },
    "a699c8b9ba8e3bdb8bb669f844a3e5b3a150e8b1": {
        "authored_data": "2020 Mar 16 17:14",
        "commit.message": "Update Hasher javadoc.\n\nRemove trailing periods from params and returns.\n\nRemove the specification in the Hasher.Builder to convert the String to\nbytes using the UTF-8 charset. This is an implementation detail. It has\nbeen moved to the DynamicHasher implementation.\n\nUpdate exception message for getBits to be less specific. The reference\nto getName() is now obsolete.\n",
        "commit.author.name": "aherbert",
        "pcid": "142d53a6a52f7389a5494b466b931c86f2d4a6b8",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/DynamicHasher.java": {
                "new": {
                    "('org.apache.commons.collections4.bloomfilter.hasher#DynamicHasher', None)": [
                        79,
                        80,
                        81,
                        82,
                        83
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/hasher/Hasher.java": {
                "old": {
                    "(None, None)": [
                        43,
                        51,
                        52,
                        60,
                        61,
                        62,
                        68,
                        69,
                        71,
                        72,
                        73,
                        81,
                        84,
                        85,
                        86,
                        87,
                        92,
                        94,
                        101
                    ]
                },
                "new": {
                    "(None, None)": [
                        43,
                        51,
                        52,
                        60,
                        61,
                        62,
                        68,
                        70,
                        71,
                        72,
                        80,
                        83,
                        84,
                        85,
                        86,
                        91,
                        93,
                        100
                    ]
                }
            }
        }
    },
    "142d53a6a52f7389a5494b466b931c86f2d4a6b8": {
        "authored_data": "2020 Mar 15 23:43",
        "commit.message": "Remove trailing whitespace",
        "commit.author.name": "Alex Herbert",
        "pcid": "7b15598da0d4c3da6fff8a9c77ccf4f4f3a7abbd",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilter.java": {
                "old": {
                    "(None, None)": [
                        32,
                        39,
                        45
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        39,
                        45
                    ]
                }
            }
        }
    },
    "7b15598da0d4c3da6fff8a9c77ccf4f4f3a7abbd": {
        "authored_data": "2020 Mar 15 23:26",
        "commit.message": "Update javadoc for ArrayCountingBloomFilter.\n\nDocument that no exception is raised when the filter state transitions\nto invalid.",
        "commit.author.name": "Alex Herbert",
        "pcid": "9de28a7b622972df1b32311ae605dc97761499f2",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilter.java": {
                "old": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        42,
                        51
                    ]
                },
                "new": {
                    "(None, None)": [
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        45,
                        53
                    ]
                }
            }
        }
    },
    "9de28a7b622972df1b32311ae605dc97761499f2": {
        "authored_data": "2020 Mar 15 21:45",
        "commit.message": "Updated the BloomFilter javadoc.\n\nRemove trailing periods on parameters and arguments.\n\nRemove reference to LongBuffer. Clarify what the long[] represents in\n'long[] getBits()'.\n\nClarify cardinality using (number of enabled bits).\n\nRearrange BloomFilter interface methods to functional order. The order\nis:\n\n- Query operations\n- Modification operations\n- Counting operations\n\nImprove javadoc for BloomFilter contains with additional information for\nwhat 'contains' means.\n\nUpdate exception message for contains/merge/add/subtract to be\nconsistent.\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "86bac5e60207934937537fd78b7313f634352137",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/BloomFilter.java": {
                "old": {
                    "(None, None)": [
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        39,
                        40,
                        42,
                        44,
                        47,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        78,
                        83,
                        85,
                        87,
                        90,
                        92,
                        98,
                        99,
                        101,
                        103,
                        104,
                        109,
                        110,
                        112,
                        113,
                        118,
                        119,
                        121,
                        122
                    ]
                },
                "new": {
                    "(None, None)": [
                        29,
                        32,
                        34,
                        36,
                        39,
                        41,
                        42,
                        43,
                        44,
                        46,
                        54,
                        59,
                        60,
                        61,
                        62,
                        64,
                        65,
                        66,
                        67,
                        69,
                        72,
                        73,
                        74,
                        75,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        96,
                        97,
                        102,
                        103,
                        105,
                        106,
                        107,
                        108,
                        109,
                        111,
                        112,
                        116,
                        117,
                        119,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        146,
                        147,
                        149,
                        150
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/CountingBloomFilter.java": {
                "old": {
                    "(None, None)": [
                        75,
                        76,
                        77,
                        78,
                        79,
                        80,
                        81,
                        82,
                        83,
                        84,
                        85,
                        86,
                        87,
                        88,
                        89,
                        90,
                        91,
                        92,
                        93,
                        94,
                        95,
                        96,
                        97,
                        98,
                        99,
                        100,
                        101,
                        102,
                        103,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154
                    ]
                },
                "new": {
                    "(None, None)": [
                        75,
                        104,
                        105,
                        106,
                        107,
                        108,
                        109,
                        110,
                        111,
                        112,
                        113,
                        114,
                        115,
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127,
                        128,
                        129,
                        130,
                        131,
                        132,
                        133,
                        134,
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146,
                        147,
                        148,
                        149,
                        150,
                        151,
                        152,
                        153,
                        154,
                        155,
                        156,
                        157,
                        158,
                        159,
                        160,
                        161,
                        162,
                        163,
                        164,
                        165,
                        166,
                        167,
                        168,
                        169,
                        170,
                        171,
                        172,
                        173,
                        174,
                        175,
                        176,
                        177,
                        178,
                        179,
                        180,
                        181,
                        182,
                        183,
                        184,
                        185,
                        186,
                        187,
                        188,
                        189,
                        190,
                        191,
                        192,
                        193,
                        194,
                        195,
                        196,
                        197,
                        198,
                        199,
                        200
                    ]
                }
            }
        }
    },
    "86bac5e60207934937537fd78b7313f634352137": {
        "authored_data": "2020 Mar 15 21:36",
        "commit.message": "Change BloomFilter merge return type from void to boolean.\n\nThis is to support the extension to a counting Bloom filter which can\nreturn true/false if the state is valid.\n\nDrops redundant abstract methods from the AbstractBloomFilter that are\noverrides of the BloomFilter interface .",
        "commit.author.name": "Alex Herbert",
        "pcid": "22d161a25b54065a78d0f82dc530bf36091a0c23",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilter.java": {
                "old": {
                    "(None, None)": [
                        25
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilter', 'getBits')": [
                        103
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilter', None)": [
                        104,
                        105,
                        107,
                        108,
                        122,
                        123,
                        125,
                        126
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilter', 'getHasher')": [
                        106
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilter', 'merge(BloomFilter)')": [
                        124
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilter', 'merge(Hasher)')": [
                        127
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilter.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', 'merge(BloomFilter)')": [
                        240
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', None)": [
                        242,
                        243,
                        244
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', 'merge(Hasher)')": [
                        245
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', 'merge(BloomFilter)')": [
                        240,
                        242
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', None)": [
                        243,
                        244,
                        245
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', 'merge(Hasher)')": [
                        246,
                        248
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/BitSetBloomFilter.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilter', 'merge(BloomFilter)')": [
                        100
                    ],
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilter', 'merge(Hasher)')": [
                        110
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilter', 'merge(BloomFilter)')": [
                        100,
                        107
                    ],
                    "('org.apache.commons.collections4.bloomfilter#BitSetBloomFilter', 'merge(Hasher)')": [
                        111,
                        114
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/BloomFilter.java": {
                "old": {
                    "(None, None)": [
                        94,
                        104
                    ]
                },
                "new": {
                    "(None, None)": [
                        93,
                        95,
                        102,
                        106
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/CountingBloomFilter.java": {
                "old": {
                    "(None, None)": [
                        78,
                        82,
                        91
                    ]
                },
                "new": {
                    "(None, None)": [
                        78,
                        80,
                        81,
                        84,
                        91,
                        92,
                        95
                    ]
                }
            },
            "src/main/java/org/apache/commons/collections4/bloomfilter/HasherBloomFilter.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#HasherBloomFilter', 'merge(BloomFilter)')": [
                        143,
                        144
                    ],
                    "('org.apache.commons.collections4.bloomfilter#HasherBloomFilter', 'merge(Hasher)')": [
                        148
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#HasherBloomFilter', 'merge(BloomFilter)')": [
                        143,
                        144
                    ],
                    "('org.apache.commons.collections4.bloomfilter#HasherBloomFilter', 'merge(Hasher)')": [
                        148,
                        153
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', None)": [
                        68,
                        73
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_BloomFilter(BiFunction)')": [
                        469
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_Hasher')": [
                        509
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', None)": [
                        68,
                        73
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_BloomFilter(BiFunction)')": [
                        469
                    ],
                    "('org.apache.commons.collections4.bloomfilter#AbstractBloomFilterTest', 'mergeTest_Hasher')": [
                        509
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilterTest.java": {
                "old": {
                    "(None, None)": [
                        27
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertMerge(Function,BiConsumer)')": [
                        219,
                        223
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertRemove(Function,BiConsumer)')": [
                        235,
                        239
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertOperation(int,int,Function,BiConsumer,int)')": [
                        259,
                        260,
                        264
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Overflow')": [
                        280,
                        286
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertMerge(Function,BiPredicate)')": [
                        218,
                        222
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertRemove(Function,BiPredicate)')": [
                        234,
                        238
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', None)": [
                        254
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertOperation(int,int,Function,BiPredicate,boolean,int)')": [
                        259,
                        260,
                        264,
                        265,
                        266
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Overflow')": [
                        282,
                        288
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterMethodsTest.java": {
                "old": {
                    "('org.apache.commons.collections4.bloomfilter#DefaultBloomFilterMethodsTest', None)": [
                        75,
                        81
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#DefaultBloomFilterMethodsTest', None)": [
                        75,
                        78,
                        82,
                        85
                    ]
                }
            }
        }
    },
    "fe88827643be091df5ed11d89d5f2e2ec4c61892": {
        "authored_data": "2020 Mar 08 13:48",
        "commit.message": "Move the unique filtering of the Hasher indexes to a separate class.\n",
        "commit.author.name": "Alex Herbert",
        "pcid": "fb358a5c80a33e2e4ea46bba57a31148bc710f86",
        "changes": {
            "src/main/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilter.java": {
                "old": {
                    "(None, None)": [
                        20,
                        24,
                        26,
                        395
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', 'applyAsHasher(Hasher,IntConsumer)')": [
                        327
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', None)": [
                        383,
                        384,
                        385,
                        386,
                        387,
                        388,
                        389,
                        390
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', 'toSet(Hasher)')": [
                        391,
                        392,
                        393,
                        394
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilter', 'applyAsHasher(Hasher,IntConsumer)')": [
                        324,
                        325
                    ]
                }
            },
            "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayCountingBloomFilterTest.java": {
                "old": {
                    "(None, None)": [
                        26,
                        33
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', None)": [
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'constructorTest_Hasher_Duplicates')": [
                        127
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'contains_BloomFilter')": [
                        144,
                        146,
                        147
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_CountingBloomFilter')": [
                        156
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_BloomFilter')": [
                        165
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_Hasher')": [
                        174
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_Hasher_Duplicates')": [
                        183
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_CountingBloomFilter')": [
                        193
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_BloomFilter')": [
                        202
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_Hasher')": [
                        211
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_Hasher_Duplicates')": [
                        220
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertOperation(int,int,Function,BiConsumer,int)')": [
                        292
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Overflow')": [
                        304
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Negative')": [
                        331,
                        334
                    ]
                },
                "new": {
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'constructorTest_Hasher_Duplicates')": [
                        96
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'contains_BloomFilter')": [
                        113,
                        115,
                        116
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_CountingBloomFilter')": [
                        125
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_BloomFilter')": [
                        134
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_Hasher')": [
                        143
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Counts_Hasher_Duplicates')": [
                        152
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_CountingBloomFilter')": [
                        162
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_BloomFilter')": [
                        171
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_Hasher')": [
                        180
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Counts_Hasher_Duplicates')": [
                        189
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'assertOperation(int,int,Function,BiConsumer,int)')": [
                        261
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'mergeTest_Overflow')": [
                        273
                    ],
                    "('org.apache.commons.collections4.bloomfilter#ArrayCountingBloomFilterTest', 'removeTest_Negative')": [
                        300,
                        303
                    ]
                }
            }
        }
    }
}