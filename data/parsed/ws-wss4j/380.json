{
    "c21aa556dd4c7a3d76966494ad3cf5797a5e7190": {
        "authored_data": "2018 Feb 01 15:51",
        "commit.message": "Fixing some PMD related issues\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "aa2e06e0161f23fd9e7733235837c8491e6e497f",
        "changes": {
            "bindings/src/main/java/org/apache/wss4j/binding/wss11/ObjectFactory.java": {
                "old": {
                    "('org.apache.wss4j.binding.wss11#ObjectFactory', 'createSalt(byte)')": [
                        105
                    ]
                },
                "new": {
                    "('org.apache.wss4j.binding.wss11#ObjectFactory', 'createSalt(byte)')": [
                        105
                    ]
                }
            },
            "bindings/src/main/java/org/apache/wss4j/binding/wssc13/ObjectFactory.java": {
                "old": {
                    "('org.apache.wss4j.binding.wssc13#ObjectFactory', 'createNonce(byte)')": [
                        152
                    ]
                },
                "new": {
                    "('org.apache.wss4j.binding.wssc13#ObjectFactory', 'createNonce(byte)')": [
                        152
                    ]
                }
            },
            "bindings/src/main/java/org/apache/wss4j/binding/wssc200502/ObjectFactory.java": {
                "old": {
                    "('org.apache.wss4j.binding.wssc200502#ObjectFactory', 'createNonce(byte)')": [
                        98
                    ]
                },
                "new": {
                    "('org.apache.wss4j.binding.wssc200502#ObjectFactory', 'createNonce(byte)')": [
                        98
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/AbstractBinding.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#AbstractBinding', 'parseNestedBindingPolicy(Policy,AbstractBinding)')": [
                        113,
                        114
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#AbstractBinding', 'parseNestedBindingPolicy(Policy,AbstractBinding)')": [
                        113
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/AbstractSecurityAssertion.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#AbstractSecurityAssertion', 'isAsserted(Map)')": [
                        213,
                        214
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#AbstractSecurityAssertion', 'isAsserted(Map)')": [
                        213
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/AbstractSymmetricAsymmetricBinding.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#AbstractSymmetricAsymmetricBinding', 'parseNestedSymmetricAsymmetricBindingBasePolicy(Policy,AbstractSymmetricAsymmetricBinding)')": [
                        102,
                        103
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#AbstractSymmetricAsymmetricBinding', 'parseNestedSymmetricAsymmetricBindingBasePolicy(Policy,AbstractSymmetricAsymmetricBinding)')": [
                        102
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/AbstractTokenWrapper.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#AbstractTokenWrapper', 'parseNestedPolicy(Policy,AbstractTokenWrapper)')": [
                        95,
                        96
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#AbstractTokenWrapper', 'parseNestedPolicy(Policy,AbstractTokenWrapper)')": [
                        95
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/AlgorithmSuite.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#AlgorithmSuite', 'parseNestedPolicy(Policy,AlgorithmSuite)')": [
                        675,
                        676
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#AlgorithmSuite', 'parseNestedPolicy(Policy,AlgorithmSuite)')": [
                        675
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/AsymmetricBinding.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#AsymmetricBinding', 'parseNestedPolicy(Policy,AsymmetricBinding)')": [
                        127,
                        128
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#AsymmetricBinding', 'parseNestedPolicy(Policy,AsymmetricBinding)')": [
                        127
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/HttpsToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#HttpsToken', 'parseNestedPolicy(Policy,HttpsToken)')": [
                        109,
                        110
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#HttpsToken', 'parseNestedPolicy(Policy,HttpsToken)')": [
                        109
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/IssuedToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#IssuedToken', 'parseNestedPolicy(Policy,IssuedToken)')": [
                        150,
                        151
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#IssuedToken', 'parseNestedPolicy(Policy,IssuedToken)')": [
                        150
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/KerberosToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#KerberosToken', 'parseNestedPolicy(Policy,KerberosToken)')": [
                        108,
                        109
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#KerberosToken', 'parseNestedPolicy(Policy,KerberosToken)')": [
                        108
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/KeyValueToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#KeyValueToken', 'parseNestedPolicy(Policy,KeyValueToken)')": [
                        83,
                        84
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#KeyValueToken', 'parseNestedPolicy(Policy,KeyValueToken)')": [
                        83
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/Layout.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#Layout', 'parseNestedPolicy(Policy,Layout)')": [
                        123,
                        124
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#Layout', 'parseNestedPolicy(Policy,Layout)')": [
                        123
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/RelToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#RelToken', 'parseNestedPolicy(Policy,RelToken)')": [
                        109,
                        110
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#RelToken', 'parseNestedPolicy(Policy,RelToken)')": [
                        109
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/RequiredElements.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#RequiredElements', 'serialize(XMLStreamWriter)')": [
                        106,
                        107
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#RequiredElements', 'serialize(XMLStreamWriter)')": [
                        106
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/SamlToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#SamlToken', 'parseNestedPolicy(Policy,SamlToken)')": [
                        110,
                        111
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#SamlToken', 'parseNestedPolicy(Policy,SamlToken)')": [
                        110
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/SecureConversationToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#SecureConversationToken', 'parseNestedPolicy(Policy,SecureConversationToken)')": [
                        92,
                        93
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#SecureConversationToken', 'parseNestedPolicy(Policy,SecureConversationToken)')": [
                        92
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/SecurityContextToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#SecurityContextToken', 'parseNestedSecurityContextTokenPolicy(Policy,SecurityContextToken)')": [
                        91,
                        92
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#SecurityContextToken', 'parseNestedSecurityContextTokenPolicy(Policy,SecurityContextToken)')": [
                        91
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/SpnegoContextToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#SpnegoContextToken', 'parseNestedPolicy(Policy,SpnegoContextToken)')": [
                        90,
                        91
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#SpnegoContextToken', 'parseNestedPolicy(Policy,SpnegoContextToken)')": [
                        90
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/SupportingTokens.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#SupportingTokens', 'parseNestedPolicy(Policy,SupportingTokens)')": [
                        154,
                        155
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#SupportingTokens', 'parseNestedPolicy(Policy,SupportingTokens)')": [
                        154
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/SymmetricBinding.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#SymmetricBinding', 'parseNestedPolicy(Policy,SymmetricBinding)')": [
                        101,
                        102
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#SymmetricBinding', 'parseNestedPolicy(Policy,SymmetricBinding)')": [
                        101
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/TransportBinding.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#TransportBinding', 'parseNestedPolicy(Policy,TransportBinding)')": [
                        87,
                        88
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#TransportBinding', 'parseNestedPolicy(Policy,TransportBinding)')": [
                        87
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/Trust10.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#Trust10', 'parseNestedTrust10Policy(Policy,Trust10)')": [
                        114,
                        115
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#Trust10', 'parseNestedTrust10Policy(Policy,Trust10)')": [
                        114
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/Trust13.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#Trust13', 'parseNestedTrust13Policy(Policy,Trust13)')": [
                        91,
                        92
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#Trust13', 'parseNestedTrust13Policy(Policy,Trust13)')": [
                        91
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/UsernameToken.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#UsernameToken', 'parseNestedPolicy(Policy,UsernameToken)')": [
                        130,
                        131
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#UsernameToken', 'parseNestedPolicy(Policy,UsernameToken)')": [
                        130
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/Wss10.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#Wss10', 'parseNestedWss10Policy(Policy,Wss10)')": [
                        111,
                        112
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#Wss10', 'parseNestedWss10Policy(Policy,Wss10)')": [
                        111
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/Wss11.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#Wss11', 'parseNestedWss11Policy(Policy,Wss11)')": [
                        87,
                        88
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#Wss11', 'parseNestedWss11Policy(Policy,Wss11)')": [
                        87
                    ]
                }
            },
            "policy/src/main/java/org/apache/wss4j/policy/model/X509Token.java": {
                "old": {
                    "('org.apache.wss4j.policy.model#X509Token', 'parseNestedPolicy(Policy,X509Token)')": [
                        125,
                        126
                    ]
                },
                "new": {
                    "('org.apache.wss4j.policy.model#X509Token', 'parseNestedPolicy(Policy,X509Token)')": [
                        125
                    ]
                }
            },
            "policy/src/test/java/org/apache/wss4j/policy/tests/AbstractTestBase.java": {
                "old": {
                    "(None, None)": [
                        34
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                        45,
                        46,
                        47,
                        48,
                        49,
                        50,
                        51,
                        52,
                        53,
                        54,
                        55,
                        56,
                        57,
                        58,
                        59,
                        60,
                        61,
                        62,
                        63,
                        64,
                        65,
                        66,
                        67,
                        68,
                        69,
                        70,
                        71,
                        72
                    ]
                }
            },
            "ws-security-common/src/main/java/org/apache/wss4j/common/saml/SamlAssertionWrapper.java": {
                "old": {
                    "('org.apache.wss4j.common.saml#SamlAssertionWrapper', 'getConfirmationMethods')": [
                        399
                    ]
                },
                "new": {
                    "('org.apache.wss4j.common.saml#SamlAssertionWrapper', 'getConfirmationMethods')": [
                        399
                    ]
                }
            },
            "ws-security-dom/src/main/java/org/apache/wss4j/dom/processor/EncryptedAssertionProcessor.java": {
                "old": {
                    "('org.apache.wss4j.dom.processor#EncryptedAssertionProcessor', 'handleToken(Element,RequestData)')": [
                        73
                    ]
                },
                "new": {
                    "('org.apache.wss4j.dom.processor#EncryptedAssertionProcessor', 'handleToken(Element,RequestData)')": [
                        73
                    ]
                }
            },
            "ws-security-dom/src/main/java/org/apache/wss4j/dom/str/DerivedKeyTokenSTRParser.java": {
                "old": {
                    "('org.apache.wss4j.dom.str#DerivedKeyTokenSTRParser', 'processPreviousResult(WSSecurityEngineResult,SecurityTokenReference,STRParserParameters)')": [
                        93
                    ]
                },
                "new": {
                    "('org.apache.wss4j.dom.str#DerivedKeyTokenSTRParser', 'processPreviousResult(WSSecurityEngineResult,SecurityTokenReference,STRParserParameters)')": [
                        93
                    ]
                }
            },
            "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/InboundWSSecurityContextImpl.java": {
                "old": {
                    "('org.apache.wss4j.stax.impl#InboundWSSecurityContextImpl', 'registerSecurityEvent(SecurityEvent)')": [
                        82
                    ]
                },
                "new": {
                    "('org.apache.wss4j.stax.impl#InboundWSSecurityContextImpl', 'registerSecurityEvent(SecurityEvent)')": [
                        82
                    ]
                }
            },
            "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/input/DerivedKeyTokenInputHandler.java": {
                "old": {
                    "('org.apache.wss4j.stax.impl.processor.input#DerivedKeyTokenInputHandler', 'handle(InputProcessorChain,XMLSecurityProperties,Deque,Integer)')": [
                        103
                    ]
                },
                "new": {
                    "('org.apache.wss4j.stax.impl.processor.input#DerivedKeyTokenInputHandler', 'handle(InputProcessorChain,XMLSecurityProperties,Deque,Integer)')": [
                        103
                    ]
                }
            },
            "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/processor/input/SecurityContextTokenInputHandler.java": {
                "old": {
                    "('org.apache.wss4j.stax.impl.processor.input#SecurityContextTokenInputHandler', 'handle(InputProcessorChain,XMLSecurityProperties,Deque,Integer)')": [
                        52
                    ]
                },
                "new": {
                    "('org.apache.wss4j.stax.impl.processor.input#SecurityContextTokenInputHandler', 'handle(InputProcessorChain,XMLSecurityProperties,Deque,Integer)')": [
                        52
                    ]
                }
            },
            "ws-security-stax/src/main/java/org/apache/wss4j/stax/impl/securityToken/SecurityTokenFactoryImpl.java": {
                "old": {
                    "('org.apache.wss4j.stax.impl.securityToken#SecurityTokenFactoryImpl', 'getSecurityToken(KeyInfoType,WSSecurityTokenConstants,XMLSecurityProperties,InboundSecurityContext)')": [
                        97,
                        104,
                        112
                    ]
                },
                "new": {
                    "('org.apache.wss4j.stax.impl.securityToken#SecurityTokenFactoryImpl', 'getSecurityToken(KeyInfoType,WSSecurityTokenConstants,XMLSecurityProperties,InboundSecurityContext)')": [
                        97,
                        104,
                        112
                    ]
                }
            },
            "ws-security-stax/src/test/java/org/apache/wss4j/stax/test/AbstractTestBase.java": {
                "old": {
                    "('org.apache.wss4j.stax.test#AbstractTestBase', 'doInboundSecurityWithWSS4J(Document,String)')": [
                        237
                    ]
                },
                "new": {
                    "('org.apache.wss4j.stax.test#AbstractTestBase', 'doInboundSecurityWithWSS4J(Document,String)')": [
                        237
                    ]
                }
            }
        }
    },
    "1e938e38be57d8c89799c2e59f046b8f53dc3d63": {
        "authored_data": "2018 Jan 24 17:49",
        "commit.message": "Allow access to the Signature custom token Id from outside the class\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "22e58d98f56ac48bfdcb35d0fedf61a6877e2201",
        "changes": {
            "ws-security-dom/src/main/java/org/apache/wss4j/dom/message/WSSecSignature.java": {
                "new": {
                    "('org.apache.wss4j.dom.message#WSSecSignature', 'getCustomTokenId')": [
                        799,
                        800
                    ],
                    "('org.apache.wss4j.dom.message#WSSecSignature', None)": [
                        801,
                        802
                    ]
                }
            }
        }
    },
    "22e58d98f56ac48bfdcb35d0fedf61a6877e2201": {
        "authored_data": "2018 Jan 19 12:25",
        "commit.message": "Making the Merlin logs clearer to differentiate between keystores/truststores\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "be205790f3f8d77ff0a888c2529e29a3a464fdad",
        "changes": {
            "ws-security-common/src/main/java/org/apache/wss4j/common/crypto/Merlin.java": {
                "old": {
                    "('org.apache.wss4j.common.crypto#Merlin', 'verifyTrust(X509Certificate,boolean,Collection)')": [
                        782,
                        787
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'verifyTrust(PublicKey)')": [
                        924,
                        925
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509Certificates(String,BigInteger)')": [
                        959,
                        964
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(Object,BigInteger,KeyStore)')": [
                        984,
                        986,
                        1019
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509Certificates(byte)')": [
                        1042,
                        1047
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(byte,KeyStore,MessageDigest)')": [
                        1067,
                        1069,
                        1105
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509CertificatesSKI(byte)')": [
                        1118,
                        1123
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(byte,KeyStore)')": [
                        1142,
                        1144,
                        1172
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509CertificatesSubjectDN(String)')": [
                        1188,
                        1193
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'findPublicKeyInKeyStore(PublicKey,KeyStore)')": [
                        1273,
                        1277,
                        1300
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(Object,KeyStore)')": [
                        1312,
                        1314,
                        1344
                    ]
                },
                "new": {
                    "('org.apache.wss4j.common.crypto#Merlin', 'verifyTrust(X509Certificate,boolean,Collection)')": [
                        782,
                        787
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'verifyTrust(PublicKey)')": [
                        924,
                        925
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509Certificates(String,BigInteger)')": [
                        959,
                        964
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(Object,BigInteger,KeyStore,boolean)')": [
                        984,
                        985,
                        987,
                        988,
                        989,
                        990,
                        991,
                        1024
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509Certificates(byte)')": [
                        1047,
                        1052
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(byte,KeyStore,MessageDigest,boolean)')": [
                        1072,
                        1073,
                        1075,
                        1076,
                        1077,
                        1078,
                        1079,
                        1115
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509CertificatesSKI(byte)')": [
                        1128,
                        1133
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(byte,KeyStore,boolean)')": [
                        1152,
                        1153,
                        1155,
                        1156,
                        1157,
                        1158,
                        1159,
                        1187
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getX509CertificatesSubjectDN(String)')": [
                        1203,
                        1208
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'findPublicKeyInKeyStore(PublicKey,KeyStore,boolean)')": [
                        1288,
                        1292,
                        1293,
                        1294,
                        1295,
                        1296,
                        1319
                    ],
                    "('org.apache.wss4j.common.crypto#Merlin', 'getCertificates(Object,KeyStore,boolean)')": [
                        1331,
                        1333,
                        1334,
                        1335,
                        1336,
                        1337,
                        1367
                    ]
                }
            }
        }
    }
}