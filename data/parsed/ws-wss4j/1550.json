{
    "6a12c0cdf0131c8ef8abf73edc713dc62eb80a57": {
        "authored_data": "2012 Jun 21 09:02",
        "commit.message": "Fixed some faulty logic in WSSecEncryptedKey (hat tip: Glen Mazza)\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "848a86cd8a3a772f788bdc3a409e01038b639a6e",
        "changes": {
            "src/main/java/org/apache/ws/security/message/WSSecEncryptedKey.java": {
                "old": {
                    "('org.apache.ws.security.message#WSSecEncryptedKey', 'isCertSet')": [
                        608
                    ]
                },
                "new": {
                    "('org.apache.ws.security.message#WSSecEncryptedKey', 'isCertSet')": [
                        608,
                        609,
                        610,
                        611
                    ]
                }
            }
        }
    },
    "848a86cd8a3a772f788bdc3a409e01038b639a6e": {
        "authored_data": "2012 Jun 20 10:46",
        "commit.message": "Fallback to using Merlin Crypto instance when getting SKI bytes in SecurityTokenReference\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "3e437af939f20050dea45b9fc762c873acb87e7b",
        "changes": {
            "src/main/java/org/apache/ws/security/message/token/SecurityTokenReference.java": {
                "old": {
                    "('org.apache.ws.security.message.token#SecurityTokenReference', 'setKeyIdentifierSKI(X509Certificate,Crypto)')": [
                        383
                    ]
                },
                "new": {
                    "(None, None)": [
                        28
                    ],
                    "('org.apache.ws.security.message.token#SecurityTokenReference', 'setKeyIdentifierSKI(X509Certificate,Crypto)')": [
                        384,
                        385,
                        386,
                        387,
                        388,
                        389
                    ]
                }
            }
        }
    },
    "3e437af939f20050dea45b9fc762c873acb87e7b": {
        "authored_data": "2012 Jun 14 09:11",
        "commit.message": "[WSS-393][WSS-394] - Parse a SecurityTokenReference inside a KeyInfo of a SAML Assertion\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "e0bbf6cef8954db6fb6b1073fabb0446d21bb9d1",
        "changes": {
            "src/main/java/org/apache/ws/security/saml/SAMLUtil.java": {
                "old": {
                    "('org.apache.ws.security.saml#SAMLUtil', 'getCredentialFromKeyInfo(Element,RequestData,WSDocInfo,boolean)')": [
                        300
                    ]
                },
                "new": {
                    "(None, None)": [
                        34,
                        35,
                        57
                    ],
                    "('org.apache.ws.security.saml#SAMLUtil', 'getCredentialFromKeyInfo(Element,RequestData,WSDocInfo,boolean)')": [
                        303,
                        321,
                        322,
                        323,
                        324,
                        325,
                        326,
                        327,
                        328,
                        329
                    ]
                }
            }
        }
    },
    "e0bbf6cef8954db6fb6b1073fabb0446d21bb9d1": {
        "authored_data": "2012 Jun 13 12:47",
        "commit.message": "[WSS-392] - WSS4J can't handle SAML KeyIdentifier references to encrypted SAML Assertions stored in the cache\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "7511bcd6f7118d5ca61bb1b3bc807269e2ba5025",
        "changes": {
            "src/main/java/org/apache/ws/security/str/SignatureSTRParser.java": {
                "old": {
                    "('org.apache.ws.security.str#SignatureSTRParser', 'parseSecurityTokenReference(Element,RequestData,WSDocInfo,Map)')": [
                        217,
                        218,
                        219,
                        220,
                        221,
                        222,
                        223,
                        224,
                        225,
                        226,
                        227,
                        228,
                        229,
                        230,
                        231,
                        232,
                        233
                    ]
                },
                "new": {
                    "('org.apache.ws.security.str#SignatureSTRParser', 'parseSecurityTokenReference(Element,RequestData,WSDocInfo,Map)')": [
                        217
                    ],
                    "('org.apache.ws.security.str#SignatureSTRParser', None)": [
                        339,
                        340,
                        341,
                        342,
                        343,
                        369
                    ],
                    "('org.apache.ws.security.str#SignatureSTRParser', 'parseSAMLKeyIdentifier(SecurityTokenReference,WSDocInfo,RequestData,boolean)')": [
                        344,
                        345,
                        346,
                        347,
                        348,
                        349,
                        350,
                        351,
                        352,
                        353,
                        354,
                        355,
                        356,
                        357,
                        358,
                        359,
                        360,
                        361,
                        362,
                        363,
                        364,
                        365,
                        366,
                        367,
                        368
                    ]
                }
            }
        }
    },
    "7511bcd6f7118d5ca61bb1b3bc807269e2ba5025": {
        "authored_data": "2012 Jun 12 11:39",
        "commit.message": "Try to get a secret key associated with a SAML reference from a CallbackHandler first\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "d7d8abda3475c75b7c3c534700a68a9b02d5c9ce",
        "changes": {
            "src/main/java/org/apache/ws/security/str/SecurityTokenRefSTRParser.java": {
                "old": {
                    "('org.apache.ws.security.str#SecurityTokenRefSTRParser', 'parseSecurityTokenReference(Element,RequestData,WSDocInfo,Map)')": [
                        135,
                        136,
                        137,
                        138,
                        139,
                        140,
                        142
                    ]
                },
                "new": {
                    "('org.apache.ws.security.str#SecurityTokenRefSTRParser', 'parseSecurityTokenReference(Element,RequestData,WSDocInfo,Map)')": [
                        135,
                        137,
                        138,
                        139,
                        140,
                        141,
                        142,
                        143,
                        144,
                        145,
                        146
                    ]
                }
            }
        }
    },
    "d7d8abda3475c75b7c3c534700a68a9b02d5c9ce": {
        "authored_data": "2012 Jun 12 10:58",
        "commit.message": "Avoid a NPE when retrieving a SAML Assertion\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "6a7635465571f844c3d782580d0257601462ba59",
        "changes": {
            "src/main/java/org/apache/ws/security/saml/SAMLUtil.java": {
                "old": {
                    "('org.apache.ws.security.saml#SAMLUtil', 'getAssertionFromKeyIdentifier(SecurityTokenReference,Element,RequestData,WSDocInfo)')": [
                        114
                    ]
                },
                "new": {
                    "('org.apache.ws.security.saml#SAMLUtil', 'getAssertionFromKeyIdentifier(SecurityTokenReference,Element,RequestData,WSDocInfo)')": [
                        106,
                        107,
                        108,
                        109,
                        110,
                        119
                    ]
                }
            }
        }
    },
    "6a7635465571f844c3d782580d0257601462ba59": {
        "authored_data": "2012 May 31 11:14",
        "commit.message": "Make it optional whether to sign an XMLObject during marshalling\n",
        "commit.author.name": "Colm O hEigeartaigh",
        "pcid": "86e7ee2f5930419b5f1faab09841c9014de9e85e",
        "changes": {
            "src/main/java/org/apache/ws/security/saml/ext/OpenSAMLUtil.java": {
                "old": {
                    "('org.apache.ws.security.saml.ext#OpenSAMLUtil', 'toDom(XMLObject,Document)')": [
                        134
                    ]
                },
                "new": {
                    "('org.apache.ws.security.saml.ext#OpenSAMLUtil', 'toDom(XMLObject,Document)')": [
                        115
                    ],
                    "('org.apache.ws.security.saml.ext#OpenSAMLUtil', None)": [
                        116,
                        117,
                        118,
                        119,
                        120,
                        121,
                        122,
                        123,
                        124,
                        125,
                        126,
                        127
                    ],
                    "('org.apache.ws.security.saml.ext#OpenSAMLUtil', 'toDom(XMLObject,Document,boolean)')": [
                        128,
                        129,
                        130,
                        131,
                        132,
                        152,
                        153,
                        154
                    ]
                }
            }
        }
    }
}